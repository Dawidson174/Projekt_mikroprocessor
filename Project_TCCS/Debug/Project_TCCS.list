
Project_TCCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001146c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003be8  0801166c  0801166c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015254  08015254  000171c8  2**0
                  CONTENTS
  4 .ARM          00000008  08015254  08015254  00016254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801525c  0801525c  000171c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801525c  0801525c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015260  08015260  00016260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08015264  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080152ec  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801538c  00017128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008194  200001c8  0801542c  000171c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000835c  0801542c  0001735c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000171c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f8fe  00000000  00000000  000171f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000595e  00000000  00000000  00036af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001660  00000000  00000000  0003c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011c1  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034da7  00000000  00000000  0003ec79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028e4a  00000000  00000000  00073a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b019  00000000  00000000  0009c86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a7883  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000061f8  00000000  00000000  001a78c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  001adac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08011654 	.word	0x08011654

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08011654 	.word	0x08011654

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	@ 0x30
 8000604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b56      	ldr	r3, [pc, #344]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a55      	ldr	r2, [pc, #340]	@ (8000770 <MX_GPIO_Init+0x170>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b53      	ldr	r3, [pc, #332]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b50      	ldr	r3, [pc, #320]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a4f      	ldr	r2, [pc, #316]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b4d      	ldr	r3, [pc, #308]	@ (8000770 <MX_GPIO_Init+0x170>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b4a      	ldr	r3, [pc, #296]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a49      	ldr	r2, [pc, #292]	@ (8000770 <MX_GPIO_Init+0x170>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b47      	ldr	r3, [pc, #284]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b44      	ldr	r3, [pc, #272]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a43      	ldr	r2, [pc, #268]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <MX_GPIO_Init+0x170>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	4b3e      	ldr	r3, [pc, #248]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a3d      	ldr	r2, [pc, #244]	@ (8000770 <MX_GPIO_Init+0x170>)
 800067c:	f043 0308 	orr.w	r3, r3, #8
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b3b      	ldr	r3, [pc, #236]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068e:	4b38      	ldr	r3, [pc, #224]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a37      	ldr	r2, [pc, #220]	@ (8000770 <MX_GPIO_Init+0x170>)
 8000694:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <MX_GPIO_Init+0x170>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006ac:	4831      	ldr	r0, [pc, #196]	@ (8000774 <MX_GPIO_Init+0x174>)
 80006ae:	f002 f98d 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	4830      	ldr	r0, [pc, #192]	@ (8000778 <MX_GPIO_Init+0x178>)
 80006b8:	f002 f988 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	482a      	ldr	r0, [pc, #168]	@ (800077c <MX_GPIO_Init+0x17c>)
 80006d4:	f001 ffce 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4820      	ldr	r0, [pc, #128]	@ (8000774 <MX_GPIO_Init+0x174>)
 80006f2:	f001 ffbf 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006f6:	2340      	movs	r3, #64	@ 0x40
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <MX_GPIO_Init+0x178>)
 800070e:	f001 ffb1 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <MX_GPIO_Init+0x178>)
 8000726:	f001 ffa5 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800072a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800073c:	230a      	movs	r3, #10
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	480e      	ldr	r0, [pc, #56]	@ (8000780 <MX_GPIO_Init+0x180>)
 8000748:	f001 ff94 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800074c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4619      	mov	r1, r3
 8000760:	4807      	ldr	r0, [pc, #28]	@ (8000780 <MX_GPIO_Init+0x180>)
 8000762:	f001 ff87 	bl	8002674 <HAL_GPIO_Init>

}
 8000766:	bf00      	nop
 8000768:	3730      	adds	r7, #48	@ 0x30
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020400 	.word	0x40020400
 8000778:	40021800 	.word	0x40021800
 800077c:	40020800 	.word	0x40020800
 8000780:	40020000 	.word	0x40020000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fb92 	bl	8000eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f81d 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f7ff ff35 	bl	8000600 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000796:	f003 ffa1 	bl	80046dc <MX_LWIP_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f9cb 	bl	8000b34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 800079e:	f005 fad3 	bl	8005d48 <httpd_init>
  uint32_t count = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80007a6:	f004 f8d9 	bl	800495c <MX_LWIP_Process>
	  count++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3301      	adds	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
	  if(count >= 10000 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d9f5      	bls.n	80007a6 <main+0x22>
	  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007ba:	2101      	movs	r1, #1
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <main+0x44>)
 80007be:	f002 f91e 	bl	80029fe <HAL_GPIO_TogglePin>
		count = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
	  MX_LWIP_Process();
 80007c6:	e7ee      	b.n	80007a6 <main+0x22>
 80007c8:	40020400 	.word	0x40020400

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2234      	movs	r2, #52	@ 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f010 f877 	bl	80108ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f0:	f002 f920 	bl	8002a34 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	4b2c      	ldr	r3, [pc, #176]	@ (80008a8 <SystemClock_Config+0xdc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a2b      	ldr	r2, [pc, #172]	@ (80008a8 <SystemClock_Config+0xdc>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <SystemClock_Config+0xdc>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <SystemClock_Config+0xe0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a26      	ldr	r2, [pc, #152]	@ (80008ac <SystemClock_Config+0xe0>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <SystemClock_Config+0xe0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800082c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000836:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000838:	2308      	movs	r3, #8
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800083c:	23d8      	movs	r3, #216	@ 0xd8
 800083e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4618      	mov	r0, r3
 8000852:	f002 f94f 	bl	8002af4 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800085c:	f000 f828 	bl	80008b0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000860:	f002 f8f8 	bl	8002a54 <HAL_PWREx_EnableOverDrive>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800086a:	f000 f821 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2302      	movs	r3, #2
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800087a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000880:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000884:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	2107      	movs	r1, #7
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fbdf 	bl	8003050 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000898:	f000 f80a 	bl	80008b0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800089c:	f002 fcc4 	bl	8003228 <HAL_RCC_EnableCSS>
}
 80008a0:	bf00      	nop
 80008a2:	3750      	adds	r7, #80	@ 0x50
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x44>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x44>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <HAL_MspInit+0x44>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <HAL_MspInit+0x44>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <HAL_MspInit+0x44>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000908:	f002 fdd6 	bl	80034b8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <NMI_Handler+0x8>

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095e:	f000 fae5 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800096c:	4802      	ldr	r0, [pc, #8]	@ (8000978 <ETH_IRQHandler+0x10>)
 800096e:	f000 ff95 	bl	800189c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20004c50 	.word	0x20004c50

0800097c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return 1;
 8000980:	2301      	movs	r3, #1
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_kill>:

int _kill(int pid, int sig)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <_kill+0x20>)
 8000998:	2216      	movs	r2, #22
 800099a:	601a      	str	r2, [r3, #0]
  return -1;
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	2000834c 	.word	0x2000834c

080009b0 <_exit>:

void _exit (int status)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ffe5 	bl	800098c <_kill>
  while (1) {}    /* Make sure we hang here */
 80009c2:	bf00      	nop
 80009c4:	e7fd      	b.n	80009c2 <_exit+0x12>

080009c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e00a      	b.n	80009ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d8:	f3af 8000 	nop.w
 80009dc:	4601      	mov	r1, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1c5a      	adds	r2, r3, #1
 80009e2:	60ba      	str	r2, [r7, #8]
 80009e4:	b2ca      	uxtb	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dbf0      	blt.n	80009d8 <_read+0x12>
  }

  return len;
 80009f6:	687b      	ldr	r3, [r7, #4]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e009      	b.n	8000a26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1c5a      	adds	r2, r3, #1
 8000a16:	60ba      	str	r2, [r7, #8]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	3301      	adds	r3, #1
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbf1      	blt.n	8000a12 <_write+0x12>
  }
  return len;
 8000a2e:	687b      	ldr	r3, [r7, #4]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_close>:

int _close(int file)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a60:	605a      	str	r2, [r3, #4]
  return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_isatty>:

int _isatty(int file)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b085      	sub	sp, #20
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a92:	2300      	movs	r3, #0
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa8:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d205      	bcs.n	8000adc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <_sbrk+0x6c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a06      	ldr	r2, [pc, #24]	@ (8000b04 <_sbrk+0x64>)
 8000aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	20080000 	.word	0x20080000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	200001e4 	.word	0x200001e4
 8000b08:	20008360 	.word	0x20008360
 8000b0c:	2000834c 	.word	0x2000834c

08000b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <MX_USART3_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USART3_UART_Init+0x58>)
 8000b78:	f003 f8e2 	bl	8003d40 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f7ff fe95 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001e8 	.word	0x200001e8
 8000b90:	40004800 	.word	0x40004800

08000b94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b0ae      	sub	sp, #184	@ 0xb8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2290      	movs	r2, #144	@ 0x90
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00f fe8a 	bl	80108ce <memset>
  if(uartHandle->Instance==USART3)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <HAL_UART_MspInit+0xb4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d13c      	bne.n	8000c3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f002 fc8c 	bl	80034f0 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bde:	f7ff fe67 	bl	80008b0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a13      	ldr	r2, [pc, #76]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <HAL_UART_MspInit+0xb8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <HAL_UART_MspInit+0xbc>)
 8000c3a:	f001 fd1b 	bl	8002674 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c3e:	bf00      	nop
 8000c40:	37b8      	adds	r7, #184	@ 0xb8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40004800 	.word	0x40004800
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020c00 	.word	0x40020c00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c58:	f7ff ff5a 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c5c:	480c      	ldr	r0, [pc, #48]	@ (8000c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c5e:	490d      	ldr	r1, [pc, #52]	@ (8000c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c60:	4a0d      	ldr	r2, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c64:	e002      	b.n	8000c6c <LoopCopyDataInit>

08000c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6a:	3304      	adds	r3, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c70:	d3f9      	bcc.n	8000c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c78:	e001      	b.n	8000c7e <LoopFillZerobss>

08000c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c7c:	3204      	adds	r2, #4

08000c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c80:	d3fb      	bcc.n	8000c7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f00f fe91 	bl	80109a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fd7d 	bl	8000784 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c8c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c94:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c98:	08015264 	.word	0x08015264
  ldr r2, =_sbss
 8000c9c:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000ca0:	2000835c 	.word	0x2000835c

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>

08000ca6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00b      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <LAN8742_RegisterBusIO+0x28>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e014      	b.n	8000cfe <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d139      	bne.n	8000d9a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2220      	movs	r2, #32
 8000d38:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e01c      	b.n	8000d7a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	f107 020c 	add.w	r2, r7, #12
 8000d48:	2112      	movs	r1, #18
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da03      	bge.n	8000d5c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d54:	f06f 0304 	mvn.w	r3, #4
 8000d58:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d5a:	e00b      	b.n	8000d74 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d105      	bne.n	8000d74 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
         break;
 8000d72:	e005      	b.n	8000d80 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b1f      	cmp	r3, #31
 8000d7e:	d9df      	bls.n	8000d40 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b1f      	cmp	r3, #31
 8000d86:	d902      	bls.n	8000d8e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d88:	f06f 0302 	mvn.w	r3, #2
 8000d8c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 }
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6810      	ldr	r0, [r2, #0]
 8000db8:	f107 020c 	add.w	r2, r7, #12
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4798      	blx	r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	da02      	bge.n	8000dcc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000dc6:	f06f 0304 	mvn.w	r3, #4
 8000dca:	e06e      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	f107 020c 	add.w	r2, r7, #12
 8000dd8:	2101      	movs	r1, #1
 8000dda:	4798      	blx	r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	da02      	bge.n	8000de8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000de2:	f06f 0304 	mvn.w	r3, #4
 8000de6:	e060      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e059      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6810      	ldr	r0, [r2, #0]
 8000dfe:	f107 020c 	add.w	r2, r7, #12
 8000e02:	2100      	movs	r1, #0
 8000e04:	4798      	blx	r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da02      	bge.n	8000e12 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e0c:	f06f 0304 	mvn.w	r3, #4
 8000e10:	e04b      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d11b      	bne.n	8000e54 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <LAN8742_GetLinkState+0x90>
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e30:	2302      	movs	r3, #2
 8000e32:	e03a      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e033      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	e02c      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e50:	2305      	movs	r3, #5
 8000e52:	e02a      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6810      	ldr	r0, [r2, #0]
 8000e5c:	f107 020c 	add.w	r2, r7, #12
 8000e60:	211f      	movs	r1, #31
 8000e62:	4798      	blx	r3
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da02      	bge.n	8000e70 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e6a:	f06f 0304 	mvn.w	r3, #4
 8000e6e:	e01c      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e015      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f003 031c 	and.w	r3, r3, #28
 8000e84:	2b18      	cmp	r3, #24
 8000e86:	d101      	bne.n	8000e8c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e00e      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 031c 	and.w	r3, r3, #28
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d101      	bne.n	8000e9a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e007      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f003 031c 	and.w	r3, r3, #28
 8000ea0:	2b14      	cmp	r3, #20
 8000ea2:	d101      	bne.n	8000ea8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	e000      	b.n	8000eaa <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ea8:	2305      	movs	r3, #5
    }
  }
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb6:	2003      	movs	r0, #3
 8000eb8:	f000 f94c 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f805 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fcfb 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <HAL_InitTick+0x54>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <HAL_InitTick+0x58>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	4619      	mov	r1, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f967 	bl	80011be <HAL_SYSTICK_Config>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00e      	b.n	8000f18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	d80a      	bhi.n	8000f16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	2200      	movs	r2, #0
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f000 f92f 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f0c:	4a06      	ldr	r2, [pc, #24]	@ (8000f28 <HAL_InitTick+0x5c>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000270 	.word	0x20000270

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000270 	.word	0x20000270

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0000 	.word	0x05fa0000

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e086      	b.n	80012f8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2223      	movs	r2, #35	@ 0x23
 80011f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f003 fd9d 	bl	8004d3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b3f      	ldr	r3, [pc, #252]	@ (8001300 <HAL_ETH_Init+0x128>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a3e      	ldr	r2, [pc, #248]	@ (8001300 <HAL_ETH_Init+0x128>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b3c      	ldr	r3, [pc, #240]	@ (8001300 <HAL_ETH_Init+0x128>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800121a:	4b3a      	ldr	r3, [pc, #232]	@ (8001304 <HAL_ETH_Init+0x12c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a39      	ldr	r2, [pc, #228]	@ (8001304 <HAL_ETH_Init+0x12c>)
 8001220:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001224:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001226:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <HAL_ETH_Init+0x12c>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4935      	ldr	r1, [pc, #212]	@ (8001304 <HAL_ETH_Init+0x12c>)
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001234:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_ETH_Init+0x12c>)
 8001236:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800124e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff fe80 	bl	8000f54 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001256:	e011      	b.n	800127c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001258:	f7ff fe7c 	bl	8000f54 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001266:	d909      	bls.n	800127c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2204      	movs	r2, #4
 800126c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	22e0      	movs	r2, #224	@ 0xe0
 8001274:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e03d      	b.n	80012f8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1e4      	bne.n	8001258 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 ff34 	bl	80020fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 ffdf 	bl	8002258 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f001 f835 	bl	800230a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	461a      	mov	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 ff9d 	bl	80021e8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001308 <HAL_ETH_Init+0x130>)
 80012cc:	430b      	orrs	r3, r1
 80012ce:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012e2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2210      	movs	r2, #16
 80012f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	00020060 	.word	0x00020060

0800130c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800131a:	2b10      	cmp	r3, #16
 800131c:	d15f      	bne.n	80013de <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2223      	movs	r2, #35	@ 0x23
 8001322:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa2e 	bl	8001794 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001340:	2001      	movs	r0, #1
 8001342:	f7ff fe13 	bl	8000f6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001360:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001364:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800137c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fd58 	bl	8001e34 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0208 	orr.w	r2, r2, #8
 8001392:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fde5 	bl	8000f6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f042 0204 	orr.w	r2, r2, #4
 80013b8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c2:	69d9      	ldr	r1, [r3, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_ETH_Start_IT+0xdc>)
 80013ca:	430b      	orrs	r3, r1
 80013cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013d0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2223      	movs	r2, #35	@ 0x23
 80013d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
  }
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	0001a0c1 	.word	0x0001a0c1

080013ec <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013fa:	2b23      	cmp	r3, #35	@ 0x23
 80013fc:	d16e      	bne.n	80014dc <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2223      	movs	r2, #35	@ 0x23
 8001402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800140e:	69d9      	ldr	r1, [r3, #28]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <HAL_ETH_Stop_IT+0xfc>)
 8001416:	400b      	ands	r3, r1
 8001418:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800141c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001430:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001434:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	f023 0302 	bic.w	r3, r3, #2
 8001448:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0204 	bic.w	r2, r2, #4
 800145c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fd80 	bl	8000f6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 fcdd 	bl	8001e34 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0208 	bic.w	r2, r2, #8
 8001488:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fd6a 	bl	8000f6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00e      	b.n	80014c4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	3212      	adds	r2, #18
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d9ed      	bls.n	80014a6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2210      	movs	r2, #16
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	fffe5f3e 	.word	0xfffe5f3e

080014ec <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07c      	b.n	800160c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001518:	2b23      	cmp	r3, #35	@ 0x23
 800151a:	d176      	bne.n	800160a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800151c:	2200      	movs	r2, #0
 800151e:	68b9      	ldr	r1, [r7, #8]
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 ff61 	bl	80023e8 <ETH_Prepare_Tx_Descriptors>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e065      	b.n	800160c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001540:	f3bf 8f4f 	dsb	sy
}
 8001544:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	3206      	adds	r2, #6
 800154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001552:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001562:	2b03      	cmp	r3, #3
 8001564:	d904      	bls.n	8001570 <HAL_ETH_Transmit+0x84>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156a:	1f1a      	subs	r2, r3, #4
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3106      	adds	r1, #6
 800157c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001580:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001584:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001586:	f7ff fce5 	bl	8000f54 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800158c:	e037      	b.n	80015fe <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d011      	beq.n	80015c4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a6:	f043 0208 	orr.w	r2, r3, #8
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e023      	b.n	800160c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ca:	d018      	beq.n	80015fe <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015cc:	f7ff fcc2 	bl	8000f54 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d302      	bcc.n	80015e2 <HAL_ETH_Transmit+0xf6>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10d      	bne.n	80015fe <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e8:	f043 0204 	orr.w	r2, r3, #4
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80015f8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e006      	b.n	800160c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	dbc3      	blt.n	800158e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d109      	bne.n	8001640 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	f043 0201 	orr.w	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0a4      	b.n	800178a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001646:	2b23      	cmp	r3, #35	@ 0x23
 8001648:	d001      	beq.n	800164e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e09d      	b.n	800178a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001652:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	3212      	adds	r2, #18
 800165a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001664:	f1c3 0304 	rsb	r3, r3, #4
 8001668:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800166a:	e066      	b.n	800173a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d007      	beq.n	8001688 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_ETH_ReadData+0x88>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016be:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016f0:	461a      	mov	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f003 fceb 	bl	80050d0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	441a      	add	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d902      	bls.n	8001728 <HAL_ETH_ReadData+0x114>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b04      	subs	r3, #4
 8001726:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	3212      	adds	r2, #18
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800173e:	2b00      	cmp	r3, #0
 8001740:	db06      	blt.n	8001750 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	429a      	cmp	r2, r3
 8001748:	d202      	bcs.n	8001750 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d08d      	beq.n	800166c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	441a      	add	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f815 	bl	8001794 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d108      	bne.n	8001788 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e000      	b.n	800178a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017a0:	2301      	movs	r3, #1
 80017a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80017a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	3212      	adds	r2, #18
 80017b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017bc:	e042      	b.n	8001844 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d112      	bne.n	80017ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fc50 	bl	8005070 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	74fb      	strb	r3, [r7, #19]
 80017da:	e007      	b.n	80017ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017ec:	7cfb      	ldrb	r3, [r7, #19]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d028      	beq.n	8001844 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d106      	bne.n	8001808 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <ETH_UpdateDescriptor+0x104>)
 8001800:	4313      	orrs	r3, r2
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	6053      	str	r3, [r2, #4]
 8001806:	e005      	b.n	8001814 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d902      	bls.n	8001832 <ETH_UpdateDescriptor+0x9e>
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3b04      	subs	r3, #4
 8001830:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	3212      	adds	r2, #18
 8001838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183c:	617b      	str	r3, [r7, #20]
      desccount--;
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	3b01      	subs	r3, #1
 8001842:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <ETH_UpdateDescriptor+0xbc>
 800184a:	7cfb      	ldrb	r3, [r7, #19]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1b6      	bne.n	80017be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	429a      	cmp	r2, r3
 8001858:	d01a      	beq.n	8001890 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001864:	f3bf 8f5f 	dmb	sy
}
 8001868:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	18ca      	adds	r2, r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001882:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	80004000 	.word	0x80004000

0800189c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018c4:	4b4b      	ldr	r3, [pc, #300]	@ (80019f4 <HAL_ETH_IRQHandler+0x158>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00e      	beq.n	80018f2 <HAL_ETH_IRQHandler+0x56>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <HAL_ETH_IRQHandler+0x15c>)
 80018ea:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f891 	bl	8001a14 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00f      	beq.n	800191c <HAL_ETH_IRQHandler+0x80>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190e:	461a      	mov	r2, r3
 8001910:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001914:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f872 	bl	8001a00 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d042      	beq.n	80019ac <HAL_ETH_IRQHandler+0x110>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d03d      	beq.n	80019ac <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001936:	f043 0208 	orr.w	r2, r3, #8
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01a      	beq.n	8001980 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	4b29      	ldr	r3, [pc, #164]	@ (80019fc <HAL_ETH_IRQHandler+0x160>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001974:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	22e0      	movs	r2, #224	@ 0xe0
 800197a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800197e:	e012      	b.n	80019a6 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199e:	461a      	mov	r2, r3
 80019a0:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019a4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f83e 	bl	8001a28 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00e      	beq.n	80019d4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f838 	bl	8001a3c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_ETH_IRQHandler+0x158>)
 80019e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80019e4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f832 	bl	8001a50 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80019ec:	bf00      	nop
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013c00 	.word	0x40013c00
 80019f8:	00010040 	.word	0x00010040
 80019fc:	007e2000 	.word	0x007e2000

08001a00 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 031c 	and.w	r3, r3, #28
 8001a80:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	02db      	lsls	r3, r3, #11
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	019b      	lsls	r3, r3, #6
 8001a92:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f023 0302 	bic.w	r3, r3, #2
 8001aa2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001ab4:	f7ff fa4e 	bl	8000f54 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aba:	e00d      	b.n	8001ad8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001abc:	f7ff fa4a 	bl	8000f54 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aca:	d301      	bcc.n	8001ad0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e010      	b.n	8001af2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ec      	bne.n	8001abc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 031c 	and.w	r3, r3, #28
 8001b16:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	02db      	lsls	r3, r3, #11
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b54:	f7ff f9fe 	bl	8000f54 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b5a:	e00d      	b.n	8001b78 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b5c:	f7ff f9fa 	bl	8000f54 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b6a:	d301      	bcc.n	8001b70 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e009      	b.n	8001b84 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1ec      	bne.n	8001b5c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0e6      	b.n	8001d6e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	461a      	mov	r2, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf14      	ite	ne
 8001bf4:	2301      	movne	r3, #1
 8001bf6:	2300      	moveq	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf14      	ite	ne
 8001cba:	2301      	movne	r3, #1
 8001cbc:	2300      	moveq	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf14      	ite	ne
 8001cd4:	2301      	movne	r3, #1
 8001cd6:	2300      	moveq	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	bf14      	ite	ne
 8001cee:	2301      	movne	r3, #1
 8001cf0:	2300      	moveq	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00b      	b.n	8001da6 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	d105      	bne.n	8001da4 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f870 	bl	8001e80 <ETH_SetMACConfig>

    return HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	e000      	b.n	8001da6 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
  }
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 031c 	bic.w	r3, r3, #28
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dc8:	f001 fb42 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8001dcc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d804      	bhi.n	8001de0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	e019      	b.n	8001e14 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4a11      	ldr	r2, [pc, #68]	@ (8001e28 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d204      	bcs.n	8001df2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f043 030c 	orr.w	r3, r3, #12
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	e010      	b.n	8001e14 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d90c      	bls.n	8001e14 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d804      	bhi.n	8001e0c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	e003      	b.n	8001e14 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	02160ebf 	.word	0x02160ebf
 8001e28:	03938700 	.word	0x03938700
 8001e2c:	05f5e0ff 	.word	0x05f5e0ff
 8001e30:	08f0d17f 	.word	0x08f0d17f

08001e34 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6812      	ldr	r2, [r2, #0]
 8001e4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e56:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7ff f881 	bl	8000f6c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e74:	6193      	str	r3, [r2, #24]
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4b53      	ldr	r3, [pc, #332]	@ (8001fe4 <ETH_SetMACConfig+0x164>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	7b9b      	ldrb	r3, [r3, #14]
 8001e9e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	7c12      	ldrb	r2, [r2, #16]
 8001ea4:	2a00      	cmp	r2, #0
 8001ea6:	d102      	bne.n	8001eae <ETH_SetMACConfig+0x2e>
 8001ea8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eac:	e000      	b.n	8001eb0 <ETH_SetMACConfig+0x30>
 8001eae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eb0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	7c52      	ldrb	r2, [r2, #17]
 8001eb6:	2a00      	cmp	r2, #0
 8001eb8:	d102      	bne.n	8001ec0 <ETH_SetMACConfig+0x40>
 8001eba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ebe:	e000      	b.n	8001ec2 <ETH_SetMACConfig+0x42>
 8001ec0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ec2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ec8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7fdb      	ldrb	r3, [r3, #31]
 8001ece:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed0:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	7f92      	ldrb	r2, [r2, #30]
 8001edc:	2a00      	cmp	r2, #0
 8001ede:	d102      	bne.n	8001ee6 <ETH_SetMACConfig+0x66>
 8001ee0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee4:	e000      	b.n	8001ee8 <ETH_SetMACConfig+0x68>
 8001ee6:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ee8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	7f1b      	ldrb	r3, [r3, #28]
 8001eee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d102      	bne.n	8001f10 <ETH_SetMACConfig+0x90>
 8001f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f0e:	e000      	b.n	8001f12 <ETH_SetMACConfig+0x92>
 8001f10:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	7bdb      	ldrb	r3, [r3, #15]
 8001f18:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f1a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f20:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f28:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff f812 	bl	8000f6c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f66:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f6e:	2a00      	cmp	r2, #0
 8001f70:	d101      	bne.n	8001f76 <ETH_SetMACConfig+0xf6>
 8001f72:	2280      	movs	r2, #128	@ 0x80
 8001f74:	e000      	b.n	8001f78 <ETH_SetMACConfig+0xf8>
 8001f76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f78:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f86:	2a01      	cmp	r2, #1
 8001f88:	d101      	bne.n	8001f8e <ETH_SetMACConfig+0x10e>
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	e000      	b.n	8001f90 <ETH_SetMACConfig+0x110>
 8001f8e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f90:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f98:	2a01      	cmp	r2, #1
 8001f9a:	d101      	bne.n	8001fa0 <ETH_SetMACConfig+0x120>
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	e000      	b.n	8001fa2 <ETH_SetMACConfig+0x122>
 8001fa0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001faa:	2a01      	cmp	r2, #1
 8001fac:	d101      	bne.n	8001fb2 <ETH_SetMACConfig+0x132>
 8001fae:	2202      	movs	r2, #2
 8001fb0:	e000      	b.n	8001fb4 <ETH_SetMACConfig+0x134>
 8001fb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f7fe ffcd 	bl	8000f6c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	619a      	str	r2, [r3, #24]
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	fd20810f 	.word	0xfd20810f

08001fe8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4b3d      	ldr	r3, [pc, #244]	@ (80020f8 <ETH_SetDMAConfig+0x110>)
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7b1b      	ldrb	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <ETH_SetDMAConfig+0x2c>
 800200e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002012:	e000      	b.n	8002016 <ETH_SetDMAConfig+0x2e>
 8002014:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7b5b      	ldrb	r3, [r3, #13]
 800201a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800201c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	7f52      	ldrb	r2, [r2, #29]
 8002022:	2a00      	cmp	r2, #0
 8002024:	d102      	bne.n	800202c <ETH_SetDMAConfig+0x44>
 8002026:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800202a:	e000      	b.n	800202e <ETH_SetDMAConfig+0x46>
 800202c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800202e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	7b9b      	ldrb	r3, [r3, #14]
 8002034:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002036:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800203c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	7f1b      	ldrb	r3, [r3, #28]
 8002042:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7f9b      	ldrb	r3, [r3, #30]
 800204a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800204c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002052:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800205a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800205c:	4313      	orrs	r3, r2
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4313      	orrs	r3, r2
 8002062:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7fe ff74 	bl	8000f6c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	791b      	ldrb	r3, [r3, #4]
 8002096:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020dc:	2001      	movs	r0, #1
 80020de:	f7fe ff45 	bl	8000f6c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020ea:	461a      	mov	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6013      	str	r3, [r2, #0]
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	f8de3f23 	.word	0xf8de3f23

080020fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0a6      	sub	sp, #152	@ 0x98
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002110:	2300      	movs	r3, #0
 8002112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800212c:	2301      	movs	r3, #1
 800212e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800213e:	2300      	movs	r3, #0
 8002140:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002148:	2300      	movs	r3, #0
 800214a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002164:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002168:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800216a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002176:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fe7f 	bl	8001e80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002182:	2301      	movs	r3, #1
 8002184:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002186:	2301      	movs	r3, #1
 8002188:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800218a:	2301      	movs	r3, #1
 800218c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002190:	2301      	movs	r3, #1
 8002192:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021bc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff05 	bl	8001fe8 <ETH_SetDMAConfig>
}
 80021de:	bf00      	nop
 80021e0:	3798      	adds	r7, #152	@ 0x98
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3305      	adds	r3, #5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	3204      	adds	r2, #4
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <ETH_MACAddressConfig+0x68>)
 800220a:	4413      	add	r3, r2
 800220c:	461a      	mov	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3303      	adds	r3, #3
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3302      	adds	r3, #2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <ETH_MACAddressConfig+0x6c>)
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40028040 	.word	0x40028040
 8002254:	40028044 	.word	0x40028044

08002258 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e03e      	b.n	80022e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	3206      	adds	r2, #6
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d80c      	bhi.n	80022c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e004      	b.n	80022d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d9bd      	bls.n	8002266 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fc:	611a      	str	r2, [r3, #16]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e048      	b.n	80023aa <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002354:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	3212      	adds	r2, #18
 8002376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d80c      	bhi.n	800239a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6919      	ldr	r1, [r3, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	461a      	mov	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	e004      	b.n	80023a4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3301      	adds	r3, #1
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d9b3      	bls.n	8002318 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023da:	60da      	str	r2, [r3, #12]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b091      	sub	sp, #68	@ 0x44
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3318      	adds	r3, #24
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002426:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800242a:	d007      	beq.n	800243c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002430:	3304      	adds	r3, #4
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	e111      	b.n	8002664 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002442:	3301      	adds	r3, #1
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	4b86      	ldr	r3, [pc, #536]	@ (8002670 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002456:	4013      	ands	r3, r2
 8002458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800245a:	6852      	ldr	r2, [r2, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	431a      	orrs	r2, r3
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800248c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	431a      	orrs	r2, r3
 800249a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024c2:	e082      	b.n	80025ca <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e005      	b.n	80024f0 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ee:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f2:	3301      	adds	r3, #1
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d902      	bls.n	8002502 <ETH_Prepare_Tx_Descriptors+0x11a>
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	3b04      	subs	r3, #4
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002514:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002518:	d007      	beq.n	800252a <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251e:	3304      	adds	r3, #4
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d029      	beq.n	800257e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002536:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002538:	2300      	movs	r3, #0
 800253a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800253c:	e019      	b.n	8002572 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 800253e:	f3bf 8f5f 	dmb	sy
}
 8002542:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002552:	3301      	adds	r3, #1
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002558:	2b03      	cmp	r3, #3
 800255a:	d902      	bls.n	8002562 <ETH_Prepare_Tx_Descriptors+0x17a>
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	3b04      	subs	r3, #4
 8002560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256e:	3301      	adds	r3, #1
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002572:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002576:	429a      	cmp	r2, r3
 8002578:	d3e1      	bcc.n	800253e <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e072      	b.n	8002664 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800257e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002588:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	3301      	adds	r3, #1
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4b32      	ldr	r3, [pc, #200]	@ (8002670 <ETH_Prepare_Tx_Descriptors+0x288>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025aa:	6852      	ldr	r2, [r2, #4]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	3301      	adds	r3, #1
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025b8:	f3bf 8f5f 	dmb	sy
}
 80025bc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f af78 	bne.w	80024c4 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e005      	b.n	80025f4 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	6a3a      	ldr	r2, [r7, #32]
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800260a:	f3bf 8f5f 	dmb	sy
}
 800260e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002620:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002624:	3304      	adds	r3, #4
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002630:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002632:	f3ef 8310 	mrs	r3, PRIMASK
 8002636:	613b      	str	r3, [r7, #16]
  return(result);
 8002638:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	2301      	movs	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f383 8810 	msr	PRIMASK, r3
}
 8002646:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	4413      	add	r3, r2
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f383 8810 	msr	PRIMASK, r3
}
 8002660:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3744      	adds	r7, #68	@ 0x44
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	ffffe000 	.word	0xffffe000

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e175      	b.n	8002980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8164 	bne.w	800297a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d005      	beq.n	80026ca <HAL_GPIO_Init+0x56>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d130      	bne.n	800272c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80be 	beq.w	800297a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	4b66      	ldr	r3, [pc, #408]	@ (8002998 <HAL_GPIO_Init+0x324>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a65      	ldr	r2, [pc, #404]	@ (8002998 <HAL_GPIO_Init+0x324>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b63      	ldr	r3, [pc, #396]	@ (8002998 <HAL_GPIO_Init+0x324>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002816:	4a61      	ldr	r2, [pc, #388]	@ (800299c <HAL_GPIO_Init+0x328>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a58      	ldr	r2, [pc, #352]	@ (80029a0 <HAL_GPIO_Init+0x32c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d037      	beq.n	80028b2 <HAL_GPIO_Init+0x23e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a57      	ldr	r2, [pc, #348]	@ (80029a4 <HAL_GPIO_Init+0x330>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d031      	beq.n	80028ae <HAL_GPIO_Init+0x23a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a56      	ldr	r2, [pc, #344]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d02b      	beq.n	80028aa <HAL_GPIO_Init+0x236>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a55      	ldr	r2, [pc, #340]	@ (80029ac <HAL_GPIO_Init+0x338>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d025      	beq.n	80028a6 <HAL_GPIO_Init+0x232>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a54      	ldr	r2, [pc, #336]	@ (80029b0 <HAL_GPIO_Init+0x33c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01f      	beq.n	80028a2 <HAL_GPIO_Init+0x22e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a53      	ldr	r2, [pc, #332]	@ (80029b4 <HAL_GPIO_Init+0x340>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d019      	beq.n	800289e <HAL_GPIO_Init+0x22a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a52      	ldr	r2, [pc, #328]	@ (80029b8 <HAL_GPIO_Init+0x344>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a51      	ldr	r2, [pc, #324]	@ (80029bc <HAL_GPIO_Init+0x348>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00d      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_GPIO_Init+0x34c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4f      	ldr	r2, [pc, #316]	@ (80029c4 <HAL_GPIO_Init+0x350>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d101      	bne.n	800288e <HAL_GPIO_Init+0x21a>
 800288a:	2309      	movs	r3, #9
 800288c:	e012      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 800288e:	230a      	movs	r3, #10
 8002890:	e010      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 8002892:	2308      	movs	r3, #8
 8002894:	e00e      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 8002896:	2307      	movs	r3, #7
 8002898:	e00c      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 800289a:	2306      	movs	r3, #6
 800289c:	e00a      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 800289e:	2305      	movs	r3, #5
 80028a0:	e008      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 80028a2:	2304      	movs	r3, #4
 80028a4:	e006      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 80028a6:	2303      	movs	r3, #3
 80028a8:	e004      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e002      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_GPIO_Init+0x240>
 80028b2:	2300      	movs	r3, #0
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f002 0203 	and.w	r2, r2, #3
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	4093      	lsls	r3, r2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028c4:	4935      	ldr	r1, [pc, #212]	@ (800299c <HAL_GPIO_Init+0x328>)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	3302      	adds	r3, #2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a34      	ldr	r2, [pc, #208]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a29      	ldr	r2, [pc, #164]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002926:	4b28      	ldr	r3, [pc, #160]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294a:	4a1f      	ldr	r2, [pc, #124]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <HAL_GPIO_Init+0x354>)
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3301      	adds	r3, #1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b0f      	cmp	r3, #15
 8002984:	f67f ae86 	bls.w	8002694 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3724      	adds	r7, #36	@ 0x24
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	40013800 	.word	0x40013800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40020400 	.word	0x40020400
 80029a8:	40020800 	.word	0x40020800
 80029ac:	40020c00 	.word	0x40020c00
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40021400 	.word	0x40021400
 80029b8:	40021800 	.word	0x40021800
 80029bc:	40021c00 	.word	0x40021c00
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40022400 	.word	0x40022400
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40007000 	.word	0x40007000

08002a54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	4a22      	ldr	r2, [pc, #136]	@ (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a6a:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <HAL_PWREx_EnableOverDrive+0x98>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a76:	4b1e      	ldr	r3, [pc, #120]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a82:	f7fe fa67 	bl	8000f54 <HAL_GetTick>
 8002a86:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a88:	e009      	b.n	8002a9e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a8a:	f7fe fa63 	bl	8000f54 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a98:	d901      	bls.n	8002a9e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e022      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a9e:	4b14      	ldr	r3, [pc, #80]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002aac:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ab2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab8:	f7fe fa4c 	bl	8000f54 <HAL_GetTick>
 8002abc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002abe:	e009      	b.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ac0:	f7fe fa48 	bl	8000f54 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ace:	d901      	bls.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e007      	b.n	8002ae4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ad4:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e29b      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8087 	beq.w	8002c26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b18:	4b96      	ldr	r3, [pc, #600]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d00c      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b24:	4b93      	ldr	r3, [pc, #588]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d112      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
 8002b30:	4b90      	ldr	r3, [pc, #576]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3c:	d10b      	bne.n	8002b56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d06c      	beq.n	8002c24 <HAL_RCC_OscConfig+0x130>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d168      	bne.n	8002c24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e275      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x7a>
 8002b60:	4b84      	ldr	r3, [pc, #528]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a83      	ldr	r2, [pc, #524]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e02e      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x9c>
 8002b76:	4b7f      	ldr	r3, [pc, #508]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b7c      	ldr	r3, [pc, #496]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a7b      	ldr	r2, [pc, #492]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e01d      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0xc0>
 8002b9a:	4b76      	ldr	r3, [pc, #472]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a75      	ldr	r2, [pc, #468]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	4b73      	ldr	r3, [pc, #460]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a72      	ldr	r2, [pc, #456]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCC_OscConfig+0xd8>
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d013      	beq.n	8002bfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd4:	f7fe f9be 	bl	8000f54 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7fe f9ba 	bl	8000f54 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	@ 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e229      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	4b61      	ldr	r3, [pc, #388]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0f0      	beq.n	8002bdc <HAL_RCC_OscConfig+0xe8>
 8002bfa:	e014      	b.n	8002c26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe f9aa 	bl	8000f54 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c04:	f7fe f9a6 	bl	8000f54 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	@ 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e215      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	4b57      	ldr	r3, [pc, #348]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x110>
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d069      	beq.n	8002d06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c32:	4b50      	ldr	r3, [pc, #320]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00b      	beq.n	8002c56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d11c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x190>
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d116      	bne.n	8002c84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e1e9      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	493d      	ldr	r1, [pc, #244]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c82:	e040      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d023      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c8c:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a38      	ldr	r2, [pc, #224]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe f95c 	bl	8000f54 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca0:	f7fe f958 	bl	8000f54 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e1c7      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb2:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4929      	ldr	r1, [pc, #164]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd4:	4b27      	ldr	r3, [pc, #156]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f938 	bl	8000f54 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7fe f934 	bl	8000f54 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1a3      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d038      	beq.n	8002d84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d019      	beq.n	8002d4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d1e:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d26:	f7fe f915 	bl	8000f54 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2e:	f7fe f911 	bl	8000f54 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e180      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x23a>
 8002d4c:	e01a      	b.n	8002d84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d52:	4a08      	ldr	r2, [pc, #32]	@ (8002d74 <HAL_RCC_OscConfig+0x280>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe f8fb 	bl	8000f54 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe f8f7 	bl	8000f54 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d903      	bls.n	8002d78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e166      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
 8002d74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b92      	ldr	r3, [pc, #584]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ee      	bne.n	8002d62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a4 	beq.w	8002eda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d92:	4b8c      	ldr	r3, [pc, #560]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10d      	bne.n	8002dba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b89      	ldr	r3, [pc, #548]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	4a88      	ldr	r2, [pc, #544]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002daa:	4b86      	ldr	r3, [pc, #536]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dba:	4b83      	ldr	r3, [pc, #524]	@ (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002dc6:	4b80      	ldr	r3, [pc, #512]	@ (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a7f      	ldr	r2, [pc, #508]	@ (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe f8bf 	bl	8000f54 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7fe f8bb 	bl	8000f54 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b64      	cmp	r3, #100	@ 0x64
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e12a      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dec:	4b76      	ldr	r3, [pc, #472]	@ (8002fc8 <HAL_RCC_OscConfig+0x4d4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_OscConfig+0x31a>
 8002e00:	4b70      	ldr	r3, [pc, #448]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e04:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0c:	e02d      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x33c>
 8002e16:	4b6b      	ldr	r3, [pc, #428]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e22:	4b68      	ldr	r3, [pc, #416]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e26:	4a67      	ldr	r2, [pc, #412]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2e:	e01c      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d10c      	bne.n	8002e52 <HAL_RCC_OscConfig+0x35e>
 8002e38:	4b62      	ldr	r3, [pc, #392]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a61      	ldr	r2, [pc, #388]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3e:	f043 0304 	orr.w	r3, r3, #4
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	4b5f      	ldr	r3, [pc, #380]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	4a5e      	ldr	r2, [pc, #376]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e50:	e00b      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
 8002e52:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e56:	4a5b      	ldr	r2, [pc, #364]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e5e:	4b59      	ldr	r3, [pc, #356]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	4a58      	ldr	r2, [pc, #352]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d015      	beq.n	8002e9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe f86f 	bl	8000f54 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7fe f86b 	bl	8000f54 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0d8      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b4c      	ldr	r3, [pc, #304]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ee      	beq.n	8002e7a <HAL_RCC_OscConfig+0x386>
 8002e9c:	e014      	b.n	8002ec8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe f859 	bl	8000f54 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe f855 	bl	8000f54 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0c2      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1ee      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec8:	7dfb      	ldrb	r3, [r7, #23]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ece:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80ae 	beq.w	8003040 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ee4:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d06d      	beq.n	8002fcc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d14b      	bne.n	8002f90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef8:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a31      	ldr	r2, [pc, #196]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe f826 	bl	8000f54 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fe f822 	bl	8000f54 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e091      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	4b29      	ldr	r3, [pc, #164]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	019b      	lsls	r3, r3, #6
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	085b      	lsrs	r3, r3, #1
 8002f42:	3b01      	subs	r3, #1
 8002f44:	041b      	lsls	r3, r3, #16
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	071b      	lsls	r3, r3, #28
 8002f56:	491b      	ldr	r1, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f5c:	4b19      	ldr	r3, [pc, #100]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fd fff4 	bl	8000f54 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fd fff0 	bl	8000f54 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e05f      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b10      	ldr	r3, [pc, #64]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x47c>
 8002f8e:	e057      	b.n	8003040 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f90:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fd ffda 	bl	8000f54 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa4:	f7fd ffd6 	bl	8000f54 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e045      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb6:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <HAL_RCC_OscConfig+0x4d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4b0>
 8002fc2:	e03d      	b.n	8003040 <HAL_RCC_OscConfig+0x54c>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <HAL_RCC_OscConfig+0x558>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d030      	beq.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d129      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d122      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003002:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d119      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	3b01      	subs	r3, #1
 8003016:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d10f      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0d0      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b6a      	ldr	r3, [pc, #424]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d910      	bls.n	8003098 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b67      	ldr	r3, [pc, #412]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	4965      	ldr	r1, [pc, #404]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d040      	beq.n	8003174 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d115      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003112:	4b41      	ldr	r3, [pc, #260]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e073      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003122:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e06b      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4936      	ldr	r1, [pc, #216]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003144:	f7fd ff06 	bl	8000f54 <HAL_GetTick>
 8003148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	e00a      	b.n	8003162 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800314c:	f7fd ff02 	bl	8000f54 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e053      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	4b2d      	ldr	r3, [pc, #180]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	429a      	cmp	r2, r3
 8003172:	d1eb      	bne.n	800314c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d210      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003182:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 020f 	bic.w	r2, r3, #15
 800318a:	4922      	ldr	r1, [pc, #136]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	4313      	orrs	r3, r2
 8003190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ce:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f831 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCC_ClockConfig+0x1c8>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x1cc>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <HAL_RCC_ClockConfig+0x1d0>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <HAL_RCC_ClockConfig+0x1d4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fe62 	bl	8000ecc <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	0801426c 	.word	0x0801426c
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800322c:	4b05      	ldr	r3, [pc, #20]	@ (8003244 <HAL_RCC_EnableCSS+0x1c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a04      	ldr	r2, [pc, #16]	@ (8003244 <HAL_RCC_EnableCSS+0x1c>)
 8003232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b094      	sub	sp, #80	@ 0x50
 800324e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	647b      	str	r3, [r7, #68]	@ 0x44
 8003254:	2300      	movs	r3, #0
 8003256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003258:	2300      	movs	r3, #0
 800325a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003260:	4b79      	ldr	r3, [pc, #484]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d00d      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x40>
 800326c:	2b08      	cmp	r3, #8
 800326e:	f200 80e1 	bhi.w	8003434 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x34>
 8003276:	2b04      	cmp	r3, #4
 8003278:	d003      	beq.n	8003282 <HAL_RCC_GetSysClockFreq+0x3a>
 800327a:	e0db      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b73      	ldr	r3, [pc, #460]	@ (800344c <HAL_RCC_GetSysClockFreq+0x204>)
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003280:	e0db      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003282:	4b72      	ldr	r3, [pc, #456]	@ (800344c <HAL_RCC_GetSysClockFreq+0x204>)
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003286:	e0d8      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003288:	4b6f      	ldr	r3, [pc, #444]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003290:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003292:	4b6d      	ldr	r3, [pc, #436]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329e:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	099b      	lsrs	r3, r3, #6
 80032a4:	2200      	movs	r2, #0
 80032a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032b2:	2300      	movs	r3, #0
 80032b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80032b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	f04f 0000 	mov.w	r0, #0
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	0159      	lsls	r1, r3, #5
 80032c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032cc:	0150      	lsls	r0, r2, #5
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4621      	mov	r1, r4
 80032d4:	1a51      	subs	r1, r2, r1
 80032d6:	6139      	str	r1, [r7, #16]
 80032d8:	4629      	mov	r1, r5
 80032da:	eb63 0301 	sbc.w	r3, r3, r1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ec:	4659      	mov	r1, fp
 80032ee:	018b      	lsls	r3, r1, #6
 80032f0:	4651      	mov	r1, sl
 80032f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f6:	4651      	mov	r1, sl
 80032f8:	018a      	lsls	r2, r1, #6
 80032fa:	4651      	mov	r1, sl
 80032fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003300:	4659      	mov	r1, fp
 8003302:	eb63 0901 	sbc.w	r9, r3, r1
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800331a:	4690      	mov	r8, r2
 800331c:	4699      	mov	r9, r3
 800331e:	4623      	mov	r3, r4
 8003320:	eb18 0303 	adds.w	r3, r8, r3
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	462b      	mov	r3, r5
 8003328:	eb49 0303 	adc.w	r3, r9, r3
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800333a:	4629      	mov	r1, r5
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003344:	4621      	mov	r1, r4
 8003346:	028a      	lsls	r2, r1, #10
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003358:	f7fc ffda 	bl	8000310 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003364:	e058      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003366:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	099b      	lsrs	r3, r3, #6
 800336c:	2200      	movs	r2, #0
 800336e:	4618      	mov	r0, r3
 8003370:	4611      	mov	r1, r2
 8003372:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
 800337c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003380:	4642      	mov	r2, r8
 8003382:	464b      	mov	r3, r9
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0159      	lsls	r1, r3, #5
 800338e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003392:	0150      	lsls	r0, r2, #5
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4641      	mov	r1, r8
 800339a:	ebb2 0a01 	subs.w	sl, r2, r1
 800339e:	4649      	mov	r1, r9
 80033a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033b8:	ebb2 040a 	subs.w	r4, r2, sl
 80033bc:	eb63 050b 	sbc.w	r5, r3, fp
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	00eb      	lsls	r3, r5, #3
 80033ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ce:	00e2      	lsls	r2, r4, #3
 80033d0:	4614      	mov	r4, r2
 80033d2:	461d      	mov	r5, r3
 80033d4:	4643      	mov	r3, r8
 80033d6:	18e3      	adds	r3, r4, r3
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	464b      	mov	r3, r9
 80033dc:	eb45 0303 	adc.w	r3, r5, r3
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033ee:	4629      	mov	r1, r5
 80033f0:	028b      	lsls	r3, r1, #10
 80033f2:	4621      	mov	r1, r4
 80033f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033f8:	4621      	mov	r1, r4
 80033fa:	028a      	lsls	r2, r1, #10
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003402:	2200      	movs	r2, #0
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	61fa      	str	r2, [r7, #28]
 8003408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340c:	f7fc ff80 	bl	8000310 <__aeabi_uldivmod>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4613      	mov	r3, r2
 8003416:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003418:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	3301      	adds	r3, #1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800342a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetSysClockFreq+0x204>)
 8003436:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800343c:	4618      	mov	r0, r3
 800343e:	3750      	adds	r7, #80	@ 0x50
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	00f42400 	.word	0x00f42400

08003450 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	@ (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	0801427c 	.word	0x0801427c

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	@ (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	@ (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	0801427c 	.word	0x0801427c

080034b8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034c4:	2b80      	cmp	r3, #128	@ 0x80
 80034c6:	d104      	bne.n	80034d2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80034c8:	f000 f80a 	bl	80034e0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_NMI_IRQHandler+0x24>)
 80034ce:	2280      	movs	r2, #128	@ 0x80
 80034d0:	701a      	strb	r2, [r3, #0]
  }
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	4002380e 	.word	0x4002380e

080034e0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d012      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003518:	4b69      	ldr	r3, [pc, #420]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a68      	ldr	r2, [pc, #416]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003522:	6093      	str	r3, [r2, #8]
 8003524:	4b66      	ldr	r3, [pc, #408]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352c:	4964      	ldr	r1, [pc, #400]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d017      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800354a:	4b5d      	ldr	r3, [pc, #372]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003550:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003558:	4959      	ldr	r1, [pc, #356]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003568:	d101      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003586:	4b4e      	ldr	r3, [pc, #312]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800358c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	494a      	ldr	r1, [pc, #296]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035a4:	d101      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 808b 	beq.w	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b3a      	ldr	r3, [pc, #232]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d8:	4a39      	ldr	r2, [pc, #228]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	@ 0x40
 80035e0:	4b37      	ldr	r3, [pc, #220]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035ec:	4b35      	ldr	r3, [pc, #212]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a34      	ldr	r2, [pc, #208]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7fd fcac 	bl	8000f54 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fd fca8 	bl	8000f54 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	@ 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e38f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003612:	4b2c      	ldr	r3, [pc, #176]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800361e:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d035      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d02e      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800363c:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003644:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003646:	4b1e      	ldr	r3, [pc, #120]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003650:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003652:	4b1b      	ldr	r3, [pc, #108]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003656:	4a1a      	ldr	r2, [pc, #104]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800365e:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003664:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b01      	cmp	r3, #1
 800366e:	d114      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fd fc70 	bl	8000f54 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd fc6c 	bl	8000f54 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e351      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ee      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036a6:	d111      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036b4:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036b6:	400b      	ands	r3, r1
 80036b8:	4901      	ldr	r1, [pc, #4]	@ (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
 80036be:	e00b      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40007000 	.word	0x40007000
 80036c8:	0ffffcff 	.word	0x0ffffcff
 80036cc:	4bac      	ldr	r3, [pc, #688]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4aab      	ldr	r2, [pc, #684]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80036d6:	6093      	str	r3, [r2, #8]
 80036d8:	4ba9      	ldr	r3, [pc, #676]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	49a6      	ldr	r1, [pc, #664]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f6:	4ba2      	ldr	r3, [pc, #648]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036fc:	4aa0      	ldr	r2, [pc, #640]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003706:	4b9e      	ldr	r3, [pc, #632]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003708:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	499b      	ldr	r1, [pc, #620]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003724:	4b96      	ldr	r3, [pc, #600]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003732:	4993      	ldr	r1, [pc, #588]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003746:	4b8e      	ldr	r3, [pc, #568]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800374c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003754:	498a      	ldr	r1, [pc, #552]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003768:	4b85      	ldr	r3, [pc, #532]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003776:	4982      	ldr	r1, [pc, #520]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800378a:	4b7d      	ldr	r3, [pc, #500]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003790:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4979      	ldr	r1, [pc, #484]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ac:	4b74      	ldr	r3, [pc, #464]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	4971      	ldr	r1, [pc, #452]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d4:	f023 020c 	bic.w	r2, r3, #12
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037dc:	4968      	ldr	r1, [pc, #416]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037f0:	4b63      	ldr	r3, [pc, #396]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	4960      	ldr	r1, [pc, #384]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003812:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003818:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003820:	4957      	ldr	r1, [pc, #348]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003834:	4b52      	ldr	r3, [pc, #328]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003842:	494f      	ldr	r1, [pc, #316]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003844:	4313      	orrs	r3, r2
 8003846:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800385c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	4946      	ldr	r1, [pc, #280]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003878:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003886:	493e      	ldr	r1, [pc, #248]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a8:	4935      	ldr	r1, [pc, #212]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038bc:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ca:	492d      	ldr	r1, [pc, #180]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d011      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ec:	4924      	ldr	r1, [pc, #144]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038fc:	d101      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800391e:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003924:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392c:	4914      	ldr	r1, [pc, #80]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00b      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003946:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003950:	490b      	ldr	r1, [pc, #44]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00f      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003964:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003974:	4902      	ldr	r1, [pc, #8]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003976:	4313      	orrs	r3, r2
 8003978:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003990:	4b8a      	ldr	r3, [pc, #552]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003996:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a0:	4986      	ldr	r1, [pc, #536]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039b4:	4b81      	ldr	r3, [pc, #516]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039c4:	497d      	ldr	r1, [pc, #500]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d006      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80d6 	beq.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e0:	4b76      	ldr	r3, [pc, #472]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a75      	ldr	r2, [pc, #468]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ec:	f7fd fab2 	bl	8000f54 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039f4:	f7fd faae 	bl	8000f54 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	@ 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e195      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a06:	4b6d      	ldr	r3, [pc, #436]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d021      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11d      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a26:	4b65      	ldr	r3, [pc, #404]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a34:	4b61      	ldr	r3, [pc, #388]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a3a:	0e1b      	lsrs	r3, r3, #24
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	019a      	lsls	r2, r3, #6
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	041b      	lsls	r3, r3, #16
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	071b      	lsls	r3, r3, #28
 8003a5a:	4958      	ldr	r1, [pc, #352]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d02e      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a8c:	d129      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a9c:	4b47      	ldr	r3, [pc, #284]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa2:	0f1b      	lsrs	r3, r3, #28
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	019a      	lsls	r2, r3, #6
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	041b      	lsls	r3, r3, #16
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	071b      	lsls	r3, r3, #28
 8003ac2:	493e      	ldr	r1, [pc, #248]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aca:	4b3c      	ldr	r3, [pc, #240]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ad0:	f023 021f 	bic.w	r2, r3, #31
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	4938      	ldr	r1, [pc, #224]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003aee:	4b33      	ldr	r3, [pc, #204]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af4:	0e1b      	lsrs	r3, r3, #24
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003afc:	4b2f      	ldr	r3, [pc, #188]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b02:	0f1b      	lsrs	r3, r3, #28
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	019a      	lsls	r2, r3, #6
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	061b      	lsls	r3, r3, #24
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	071b      	lsls	r3, r3, #28
 8003b22:	4926      	ldr	r1, [pc, #152]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d011      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	019a      	lsls	r2, r3, #6
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	491a      	ldr	r1, [pc, #104]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b5a:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fd f9f5 	bl	8000f54 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b6e:	f7fd f9f1 	bl	8000f54 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b64      	cmp	r3, #100	@ 0x64
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0d8      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b80:	4b0e      	ldr	r3, [pc, #56]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 80ce 	bne.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b94:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a08      	ldr	r2, [pc, #32]	@ (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba0:	f7fd f9d8 	bl	8000f54 <HAL_GetTick>
 8003ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ba8:	f7fd f9d4 	bl	8000f54 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	@ 0x64
 8003bb4:	d904      	bls.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e0bb      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bcc:	d0ec      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d02e      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d12a      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bf6:	4b51      	ldr	r3, [pc, #324]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	f003 0303 	and.w	r3, r3, #3
 8003c02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c04:	4b4d      	ldr	r3, [pc, #308]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	0f1b      	lsrs	r3, r3, #28
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	019a      	lsls	r2, r3, #6
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	041b      	lsls	r3, r3, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	061b      	lsls	r3, r3, #24
 8003c24:	431a      	orrs	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	071b      	lsls	r3, r3, #28
 8003c2a:	4944      	ldr	r1, [pc, #272]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c32:	4b42      	ldr	r3, [pc, #264]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	3b01      	subs	r3, #1
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	493d      	ldr	r1, [pc, #244]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c60:	d11d      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c62:	4b36      	ldr	r3, [pc, #216]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	0e1b      	lsrs	r3, r3, #24
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c70:	4b32      	ldr	r3, [pc, #200]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	0f1b      	lsrs	r3, r3, #28
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	019a      	lsls	r2, r3, #6
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	431a      	orrs	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	071b      	lsls	r3, r3, #28
 8003c96:	4929      	ldr	r1, [pc, #164]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003caa:	4b24      	ldr	r3, [pc, #144]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	0e1b      	lsrs	r3, r3, #24
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cb8:	4b20      	ldr	r3, [pc, #128]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	019a      	lsls	r2, r3, #6
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	071b      	lsls	r3, r3, #28
 8003cde:	4917      	ldr	r1, [pc, #92]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf4:	4911      	ldr	r1, [pc, #68]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0e      	ldr	r2, [pc, #56]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d08:	f7fd f924 	bl	8000f54 <HAL_GetTick>
 8003d0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d10:	f7fd f920 	bl	8000f54 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	@ 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e007      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d2e:	d1ef      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e040      	b.n	8003dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc ff16 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	@ 0x24
 8003d6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa8c 	bl	80042a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f825 	bl	8003ddc <UART_SetConfig>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e01b      	b.n	8003dd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fb0b 	bl	80043e8 <UART_CheckIdleState>
 8003dd2:	4603      	mov	r3, r0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	4ba6      	ldr	r3, [pc, #664]	@ (80040a0 <UART_SetConfig+0x2c4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	6979      	ldr	r1, [r7, #20]
 8003e10:	430b      	orrs	r3, r1
 8003e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a94      	ldr	r2, [pc, #592]	@ (80040a4 <UART_SetConfig+0x2c8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d120      	bne.n	8003e9a <UART_SetConfig+0xbe>
 8003e58:	4b93      	ldr	r3, [pc, #588]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d816      	bhi.n	8003e94 <UART_SetConfig+0xb8>
 8003e66:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0x90>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e89 	.word	0x08003e89
 8003e74:	08003e83 	.word	0x08003e83
 8003e78:	08003e8f 	.word	0x08003e8f
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	77fb      	strb	r3, [r7, #31]
 8003e80:	e150      	b.n	8004124 <UART_SetConfig+0x348>
 8003e82:	2302      	movs	r3, #2
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e14d      	b.n	8004124 <UART_SetConfig+0x348>
 8003e88:	2304      	movs	r3, #4
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e14a      	b.n	8004124 <UART_SetConfig+0x348>
 8003e8e:	2308      	movs	r3, #8
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e147      	b.n	8004124 <UART_SetConfig+0x348>
 8003e94:	2310      	movs	r3, #16
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e144      	b.n	8004124 <UART_SetConfig+0x348>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a83      	ldr	r2, [pc, #524]	@ (80040ac <UART_SetConfig+0x2d0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d132      	bne.n	8003f0a <UART_SetConfig+0x12e>
 8003ea4:	4b80      	ldr	r3, [pc, #512]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d828      	bhi.n	8003f04 <UART_SetConfig+0x128>
 8003eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb8 <UART_SetConfig+0xdc>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003eed 	.word	0x08003eed
 8003ebc:	08003f05 	.word	0x08003f05
 8003ec0:	08003f05 	.word	0x08003f05
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003ef9 	.word	0x08003ef9
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003ef3 	.word	0x08003ef3
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f05 	.word	0x08003f05
 8003ee8:	08003eff 	.word	0x08003eff
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e118      	b.n	8004124 <UART_SetConfig+0x348>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e115      	b.n	8004124 <UART_SetConfig+0x348>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e112      	b.n	8004124 <UART_SetConfig+0x348>
 8003efe:	2308      	movs	r3, #8
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e10f      	b.n	8004124 <UART_SetConfig+0x348>
 8003f04:	2310      	movs	r3, #16
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e10c      	b.n	8004124 <UART_SetConfig+0x348>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a68      	ldr	r2, [pc, #416]	@ (80040b0 <UART_SetConfig+0x2d4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d120      	bne.n	8003f56 <UART_SetConfig+0x17a>
 8003f14:	4b64      	ldr	r3, [pc, #400]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003f1e:	2b30      	cmp	r3, #48	@ 0x30
 8003f20:	d013      	beq.n	8003f4a <UART_SetConfig+0x16e>
 8003f22:	2b30      	cmp	r3, #48	@ 0x30
 8003f24:	d814      	bhi.n	8003f50 <UART_SetConfig+0x174>
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d009      	beq.n	8003f3e <UART_SetConfig+0x162>
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d810      	bhi.n	8003f50 <UART_SetConfig+0x174>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <UART_SetConfig+0x15c>
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d006      	beq.n	8003f44 <UART_SetConfig+0x168>
 8003f36:	e00b      	b.n	8003f50 <UART_SetConfig+0x174>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
 8003f3c:	e0f2      	b.n	8004124 <UART_SetConfig+0x348>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	77fb      	strb	r3, [r7, #31]
 8003f42:	e0ef      	b.n	8004124 <UART_SetConfig+0x348>
 8003f44:	2304      	movs	r3, #4
 8003f46:	77fb      	strb	r3, [r7, #31]
 8003f48:	e0ec      	b.n	8004124 <UART_SetConfig+0x348>
 8003f4a:	2308      	movs	r3, #8
 8003f4c:	77fb      	strb	r3, [r7, #31]
 8003f4e:	e0e9      	b.n	8004124 <UART_SetConfig+0x348>
 8003f50:	2310      	movs	r3, #16
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e0e6      	b.n	8004124 <UART_SetConfig+0x348>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a56      	ldr	r2, [pc, #344]	@ (80040b4 <UART_SetConfig+0x2d8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d120      	bne.n	8003fa2 <UART_SetConfig+0x1c6>
 8003f60:	4b51      	ldr	r3, [pc, #324]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f6c:	d013      	beq.n	8003f96 <UART_SetConfig+0x1ba>
 8003f6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f70:	d814      	bhi.n	8003f9c <UART_SetConfig+0x1c0>
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d009      	beq.n	8003f8a <UART_SetConfig+0x1ae>
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d810      	bhi.n	8003f9c <UART_SetConfig+0x1c0>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <UART_SetConfig+0x1a8>
 8003f7e:	2b40      	cmp	r3, #64	@ 0x40
 8003f80:	d006      	beq.n	8003f90 <UART_SetConfig+0x1b4>
 8003f82:	e00b      	b.n	8003f9c <UART_SetConfig+0x1c0>
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e0cc      	b.n	8004124 <UART_SetConfig+0x348>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e0c9      	b.n	8004124 <UART_SetConfig+0x348>
 8003f90:	2304      	movs	r3, #4
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e0c6      	b.n	8004124 <UART_SetConfig+0x348>
 8003f96:	2308      	movs	r3, #8
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e0c3      	b.n	8004124 <UART_SetConfig+0x348>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e0c0      	b.n	8004124 <UART_SetConfig+0x348>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a44      	ldr	r2, [pc, #272]	@ (80040b8 <UART_SetConfig+0x2dc>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d125      	bne.n	8003ff8 <UART_SetConfig+0x21c>
 8003fac:	4b3e      	ldr	r3, [pc, #248]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fba:	d017      	beq.n	8003fec <UART_SetConfig+0x210>
 8003fbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc0:	d817      	bhi.n	8003ff2 <UART_SetConfig+0x216>
 8003fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc6:	d00b      	beq.n	8003fe0 <UART_SetConfig+0x204>
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fcc:	d811      	bhi.n	8003ff2 <UART_SetConfig+0x216>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <UART_SetConfig+0x1fe>
 8003fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fd6:	d006      	beq.n	8003fe6 <UART_SetConfig+0x20a>
 8003fd8:	e00b      	b.n	8003ff2 <UART_SetConfig+0x216>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	77fb      	strb	r3, [r7, #31]
 8003fde:	e0a1      	b.n	8004124 <UART_SetConfig+0x348>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	77fb      	strb	r3, [r7, #31]
 8003fe4:	e09e      	b.n	8004124 <UART_SetConfig+0x348>
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	77fb      	strb	r3, [r7, #31]
 8003fea:	e09b      	b.n	8004124 <UART_SetConfig+0x348>
 8003fec:	2308      	movs	r3, #8
 8003fee:	77fb      	strb	r3, [r7, #31]
 8003ff0:	e098      	b.n	8004124 <UART_SetConfig+0x348>
 8003ff2:	2310      	movs	r3, #16
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e095      	b.n	8004124 <UART_SetConfig+0x348>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80040bc <UART_SetConfig+0x2e0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d125      	bne.n	800404e <UART_SetConfig+0x272>
 8004002:	4b29      	ldr	r3, [pc, #164]	@ (80040a8 <UART_SetConfig+0x2cc>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004008:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800400c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004010:	d017      	beq.n	8004042 <UART_SetConfig+0x266>
 8004012:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004016:	d817      	bhi.n	8004048 <UART_SetConfig+0x26c>
 8004018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800401c:	d00b      	beq.n	8004036 <UART_SetConfig+0x25a>
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004022:	d811      	bhi.n	8004048 <UART_SetConfig+0x26c>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <UART_SetConfig+0x254>
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800402c:	d006      	beq.n	800403c <UART_SetConfig+0x260>
 800402e:	e00b      	b.n	8004048 <UART_SetConfig+0x26c>
 8004030:	2301      	movs	r3, #1
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e076      	b.n	8004124 <UART_SetConfig+0x348>
 8004036:	2302      	movs	r3, #2
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e073      	b.n	8004124 <UART_SetConfig+0x348>
 800403c:	2304      	movs	r3, #4
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e070      	b.n	8004124 <UART_SetConfig+0x348>
 8004042:	2308      	movs	r3, #8
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e06d      	b.n	8004124 <UART_SetConfig+0x348>
 8004048:	2310      	movs	r3, #16
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e06a      	b.n	8004124 <UART_SetConfig+0x348>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1b      	ldr	r2, [pc, #108]	@ (80040c0 <UART_SetConfig+0x2e4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d138      	bne.n	80040ca <UART_SetConfig+0x2ee>
 8004058:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <UART_SetConfig+0x2cc>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004062:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004066:	d017      	beq.n	8004098 <UART_SetConfig+0x2bc>
 8004068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800406c:	d82a      	bhi.n	80040c4 <UART_SetConfig+0x2e8>
 800406e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004072:	d00b      	beq.n	800408c <UART_SetConfig+0x2b0>
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004078:	d824      	bhi.n	80040c4 <UART_SetConfig+0x2e8>
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <UART_SetConfig+0x2aa>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004082:	d006      	beq.n	8004092 <UART_SetConfig+0x2b6>
 8004084:	e01e      	b.n	80040c4 <UART_SetConfig+0x2e8>
 8004086:	2300      	movs	r3, #0
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e04b      	b.n	8004124 <UART_SetConfig+0x348>
 800408c:	2302      	movs	r3, #2
 800408e:	77fb      	strb	r3, [r7, #31]
 8004090:	e048      	b.n	8004124 <UART_SetConfig+0x348>
 8004092:	2304      	movs	r3, #4
 8004094:	77fb      	strb	r3, [r7, #31]
 8004096:	e045      	b.n	8004124 <UART_SetConfig+0x348>
 8004098:	2308      	movs	r3, #8
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e042      	b.n	8004124 <UART_SetConfig+0x348>
 800409e:	bf00      	nop
 80040a0:	efff69f3 	.word	0xefff69f3
 80040a4:	40011000 	.word	0x40011000
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40004400 	.word	0x40004400
 80040b0:	40004800 	.word	0x40004800
 80040b4:	40004c00 	.word	0x40004c00
 80040b8:	40005000 	.word	0x40005000
 80040bc:	40011400 	.word	0x40011400
 80040c0:	40007800 	.word	0x40007800
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	e02c      	b.n	8004124 <UART_SetConfig+0x348>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a72      	ldr	r2, [pc, #456]	@ (8004298 <UART_SetConfig+0x4bc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d125      	bne.n	8004120 <UART_SetConfig+0x344>
 80040d4:	4b71      	ldr	r3, [pc, #452]	@ (800429c <UART_SetConfig+0x4c0>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040e2:	d017      	beq.n	8004114 <UART_SetConfig+0x338>
 80040e4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040e8:	d817      	bhi.n	800411a <UART_SetConfig+0x33e>
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040ee:	d00b      	beq.n	8004108 <UART_SetConfig+0x32c>
 80040f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f4:	d811      	bhi.n	800411a <UART_SetConfig+0x33e>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <UART_SetConfig+0x326>
 80040fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040fe:	d006      	beq.n	800410e <UART_SetConfig+0x332>
 8004100:	e00b      	b.n	800411a <UART_SetConfig+0x33e>
 8004102:	2300      	movs	r3, #0
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e00d      	b.n	8004124 <UART_SetConfig+0x348>
 8004108:	2302      	movs	r3, #2
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e00a      	b.n	8004124 <UART_SetConfig+0x348>
 800410e:	2304      	movs	r3, #4
 8004110:	77fb      	strb	r3, [r7, #31]
 8004112:	e007      	b.n	8004124 <UART_SetConfig+0x348>
 8004114:	2308      	movs	r3, #8
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e004      	b.n	8004124 <UART_SetConfig+0x348>
 800411a:	2310      	movs	r3, #16
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e001      	b.n	8004124 <UART_SetConfig+0x348>
 8004120:	2310      	movs	r3, #16
 8004122:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412c:	d15b      	bne.n	80041e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800412e:	7ffb      	ldrb	r3, [r7, #31]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d828      	bhi.n	8004186 <UART_SetConfig+0x3aa>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <UART_SetConfig+0x360>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004161 	.word	0x08004161
 8004140:	08004169 	.word	0x08004169
 8004144:	08004171 	.word	0x08004171
 8004148:	08004187 	.word	0x08004187
 800414c:	08004177 	.word	0x08004177
 8004150:	08004187 	.word	0x08004187
 8004154:	08004187 	.word	0x08004187
 8004158:	08004187 	.word	0x08004187
 800415c:	0800417f 	.word	0x0800417f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004160:	f7ff f982 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8004164:	61b8      	str	r0, [r7, #24]
        break;
 8004166:	e013      	b.n	8004190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7ff f992 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800416c:	61b8      	str	r0, [r7, #24]
        break;
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004170:	4b4b      	ldr	r3, [pc, #300]	@ (80042a0 <UART_SetConfig+0x4c4>)
 8004172:	61bb      	str	r3, [r7, #24]
        break;
 8004174:	e00c      	b.n	8004190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004176:	f7ff f867 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 800417a:	61b8      	str	r0, [r7, #24]
        break;
 800417c:	e008      	b.n	8004190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800417e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004182:	61bb      	str	r3, [r7, #24]
        break;
 8004184:	e004      	b.n	8004190 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	77bb      	strb	r3, [r7, #30]
        break;
 800418e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d074      	beq.n	8004280 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	005a      	lsls	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	441a      	add	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	d916      	bls.n	80041e0 <UART_SetConfig+0x404>
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d212      	bcs.n	80041e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f023 030f 	bic.w	r3, r3, #15
 80041c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	89fb      	ldrh	r3, [r7, #14]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	89fa      	ldrh	r2, [r7, #14]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e04f      	b.n	8004280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	77bb      	strb	r3, [r7, #30]
 80041e4:	e04c      	b.n	8004280 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d828      	bhi.n	800423e <UART_SetConfig+0x462>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <UART_SetConfig+0x418>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004221 	.word	0x08004221
 80041fc:	08004229 	.word	0x08004229
 8004200:	0800423f 	.word	0x0800423f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800423f 	.word	0x0800423f
 800420c:	0800423f 	.word	0x0800423f
 8004210:	0800423f 	.word	0x0800423f
 8004214:	08004237 	.word	0x08004237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004218:	f7ff f926 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 800421c:	61b8      	str	r0, [r7, #24]
        break;
 800421e:	e013      	b.n	8004248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004220:	f7ff f936 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 8004224:	61b8      	str	r0, [r7, #24]
        break;
 8004226:	e00f      	b.n	8004248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004228:	4b1d      	ldr	r3, [pc, #116]	@ (80042a0 <UART_SetConfig+0x4c4>)
 800422a:	61bb      	str	r3, [r7, #24]
        break;
 800422c:	e00c      	b.n	8004248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800422e:	f7ff f80b 	bl	8003248 <HAL_RCC_GetSysClockFreq>
 8004232:	61b8      	str	r0, [r7, #24]
        break;
 8004234:	e008      	b.n	8004248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800423a:	61bb      	str	r3, [r7, #24]
        break;
 800423c:	e004      	b.n	8004248 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	77bb      	strb	r3, [r7, #30]
        break;
 8004246:	bf00      	nop
    }

    if (pclk != 0U)
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085a      	lsrs	r2, r3, #1
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	441a      	add	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b0f      	cmp	r3, #15
 8004266:	d909      	bls.n	800427c <UART_SetConfig+0x4a0>
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426e:	d205      	bcs.n	800427c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	e001      	b.n	8004280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800428c:	7fbb      	ldrb	r3, [r7, #30]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	40007c00 	.word	0x40007c00
 800429c:	40023800 	.word	0x40023800
 80042a0:	00f42400 	.word	0x00f42400

080042a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01a      	beq.n	80043ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043a2:	d10a      	bne.n	80043ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
  }
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b098      	sub	sp, #96	@ 0x60
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f8:	f7fc fdac 	bl	8000f54 <HAL_GetTick>
 80043fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d12e      	bne.n	800446a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800440c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	2200      	movs	r2, #0
 8004416:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f88c 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d021      	beq.n	800446a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800443a:	653b      	str	r3, [r7, #80]	@ 0x50
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004444:	647b      	str	r3, [r7, #68]	@ 0x44
 8004446:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800444a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e6      	bne.n	8004426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e062      	b.n	8004530 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d149      	bne.n	800450c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f856 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03c      	beq.n	800450c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	623b      	str	r3, [r7, #32]
   return(result);
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044e4:	61fa      	str	r2, [r7, #28]
 80044e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	617b      	str	r3, [r7, #20]
   return(result);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e011      	b.n	8004530 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3758      	adds	r7, #88	@ 0x58
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	e04f      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d04b      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fc fcff 	bl	8000f54 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <UART_WaitOnFlagUntilTimeout+0x30>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e04e      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d037      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d034      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d031      	beq.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d110      	bne.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2208      	movs	r2, #8
 800459a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f838 	bl	8004612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2208      	movs	r2, #8
 80045a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e029      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045c4:	d111      	bne.n	80045ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f81e 	bl	8004612 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e00f      	b.n	800460a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	429a      	cmp	r2, r3
 8004606:	d0a0      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004612:	b480      	push	{r7}
 8004614:	b095      	sub	sp, #84	@ 0x54
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004638:	643b      	str	r3, [r7, #64]	@ 0x40
 800463a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800463e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	61fb      	str	r3, [r7, #28]
   return(result);
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3308      	adds	r3, #8
 800466a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800466c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004672:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004674:	e841 2300 	strex	r3, r2, [r1]
 8004678:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e5      	bne.n	800464c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004684:	2b01      	cmp	r3, #1
 8004686:	d118      	bne.n	80046ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	e853 3f00 	ldrex	r3, [r3]
 8004694:	60bb      	str	r3, [r7, #8]
   return(result);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f023 0310 	bic.w	r3, r3, #16
 800469c:	647b      	str	r3, [r7, #68]	@ 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	e841 2300 	strex	r3, r2, [r1]
 80046b2:	613b      	str	r3, [r7, #16]
   return(result);
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e6      	bne.n	8004688 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2220      	movs	r2, #32
 80046be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046ce:	bf00      	nop
 80046d0:	3754      	adds	r7, #84	@ 0x54
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80046e2:	4b87      	ldr	r3, [pc, #540]	@ (8004900 <MX_LWIP_Init+0x224>)
 80046e4:	22c0      	movs	r2, #192	@ 0xc0
 80046e6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80046e8:	4b85      	ldr	r3, [pc, #532]	@ (8004900 <MX_LWIP_Init+0x224>)
 80046ea:	22a8      	movs	r2, #168	@ 0xa8
 80046ec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80046ee:	4b84      	ldr	r3, [pc, #528]	@ (8004900 <MX_LWIP_Init+0x224>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 66;
 80046f4:	4b82      	ldr	r3, [pc, #520]	@ (8004900 <MX_LWIP_Init+0x224>)
 80046f6:	2242      	movs	r2, #66	@ 0x42
 80046f8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80046fa:	4b82      	ldr	r3, [pc, #520]	@ (8004904 <MX_LWIP_Init+0x228>)
 80046fc:	22ff      	movs	r2, #255	@ 0xff
 80046fe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004700:	4b80      	ldr	r3, [pc, #512]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004702:	22ff      	movs	r2, #255	@ 0xff
 8004704:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004706:	4b7f      	ldr	r3, [pc, #508]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004708:	22ff      	movs	r2, #255	@ 0xff
 800470a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800470c:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <MX_LWIP_Init+0x228>)
 800470e:	2200      	movs	r2, #0
 8004710:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004712:	4b7d      	ldr	r3, [pc, #500]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004714:	22c0      	movs	r2, #192	@ 0xc0
 8004716:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004718:	4b7b      	ldr	r3, [pc, #492]	@ (8004908 <MX_LWIP_Init+0x22c>)
 800471a:	22a8      	movs	r2, #168	@ 0xa8
 800471c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800471e:	4b7a      	ldr	r3, [pc, #488]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004720:	2201      	movs	r2, #1
 8004722:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004724:	4b78      	ldr	r3, [pc, #480]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004726:	2201      	movs	r2, #1
 8004728:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800472a:	f001 fb91 	bl	8005e50 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800472e:	4b74      	ldr	r3, [pc, #464]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	061a      	lsls	r2, r3, #24
 8004734:	4b72      	ldr	r3, [pc, #456]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	4b70      	ldr	r3, [pc, #448]	@ (8004900 <MX_LWIP_Init+0x224>)
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	4313      	orrs	r3, r2
 8004744:	4a6e      	ldr	r2, [pc, #440]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004746:	78d2      	ldrb	r2, [r2, #3]
 8004748:	4313      	orrs	r3, r2
 800474a:	061a      	lsls	r2, r3, #24
 800474c:	4b6c      	ldr	r3, [pc, #432]	@ (8004900 <MX_LWIP_Init+0x224>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	0619      	lsls	r1, r3, #24
 8004752:	4b6b      	ldr	r3, [pc, #428]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	041b      	lsls	r3, r3, #16
 8004758:	4319      	orrs	r1, r3
 800475a:	4b69      	ldr	r3, [pc, #420]	@ (8004900 <MX_LWIP_Init+0x224>)
 800475c:	789b      	ldrb	r3, [r3, #2]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	430b      	orrs	r3, r1
 8004762:	4967      	ldr	r1, [pc, #412]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004764:	78c9      	ldrb	r1, [r1, #3]
 8004766:	430b      	orrs	r3, r1
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800476e:	431a      	orrs	r2, r3
 8004770:	4b63      	ldr	r3, [pc, #396]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	0619      	lsls	r1, r3, #24
 8004776:	4b62      	ldr	r3, [pc, #392]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	4319      	orrs	r1, r3
 800477e:	4b60      	ldr	r3, [pc, #384]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004780:	789b      	ldrb	r3, [r3, #2]
 8004782:	021b      	lsls	r3, r3, #8
 8004784:	430b      	orrs	r3, r1
 8004786:	495e      	ldr	r1, [pc, #376]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004788:	78c9      	ldrb	r1, [r1, #3]
 800478a:	430b      	orrs	r3, r1
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004792:	431a      	orrs	r2, r3
 8004794:	4b5a      	ldr	r3, [pc, #360]	@ (8004900 <MX_LWIP_Init+0x224>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	0619      	lsls	r1, r3, #24
 800479a:	4b59      	ldr	r3, [pc, #356]	@ (8004900 <MX_LWIP_Init+0x224>)
 800479c:	785b      	ldrb	r3, [r3, #1]
 800479e:	041b      	lsls	r3, r3, #16
 80047a0:	4319      	orrs	r1, r3
 80047a2:	4b57      	ldr	r3, [pc, #348]	@ (8004900 <MX_LWIP_Init+0x224>)
 80047a4:	789b      	ldrb	r3, [r3, #2]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	430b      	orrs	r3, r1
 80047aa:	4955      	ldr	r1, [pc, #340]	@ (8004900 <MX_LWIP_Init+0x224>)
 80047ac:	78c9      	ldrb	r1, [r1, #3]
 80047ae:	430b      	orrs	r3, r1
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	4313      	orrs	r3, r2
 80047b4:	4a55      	ldr	r2, [pc, #340]	@ (800490c <MX_LWIP_Init+0x230>)
 80047b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80047b8:	4b52      	ldr	r3, [pc, #328]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	061a      	lsls	r2, r3, #24
 80047be:	4b51      	ldr	r3, [pc, #324]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	041b      	lsls	r3, r3, #16
 80047c4:	431a      	orrs	r2, r3
 80047c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	4313      	orrs	r3, r2
 80047ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047d0:	78d2      	ldrb	r2, [r2, #3]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	061a      	lsls	r2, r3, #24
 80047d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	0619      	lsls	r1, r3, #24
 80047dc:	4b49      	ldr	r3, [pc, #292]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047de:	785b      	ldrb	r3, [r3, #1]
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	4319      	orrs	r1, r3
 80047e4:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047e6:	789b      	ldrb	r3, [r3, #2]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	430b      	orrs	r3, r1
 80047ec:	4945      	ldr	r1, [pc, #276]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047ee:	78c9      	ldrb	r1, [r1, #3]
 80047f0:	430b      	orrs	r3, r1
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047f8:	431a      	orrs	r2, r3
 80047fa:	4b42      	ldr	r3, [pc, #264]	@ (8004904 <MX_LWIP_Init+0x228>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	0619      	lsls	r1, r3, #24
 8004800:	4b40      	ldr	r3, [pc, #256]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004802:	785b      	ldrb	r3, [r3, #1]
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	4319      	orrs	r1, r3
 8004808:	4b3e      	ldr	r3, [pc, #248]	@ (8004904 <MX_LWIP_Init+0x228>)
 800480a:	789b      	ldrb	r3, [r3, #2]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	430b      	orrs	r3, r1
 8004810:	493c      	ldr	r1, [pc, #240]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004812:	78c9      	ldrb	r1, [r1, #3]
 8004814:	430b      	orrs	r3, r1
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800481c:	431a      	orrs	r2, r3
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	0619      	lsls	r1, r3, #24
 8004824:	4b37      	ldr	r3, [pc, #220]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	4319      	orrs	r1, r3
 800482c:	4b35      	ldr	r3, [pc, #212]	@ (8004904 <MX_LWIP_Init+0x228>)
 800482e:	789b      	ldrb	r3, [r3, #2]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	430b      	orrs	r3, r1
 8004834:	4933      	ldr	r1, [pc, #204]	@ (8004904 <MX_LWIP_Init+0x228>)
 8004836:	78c9      	ldrb	r1, [r1, #3]
 8004838:	430b      	orrs	r3, r1
 800483a:	0e1b      	lsrs	r3, r3, #24
 800483c:	4313      	orrs	r3, r2
 800483e:	4a34      	ldr	r2, [pc, #208]	@ (8004910 <MX_LWIP_Init+0x234>)
 8004840:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	061a      	lsls	r2, r3, #24
 8004848:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <MX_LWIP_Init+0x22c>)
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	041b      	lsls	r3, r3, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	4b2d      	ldr	r3, [pc, #180]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004852:	789b      	ldrb	r3, [r3, #2]
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	4313      	orrs	r3, r2
 8004858:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <MX_LWIP_Init+0x22c>)
 800485a:	78d2      	ldrb	r2, [r2, #3]
 800485c:	4313      	orrs	r3, r2
 800485e:	061a      	lsls	r2, r3, #24
 8004860:	4b29      	ldr	r3, [pc, #164]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	0619      	lsls	r1, r3, #24
 8004866:	4b28      	ldr	r3, [pc, #160]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004868:	785b      	ldrb	r3, [r3, #1]
 800486a:	041b      	lsls	r3, r3, #16
 800486c:	4319      	orrs	r1, r3
 800486e:	4b26      	ldr	r3, [pc, #152]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004870:	789b      	ldrb	r3, [r3, #2]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	430b      	orrs	r3, r1
 8004876:	4924      	ldr	r1, [pc, #144]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004878:	78c9      	ldrb	r1, [r1, #3]
 800487a:	430b      	orrs	r3, r1
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004882:	431a      	orrs	r2, r3
 8004884:	4b20      	ldr	r3, [pc, #128]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	0619      	lsls	r1, r3, #24
 800488a:	4b1f      	ldr	r3, [pc, #124]	@ (8004908 <MX_LWIP_Init+0x22c>)
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	4319      	orrs	r1, r3
 8004892:	4b1d      	ldr	r3, [pc, #116]	@ (8004908 <MX_LWIP_Init+0x22c>)
 8004894:	789b      	ldrb	r3, [r3, #2]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	430b      	orrs	r3, r1
 800489a:	491b      	ldr	r1, [pc, #108]	@ (8004908 <MX_LWIP_Init+0x22c>)
 800489c:	78c9      	ldrb	r1, [r1, #3]
 800489e:	430b      	orrs	r3, r1
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80048a6:	431a      	orrs	r2, r3
 80048a8:	4b17      	ldr	r3, [pc, #92]	@ (8004908 <MX_LWIP_Init+0x22c>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	0619      	lsls	r1, r3, #24
 80048ae:	4b16      	ldr	r3, [pc, #88]	@ (8004908 <MX_LWIP_Init+0x22c>)
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	4319      	orrs	r1, r3
 80048b6:	4b14      	ldr	r3, [pc, #80]	@ (8004908 <MX_LWIP_Init+0x22c>)
 80048b8:	789b      	ldrb	r3, [r3, #2]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	430b      	orrs	r3, r1
 80048be:	4912      	ldr	r1, [pc, #72]	@ (8004908 <MX_LWIP_Init+0x22c>)
 80048c0:	78c9      	ldrb	r1, [r1, #3]
 80048c2:	430b      	orrs	r3, r1
 80048c4:	0e1b      	lsrs	r3, r3, #24
 80048c6:	4313      	orrs	r3, r2
 80048c8:	4a12      	ldr	r2, [pc, #72]	@ (8004914 <MX_LWIP_Init+0x238>)
 80048ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80048cc:	4b12      	ldr	r3, [pc, #72]	@ (8004918 <MX_LWIP_Init+0x23c>)
 80048ce:	9302      	str	r3, [sp, #8]
 80048d0:	4b12      	ldr	r3, [pc, #72]	@ (800491c <MX_LWIP_Init+0x240>)
 80048d2:	9301      	str	r3, [sp, #4]
 80048d4:	2300      	movs	r3, #0
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004914 <MX_LWIP_Init+0x238>)
 80048da:	4a0d      	ldr	r2, [pc, #52]	@ (8004910 <MX_LWIP_Init+0x234>)
 80048dc:	490b      	ldr	r1, [pc, #44]	@ (800490c <MX_LWIP_Init+0x230>)
 80048de:	4810      	ldr	r0, [pc, #64]	@ (8004920 <MX_LWIP_Init+0x244>)
 80048e0:	f001 ff9e 	bl	8006820 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80048e4:	480e      	ldr	r0, [pc, #56]	@ (8004920 <MX_LWIP_Init+0x244>)
 80048e6:	f002 f94d 	bl	8006b84 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80048ea:	480d      	ldr	r0, [pc, #52]	@ (8004920 <MX_LWIP_Init+0x244>)
 80048ec:	f002 f95a 	bl	8006ba4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80048f0:	490c      	ldr	r1, [pc, #48]	@ (8004924 <MX_LWIP_Init+0x248>)
 80048f2:	480b      	ldr	r0, [pc, #44]	@ (8004920 <MX_LWIP_Init+0x244>)
 80048f4:	f002 fa58 	bl	8006da8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200002b8 	.word	0x200002b8
 8004904:	200002bc 	.word	0x200002bc
 8004908:	200002c0 	.word	0x200002c0
 800490c:	200002ac 	.word	0x200002ac
 8004910:	200002b0 	.word	0x200002b0
 8004914:	200002b4 	.word	0x200002b4
 8004918:	08010459 	.word	0x08010459
 800491c:	08004c9d 	.word	0x08004c9d
 8004920:	20000278 	.word	0x20000278
 8004924:	08004979 	.word	0x08004979

08004928 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004930:	f7fc fb10 	bl	8000f54 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	4b08      	ldr	r3, [pc, #32]	@ (8004958 <Ethernet_Link_Periodic_Handle+0x30>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b63      	cmp	r3, #99	@ 0x63
 800493e:	d907      	bls.n	8004950 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004940:	f7fc fb08 	bl	8000f54 <HAL_GetTick>
 8004944:	4603      	mov	r3, r0
 8004946:	4a04      	ldr	r2, [pc, #16]	@ (8004958 <Ethernet_Link_Periodic_Handle+0x30>)
 8004948:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fb04 	bl	8004f58 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000274 	.word	0x20000274

0800495c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004960:	4804      	ldr	r0, [pc, #16]	@ (8004974 <MX_LWIP_Process+0x18>)
 8004962:	f000 f97b 	bl	8004c5c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004966:	f009 f98b 	bl	800dc80 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800496a:	4802      	ldr	r0, [pc, #8]	@ (8004974 <MX_LWIP_Process+0x18>)
 800496c:	f7ff ffdc 	bl	8004928 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000278 	.word	0x20000278

08004978 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <SCB_InvalidateDCache_by_Addr>:
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800499e:	2320      	movs	r3, #32
 80049a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80049a2:	f3bf 8f4f 	dsb	sy
}
 80049a6:	bf00      	nop
    while (op_size > 0) {
 80049a8:	e00b      	b.n	80049c2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80049aa:	4a0d      	ldr	r2, [pc, #52]	@ (80049e0 <SCB_InvalidateDCache_by_Addr+0x54>)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	dcf0      	bgt.n	80049aa <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80049c8:	f3bf 8f4f 	dsb	sy
}
 80049cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049ce:	f3bf 8f6f 	isb	sy
}
 80049d2:	bf00      	nop
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80049f0:	4b44      	ldr	r3, [pc, #272]	@ (8004b04 <low_level_init+0x120>)
 80049f2:	4a45      	ldr	r2, [pc, #276]	@ (8004b08 <low_level_init+0x124>)
 80049f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80049f6:	2300      	movs	r3, #0
 80049f8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80049fa:	2380      	movs	r3, #128	@ 0x80
 80049fc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80049fe:	23e1      	movs	r3, #225	@ 0xe1
 8004a00:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004a02:	2300      	movs	r3, #0
 8004a04:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004a06:	2300      	movs	r3, #0
 8004a08:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b04 <low_level_init+0x120>)
 8004a10:	f107 0308 	add.w	r3, r7, #8
 8004a14:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004a16:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <low_level_init+0x120>)
 8004a18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004a1c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004a1e:	4b39      	ldr	r3, [pc, #228]	@ (8004b04 <low_level_init+0x120>)
 8004a20:	4a3a      	ldr	r2, [pc, #232]	@ (8004b0c <low_level_init+0x128>)
 8004a22:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004a24:	4b37      	ldr	r3, [pc, #220]	@ (8004b04 <low_level_init+0x120>)
 8004a26:	4a3a      	ldr	r2, [pc, #232]	@ (8004b10 <low_level_init+0x12c>)
 8004a28:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004a2a:	4b36      	ldr	r3, [pc, #216]	@ (8004b04 <low_level_init+0x120>)
 8004a2c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004a30:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a32:	4834      	ldr	r0, [pc, #208]	@ (8004b04 <low_level_init+0x120>)
 8004a34:	f7fc fbd0 	bl	80011d8 <HAL_ETH_Init>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004a3c:	2238      	movs	r2, #56	@ 0x38
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4834      	ldr	r0, [pc, #208]	@ (8004b14 <low_level_init+0x130>)
 8004a42:	f00b ff44 	bl	80108ce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004a46:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <low_level_init+0x130>)
 8004a48:	2221      	movs	r2, #33	@ 0x21
 8004a4a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004a4c:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <low_level_init+0x130>)
 8004a4e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004a52:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004a54:	4b2f      	ldr	r3, [pc, #188]	@ (8004b14 <low_level_init+0x130>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004a5a:	482f      	ldr	r0, [pc, #188]	@ (8004b18 <low_level_init+0x134>)
 8004a5c:	f001 fda8 	bl	80065b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2206      	movs	r2, #6
 8004a64:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004a68:	4b26      	ldr	r3, [pc, #152]	@ (8004b04 <low_level_init+0x120>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	781a      	ldrb	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004a74:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <low_level_init+0x120>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	785a      	ldrb	r2, [r3, #1]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <low_level_init+0x120>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	789a      	ldrb	r2, [r3, #2]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <low_level_init+0x120>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	78da      	ldrb	r2, [r3, #3]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <low_level_init+0x120>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	791a      	ldrb	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004aa4:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <low_level_init+0x120>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	795a      	ldrb	r2, [r3, #5]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004ab6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004abe:	f043 030a 	orr.w	r3, r3, #10
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004aca:	4914      	ldr	r1, [pc, #80]	@ (8004b1c <low_level_init+0x138>)
 8004acc:	4814      	ldr	r0, [pc, #80]	@ (8004b20 <low_level_init+0x13c>)
 8004ace:	f7fc f8ea 	bl	8000ca6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004ad2:	4813      	ldr	r0, [pc, #76]	@ (8004b20 <low_level_init+0x13c>)
 8004ad4:	f7fc f919 	bl	8000d0a <LAN8742_Init>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f002 f932 	bl	8006d48 <netif_set_link_down>
    netif_set_down(netif);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f002 f8c9 	bl	8006c7c <netif_set_down>
 8004aea:	e008      	b.n	8004afe <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fa30 	bl	8004f58 <ethernet_link_check_state>
 8004af8:	e001      	b.n	8004afe <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8004afa:	f7fb fed9 	bl	80008b0 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20004c50 	.word	0x20004c50
 8004b08:	40028000 	.word	0x40028000
 8004b0c:	20000128 	.word	0x20000128
 8004b10:	20000088 	.word	0x20000088
 8004b14:	20004d00 	.word	0x20004d00
 8004b18:	08014284 	.word	0x08014284
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	20004d38 	.word	0x20004d38

08004b24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b092      	sub	sp, #72	@ 0x48
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	2230      	movs	r2, #48	@ 0x30
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f00b fec2 	bl	80108ce <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004b4a:	f107 030c 	add.w	r3, r7, #12
 8004b4e:	2230      	movs	r2, #48	@ 0x30
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00b febb 	bl	80108ce <memset>

  for(q = p; q != NULL; q = q->next)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b5c:	e045      	b.n	8004bea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d902      	bls.n	8004b6a <low_level_output+0x46>
      return ERR_IF;
 8004b64:	f06f 030b 	mvn.w	r3, #11
 8004b68:	e055      	b.n	8004c16 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004b6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6c:	6859      	ldr	r1, [r3, #4]
 8004b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3348      	adds	r3, #72	@ 0x48
 8004b7a:	443b      	add	r3, r7
 8004b7c:	3b3c      	subs	r3, #60	@ 0x3c
 8004b7e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b82:	895b      	ldrh	r3, [r3, #10]
 8004b84:	4619      	mov	r1, r3
 8004b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3348      	adds	r3, #72	@ 0x48
 8004b92:	443b      	add	r3, r7
 8004b94:	3b38      	subs	r3, #56	@ 0x38
 8004b96:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d011      	beq.n	8004bc2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba0:	1e5a      	subs	r2, r3, #1
 8004ba2:	f107 000c 	add.w	r0, r7, #12
 8004ba6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004ba8:	460b      	mov	r3, r1
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	440b      	add	r3, r1
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	18c1      	adds	r1, r0, r3
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	3348      	adds	r3, #72	@ 0x48
 8004bbc:	443b      	add	r3, r7
 8004bbe:	3b34      	subs	r3, #52	@ 0x34
 8004bc0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bcc:	4613      	mov	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3348      	adds	r3, #72	@ 0x48
 8004bd6:	443b      	add	r3, r7
 8004bd8:	3b34      	subs	r3, #52	@ 0x34
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be0:	3301      	adds	r3, #1
 8004be2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1b6      	bne.n	8004b5e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	891b      	ldrh	r3, [r3, #8]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <low_level_output+0xfc>)
 8004bf8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004bfa:	4a09      	ldr	r2, [pc, #36]	@ (8004c20 <low_level_output+0xfc>)
 8004bfc:	f107 030c 	add.w	r3, r7, #12
 8004c00:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004c02:	4a07      	ldr	r2, [pc, #28]	@ (8004c20 <low_level_output+0xfc>)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004c08:	2214      	movs	r2, #20
 8004c0a:	4905      	ldr	r1, [pc, #20]	@ (8004c20 <low_level_output+0xfc>)
 8004c0c:	4805      	ldr	r0, [pc, #20]	@ (8004c24 <low_level_output+0x100>)
 8004c0e:	f7fc fc6d 	bl	80014ec <HAL_ETH_Transmit>

  return errval;
 8004c12:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3748      	adds	r7, #72	@ 0x48
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20004d00 	.word	0x20004d00
 8004c24:	20004c50 	.word	0x20004c50

08004c28 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004c34:	4b07      	ldr	r3, [pc, #28]	@ (8004c54 <low_level_input+0x2c>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	4619      	mov	r1, r3
 8004c42:	4805      	ldr	r0, [pc, #20]	@ (8004c58 <low_level_input+0x30>)
 8004c44:	f7fc fce6 	bl	8001614 <HAL_ETH_ReadData>
  }

  return p;
 8004c48:	68fb      	ldr	r3, [r7, #12]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20004c4c 	.word	0x20004c4c
 8004c58:	20004c50 	.word	0x20004c50

08004c5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ffdd 	bl	8004c28 <low_level_input>
 8004c6e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	4798      	blx	r3
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f002 fc0e 	bl	80074a8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1ea      	bne.n	8004c68 <ethernetif_input+0xc>
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <ethernetif_init+0x1c>
 8004caa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce4 <ethernetif_init+0x48>)
 8004cac:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004cb0:	490d      	ldr	r1, [pc, #52]	@ (8004ce8 <ethernetif_init+0x4c>)
 8004cb2:	480e      	ldr	r0, [pc, #56]	@ (8004cec <ethernetif_init+0x50>)
 8004cb4:	f00b fda6 	bl	8010804 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2273      	movs	r2, #115	@ 0x73
 8004cbc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2274      	movs	r2, #116	@ 0x74
 8004cc4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <ethernetif_init+0x54>)
 8004ccc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a08      	ldr	r2, [pc, #32]	@ (8004cf4 <ethernetif_init+0x58>)
 8004cd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff fe85 	bl	80049e4 <low_level_init>

  return ERR_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	0801166c 	.word	0x0801166c
 8004ce8:	08011688 	.word	0x08011688
 8004cec:	08011698 	.word	0x08011698
 8004cf0:	0800e911 	.word	0x0800e911
 8004cf4:	08004b25 	.word	0x08004b25

08004cf8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004d04:	68f9      	ldr	r1, [r7, #12]
 8004d06:	4807      	ldr	r0, [pc, #28]	@ (8004d24 <pbuf_free_custom+0x2c>)
 8004d08:	f001 fd34 	bl	8006774 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004d0c:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <pbuf_free_custom+0x30>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <pbuf_free_custom+0x30>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
  }
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	08014284 	.word	0x08014284
 8004d28:	20004c4c 	.word	0x20004c4c

08004d2c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d30:	f7fc f910 	bl	8000f54 <HAL_GetTick>
 8004d34:	4603      	mov	r3, r0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	@ 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a52      	ldr	r2, [pc, #328]	@ (8004ea4 <HAL_ETH_MspInit+0x168>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	f040 809e 	bne.w	8004e9c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d60:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d64:	4a50      	ldr	r2, [pc, #320]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d82:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d84:	4b48      	ldr	r3, [pc, #288]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4b45      	ldr	r3, [pc, #276]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	4a44      	ldr	r2, [pc, #272]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d9c:	4b42      	ldr	r3, [pc, #264]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004da8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dac:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004db4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	4a38      	ldr	r2, [pc, #224]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd8:	4b33      	ldr	r3, [pc, #204]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ddc:	4a32      	ldr	r2, [pc, #200]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dde:	f043 0302 	orr.w	r3, r3, #2
 8004de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004de4:	4b30      	ldr	r3, [pc, #192]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004df0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_ETH_MspInit+0x16c>)
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004e08:	2332      	movs	r3, #50	@ 0x32
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e14:	2303      	movs	r3, #3
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e18:	230b      	movs	r3, #11
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e20:	4619      	mov	r1, r3
 8004e22:	4822      	ldr	r0, [pc, #136]	@ (8004eac <HAL_ETH_MspInit+0x170>)
 8004e24:	f7fd fc26 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004e28:	2386      	movs	r3, #134	@ 0x86
 8004e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e34:	2303      	movs	r3, #3
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e38:	230b      	movs	r3, #11
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e40:	4619      	mov	r1, r3
 8004e42:	481b      	ldr	r0, [pc, #108]	@ (8004eb0 <HAL_ETH_MspInit+0x174>)
 8004e44:	f7fd fc16 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4e:	2302      	movs	r3, #2
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e56:	2303      	movs	r3, #3
 8004e58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e5a:	230b      	movs	r3, #11
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e62:	4619      	mov	r1, r3
 8004e64:	4813      	ldr	r0, [pc, #76]	@ (8004eb4 <HAL_ETH_MspInit+0x178>)
 8004e66:	f7fd fc05 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004e6a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e7c:	230b      	movs	r3, #11
 8004e7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e84:	4619      	mov	r1, r3
 8004e86:	480c      	ldr	r0, [pc, #48]	@ (8004eb8 <HAL_ETH_MspInit+0x17c>)
 8004e88:	f7fd fbf4 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	203d      	movs	r0, #61	@ 0x3d
 8004e92:	f7fc f96a 	bl	800116a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004e96:	203d      	movs	r0, #61	@ 0x3d
 8004e98:	f7fc f983 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e9c:	bf00      	nop
 8004e9e:	3738      	adds	r7, #56	@ 0x38
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40028000 	.word	0x40028000
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	40020800 	.word	0x40020800
 8004eb0:	40020000 	.word	0x40020000
 8004eb4:	40020400 	.word	0x40020400
 8004eb8:	40021800 	.word	0x40021800

08004ebc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004ec0:	4802      	ldr	r0, [pc, #8]	@ (8004ecc <ETH_PHY_IO_Init+0x10>)
 8004ec2:	f7fc ff75 	bl	8001db0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20004c50 	.word	0x20004c50

08004ed0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return 0;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	4807      	ldr	r0, [pc, #28]	@ (8004f10 <ETH_PHY_IO_ReadReg+0x30>)
 8004ef4:	f7fc fdb6 	bl	8001a64 <HAL_ETH_ReadPHYRegister>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e000      	b.n	8004f06 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20004c50 	.word	0x20004c50

08004f14 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	68f9      	ldr	r1, [r7, #12]
 8004f26:	4807      	ldr	r0, [pc, #28]	@ (8004f44 <ETH_PHY_IO_WriteReg+0x30>)
 8004f28:	f7fc fde7 	bl	8001afa <HAL_ETH_WritePHYRegister>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	e000      	b.n	8004f3a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20004c50 	.word	0x20004c50

08004f48 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f4c:	f7fc f802 	bl	8000f54 <HAL_GetTick>
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b0a0      	sub	sp, #128	@ 0x80
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004f60:	f107 030c 	add.w	r3, r7, #12
 8004f64:	2264      	movs	r2, #100	@ 0x64
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f00b fcb0 	bl	80108ce <memset>
  int32_t PHYLinkState = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004f76:	2300      	movs	r3, #0
 8004f78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004f7e:	483a      	ldr	r0, [pc, #232]	@ (8005068 <ethernet_link_check_state+0x110>)
 8004f80:	f7fb ff10 	bl	8000da4 <LAN8742_GetLinkState>
 8004f84:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <ethernet_link_check_state+0x5a>
 8004f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	dc09      	bgt.n	8004fb2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8004f9e:	4833      	ldr	r0, [pc, #204]	@ (800506c <ethernet_link_check_state+0x114>)
 8004fa0:	f7fc fa24 	bl	80013ec <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 fe69 	bl	8006c7c <netif_set_down>
    netif_set_link_down(netif);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 fecc 	bl	8006d48 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004fb0:	e055      	b.n	800505e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d14e      	bne.n	800505e <ethernet_link_check_state+0x106>
 8004fc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	dd4b      	ble.n	800505e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004fc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fc8:	3b02      	subs	r3, #2
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d82a      	bhi.n	8005024 <ethernet_link_check_state+0xcc>
 8004fce:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd4 <ethernet_link_check_state+0x7c>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004ff7 	.word	0x08004ff7
 8004fdc:	08005007 	.word	0x08005007
 8004fe0:	08005017 	.word	0x08005017
      duplex = ETH_FULLDUPLEX_MODE;
 8004fe4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004fe8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004fea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fee:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8004ff4:	e017      	b.n	8005026 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004ffa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005000:	2301      	movs	r3, #1
 8005002:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005004:	e00f      	b.n	8005026 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005006:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800500a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800500c:	2300      	movs	r3, #0
 800500e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005010:	2301      	movs	r3, #1
 8005012:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005014:	e007      	b.n	8005026 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005016:	2300      	movs	r3, #0
 8005018:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800501a:	2300      	movs	r3, #0
 800501c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800501e:	2301      	movs	r3, #1
 8005020:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005022:	e000      	b.n	8005026 <ethernet_link_check_state+0xce>
      break;
 8005024:	bf00      	nop
    if(linkchanged)
 8005026:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d018      	beq.n	800505e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	4619      	mov	r1, r3
 8005032:	480e      	ldr	r0, [pc, #56]	@ (800506c <ethernet_link_check_state+0x114>)
 8005034:	f7fc fdaa 	bl	8001b8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800503c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800503e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	4619      	mov	r1, r3
 8005046:	4809      	ldr	r0, [pc, #36]	@ (800506c <ethernet_link_check_state+0x114>)
 8005048:	f7fc fe97 	bl	8001d7a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800504c:	4807      	ldr	r0, [pc, #28]	@ (800506c <ethernet_link_check_state+0x114>)
 800504e:	f7fc f95d 	bl	800130c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f001 fda6 	bl	8006ba4 <netif_set_up>
      netif_set_link_up(netif);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f001 fe41 	bl	8006ce0 <netif_set_link_up>
}
 800505e:	bf00      	nop
 8005060:	3780      	adds	r7, #128	@ 0x80
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20004d38 	.word	0x20004d38
 800506c:	20004c50 	.word	0x20004c50

08005070 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005078:	4812      	ldr	r0, [pc, #72]	@ (80050c4 <HAL_ETH_RxAllocateCallback+0x54>)
 800507a:	f001 fb0d 	bl	8006698 <memp_malloc_pool>
 800507e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d014      	beq.n	80050b0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f103 0220 	add.w	r2, r3, #32
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a0d      	ldr	r2, [pc, #52]	@ (80050c8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005094:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800509e:	9201      	str	r2, [sp, #4]
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2241      	movs	r2, #65	@ 0x41
 80050a6:	2100      	movs	r1, #0
 80050a8:	2000      	movs	r0, #0
 80050aa:	f002 f843 	bl	8007134 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80050ae:	e005      	b.n	80050bc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80050b0:	4b06      	ldr	r3, [pc, #24]	@ (80050cc <HAL_ETH_RxAllocateCallback+0x5c>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	08014284 	.word	0x08014284
 80050c8:	08004cf9 	.word	0x08004cf9
 80050cc:	20004c4c 	.word	0x20004c4c

080050d0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
 80050dc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3b20      	subs	r3, #32
 80050ee:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2200      	movs	r2, #0
 80050fa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	887a      	ldrh	r2, [r7, #2]
 8005100:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d103      	bne.n	8005112 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e003      	b.n	800511a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e009      	b.n	800513c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	891a      	ldrh	r2, [r3, #8]
 800512c:	887b      	ldrh	r3, [r7, #2]
 800512e:	4413      	add	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f2      	bne.n	8005128 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005142:	887b      	ldrh	r3, [r7, #2]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fc20 	bl	800498c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800514c:	bf00      	nop
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <fs_open+0x16>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <fs_open+0x1c>
    return ERR_ARG;
 800516a:	f06f 030f 	mvn.w	r3, #15
 800516e:	e028      	b.n	80051c2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005170:	4b16      	ldr	r3, [pc, #88]	@ (80051cc <fs_open+0x78>)
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e020      	b.n	80051b8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4619      	mov	r1, r3
 800517c:	6838      	ldr	r0, [r7, #0]
 800517e:	f7fb f85f 	bl	8000240 <strcmp>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d114      	bne.n	80051b2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	7c1a      	ldrb	r2, [r3, #16]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e007      	b.n	80051c2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1db      	bne.n	8005176 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80051be:	f06f 0305 	mvn.w	r3, #5
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08015058 	.word	0x08015058

080051d0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b082      	sub	sp, #8
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800520a:	222c      	movs	r2, #44	@ 0x2c
 800520c:	2100      	movs	r1, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f00b fb5d 	bl	80108ce <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005214:	bf00      	nop
 8005216:	3708      	adds	r7, #8
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005222:	202c      	movs	r0, #44	@ 0x2c
 8005224:	f001 f8ca 	bl	80063bc <mem_malloc>
 8005228:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <http_state_alloc+0x1a>
    http_state_init(ret);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ffe6 	bl	8005202 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005236:	687b      	ldr	r3, [r7, #4]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ffbb 	bl	80051d0 <fs_close>
    hs->handle = NULL;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d007      	beq.n	8005278 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	4618      	mov	r0, r3
 800526e:	f002 f91b 	bl	80074a8 <pbuf_free>
    hs->req = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <http_state_free+0x1a>
    http_state_eof(hs);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff ffd6 	bl	8005240 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 ff2b 	bl	80060f0 <mem_free>
  }
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <http_write+0x22>
 80052b8:	4b2c      	ldr	r3, [pc, #176]	@ (800536c <http_write+0xc8>)
 80052ba:	f240 2219 	movw	r2, #537	@ 0x219
 80052be:	492c      	ldr	r1, [pc, #176]	@ (8005370 <http_write+0xcc>)
 80052c0:	482c      	ldr	r0, [pc, #176]	@ (8005374 <http_write+0xd0>)
 80052c2:	f00b fa9f 	bl	8010804 <iprintf>
  len = *length;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80052cc:	8afb      	ldrh	r3, [r7, #22]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <http_write+0x32>
    return ERR_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	e045      	b.n	8005362 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80052dc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80052de:	8aba      	ldrh	r2, [r7, #20]
 80052e0:	8afb      	ldrh	r3, [r7, #22]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d201      	bcs.n	80052ea <http_write+0x46>
    len = max_len;
 80052e6:	8abb      	ldrh	r3, [r7, #20]
 80052e8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80052f2:	8afa      	ldrh	r2, [r7, #22]
 80052f4:	8abb      	ldrh	r3, [r7, #20]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d901      	bls.n	80052fe <http_write+0x5a>
    len = max_len;
 80052fa:	8abb      	ldrh	r3, [r7, #20]
 80052fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	8afa      	ldrh	r2, [r7, #22]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f006 fe53 	bl	800bfb0 <tcp_write>
 800530a:	4603      	mov	r3, r0
 800530c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800530e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d10f      	bne.n	8005338 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005328:	2b08      	cmp	r3, #8
 800532a:	d902      	bls.n	8005332 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800532c:	2301      	movs	r3, #1
 800532e:	82fb      	strh	r3, [r7, #22]
 8005330:	e002      	b.n	8005338 <http_write+0x94>
      } else {
        len /= 2;
 8005332:	8afb      	ldrh	r3, [r7, #22]
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005338:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d102      	bne.n	8005348 <http_write+0xa4>
 8005342:	8afb      	ldrh	r3, [r7, #22]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d8da      	bhi.n	80052fe <http_write+0x5a>

  if (err == ERR_OK) {
 8005348:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d103      	bne.n	8005358 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8afa      	ldrh	r2, [r7, #22]
 8005354:	801a      	strh	r2, [r3, #0]
 8005356:	e002      	b.n	800535e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800535e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08011700 	.word	0x08011700
 8005370:	08011738 	.word	0x08011738
 8005374:	08011748 	.word	0x08011748

08005378 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	4613      	mov	r3, r2
 8005384:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005386:	2100      	movs	r1, #0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f003 fed5 	bl	8009138 <tcp_arg>
  altcp_recv(pcb, NULL);
 800538e:	2100      	movs	r1, #0
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f003 fee3 	bl	800915c <tcp_recv>
  altcp_err(pcb, NULL);
 8005396:	2100      	movs	r1, #0
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f003 ff23 	bl	80091e4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800539e:	2200      	movs	r2, #0
 80053a0:	2100      	movs	r1, #0
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f003 ff58 	bl	8009258 <tcp_poll>
  altcp_sent(pcb, NULL);
 80053a8:	2100      	movs	r1, #0
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f003 fef8 	bl	80091a0 <tcp_sent>
  if (hs != NULL) {
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80053b6:	68b8      	ldr	r0, [r7, #8]
 80053b8:	f7ff ff62 	bl	8005280 <http_state_free>
  }

  if (abort_conn) {
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f002 fdf8 	bl	8007fb8 <tcp_abort>
    return ERR_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e00f      	b.n	80053ec <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f002 fd09 	bl	8007de4 <tcp_close>
 80053d2:	4603      	mov	r3, r0
 80053d4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80053d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80053de:	2204      	movs	r2, #4
 80053e0:	4904      	ldr	r1, [pc, #16]	@ (80053f4 <http_close_or_abort_conn+0x7c>)
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f003 ff38 	bl	8009258 <tcp_poll>
  }
  return err;
 80053e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	08005abb 	.word	0x08005abb

080053f8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005402:	2200      	movs	r2, #0
 8005404:	6839      	ldr	r1, [r7, #0]
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff ffb6 	bl	8005378 <http_close_or_abort_conn>
 800540c:	4603      	mov	r3, r0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff ffe8 	bl	80053f8 <http_close_conn>
  }
}
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ffe6 	bl	8005416 <http_eof>
    return 0;
 800544a:	2300      	movs	r3, #0
 800544c:	e016      	b.n	800547c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fec6 	bl	80051e4 <fs_bytes_left>
 8005458:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dc05      	bgt.n	800546c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7ff ffd7 	bl	8005416 <http_eof>
    return 0;
 8005468:	2300      	movs	r3, #0
 800546a:	e007      	b.n	800547c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <http_check_eof+0x54>)
 800546e:	f240 429d 	movw	r2, #1181	@ 0x49d
 8005472:	4905      	ldr	r1, [pc, #20]	@ (8005488 <http_check_eof+0x58>)
 8005474:	4805      	ldr	r0, [pc, #20]	@ (800548c <http_check_eof+0x5c>)
 8005476:	f00b f9c5 	bl	8010804 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800547a:	2301      	movs	r3, #1
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	08011700 	.word	0x08011700
 8005488:	08011770 	.word	0x08011770
 800548c:	08011748 	.word	0x08011748

08005490 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d803      	bhi.n	80054b2 <http_send_data_nonssi+0x22>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	e001      	b.n	80054b6 <http_send_data_nonssi+0x26>
 80054b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054b6:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6999      	ldr	r1, [r3, #24]
 80054bc:	f107 020c 	add.w	r2, r7, #12
 80054c0:	2300      	movs	r3, #0
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7ff feee 	bl	80052a4 <http_write>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80054cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	89ba      	ldrh	r2, [r7, #12]
 80054de:	441a      	add	r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	89ba      	ldrh	r2, [r7, #12]
 80054ea:	1a9a      	subs	r2, r3, r2
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <http_send+0x18>
    return 0;
 800550e:	2300      	movs	r3, #0
 8005510:	e025      	b.n	800555e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7ff ff87 	bl	8005430 <http_check_eof>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <http_send+0x32>
      return 0;
 8005528:	2300      	movs	r3, #0
 800552a:	e018      	b.n	800555e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800552c:	6839      	ldr	r1, [r7, #0]
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff ffae 	bl	8005490 <http_send_data_nonssi>
 8005534:	4603      	mov	r3, r0
 8005536:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10d      	bne.n	800555c <http_send+0x62>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fe4d 	bl	80051e4 <fs_bytes_left>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	dc05      	bgt.n	800555c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005550:	6839      	ldr	r1, [r7, #0]
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff ff5f 	bl	8005416 <http_eof>
    return 0;
 8005558:	2300      	movs	r3, #0
 800555a:	e000      	b.n	800555e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	4a1c      	ldr	r2, [pc, #112]	@ (80055e8 <http_get_404_file+0x80>)
 8005576:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f7ff fde7 	bl	8005154 <fs_open>
 8005586:	4603      	mov	r3, r0
 8005588:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800558a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d024      	beq.n	80055dc <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <http_get_404_file+0x84>)
 8005596:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f7ff fdd7 	bl	8005154 <fs_open>
 80055a6:	4603      	mov	r3, r0
 80055a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80055aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d014      	beq.n	80055dc <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	4a0e      	ldr	r2, [pc, #56]	@ (80055f0 <http_get_404_file+0x88>)
 80055b6:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4619      	mov	r1, r3
 80055c0:	4610      	mov	r0, r2
 80055c2:	f7ff fdc7 	bl	8005154 <fs_open>
 80055c6:	4603      	mov	r3, r0
 80055c8:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
        return NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	080117a8 	.word	0x080117a8
 80055ec:	080117b4 	.word	0x080117b4
 80055f0:	080117c0 	.word	0x080117c0

080055f4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	@ 0x38
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <http_parse_request+0x24>
 800560a:	4b65      	ldr	r3, [pc, #404]	@ (80057a0 <http_parse_request+0x1ac>)
 800560c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8005610:	4964      	ldr	r1, [pc, #400]	@ (80057a4 <http_parse_request+0x1b0>)
 8005612:	4865      	ldr	r0, [pc, #404]	@ (80057a8 <http_parse_request+0x1b4>)
 8005614:	f00b f8f6 	bl	8010804 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <http_parse_request+0x38>
 800561e:	4b60      	ldr	r3, [pc, #384]	@ (80057a0 <http_parse_request+0x1ac>)
 8005620:	f240 72af 	movw	r2, #1967	@ 0x7af
 8005624:	4961      	ldr	r1, [pc, #388]	@ (80057ac <http_parse_request+0x1b8>)
 8005626:	4860      	ldr	r0, [pc, #384]	@ (80057a8 <http_parse_request+0x1b4>)
 8005628:	f00b f8ec 	bl	8010804 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d103      	bne.n	800563c <http_parse_request+0x48>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800563c:	f06f 0307 	mvn.w	r3, #7
 8005640:	e0a9      	b.n	8005796 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564e:	621a      	str	r2, [r3, #32]
 8005650:	e005      	b.n	800565e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005658:	4618      	mov	r0, r3
 800565a:	f001 ffe7 	bl	800762c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800565e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005660:	f001 ffc2 	bl	80075e8 <pbuf_ref>

  if (hs->req->next != NULL) {
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	891b      	ldrh	r3, [r3, #8]
 8005674:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005678:	4293      	cmp	r3, r2
 800567a:	bf28      	it	cs
 800567c:	4613      	movcs	r3, r2
 800567e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6a18      	ldr	r0, [r3, #32]
 8005684:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8005686:	2300      	movs	r3, #0
 8005688:	4949      	ldr	r1, [pc, #292]	@ (80057b0 <http_parse_request+0x1bc>)
 800568a:	f002 f8f7 	bl	800787c <pbuf_copy_partial>
    data = httpd_req_buf;
 800568e:	4b48      	ldr	r3, [pc, #288]	@ (80057b0 <http_parse_request+0x1bc>)
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
 8005692:	e005      	b.n	80056a0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	895b      	ldrh	r3, [r3, #10]
 800569e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80056a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80056a2:	2b06      	cmp	r3, #6
 80056a4:	d962      	bls.n	800576c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80056a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80056a8:	461a      	mov	r2, r3
 80056aa:	4942      	ldr	r1, [pc, #264]	@ (80057b4 <http_parse_request+0x1c0>)
 80056ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056ae:	f000 fb99 	bl	8005de4 <lwip_strnstr>
 80056b2:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d058      	beq.n	800576c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80056be:	2204      	movs	r2, #4
 80056c0:	493d      	ldr	r1, [pc, #244]	@ (80057b8 <http_parse_request+0x1c4>)
 80056c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80056c4:	f00b f918 	bl	80108f8 <strncmp>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d116      	bne.n	80056fc <http_parse_request+0x108>
        sp1 = data + 3;
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	3303      	adds	r3, #3
 80056d2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	3301      	adds	r3, #1
 80056e8:	8b7a      	ldrh	r2, [r7, #26]
 80056ea:	4934      	ldr	r1, [pc, #208]	@ (80057bc <http_parse_request+0x1c8>)
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fb79 	bl	8005de4 <lwip_strnstr>
 80056f2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d111      	bne.n	800571e <http_parse_request+0x12a>
 80056fa:	e006      	b.n	800570a <http_parse_request+0x116>
        data[4] = 0;
 80056fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fe:	3304      	adds	r3, #4
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005704:	f06f 030f 	mvn.w	r3, #15
 8005708:	e045      	b.n	8005796 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	8b7a      	ldrh	r2, [r7, #26]
 8005710:	4928      	ldr	r1, [pc, #160]	@ (80057b4 <http_parse_request+0x1c0>)
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fb66 	bl	8005de4 <lwip_strnstr>
 8005718:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800571a:	2301      	movs	r3, #1
 800571c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	3301      	adds	r3, #1
 8005722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01e      	beq.n	800576c <http_parse_request+0x178>
 800572e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	429a      	cmp	r2, r3
 8005734:	d91a      	bls.n	800576c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005736:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005738:	461a      	mov	r2, r3
 800573a:	4921      	ldr	r1, [pc, #132]	@ (80057c0 <http_parse_request+0x1cc>)
 800573c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800573e:	f000 fb51 	bl	8005de4 <lwip_strnstr>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8005754:	8b3b      	ldrh	r3, [r7, #24]
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4413      	add	r3, r2
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800575e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	68b8      	ldr	r0, [r7, #8]
 8005764:	f000 f82e 	bl	80057c4 <http_find_file>
 8005768:	4603      	mov	r3, r0
 800576a:	e014      	b.n	8005796 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 ff21 	bl	80075b8 <pbuf_clen>
 8005776:	4603      	mov	r3, r0
 8005778:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	891b      	ldrh	r3, [r3, #8]
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005784:	d205      	bcs.n	8005792 <http_parse_request+0x19e>
 8005786:	8a7b      	ldrh	r3, [r7, #18]
 8005788:	2b05      	cmp	r3, #5
 800578a:	d802      	bhi.n	8005792 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800578c:	f06f 0304 	mvn.w	r3, #4
 8005790:	e001      	b.n	8005796 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005792:	f06f 030f 	mvn.w	r3, #15
  }
}
 8005796:	4618      	mov	r0, r3
 8005798:	3738      	adds	r7, #56	@ 0x38
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	08011700 	.word	0x08011700
 80057a4:	080117cc 	.word	0x080117cc
 80057a8:	08011748 	.word	0x08011748
 80057ac:	080117d8 	.word	0x080117d8
 80057b0:	20004d58 	.word	0x20004d58
 80057b4:	080117e4 	.word	0x080117e4
 80057b8:	080117e8 	.word	0x080117e8
 80057bc:	080117f0 	.word	0x080117f0
 80057c0:	080117f4 	.word	0x080117f4

080057c4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b092      	sub	sp, #72	@ 0x48
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80057d4:	2300      	movs	r3, #0
 80057d6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fa fd37 	bl	8000254 <strlen>
 80057e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d06b      	beq.n	80058c6 <http_find_file+0x102>
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	3b01      	subs	r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80057fa:	d164      	bne.n	80058c6 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80057fc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80057fe:	4a53      	ldr	r2, [pc, #332]	@ (800594c <http_find_file+0x188>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d102      	bne.n	800580a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005806:	2b01      	cmp	r3, #1
 8005808:	d15d      	bne.n	80058c6 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	3b01      	subs	r3, #1
 800580e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005810:	bf28      	it	cs
 8005812:	233f      	movcs	r3, #63	@ 0x3f
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005820:	4619      	mov	r1, r3
 8005822:	484a      	ldr	r0, [pc, #296]	@ (800594c <http_find_file+0x188>)
 8005824:	f00b f8e7 	bl	80109f6 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005828:	4a48      	ldr	r2, [pc, #288]	@ (800594c <http_find_file+0x188>)
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	4413      	add	r3, r2
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005832:	2300      	movs	r3, #0
 8005834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005836:	e043      	b.n	80058c0 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	d028      	beq.n	8005890 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8005844:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01e      	beq.n	800588a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800584c:	4a40      	ldr	r2, [pc, #256]	@ (8005950 <http_find_file+0x18c>)
 800584e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fa fcfd 	bl	8000254 <strlen>
 800585a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	4293      	cmp	r3, r2
 8005862:	bf28      	it	cs
 8005864:	4613      	movcs	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	4a38      	ldr	r2, [pc, #224]	@ (800594c <http_find_file+0x188>)
 800586c:	1898      	adds	r0, r3, r2
 800586e:	4a38      	ldr	r2, [pc, #224]	@ (8005950 <http_find_file+0x18c>)
 8005870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005872:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	4619      	mov	r1, r3
 800587a:	f00b f8bc 	bl	80109f6 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800587e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	4413      	add	r3, r2
 8005884:	4a31      	ldr	r2, [pc, #196]	@ (800594c <http_find_file+0x188>)
 8005886:	2100      	movs	r1, #0
 8005888:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800588a:	4b30      	ldr	r3, [pc, #192]	@ (800594c <http_find_file+0x188>)
 800588c:	633b      	str	r3, [r7, #48]	@ 0x30
 800588e:	e004      	b.n	800589a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005890:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <http_find_file+0x18c>)
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff fc58 	bl	8005154 <fs_open>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 80058a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <http_find_file+0xf6>
        uri = file_name;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80058b8:	e005      	b.n	80058c6 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80058ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058bc:	3301      	adds	r3, #1
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d9b8      	bls.n	8005838 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d124      	bne.n	8005916 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	213f      	movs	r1, #63	@ 0x3f
 80058d0:	4618      	mov	r0, r3
 80058d2:	f00b f804 	bl	80108de <strchr>
 80058d6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d005      	beq.n	80058ea <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80058de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]
      params++;
 80058e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e6:	3301      	adds	r3, #1
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7ff fc2f 	bl	8005154 <fs_open>
 80058f6:	4603      	mov	r3, r0
 80058f8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80058fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d102      	bne.n	8005908 <http_find_file+0x144>
      file = &hs->file_handle;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005906:	e006      	b.n	8005916 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8005908:	f107 0308 	add.w	r3, r7, #8
 800590c:	4619      	mov	r1, r3
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff fe2a 	bl	8005568 <http_get_404_file>
 8005914:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2b00      	cmp	r3, #0
 800591a:	d106      	bne.n	800592a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800591c:	f107 0308 	add.w	r3, r7, #8
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff fe20 	bl	8005568 <http_get_404_file>
 8005928:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f809 	bl	8005954 <http_init_file>
 8005942:	4603      	mov	r3, r0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3740      	adds	r7, #64	@ 0x40
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20005158 	.word	0x20005158
 8005950:	0801506c 	.word	0x0801506c

08005954 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d05c      	beq.n	8005a22 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <http_init_file+0x2a>
 8005970:	4b35      	ldr	r3, [pc, #212]	@ (8005a48 <http_init_file+0xf4>)
 8005972:	f640 120b 	movw	r2, #2315	@ 0x90b
 8005976:	4935      	ldr	r1, [pc, #212]	@ (8005a4c <http_init_file+0xf8>)
 8005978:	4835      	ldr	r0, [pc, #212]	@ (8005a50 <http_init_file+0xfc>)
 800597a:	f00a ff43 	bl	8010804 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	da06      	bge.n	80059a2 <http_init_file+0x4e>
 8005994:	4b2c      	ldr	r3, [pc, #176]	@ (8005a48 <http_init_file+0xf4>)
 8005996:	f640 1234 	movw	r2, #2356	@ 0x934
 800599a:	492e      	ldr	r1, [pc, #184]	@ (8005a54 <http_init_file+0x100>)
 800599c:	482c      	ldr	r0, [pc, #176]	@ (8005a50 <http_init_file+0xfc>)
 800599e:	f00a ff31 	bl	8010804 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	7c1b      	ldrb	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <http_init_file+0x7c>
 80059c2:	4b21      	ldr	r3, [pc, #132]	@ (8005a48 <http_init_file+0xf4>)
 80059c4:	f640 1243 	movw	r2, #2371	@ 0x943
 80059c8:	4923      	ldr	r1, [pc, #140]	@ (8005a58 <http_init_file+0x104>)
 80059ca:	4821      	ldr	r0, [pc, #132]	@ (8005a50 <http_init_file+0xfc>)
 80059cc:	f00a ff1a 	bl	8010804 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d032      	beq.n	8005a3c <http_init_file+0xe8>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	7c1b      	ldrb	r3, [r3, #16]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d02b      	beq.n	8005a3c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6998      	ldr	r0, [r3, #24]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	461a      	mov	r2, r3
 80059ee:	491b      	ldr	r1, [pc, #108]	@ (8005a5c <http_init_file+0x108>)
 80059f0:	f000 f9f8 	bl	8005de4 <lwip_strnstr>
 80059f4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1d1a      	adds	r2, r3, #4
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a20:	e00c      	b.n	8005a3c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	08011700 	.word	0x08011700
 8005a4c:	080117fc 	.word	0x080117fc
 8005a50:	08011748 	.word	0x08011748
 8005a54:	08011810 	.word	0x08011810
 8005a58:	08011830 	.word	0x08011830
 8005a5c:	080117f4 	.word	0x080117f4

08005a60 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <http_err+0x1c>
    http_state_free(hs);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f7ff fc02 	bl	8005280 <http_state_free>
  }
}
 8005a7c:	bf00      	nop
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b086      	sub	sp, #24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <http_sent+0x1c>
    return ERR_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e008      	b.n	8005ab2 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8005aa8:	6979      	ldr	r1, [r7, #20]
 8005aaa:	68b8      	ldr	r0, [r7, #8]
 8005aac:	f7ff fd25 	bl	80054fa <http_send>

  return ERR_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
 8005ac2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	6838      	ldr	r0, [r7, #0]
 8005ad2:	f7ff fc91 	bl	80053f8 <http_close_conn>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e021      	b.n	8005b22 <http_poll+0x68>
  } else {
    hs->retries++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d105      	bne.n	8005b04 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	6838      	ldr	r0, [r7, #0]
 8005afc:	f7ff fc7c 	bl	80053f8 <http_close_conn>
      return ERR_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e00e      	b.n	8005b22 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d009      	beq.n	8005b20 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8005b0c:	68f9      	ldr	r1, [r7, #12]
 8005b0e:	6838      	ldr	r0, [r7, #0]
 8005b10:	f7ff fcf3 	bl	80054fa <http_send>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8005b1a:	6838      	ldr	r0, [r7, #0]
 8005b1c:	f007 f832 	bl	800cb84 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d105      	bne.n	8005b52 <http_recv+0x26>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <http_recv+0x26>
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d111      	bne.n	8005b76 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	891b      	ldrh	r3, [r3, #8]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68b8      	ldr	r0, [r7, #8]
 8005b60:	f002 fc04 	bl	800836c <tcp_recved>
      pbuf_free(p);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fc9f 	bl	80074a8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8005b6a:	6979      	ldr	r1, [r7, #20]
 8005b6c:	68b8      	ldr	r0, [r7, #8]
 8005b6e:	f7ff fc43 	bl	80053f8 <http_close_conn>
    return ERR_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e055      	b.n	8005c22 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	891b      	ldrh	r3, [r3, #8]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f002 fbf5 	bl	800836c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d147      	bne.n	8005c1a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fd30 	bl	80055f4 <http_parse_request>
 8005b94:	4603      	mov	r3, r0
 8005b96:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8005b98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <http_recv+0xa0>
 8005ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005ba4:	f113 0f05 	cmn.w	r3, #5
 8005ba8:	d010      	beq.n	8005bcc <http_recv+0xa0>
 8005baa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bae:	f113 0f10 	cmn.w	r3, #16
 8005bb2:	d00b      	beq.n	8005bcc <http_recv+0xa0>
 8005bb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bb8:	f113 0f08 	cmn.w	r3, #8
 8005bbc:	d006      	beq.n	8005bcc <http_recv+0xa0>
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <http_recv+0x100>)
 8005bc0:	f640 2204 	movw	r2, #2564	@ 0xa04
 8005bc4:	491a      	ldr	r1, [pc, #104]	@ (8005c30 <http_recv+0x104>)
 8005bc6:	481b      	ldr	r0, [pc, #108]	@ (8005c34 <http_recv+0x108>)
 8005bc8:	f00a fe1c 	bl	8010804 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005bcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bd0:	f113 0f05 	cmn.w	r3, #5
 8005bd4:	d00b      	beq.n	8005bee <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <http_recv+0xc2>
          pbuf_free(hs->req);
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f001 fc60 	bl	80074a8 <pbuf_free>
          hs->req = NULL;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2200      	movs	r2, #0
 8005bec:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fc5a 	bl	80074a8 <pbuf_free>
      if (parsed == ERR_OK) {
 8005bf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d104      	bne.n	8005c06 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	68b8      	ldr	r0, [r7, #8]
 8005c00:	f7ff fc7b 	bl	80054fa <http_send>
 8005c04:	e00c      	b.n	8005c20 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8005c06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005c0a:	f113 0f10 	cmn.w	r3, #16
 8005c0e:	d107      	bne.n	8005c20 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	68b8      	ldr	r0, [r7, #8]
 8005c14:	f7ff fbf0 	bl	80053f8 <http_close_conn>
 8005c18:	e002      	b.n	8005c20 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f001 fc44 	bl	80074a8 <pbuf_free>
    }
  }
  return ERR_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	08011700 	.word	0x08011700
 8005c30:	0801185c 	.word	0x0801185c
 8005c34:	08011748 	.word	0x08011748

08005c38 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8005c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <http_accept+0x1c>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <http_accept+0x22>
    return ERR_VAL;
 8005c54:	f06f 0305 	mvn.w	r3, #5
 8005c58:	e025      	b.n	8005ca6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f003 f86b 	bl	8008d38 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005c62:	f7ff fadb 	bl	800521c <http_state_alloc>
 8005c66:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c72:	e018      	b.n	8005ca6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	68b8      	ldr	r0, [r7, #8]
 8005c7e:	f003 fa5b 	bl	8009138 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005c82:	490b      	ldr	r1, [pc, #44]	@ (8005cb0 <http_accept+0x78>)
 8005c84:	68b8      	ldr	r0, [r7, #8]
 8005c86:	f003 fa69 	bl	800915c <tcp_recv>
  altcp_err(pcb, http_err);
 8005c8a:	490a      	ldr	r1, [pc, #40]	@ (8005cb4 <http_accept+0x7c>)
 8005c8c:	68b8      	ldr	r0, [r7, #8]
 8005c8e:	f003 faa9 	bl	80091e4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005c92:	2204      	movs	r2, #4
 8005c94:	4908      	ldr	r1, [pc, #32]	@ (8005cb8 <http_accept+0x80>)
 8005c96:	68b8      	ldr	r0, [r7, #8]
 8005c98:	f003 fade 	bl	8009258 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005c9c:	4907      	ldr	r1, [pc, #28]	@ (8005cbc <http_accept+0x84>)
 8005c9e:	68b8      	ldr	r0, [r7, #8]
 8005ca0:	f003 fa7e 	bl	80091a0 <tcp_sent>

  return ERR_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	08005b2d 	.word	0x08005b2d
 8005cb4:	08005a61 	.word	0x08005a61
 8005cb8:	08005abb 	.word	0x08005abb
 8005cbc:	08005a85 	.word	0x08005a85

08005cc0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d029      	beq.n	8005d26 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f003 f82f 	bl	8008d38 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4914      	ldr	r1, [pc, #80]	@ (8005d30 <httpd_init_pcb+0x70>)
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f975 	bl	8007fd0 <tcp_bind>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8005cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d006      	beq.n	8005d00 <httpd_init_pcb+0x40>
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <httpd_init_pcb+0x74>)
 8005cf4:	f640 2257 	movw	r2, #2647	@ 0xa57
 8005cf8:	490f      	ldr	r1, [pc, #60]	@ (8005d38 <httpd_init_pcb+0x78>)
 8005cfa:	4810      	ldr	r0, [pc, #64]	@ (8005d3c <httpd_init_pcb+0x7c>)
 8005cfc:	f00a fd82 	bl	8010804 <iprintf>
    pcb = altcp_listen(pcb);
 8005d00:	21ff      	movs	r1, #255	@ 0xff
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f002 fa1c 	bl	8008140 <tcp_listen_with_backlog>
 8005d08:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d106      	bne.n	8005d1e <httpd_init_pcb+0x5e>
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <httpd_init_pcb+0x74>)
 8005d12:	f640 2259 	movw	r2, #2649	@ 0xa59
 8005d16:	490a      	ldr	r1, [pc, #40]	@ (8005d40 <httpd_init_pcb+0x80>)
 8005d18:	4808      	ldr	r0, [pc, #32]	@ (8005d3c <httpd_init_pcb+0x7c>)
 8005d1a:	f00a fd73 	bl	8010804 <iprintf>
    altcp_accept(pcb, http_accept);
 8005d1e:	4909      	ldr	r1, [pc, #36]	@ (8005d44 <httpd_init_pcb+0x84>)
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f003 fa81 	bl	8009228 <tcp_accept>
  }
}
 8005d26:	bf00      	nop
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	08015164 	.word	0x08015164
 8005d34:	08011700 	.word	0x08011700
 8005d38:	08011888 	.word	0x08011888
 8005d3c:	08011748 	.word	0x08011748
 8005d40:	080118a4 	.word	0x080118a4
 8005d44:	08005c39 	.word	0x08005c39

08005d48 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005d4e:	202e      	movs	r0, #46	@ 0x2e
 8005d50:	f003 f9e4 	bl	800911c <tcp_new_ip_type>
 8005d54:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d106      	bne.n	8005d6a <httpd_init+0x22>
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <httpd_init+0x34>)
 8005d5e:	f640 2272 	movw	r2, #2674	@ 0xa72
 8005d62:	4907      	ldr	r1, [pc, #28]	@ (8005d80 <httpd_init+0x38>)
 8005d64:	4807      	ldr	r0, [pc, #28]	@ (8005d84 <httpd_init+0x3c>)
 8005d66:	f00a fd4d 	bl	8010804 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005d6a:	2150      	movs	r1, #80	@ 0x50
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ffa7 	bl	8005cc0 <httpd_init_pcb>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08011700 	.word	0x08011700
 8005d80:	080118c4 	.word	0x080118c4
 8005d84:	08011748 	.word	0x08011748

08005d88 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	021b      	lsls	r3, r3, #8
 8005d96:	b21a      	sxth	r2, r3
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	0a1b      	lsrs	r3, r3, #8
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	4313      	orrs	r3, r2
 8005da2:	b21b      	sxth	r3, r3
 8005da4:	b29b      	uxth	r3, r3
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	061a      	lsls	r2, r3, #24
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	0e1b      	lsrs	r3, r3, #24
 8005dd6:	4313      	orrs	r3, r2
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005df0:	68b8      	ldr	r0, [r7, #8]
 8005df2:	f7fa fa2f 	bl	8000254 <strlen>
 8005df6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e022      	b.n	8005e48 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	e012      	b.n	8005e2e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d109      	bne.n	8005e28 <lwip_strnstr+0x44>
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	6978      	ldr	r0, [r7, #20]
 8005e1a:	f00a fd6d 	bl	80108f8 <strncmp>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	e00f      	b.n	8005e48 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <lwip_strnstr+0x62>
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	441a      	add	r2, r3
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	440b      	add	r3, r1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d9e0      	bls.n	8005e08 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005e5a:	f000 f8d5 	bl	8006008 <mem_init>
  memp_init();
 8005e5e:	f000 fbd7 	bl	8006610 <memp_init>
  pbuf_init();
  netif_init();
 8005e62:	f000 fcd5 	bl	8006810 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005e66:	f007 ff4d 	bl	800dd04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005e6a:	f001 fdab 	bl	80079c4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005e6e:	f007 febf 	bl	800dbf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005e86:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <ptr_to_mem+0x20>)
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	4413      	add	r3, r2
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	200051b0 	.word	0x200051b0

08005ea0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <mem_to_ptr+0x20>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	b29b      	uxth	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	200051b0 	.word	0x200051b0

08005ec4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005ecc:	4b45      	ldr	r3, [pc, #276]	@ (8005fe4 <plug_holes+0x120>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d206      	bcs.n	8005ee4 <plug_holes+0x20>
 8005ed6:	4b44      	ldr	r3, [pc, #272]	@ (8005fe8 <plug_holes+0x124>)
 8005ed8:	f240 12df 	movw	r2, #479	@ 0x1df
 8005edc:	4943      	ldr	r1, [pc, #268]	@ (8005fec <plug_holes+0x128>)
 8005ede:	4844      	ldr	r0, [pc, #272]	@ (8005ff0 <plug_holes+0x12c>)
 8005ee0:	f00a fc90 	bl	8010804 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005ee4:	4b43      	ldr	r3, [pc, #268]	@ (8005ff4 <plug_holes+0x130>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d306      	bcc.n	8005efc <plug_holes+0x38>
 8005eee:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <plug_holes+0x124>)
 8005ef0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005ef4:	4940      	ldr	r1, [pc, #256]	@ (8005ff8 <plug_holes+0x134>)
 8005ef6:	483e      	ldr	r0, [pc, #248]	@ (8005ff0 <plug_holes+0x12c>)
 8005ef8:	f00a fc84 	bl	8010804 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	791b      	ldrb	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d006      	beq.n	8005f12 <plug_holes+0x4e>
 8005f04:	4b38      	ldr	r3, [pc, #224]	@ (8005fe8 <plug_holes+0x124>)
 8005f06:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8005f0a:	493c      	ldr	r1, [pc, #240]	@ (8005ffc <plug_holes+0x138>)
 8005f0c:	4838      	ldr	r0, [pc, #224]	@ (8005ff0 <plug_holes+0x12c>)
 8005f0e:	f00a fc79 	bl	8010804 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f1a:	d906      	bls.n	8005f2a <plug_holes+0x66>
 8005f1c:	4b32      	ldr	r3, [pc, #200]	@ (8005fe8 <plug_holes+0x124>)
 8005f1e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8005f22:	4937      	ldr	r1, [pc, #220]	@ (8006000 <plug_holes+0x13c>)
 8005f24:	4832      	ldr	r0, [pc, #200]	@ (8005ff0 <plug_holes+0x12c>)
 8005f26:	f00a fc6d 	bl	8010804 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff ffa4 	bl	8005e7c <ptr_to_mem>
 8005f34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d024      	beq.n	8005f88 <plug_holes+0xc4>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d120      	bne.n	8005f88 <plug_holes+0xc4>
 8005f46:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff4 <plug_holes+0x130>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d01b      	beq.n	8005f88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005f50:	4b2c      	ldr	r3, [pc, #176]	@ (8006004 <plug_holes+0x140>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d102      	bne.n	8005f60 <plug_holes+0x9c>
      lfree = mem;
 8005f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006004 <plug_holes+0x140>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005f70:	d00a      	beq.n	8005f88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7ff ff80 	bl	8005e7c <ptr_to_mem>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7ff ff8e 	bl	8005ea0 <mem_to_ptr>
 8005f84:	4603      	mov	r3, r0
 8005f86:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	885b      	ldrh	r3, [r3, #2]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff ff75 	bl	8005e7c <ptr_to_mem>
 8005f92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d01f      	beq.n	8005fdc <plug_holes+0x118>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11b      	bne.n	8005fdc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005fa4:	4b17      	ldr	r3, [pc, #92]	@ (8006004 <plug_holes+0x140>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d102      	bne.n	8005fb4 <plug_holes+0xf0>
      lfree = pmem;
 8005fae:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <plug_holes+0x140>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	881a      	ldrh	r2, [r3, #0]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8005fc4:	d00a      	beq.n	8005fdc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff ff56 	bl	8005e7c <ptr_to_mem>
 8005fd0:	4604      	mov	r4, r0
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	f7ff ff64 	bl	8005ea0 <mem_to_ptr>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd90      	pop	{r4, r7, pc}
 8005fe4:	200051b0 	.word	0x200051b0
 8005fe8:	080118e0 	.word	0x080118e0
 8005fec:	08011910 	.word	0x08011910
 8005ff0:	08011928 	.word	0x08011928
 8005ff4:	200051b4 	.word	0x200051b4
 8005ff8:	08011950 	.word	0x08011950
 8005ffc:	0801196c 	.word	0x0801196c
 8006000:	08011988 	.word	0x08011988
 8006004:	200051b8 	.word	0x200051b8

08006008 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800600e:	4b16      	ldr	r3, [pc, #88]	@ (8006068 <mem_init+0x60>)
 8006010:	4a16      	ldr	r2, [pc, #88]	@ (800606c <mem_init+0x64>)
 8006012:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006014:	4b14      	ldr	r3, [pc, #80]	@ (8006068 <mem_init+0x60>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006020:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800602e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8006032:	f7ff ff23 	bl	8005e7c <ptr_to_mem>
 8006036:	4603      	mov	r3, r0
 8006038:	4a0d      	ldr	r2, [pc, #52]	@ (8006070 <mem_init+0x68>)
 800603a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800603c:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <mem_init+0x68>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006044:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <mem_init+0x68>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800604c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800604e:	4b08      	ldr	r3, [pc, #32]	@ (8006070 <mem_init+0x68>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006056:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006058:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <mem_init+0x60>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a05      	ldr	r2, [pc, #20]	@ (8006074 <mem_init+0x6c>)
 800605e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	200051b0 	.word	0x200051b0
 800606c:	30004000 	.word	0x30004000
 8006070:	200051b4 	.word	0x200051b4
 8006074:	200051b8 	.word	0x200051b8

08006078 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7ff ff0d 	bl	8005ea0 <mem_to_ptr>
 8006086:	4603      	mov	r3, r0
 8006088:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fef4 	bl	8005e7c <ptr_to_mem>
 8006094:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	885b      	ldrh	r3, [r3, #2]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff feee 	bl	8005e7c <ptr_to_mem>
 80060a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060aa:	d818      	bhi.n	80060de <mem_link_valid+0x66>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	885b      	ldrh	r3, [r3, #2]
 80060b0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80060b4:	d813      	bhi.n	80060de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80060ba:	8afa      	ldrh	r2, [r7, #22]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d004      	beq.n	80060ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	8afa      	ldrh	r2, [r7, #22]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d109      	bne.n	80060de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80060ca:	4b08      	ldr	r3, [pc, #32]	@ (80060ec <mem_link_valid+0x74>)
 80060cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d006      	beq.n	80060e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	8afa      	ldrh	r2, [r7, #22]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d001      	beq.n	80060e2 <mem_link_valid+0x6a>
    return 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <mem_link_valid+0x6c>
  }
  return 1;
 80060e2:	2301      	movs	r3, #1
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200051b4 	.word	0x200051b4

080060f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04c      	beq.n	8006198 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006108:	4b25      	ldr	r3, [pc, #148]	@ (80061a0 <mem_free+0xb0>)
 800610a:	f240 2273 	movw	r2, #627	@ 0x273
 800610e:	4925      	ldr	r1, [pc, #148]	@ (80061a4 <mem_free+0xb4>)
 8006110:	4825      	ldr	r0, [pc, #148]	@ (80061a8 <mem_free+0xb8>)
 8006112:	f00a fb77 	bl	8010804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006116:	e040      	b.n	800619a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3b08      	subs	r3, #8
 800611c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800611e:	4b23      	ldr	r3, [pc, #140]	@ (80061ac <mem_free+0xbc>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	429a      	cmp	r2, r3
 8006126:	d306      	bcc.n	8006136 <mem_free+0x46>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 020c 	add.w	r2, r3, #12
 800612e:	4b20      	ldr	r3, [pc, #128]	@ (80061b0 <mem_free+0xc0>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d907      	bls.n	8006146 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006136:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <mem_free+0xb0>)
 8006138:	f240 227f 	movw	r2, #639	@ 0x27f
 800613c:	491d      	ldr	r1, [pc, #116]	@ (80061b4 <mem_free+0xc4>)
 800613e:	481a      	ldr	r0, [pc, #104]	@ (80061a8 <mem_free+0xb8>)
 8006140:	f00a fb60 	bl	8010804 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006144:	e029      	b.n	800619a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	791b      	ldrb	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800614e:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <mem_free+0xb0>)
 8006150:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006154:	4918      	ldr	r1, [pc, #96]	@ (80061b8 <mem_free+0xc8>)
 8006156:	4814      	ldr	r0, [pc, #80]	@ (80061a8 <mem_free+0xb8>)
 8006158:	f00a fb54 	bl	8010804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800615c:	e01d      	b.n	800619a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff ff8a 	bl	8006078 <mem_link_valid>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <mem_free+0xb0>)
 800616c:	f240 2295 	movw	r2, #661	@ 0x295
 8006170:	4912      	ldr	r1, [pc, #72]	@ (80061bc <mem_free+0xcc>)
 8006172:	480d      	ldr	r0, [pc, #52]	@ (80061a8 <mem_free+0xb8>)
 8006174:	f00a fb46 	bl	8010804 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006178:	e00f      	b.n	800619a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006180:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <mem_free+0xd0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	429a      	cmp	r2, r3
 8006188:	d202      	bcs.n	8006190 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800618a:	4a0d      	ldr	r2, [pc, #52]	@ (80061c0 <mem_free+0xd0>)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fe97 	bl	8005ec4 <plug_holes>
 8006196:	e000      	b.n	800619a <mem_free+0xaa>
    return;
 8006198:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	080118e0 	.word	0x080118e0
 80061a4:	080119b4 	.word	0x080119b4
 80061a8:	08011928 	.word	0x08011928
 80061ac:	200051b0 	.word	0x200051b0
 80061b0:	200051b4 	.word	0x200051b4
 80061b4:	080119d8 	.word	0x080119d8
 80061b8:	080119f4 	.word	0x080119f4
 80061bc:	08011a1c 	.word	0x08011a1c
 80061c0:	200051b8 	.word	0x200051b8

080061c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80061d0:	887b      	ldrh	r3, [r7, #2]
 80061d2:	3303      	adds	r3, #3
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80061dc:	8bfb      	ldrh	r3, [r7, #30]
 80061de:	2b0b      	cmp	r3, #11
 80061e0:	d801      	bhi.n	80061e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80061e2:	230c      	movs	r3, #12
 80061e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80061e6:	8bfb      	ldrh	r3, [r7, #30]
 80061e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80061ec:	d803      	bhi.n	80061f6 <mem_trim+0x32>
 80061ee:	8bfa      	ldrh	r2, [r7, #30]
 80061f0:	887b      	ldrh	r3, [r7, #2]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d201      	bcs.n	80061fa <mem_trim+0x36>
    return NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	e0cc      	b.n	8006394 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80061fa:	4b68      	ldr	r3, [pc, #416]	@ (800639c <mem_trim+0x1d8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d304      	bcc.n	800620e <mem_trim+0x4a>
 8006204:	4b66      	ldr	r3, [pc, #408]	@ (80063a0 <mem_trim+0x1dc>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d306      	bcc.n	800621c <mem_trim+0x58>
 800620e:	4b65      	ldr	r3, [pc, #404]	@ (80063a4 <mem_trim+0x1e0>)
 8006210:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006214:	4964      	ldr	r1, [pc, #400]	@ (80063a8 <mem_trim+0x1e4>)
 8006216:	4865      	ldr	r0, [pc, #404]	@ (80063ac <mem_trim+0x1e8>)
 8006218:	f00a faf4 	bl	8010804 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800621c:	4b5f      	ldr	r3, [pc, #380]	@ (800639c <mem_trim+0x1d8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	429a      	cmp	r2, r3
 8006224:	d304      	bcc.n	8006230 <mem_trim+0x6c>
 8006226:	4b5e      	ldr	r3, [pc, #376]	@ (80063a0 <mem_trim+0x1dc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	d301      	bcc.n	8006234 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	e0af      	b.n	8006394 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3b08      	subs	r3, #8
 8006238:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800623a:	69b8      	ldr	r0, [r7, #24]
 800623c:	f7ff fe30 	bl	8005ea0 <mem_to_ptr>
 8006240:	4603      	mov	r3, r0
 8006242:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	881a      	ldrh	r2, [r3, #0]
 8006248:	8afb      	ldrh	r3, [r7, #22]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b08      	subs	r3, #8
 8006250:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006252:	8bfa      	ldrh	r2, [r7, #30]
 8006254:	8abb      	ldrh	r3, [r7, #20]
 8006256:	429a      	cmp	r2, r3
 8006258:	d906      	bls.n	8006268 <mem_trim+0xa4>
 800625a:	4b52      	ldr	r3, [pc, #328]	@ (80063a4 <mem_trim+0x1e0>)
 800625c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006260:	4953      	ldr	r1, [pc, #332]	@ (80063b0 <mem_trim+0x1ec>)
 8006262:	4852      	ldr	r0, [pc, #328]	@ (80063ac <mem_trim+0x1e8>)
 8006264:	f00a face 	bl	8010804 <iprintf>
  if (newsize > size) {
 8006268:	8bfa      	ldrh	r2, [r7, #30]
 800626a:	8abb      	ldrh	r3, [r7, #20]
 800626c:	429a      	cmp	r2, r3
 800626e:	d901      	bls.n	8006274 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	e08f      	b.n	8006394 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006274:	8bfa      	ldrh	r2, [r7, #30]
 8006276:	8abb      	ldrh	r3, [r7, #20]
 8006278:	429a      	cmp	r2, r3
 800627a:	d101      	bne.n	8006280 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	e089      	b.n	8006394 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fdf9 	bl	8005e7c <ptr_to_mem>
 800628a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	791b      	ldrb	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d13f      	bne.n	8006314 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800629c:	d106      	bne.n	80062ac <mem_trim+0xe8>
 800629e:	4b41      	ldr	r3, [pc, #260]	@ (80063a4 <mem_trim+0x1e0>)
 80062a0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80062a4:	4943      	ldr	r1, [pc, #268]	@ (80063b4 <mem_trim+0x1f0>)
 80062a6:	4841      	ldr	r0, [pc, #260]	@ (80063ac <mem_trim+0x1e8>)
 80062a8:	f00a faac 	bl	8010804 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80062b2:	8afa      	ldrh	r2, [r7, #22]
 80062b4:	8bfb      	ldrh	r3, [r7, #30]
 80062b6:	4413      	add	r3, r2
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3308      	adds	r3, #8
 80062bc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80062be:	4b3e      	ldr	r3, [pc, #248]	@ (80063b8 <mem_trim+0x1f4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d106      	bne.n	80062d6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fdd6 	bl	8005e7c <ptr_to_mem>
 80062d0:	4603      	mov	r3, r0
 80062d2:	4a39      	ldr	r2, [pc, #228]	@ (80063b8 <mem_trim+0x1f4>)
 80062d4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80062d6:	89fb      	ldrh	r3, [r7, #14]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fdcf 	bl	8005e7c <ptr_to_mem>
 80062de:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2200      	movs	r2, #0
 80062e4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	89ba      	ldrh	r2, [r7, #12]
 80062ea:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	8afa      	ldrh	r2, [r7, #22]
 80062f0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	89fa      	ldrh	r2, [r7, #14]
 80062f6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006300:	d047      	beq.n	8006392 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fdb8 	bl	8005e7c <ptr_to_mem>
 800630c:	4602      	mov	r2, r0
 800630e:	89fb      	ldrh	r3, [r7, #14]
 8006310:	8053      	strh	r3, [r2, #2]
 8006312:	e03e      	b.n	8006392 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006314:	8bfb      	ldrh	r3, [r7, #30]
 8006316:	f103 0214 	add.w	r2, r3, #20
 800631a:	8abb      	ldrh	r3, [r7, #20]
 800631c:	429a      	cmp	r2, r3
 800631e:	d838      	bhi.n	8006392 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006320:	8afa      	ldrh	r2, [r7, #22]
 8006322:	8bfb      	ldrh	r3, [r7, #30]
 8006324:	4413      	add	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	3308      	adds	r3, #8
 800632a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006334:	d106      	bne.n	8006344 <mem_trim+0x180>
 8006336:	4b1b      	ldr	r3, [pc, #108]	@ (80063a4 <mem_trim+0x1e0>)
 8006338:	f240 3216 	movw	r2, #790	@ 0x316
 800633c:	491d      	ldr	r1, [pc, #116]	@ (80063b4 <mem_trim+0x1f0>)
 800633e:	481b      	ldr	r0, [pc, #108]	@ (80063ac <mem_trim+0x1e8>)
 8006340:	f00a fa60 	bl	8010804 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006344:	89fb      	ldrh	r3, [r7, #14]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fd98 	bl	8005e7c <ptr_to_mem>
 800634c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800634e:	4b1a      	ldr	r3, [pc, #104]	@ (80063b8 <mem_trim+0x1f4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	429a      	cmp	r2, r3
 8006356:	d202      	bcs.n	800635e <mem_trim+0x19a>
      lfree = mem2;
 8006358:	4a17      	ldr	r2, [pc, #92]	@ (80063b8 <mem_trim+0x1f4>)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2200      	movs	r2, #0
 8006362:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	8afa      	ldrh	r2, [r7, #22]
 8006370:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	89fa      	ldrh	r2, [r7, #14]
 8006376:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006380:	d007      	beq.n	8006392 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd78 	bl	8005e7c <ptr_to_mem>
 800638c:	4602      	mov	r2, r0
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006392:	687b      	ldr	r3, [r7, #4]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3720      	adds	r7, #32
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	200051b0 	.word	0x200051b0
 80063a0:	200051b4 	.word	0x200051b4
 80063a4:	080118e0 	.word	0x080118e0
 80063a8:	08011a50 	.word	0x08011a50
 80063ac:	08011928 	.word	0x08011928
 80063b0:	08011a68 	.word	0x08011a68
 80063b4:	08011a88 	.word	0x08011a88
 80063b8:	200051b8 	.word	0x200051b8

080063bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <mem_malloc+0x14>
    return NULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	e0d9      	b.n	8006584 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	3303      	adds	r3, #3
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80063dc:	8bbb      	ldrh	r3, [r7, #28]
 80063de:	2b0b      	cmp	r3, #11
 80063e0:	d801      	bhi.n	80063e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80063e2:	230c      	movs	r3, #12
 80063e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80063e6:	8bbb      	ldrh	r3, [r7, #28]
 80063e8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80063ec:	d803      	bhi.n	80063f6 <mem_malloc+0x3a>
 80063ee:	8bba      	ldrh	r2, [r7, #28]
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d201      	bcs.n	80063fa <mem_malloc+0x3e>
    return NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e0c4      	b.n	8006584 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80063fa:	4b64      	ldr	r3, [pc, #400]	@ (800658c <mem_malloc+0x1d0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fd4e 	bl	8005ea0 <mem_to_ptr>
 8006404:	4603      	mov	r3, r0
 8006406:	83fb      	strh	r3, [r7, #30]
 8006408:	e0b4      	b.n	8006574 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800640a:	8bfb      	ldrh	r3, [r7, #30]
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fd35 	bl	8005e7c <ptr_to_mem>
 8006412:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	791b      	ldrb	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 80a4 	bne.w	8006566 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	8bfb      	ldrh	r3, [r7, #30]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	f1a3 0208 	sub.w	r2, r3, #8
 800642c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800642e:	429a      	cmp	r2, r3
 8006430:	f0c0 8099 	bcc.w	8006566 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	8bfb      	ldrh	r3, [r7, #30]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f1a3 0208 	sub.w	r2, r3, #8
 8006442:	8bbb      	ldrh	r3, [r7, #28]
 8006444:	3314      	adds	r3, #20
 8006446:	429a      	cmp	r2, r3
 8006448:	d333      	bcc.n	80064b2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800644a:	8bfa      	ldrh	r2, [r7, #30]
 800644c:	8bbb      	ldrh	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	b29b      	uxth	r3, r3
 8006452:	3308      	adds	r3, #8
 8006454:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006456:	8a7b      	ldrh	r3, [r7, #18]
 8006458:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800645c:	d106      	bne.n	800646c <mem_malloc+0xb0>
 800645e:	4b4c      	ldr	r3, [pc, #304]	@ (8006590 <mem_malloc+0x1d4>)
 8006460:	f240 3287 	movw	r2, #903	@ 0x387
 8006464:	494b      	ldr	r1, [pc, #300]	@ (8006594 <mem_malloc+0x1d8>)
 8006466:	484c      	ldr	r0, [pc, #304]	@ (8006598 <mem_malloc+0x1dc>)
 8006468:	f00a f9cc 	bl	8010804 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800646c:	8a7b      	ldrh	r3, [r7, #18]
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fd04 	bl	8005e7c <ptr_to_mem>
 8006474:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	881a      	ldrh	r2, [r3, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8bfa      	ldrh	r2, [r7, #30]
 8006488:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	8a7a      	ldrh	r2, [r7, #18]
 800648e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2201      	movs	r2, #1
 8006494:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800649e:	d00b      	beq.n	80064b8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fce9 	bl	8005e7c <ptr_to_mem>
 80064aa:	4602      	mov	r2, r0
 80064ac:	8a7b      	ldrh	r3, [r7, #18]
 80064ae:	8053      	strh	r3, [r2, #2]
 80064b0:	e002      	b.n	80064b8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2201      	movs	r2, #1
 80064b6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80064b8:	4b34      	ldr	r3, [pc, #208]	@ (800658c <mem_malloc+0x1d0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d127      	bne.n	8006512 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80064c2:	4b32      	ldr	r3, [pc, #200]	@ (800658c <mem_malloc+0x1d0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80064c8:	e005      	b.n	80064d6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff fcd4 	bl	8005e7c <ptr_to_mem>
 80064d4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <mem_malloc+0x12c>
 80064de:	4b2f      	ldr	r3, [pc, #188]	@ (800659c <mem_malloc+0x1e0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d1f0      	bne.n	80064ca <mem_malloc+0x10e>
          }
          lfree = cur;
 80064e8:	4a28      	ldr	r2, [pc, #160]	@ (800658c <mem_malloc+0x1d0>)
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80064ee:	4b27      	ldr	r3, [pc, #156]	@ (800658c <mem_malloc+0x1d0>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b2a      	ldr	r3, [pc, #168]	@ (800659c <mem_malloc+0x1e0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d00b      	beq.n	8006512 <mem_malloc+0x156>
 80064fa:	4b24      	ldr	r3, [pc, #144]	@ (800658c <mem_malloc+0x1d0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	791b      	ldrb	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d006      	beq.n	8006512 <mem_malloc+0x156>
 8006504:	4b22      	ldr	r3, [pc, #136]	@ (8006590 <mem_malloc+0x1d4>)
 8006506:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800650a:	4925      	ldr	r1, [pc, #148]	@ (80065a0 <mem_malloc+0x1e4>)
 800650c:	4822      	ldr	r0, [pc, #136]	@ (8006598 <mem_malloc+0x1dc>)
 800650e:	f00a f979 	bl	8010804 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006512:	8bba      	ldrh	r2, [r7, #28]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	4413      	add	r3, r2
 8006518:	3308      	adds	r3, #8
 800651a:	4a20      	ldr	r2, [pc, #128]	@ (800659c <mem_malloc+0x1e0>)
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	4293      	cmp	r3, r2
 8006520:	d906      	bls.n	8006530 <mem_malloc+0x174>
 8006522:	4b1b      	ldr	r3, [pc, #108]	@ (8006590 <mem_malloc+0x1d4>)
 8006524:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006528:	491e      	ldr	r1, [pc, #120]	@ (80065a4 <mem_malloc+0x1e8>)
 800652a:	481b      	ldr	r0, [pc, #108]	@ (8006598 <mem_malloc+0x1dc>)
 800652c:	f00a f96a 	bl	8010804 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <mem_malloc+0x18c>
 800653a:	4b15      	ldr	r3, [pc, #84]	@ (8006590 <mem_malloc+0x1d4>)
 800653c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006540:	4919      	ldr	r1, [pc, #100]	@ (80065a8 <mem_malloc+0x1ec>)
 8006542:	4815      	ldr	r0, [pc, #84]	@ (8006598 <mem_malloc+0x1dc>)
 8006544:	f00a f95e 	bl	8010804 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d006      	beq.n	8006560 <mem_malloc+0x1a4>
 8006552:	4b0f      	ldr	r3, [pc, #60]	@ (8006590 <mem_malloc+0x1d4>)
 8006554:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006558:	4914      	ldr	r1, [pc, #80]	@ (80065ac <mem_malloc+0x1f0>)
 800655a:	480f      	ldr	r0, [pc, #60]	@ (8006598 <mem_malloc+0x1dc>)
 800655c:	f00a f952 	bl	8010804 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	3308      	adds	r3, #8
 8006564:	e00e      	b.n	8006584 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006566:	8bfb      	ldrh	r3, [r7, #30]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fc87 	bl	8005e7c <ptr_to_mem>
 800656e:	4603      	mov	r3, r0
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006574:	8bfa      	ldrh	r2, [r7, #30]
 8006576:	8bbb      	ldrh	r3, [r7, #28]
 8006578:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800657c:	429a      	cmp	r2, r3
 800657e:	f4ff af44 	bcc.w	800640a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200051b8 	.word	0x200051b8
 8006590:	080118e0 	.word	0x080118e0
 8006594:	08011a88 	.word	0x08011a88
 8006598:	08011928 	.word	0x08011928
 800659c:	200051b4 	.word	0x200051b4
 80065a0:	08011a9c 	.word	0x08011a9c
 80065a4:	08011ab8 	.word	0x08011ab8
 80065a8:	08011ae8 	.word	0x08011ae8
 80065ac:	08011b18 	.word	0x08011b18

080065b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	3303      	adds	r3, #3
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
 80065d0:	e011      	b.n	80065f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	461a      	mov	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	461a      	mov	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4293      	cmp	r3, r2
 8006600:	dbe7      	blt.n	80065d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006616:	2300      	movs	r3, #0
 8006618:	80fb      	strh	r3, [r7, #6]
 800661a:	e009      	b.n	8006630 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	4a08      	ldr	r2, [pc, #32]	@ (8006640 <memp_init+0x30>)
 8006620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ffc3 	bl	80065b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	3301      	adds	r3, #1
 800662e:	80fb      	strh	r3, [r7, #6]
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d9f2      	bls.n	800661c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	08015100 	.word	0x08015100

08006644 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d012      	beq.n	8006680 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d006      	beq.n	800667c <do_memp_malloc_pool+0x38>
 800666e:	4b07      	ldr	r3, [pc, #28]	@ (800668c <do_memp_malloc_pool+0x48>)
 8006670:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006674:	4906      	ldr	r1, [pc, #24]	@ (8006690 <do_memp_malloc_pool+0x4c>)
 8006676:	4807      	ldr	r0, [pc, #28]	@ (8006694 <do_memp_malloc_pool+0x50>)
 8006678:	f00a f8c4 	bl	8010804 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	e000      	b.n	8006682 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	08011b3c 	.word	0x08011b3c
 8006690:	08011b6c 	.word	0x08011b6c
 8006694:	08011b90 	.word	0x08011b90

08006698 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <memp_malloc_pool+0x1c>
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <memp_malloc_pool+0x38>)
 80066a8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80066ac:	4909      	ldr	r1, [pc, #36]	@ (80066d4 <memp_malloc_pool+0x3c>)
 80066ae:	480a      	ldr	r0, [pc, #40]	@ (80066d8 <memp_malloc_pool+0x40>)
 80066b0:	f00a f8a8 	bl	8010804 <iprintf>
  if (desc == NULL) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <memp_malloc_pool+0x26>
    return NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e003      	b.n	80066c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ffc0 	bl	8006644 <do_memp_malloc_pool>
 80066c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	08011b3c 	.word	0x08011b3c
 80066d4:	08011bb8 	.word	0x08011bb8
 80066d8:	08011b90 	.word	0x08011b90

080066dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d908      	bls.n	80066fe <memp_malloc+0x22>
 80066ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006718 <memp_malloc+0x3c>)
 80066ee:	f240 1257 	movw	r2, #343	@ 0x157
 80066f2:	490a      	ldr	r1, [pc, #40]	@ (800671c <memp_malloc+0x40>)
 80066f4:	480a      	ldr	r0, [pc, #40]	@ (8006720 <memp_malloc+0x44>)
 80066f6:	f00a f885 	bl	8010804 <iprintf>
 80066fa:	2300      	movs	r3, #0
 80066fc:	e008      	b.n	8006710 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	4a08      	ldr	r2, [pc, #32]	@ (8006724 <memp_malloc+0x48>)
 8006702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff ff9c 	bl	8006644 <do_memp_malloc_pool>
 800670c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800670e:	68fb      	ldr	r3, [r7, #12]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	08011b3c 	.word	0x08011b3c
 800671c:	08011bcc 	.word	0x08011bcc
 8006720:	08011b90 	.word	0x08011b90
 8006724:	08015100 	.word	0x08015100

08006728 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	f003 0303 	and.w	r3, r3, #3
 8006738:	2b00      	cmp	r3, #0
 800673a:	d006      	beq.n	800674a <do_memp_free_pool+0x22>
 800673c:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <do_memp_free_pool+0x40>)
 800673e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006742:	490a      	ldr	r1, [pc, #40]	@ (800676c <do_memp_free_pool+0x44>)
 8006744:	480a      	ldr	r0, [pc, #40]	@ (8006770 <do_memp_free_pool+0x48>)
 8006746:	f00a f85d 	bl	8010804 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	08011b3c 	.word	0x08011b3c
 800676c:	08011bec 	.word	0x08011bec
 8006770:	08011b90 	.word	0x08011b90

08006774 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <memp_free_pool+0x1e>
 8006784:	4b0a      	ldr	r3, [pc, #40]	@ (80067b0 <memp_free_pool+0x3c>)
 8006786:	f240 1295 	movw	r2, #405	@ 0x195
 800678a:	490a      	ldr	r1, [pc, #40]	@ (80067b4 <memp_free_pool+0x40>)
 800678c:	480a      	ldr	r0, [pc, #40]	@ (80067b8 <memp_free_pool+0x44>)
 800678e:	f00a f839 	bl	8010804 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <memp_free_pool+0x34>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff ffc1 	bl	8006728 <do_memp_free_pool>
 80067a6:	e000      	b.n	80067aa <memp_free_pool+0x36>
    return;
 80067a8:	bf00      	nop
}
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08011b3c 	.word	0x08011b3c
 80067b4:	08011bb8 	.word	0x08011bb8
 80067b8:	08011b90 	.word	0x08011b90

080067bc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d907      	bls.n	80067de <memp_free+0x22>
 80067ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <memp_free+0x44>)
 80067d0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80067d4:	490b      	ldr	r1, [pc, #44]	@ (8006804 <memp_free+0x48>)
 80067d6:	480c      	ldr	r0, [pc, #48]	@ (8006808 <memp_free+0x4c>)
 80067d8:	f00a f814 	bl	8010804 <iprintf>
 80067dc:	e00c      	b.n	80067f8 <memp_free+0x3c>

  if (mem == NULL) {
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	4a09      	ldr	r2, [pc, #36]	@ (800680c <memp_free+0x50>)
 80067e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff ff9a 	bl	8006728 <do_memp_free_pool>
 80067f4:	e000      	b.n	80067f8 <memp_free+0x3c>
    return;
 80067f6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	08011b3c 	.word	0x08011b3c
 8006804:	08011c0c 	.word	0x08011c0c
 8006808:	08011b90 	.word	0x08011b90
 800680c:	08015100 	.word	0x08015100

08006810 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d108      	bne.n	8006846 <netif_add+0x26>
 8006834:	4b57      	ldr	r3, [pc, #348]	@ (8006994 <netif_add+0x174>)
 8006836:	f240 1227 	movw	r2, #295	@ 0x127
 800683a:	4957      	ldr	r1, [pc, #348]	@ (8006998 <netif_add+0x178>)
 800683c:	4857      	ldr	r0, [pc, #348]	@ (800699c <netif_add+0x17c>)
 800683e:	f009 ffe1 	bl	8010804 <iprintf>
 8006842:	2300      	movs	r3, #0
 8006844:	e0a2      	b.n	800698c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d108      	bne.n	800685e <netif_add+0x3e>
 800684c:	4b51      	ldr	r3, [pc, #324]	@ (8006994 <netif_add+0x174>)
 800684e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006852:	4953      	ldr	r1, [pc, #332]	@ (80069a0 <netif_add+0x180>)
 8006854:	4851      	ldr	r0, [pc, #324]	@ (800699c <netif_add+0x17c>)
 8006856:	f009 ffd5 	bl	8010804 <iprintf>
 800685a:	2300      	movs	r3, #0
 800685c:	e096      	b.n	800698c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006864:	4b4f      	ldr	r3, [pc, #316]	@ (80069a4 <netif_add+0x184>)
 8006866:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800686e:	4b4d      	ldr	r3, [pc, #308]	@ (80069a4 <netif_add+0x184>)
 8006870:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006878:	4b4a      	ldr	r3, [pc, #296]	@ (80069a4 <netif_add+0x184>)
 800687a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a45      	ldr	r2, [pc, #276]	@ (80069a8 <netif_add+0x188>)
 8006892:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a3a      	ldr	r2, [r7, #32]
 80068ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80068ae:	4b3f      	ldr	r3, [pc, #252]	@ (80069ac <netif_add+0x18c>)
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f913 	bl	8006af0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	4798      	blx	r3
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <netif_add+0xba>
    return NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e058      	b.n	800698c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80068e0:	2bff      	cmp	r3, #255	@ 0xff
 80068e2:	d103      	bne.n	80068ec <netif_add+0xcc>
        netif->num = 0;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80068f0:	4b2f      	ldr	r3, [pc, #188]	@ (80069b0 <netif_add+0x190>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e02b      	b.n	8006950 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d106      	bne.n	800690e <netif_add+0xee>
 8006900:	4b24      	ldr	r3, [pc, #144]	@ (8006994 <netif_add+0x174>)
 8006902:	f240 128b 	movw	r2, #395	@ 0x18b
 8006906:	492b      	ldr	r1, [pc, #172]	@ (80069b4 <netif_add+0x194>)
 8006908:	4824      	ldr	r0, [pc, #144]	@ (800699c <netif_add+0x17c>)
 800690a:	f009 ff7b 	bl	8010804 <iprintf>
        num_netifs++;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2bff      	cmp	r3, #255	@ 0xff
 8006918:	dd06      	ble.n	8006928 <netif_add+0x108>
 800691a:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <netif_add+0x174>)
 800691c:	f240 128d 	movw	r2, #397	@ 0x18d
 8006920:	4925      	ldr	r1, [pc, #148]	@ (80069b8 <netif_add+0x198>)
 8006922:	481e      	ldr	r0, [pc, #120]	@ (800699c <netif_add+0x17c>)
 8006924:	f009 ff6e 	bl	8010804 <iprintf>
        if (netif2->num == netif->num) {
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006934:	429a      	cmp	r2, r3
 8006936:	d108      	bne.n	800694a <netif_add+0x12a>
          netif->num++;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800693e:	3301      	adds	r3, #1
 8006940:	b2da      	uxtb	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8006948:	e005      	b.n	8006956 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d0      	bne.n	80068f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1be      	bne.n	80068da <netif_add+0xba>
  }
  if (netif->num == 254) {
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006962:	2bfe      	cmp	r3, #254	@ 0xfe
 8006964:	d103      	bne.n	800696e <netif_add+0x14e>
    netif_num = 0;
 8006966:	4b11      	ldr	r3, [pc, #68]	@ (80069ac <netif_add+0x18c>)
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e006      	b.n	800697c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006974:	3301      	adds	r3, #1
 8006976:	b2da      	uxtb	r2, r3
 8006978:	4b0c      	ldr	r3, [pc, #48]	@ (80069ac <netif_add+0x18c>)
 800697a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <netif_add+0x190>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006984:	4a0a      	ldr	r2, [pc, #40]	@ (80069b0 <netif_add+0x190>)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800698a:	68fb      	ldr	r3, [r7, #12]
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	08011c28 	.word	0x08011c28
 8006998:	08011cbc 	.word	0x08011cbc
 800699c:	08011c78 	.word	0x08011c78
 80069a0:	08011cd8 	.word	0x08011cd8
 80069a4:	08015164 	.word	0x08015164
 80069a8:	08006dcb 	.word	0x08006dcb
 80069ac:	200080b0 	.word	0x200080b0
 80069b0:	200080a8 	.word	0x200080a8
 80069b4:	08011cfc 	.word	0x08011cfc
 80069b8:	08011d10 	.word	0x08011d10

080069bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f002 fdeb 	bl	80095a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f007 fb21 	bl	800e018 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80069d6:	bf00      	nop
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
	...

080069e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b086      	sub	sp, #24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <netif_do_set_ipaddr+0x20>
 80069f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006a68 <netif_do_set_ipaddr+0x88>)
 80069f4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80069f8:	491c      	ldr	r1, [pc, #112]	@ (8006a6c <netif_do_set_ipaddr+0x8c>)
 80069fa:	481d      	ldr	r0, [pc, #116]	@ (8006a70 <netif_do_set_ipaddr+0x90>)
 80069fc:	f009 ff02 	bl	8010804 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <netif_do_set_ipaddr+0x34>
 8006a06:	4b18      	ldr	r3, [pc, #96]	@ (8006a68 <netif_do_set_ipaddr+0x88>)
 8006a08:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8006a0c:	4917      	ldr	r1, [pc, #92]	@ (8006a6c <netif_do_set_ipaddr+0x8c>)
 8006a0e:	4818      	ldr	r0, [pc, #96]	@ (8006a70 <netif_do_set_ipaddr+0x90>)
 8006a10:	f009 fef8 	bl	8010804 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d01c      	beq.n	8006a5c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006a32:	f107 0314 	add.w	r3, r7, #20
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff ffbf 	bl	80069bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <netif_do_set_ipaddr+0x6a>
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	e000      	b.n	8006a4c <netif_do_set_ipaddr+0x6c>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006a50:	2101      	movs	r1, #1
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f8d2 	bl	8006bfc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	08011c28 	.word	0x08011c28
 8006a6c:	08011d40 	.word	0x08011d40
 8006a70:	08011c78 	.word	0x08011c78

08006a74 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3308      	adds	r3, #8
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d00a      	beq.n	8006aa4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <netif_do_set_netmask+0x26>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	e000      	b.n	8006a9c <netif_do_set_netmask+0x28>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d00a      	beq.n	8006ae2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <netif_do_set_gw+0x26>
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	e000      	b.n	8006ada <netif_do_set_gw+0x28>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006b80 <netif_set_addr+0x90>)
 8006b0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8006b16:	4b1a      	ldr	r3, [pc, #104]	@ (8006b80 <netif_set_addr+0x90>)
 8006b18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006b20:	4b17      	ldr	r3, [pc, #92]	@ (8006b80 <netif_set_addr+0x90>)
 8006b22:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <netif_set_addr+0x42>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <netif_set_addr+0x46>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <netif_set_addr+0x48>
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d006      	beq.n	8006b4e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006b40:	f107 0310 	add.w	r3, r7, #16
 8006b44:	461a      	mov	r2, r3
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f7ff ff49 	bl	80069e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff ff8e 	bl	8006a74 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7ff ffa8 	bl	8006ab2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006b68:	f107 0310 	add.w	r3, r7, #16
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff ff35 	bl	80069e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006b76:	bf00      	nop
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	08015164 	.word	0x08015164

08006b84 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006b8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ba0 <netif_set_default+0x1c>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	200080ac 	.word	0x200080ac

08006ba4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d107      	bne.n	8006bc2 <netif_set_up+0x1e>
 8006bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006bf0 <netif_set_up+0x4c>)
 8006bb4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006bb8:	490e      	ldr	r1, [pc, #56]	@ (8006bf4 <netif_set_up+0x50>)
 8006bba:	480f      	ldr	r0, [pc, #60]	@ (8006bf8 <netif_set_up+0x54>)
 8006bbc:	f009 fe22 	bl	8010804 <iprintf>
 8006bc0:	e013      	b.n	8006bea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10c      	bne.n	8006bea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006be2:	2103      	movs	r1, #3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f809 	bl	8006bfc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	08011c28 	.word	0x08011c28
 8006bf4:	08011db0 	.word	0x08011db0
 8006bf8:	08011c78 	.word	0x08011c78

08006bfc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <netif_issue_reports+0x20>
 8006c0e:	4b18      	ldr	r3, [pc, #96]	@ (8006c70 <netif_issue_reports+0x74>)
 8006c10:	f240 326d 	movw	r2, #877	@ 0x36d
 8006c14:	4917      	ldr	r1, [pc, #92]	@ (8006c74 <netif_issue_reports+0x78>)
 8006c16:	4818      	ldr	r0, [pc, #96]	@ (8006c78 <netif_issue_reports+0x7c>)
 8006c18:	f009 fdf4 	bl	8010804 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d01e      	beq.n	8006c68 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c30:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d013      	beq.n	8006c6a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00e      	beq.n	8006c6a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f008 f943 	bl	800eeec <etharp_request>
 8006c66:	e000      	b.n	8006c6a <netif_issue_reports+0x6e>
    return;
 8006c68:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	08011c28 	.word	0x08011c28
 8006c74:	08011dcc 	.word	0x08011dcc
 8006c78:	08011c78 	.word	0x08011c78

08006c7c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d107      	bne.n	8006c9a <netif_set_down+0x1e>
 8006c8a:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <netif_set_down+0x58>)
 8006c8c:	f240 329b 	movw	r2, #923	@ 0x39b
 8006c90:	4911      	ldr	r1, [pc, #68]	@ (8006cd8 <netif_set_down+0x5c>)
 8006c92:	4812      	ldr	r0, [pc, #72]	@ (8006cdc <netif_set_down+0x60>)
 8006c94:	f009 fdb6 	bl	8010804 <iprintf>
 8006c98:	e019      	b.n	8006cce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d012      	beq.n	8006cce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f007 fccd 	bl	800e668 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	08011c28 	.word	0x08011c28
 8006cd8:	08011df0 	.word	0x08011df0
 8006cdc:	08011c78 	.word	0x08011c78

08006ce0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <netif_set_link_up+0x1e>
 8006cee:	4b13      	ldr	r3, [pc, #76]	@ (8006d3c <netif_set_link_up+0x5c>)
 8006cf0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8006cf4:	4912      	ldr	r1, [pc, #72]	@ (8006d40 <netif_set_link_up+0x60>)
 8006cf6:	4813      	ldr	r0, [pc, #76]	@ (8006d44 <netif_set_link_up+0x64>)
 8006cf8:	f009 fd84 	bl	8010804 <iprintf>
 8006cfc:	e01b      	b.n	8006d36 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d114      	bne.n	8006d36 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d12:	f043 0304 	orr.w	r3, r3, #4
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006d1e:	2103      	movs	r1, #3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ff6b 	bl	8006bfc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <netif_set_link_up+0x56>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	08011c28 	.word	0x08011c28
 8006d40:	08011e10 	.word	0x08011e10
 8006d44:	08011c78 	.word	0x08011c78

08006d48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d107      	bne.n	8006d66 <netif_set_link_down+0x1e>
 8006d56:	4b11      	ldr	r3, [pc, #68]	@ (8006d9c <netif_set_link_down+0x54>)
 8006d58:	f240 4206 	movw	r2, #1030	@ 0x406
 8006d5c:	4910      	ldr	r1, [pc, #64]	@ (8006da0 <netif_set_link_down+0x58>)
 8006d5e:	4811      	ldr	r0, [pc, #68]	@ (8006da4 <netif_set_link_down+0x5c>)
 8006d60:	f009 fd50 	bl	8010804 <iprintf>
 8006d64:	e017      	b.n	8006d96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006d7a:	f023 0304 	bic.w	r3, r3, #4
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <netif_set_link_down+0x4e>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	08011c28 	.word	0x08011c28
 8006da0:	08011e34 	.word	0x08011e34
 8006da4:	08011c78 	.word	0x08011c78

08006da8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	61da      	str	r2, [r3, #28]
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	370c      	adds	r7, #12
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006dd6:	f06f 030b 	mvn.w	r3, #11
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d013      	beq.n	8006e20 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006df8:	4b0d      	ldr	r3, [pc, #52]	@ (8006e30 <netif_get_by_index+0x48>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e00c      	b.n	8006e1a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e06:	3301      	adds	r3, #1
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	79fa      	ldrb	r2, [r7, #7]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d101      	bne.n	8006e14 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	e006      	b.n	8006e22 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1ef      	bne.n	8006e00 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	200080a8 	.word	0x200080a8

08006e34 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e6c <pbuf_free_ooseq+0x38>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <pbuf_free_ooseq+0x3c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	607b      	str	r3, [r7, #4]
 8006e46:	e00a      	b.n	8006e5e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 fbe5 	bl	8009620 <tcp_free_ooseq>
      return;
 8006e56:	e005      	b.n	8006e64 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f1      	bne.n	8006e48 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200080b1 	.word	0x200080b1
 8006e70:	200080c0 	.word	0x200080c0

08006e74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006e78:	4b03      	ldr	r3, [pc, #12]	@ (8006e88 <pbuf_pool_is_empty+0x14>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006e7e:	bf00      	nop
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	200080b1 	.word	0x200080b1

08006e8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4611      	mov	r1, r2
 8006e98:	461a      	mov	r2, r3
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	80fb      	strh	r3, [r7, #6]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	88fa      	ldrh	r2, [r7, #6]
 8006eb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	88ba      	ldrh	r2, [r7, #4]
 8006eb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006eba:	8b3b      	ldrh	r3, [r7, #24]
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	7f3a      	ldrb	r2, [r7, #28]
 8006ec6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	73da      	strb	r2, [r3, #15]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08c      	sub	sp, #48	@ 0x30
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	71fb      	strb	r3, [r7, #7]
 8006eea:	460b      	mov	r3, r1
 8006eec:	80bb      	strh	r3, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006ef6:	887b      	ldrh	r3, [r7, #2]
 8006ef8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006efc:	d07f      	beq.n	8006ffe <pbuf_alloc+0x11e>
 8006efe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8006f02:	f300 80c8 	bgt.w	8007096 <pbuf_alloc+0x1b6>
 8006f06:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006f0a:	d010      	beq.n	8006f2e <pbuf_alloc+0x4e>
 8006f0c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8006f10:	f300 80c1 	bgt.w	8007096 <pbuf_alloc+0x1b6>
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d002      	beq.n	8006f1e <pbuf_alloc+0x3e>
 8006f18:	2b41      	cmp	r3, #65	@ 0x41
 8006f1a:	f040 80bc 	bne.w	8007096 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006f1e:	887a      	ldrh	r2, [r7, #2]
 8006f20:	88bb      	ldrh	r3, [r7, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	2000      	movs	r0, #0
 8006f26:	f000 f8d1 	bl	80070cc <pbuf_alloc_reference>
 8006f2a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8006f2c:	e0bd      	b.n	80070aa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006f36:	88bb      	ldrh	r3, [r7, #4]
 8006f38:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006f3a:	2008      	movs	r0, #8
 8006f3c:	f7ff fbce 	bl	80066dc <memp_malloc>
 8006f40:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d109      	bne.n	8006f5c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006f48:	f7ff ff94 	bl	8006e74 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006f52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f54:	f000 faa8 	bl	80074a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e0a7      	b.n	80070ac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006f5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f5e:	3303      	adds	r3, #3
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	8b7a      	ldrh	r2, [r7, #26]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	bf28      	it	cs
 8006f74:	4613      	movcs	r3, r2
 8006f76:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006f7a:	3310      	adds	r3, #16
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4413      	add	r3, r2
 8006f80:	3303      	adds	r3, #3
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	4618      	mov	r0, r3
 8006f88:	89f9      	ldrh	r1, [r7, #14]
 8006f8a:	8b7a      	ldrh	r2, [r7, #26]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	887b      	ldrh	r3, [r7, #2]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	460b      	mov	r3, r1
 8006f96:	4601      	mov	r1, r0
 8006f98:	6938      	ldr	r0, [r7, #16]
 8006f9a:	f7ff ff77 	bl	8006e8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d006      	beq.n	8006fb8 <pbuf_alloc+0xd8>
 8006faa:	4b42      	ldr	r3, [pc, #264]	@ (80070b4 <pbuf_alloc+0x1d4>)
 8006fac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006fb0:	4941      	ldr	r1, [pc, #260]	@ (80070b8 <pbuf_alloc+0x1d8>)
 8006fb2:	4842      	ldr	r0, [pc, #264]	@ (80070bc <pbuf_alloc+0x1dc>)
 8006fb4:	f009 fc26 	bl	8010804 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006fb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006fba:	3303      	adds	r3, #3
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8006fc4:	d106      	bne.n	8006fd4 <pbuf_alloc+0xf4>
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80070b4 <pbuf_alloc+0x1d4>)
 8006fc8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8006fcc:	493c      	ldr	r1, [pc, #240]	@ (80070c0 <pbuf_alloc+0x1e0>)
 8006fce:	483b      	ldr	r0, [pc, #236]	@ (80070bc <pbuf_alloc+0x1dc>)
 8006fd0:	f009 fc18 	bl	8010804 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fde:	e002      	b.n	8006fe6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006fea:	8b7a      	ldrh	r2, [r7, #26]
 8006fec:	89fb      	ldrh	r3, [r7, #14]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8006ff6:	8b7b      	ldrh	r3, [r7, #26]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d19e      	bne.n	8006f3a <pbuf_alloc+0x5a>
      break;
 8006ffc:	e055      	b.n	80070aa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006ffe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007000:	3303      	adds	r3, #3
 8007002:	b29b      	uxth	r3, r3
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	b29a      	uxth	r2, r3
 800700a:	88bb      	ldrh	r3, [r7, #4]
 800700c:	3303      	adds	r3, #3
 800700e:	b29b      	uxth	r3, r3
 8007010:	f023 0303 	bic.w	r3, r3, #3
 8007014:	b29b      	uxth	r3, r3
 8007016:	4413      	add	r3, r2
 8007018:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800701a:	8b3b      	ldrh	r3, [r7, #24]
 800701c:	3310      	adds	r3, #16
 800701e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007020:	8b3a      	ldrh	r2, [r7, #24]
 8007022:	88bb      	ldrh	r3, [r7, #4]
 8007024:	3303      	adds	r3, #3
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	429a      	cmp	r2, r3
 800702c:	d306      	bcc.n	800703c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800702e:	8afa      	ldrh	r2, [r7, #22]
 8007030:	88bb      	ldrh	r3, [r7, #4]
 8007032:	3303      	adds	r3, #3
 8007034:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d201      	bcs.n	8007040 <pbuf_alloc+0x160>
        return NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	e035      	b.n	80070ac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007040:	8afb      	ldrh	r3, [r7, #22]
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff f9ba 	bl	80063bc <mem_malloc>
 8007048:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <pbuf_alloc+0x174>
        return NULL;
 8007050:	2300      	movs	r3, #0
 8007052:	e02b      	b.n	80070ac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007054:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007056:	3310      	adds	r3, #16
 8007058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705a:	4413      	add	r3, r2
 800705c:	3303      	adds	r3, #3
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	4618      	mov	r0, r3
 8007064:	88b9      	ldrh	r1, [r7, #4]
 8007066:	88ba      	ldrh	r2, [r7, #4]
 8007068:	2300      	movs	r3, #0
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	460b      	mov	r3, r1
 8007072:	4601      	mov	r1, r0
 8007074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007076:	f7ff ff09 	bl	8006e8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800707a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d010      	beq.n	80070a8 <pbuf_alloc+0x1c8>
 8007086:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <pbuf_alloc+0x1d4>)
 8007088:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800708c:	490d      	ldr	r1, [pc, #52]	@ (80070c4 <pbuf_alloc+0x1e4>)
 800708e:	480b      	ldr	r0, [pc, #44]	@ (80070bc <pbuf_alloc+0x1dc>)
 8007090:	f009 fbb8 	bl	8010804 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007094:	e008      	b.n	80070a8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007096:	4b07      	ldr	r3, [pc, #28]	@ (80070b4 <pbuf_alloc+0x1d4>)
 8007098:	f240 1227 	movw	r2, #295	@ 0x127
 800709c:	490a      	ldr	r1, [pc, #40]	@ (80070c8 <pbuf_alloc+0x1e8>)
 800709e:	4807      	ldr	r0, [pc, #28]	@ (80070bc <pbuf_alloc+0x1dc>)
 80070a0:	f009 fbb0 	bl	8010804 <iprintf>
      return NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e001      	b.n	80070ac <pbuf_alloc+0x1cc>
      break;
 80070a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3728      	adds	r7, #40	@ 0x28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	08011e58 	.word	0x08011e58
 80070b8:	08011e88 	.word	0x08011e88
 80070bc:	08011eb8 	.word	0x08011eb8
 80070c0:	08011ee0 	.word	0x08011ee0
 80070c4:	08011f14 	.word	0x08011f14
 80070c8:	08011f40 	.word	0x08011f40

080070cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	807b      	strh	r3, [r7, #2]
 80070d8:	4613      	mov	r3, r2
 80070da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80070dc:	883b      	ldrh	r3, [r7, #0]
 80070de:	2b41      	cmp	r3, #65	@ 0x41
 80070e0:	d009      	beq.n	80070f6 <pbuf_alloc_reference+0x2a>
 80070e2:	883b      	ldrh	r3, [r7, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d006      	beq.n	80070f6 <pbuf_alloc_reference+0x2a>
 80070e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <pbuf_alloc_reference+0x5c>)
 80070ea:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80070ee:	490f      	ldr	r1, [pc, #60]	@ (800712c <pbuf_alloc_reference+0x60>)
 80070f0:	480f      	ldr	r0, [pc, #60]	@ (8007130 <pbuf_alloc_reference+0x64>)
 80070f2:	f009 fb87 	bl	8010804 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80070f6:	2007      	movs	r0, #7
 80070f8:	f7ff faf0 	bl	80066dc <memp_malloc>
 80070fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d101      	bne.n	8007108 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007104:	2300      	movs	r3, #0
 8007106:	e00b      	b.n	8007120 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007108:	8879      	ldrh	r1, [r7, #2]
 800710a:	887a      	ldrh	r2, [r7, #2]
 800710c:	2300      	movs	r3, #0
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	883b      	ldrh	r3, [r7, #0]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	460b      	mov	r3, r1
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f7ff feb7 	bl	8006e8c <pbuf_init_alloced_pbuf>
  return p;
 800711e:	68fb      	ldr	r3, [r7, #12]
}
 8007120:	4618      	mov	r0, r3
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	08011e58 	.word	0x08011e58
 800712c:	08011f5c 	.word	0x08011f5c
 8007130:	08011eb8 	.word	0x08011eb8

08007134 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af02      	add	r7, sp, #8
 800713a:	607b      	str	r3, [r7, #4]
 800713c:	4603      	mov	r3, r0
 800713e:	73fb      	strb	r3, [r7, #15]
 8007140:	460b      	mov	r3, r1
 8007142:	81bb      	strh	r3, [r7, #12]
 8007144:	4613      	mov	r3, r2
 8007146:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800714c:	8a7b      	ldrh	r3, [r7, #18]
 800714e:	3303      	adds	r3, #3
 8007150:	f023 0203 	bic.w	r2, r3, #3
 8007154:	89bb      	ldrh	r3, [r7, #12]
 8007156:	441a      	add	r2, r3
 8007158:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800715a:	429a      	cmp	r2, r3
 800715c:	d901      	bls.n	8007162 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	e018      	b.n	8007194 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007168:	8a7b      	ldrh	r3, [r7, #18]
 800716a:	3303      	adds	r3, #3
 800716c:	f023 0303 	bic.w	r3, r3, #3
 8007170:	6a3a      	ldr	r2, [r7, #32]
 8007172:	4413      	add	r3, r2
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	e001      	b.n	800717c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	89b9      	ldrh	r1, [r7, #12]
 8007180:	89ba      	ldrh	r2, [r7, #12]
 8007182:	2302      	movs	r3, #2
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	897b      	ldrh	r3, [r7, #10]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	460b      	mov	r3, r1
 800718c:	6979      	ldr	r1, [r7, #20]
 800718e:	f7ff fe7d 	bl	8006e8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007192:	687b      	ldr	r3, [r7, #4]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <pbuf_realloc+0x20>
 80071ae:	4b3a      	ldr	r3, [pc, #232]	@ (8007298 <pbuf_realloc+0xfc>)
 80071b0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80071b4:	4939      	ldr	r1, [pc, #228]	@ (800729c <pbuf_realloc+0x100>)
 80071b6:	483a      	ldr	r0, [pc, #232]	@ (80072a0 <pbuf_realloc+0x104>)
 80071b8:	f009 fb24 	bl	8010804 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	891b      	ldrh	r3, [r3, #8]
 80071c0:	887a      	ldrh	r2, [r7, #2]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d263      	bcs.n	800728e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	891a      	ldrh	r2, [r3, #8]
 80071ca:	887b      	ldrh	r3, [r7, #2]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80071d0:	887b      	ldrh	r3, [r7, #2]
 80071d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80071d8:	e018      	b.n	800720c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	895b      	ldrh	r3, [r3, #10]
 80071de:	897a      	ldrh	r2, [r7, #10]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	891a      	ldrh	r2, [r3, #8]
 80071e8:	893b      	ldrh	r3, [r7, #8]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <pbuf_realloc+0x70>
 80071fe:	4b26      	ldr	r3, [pc, #152]	@ (8007298 <pbuf_realloc+0xfc>)
 8007200:	f240 12af 	movw	r2, #431	@ 0x1af
 8007204:	4927      	ldr	r1, [pc, #156]	@ (80072a4 <pbuf_realloc+0x108>)
 8007206:	4826      	ldr	r0, [pc, #152]	@ (80072a0 <pbuf_realloc+0x104>)
 8007208:	f009 fafc 	bl	8010804 <iprintf>
  while (rem_len > q->len) {
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	895b      	ldrh	r3, [r3, #10]
 8007210:	897a      	ldrh	r2, [r7, #10]
 8007212:	429a      	cmp	r2, r3
 8007214:	d8e1      	bhi.n	80071da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	7b1b      	ldrb	r3, [r3, #12]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	2b00      	cmp	r3, #0
 8007220:	d121      	bne.n	8007266 <pbuf_realloc+0xca>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	895b      	ldrh	r3, [r3, #10]
 8007226:	897a      	ldrh	r2, [r7, #10]
 8007228:	429a      	cmp	r2, r3
 800722a:	d01c      	beq.n	8007266 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	7b5b      	ldrb	r3, [r3, #13]
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d116      	bne.n	8007266 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	b29a      	uxth	r2, r3
 8007242:	897b      	ldrh	r3, [r7, #10]
 8007244:	4413      	add	r3, r2
 8007246:	b29b      	uxth	r3, r3
 8007248:	4619      	mov	r1, r3
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7fe ffba 	bl	80061c4 <mem_trim>
 8007250:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <pbuf_realloc+0xca>
 8007258:	4b0f      	ldr	r3, [pc, #60]	@ (8007298 <pbuf_realloc+0xfc>)
 800725a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800725e:	4912      	ldr	r1, [pc, #72]	@ (80072a8 <pbuf_realloc+0x10c>)
 8007260:	480f      	ldr	r0, [pc, #60]	@ (80072a0 <pbuf_realloc+0x104>)
 8007262:	f009 facf 	bl	8010804 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	897a      	ldrh	r2, [r7, #10]
 800726a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	895a      	ldrh	r2, [r3, #10]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f911 	bl	80074a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	e000      	b.n	8007290 <pbuf_realloc+0xf4>
    return;
 800728e:	bf00      	nop

}
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	08011e58 	.word	0x08011e58
 800729c:	08011f70 	.word	0x08011f70
 80072a0:	08011eb8 	.word	0x08011eb8
 80072a4:	08011f88 	.word	0x08011f88
 80072a8:	08011fa0 	.word	0x08011fa0

080072ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <pbuf_add_header_impl+0x22>
 80072c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007370 <pbuf_add_header_impl+0xc4>)
 80072c2:	f240 12df 	movw	r2, #479	@ 0x1df
 80072c6:	492b      	ldr	r1, [pc, #172]	@ (8007374 <pbuf_add_header_impl+0xc8>)
 80072c8:	482b      	ldr	r0, [pc, #172]	@ (8007378 <pbuf_add_header_impl+0xcc>)
 80072ca:	f009 fa9b 	bl	8010804 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <pbuf_add_header_impl+0x30>
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072da:	d301      	bcc.n	80072e0 <pbuf_add_header_impl+0x34>
    return 1;
 80072dc:	2301      	movs	r3, #1
 80072de:	e043      	b.n	8007368 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <pbuf_add_header_impl+0x3e>
    return 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e03e      	b.n	8007368 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	891a      	ldrh	r2, [r3, #8]
 80072f2:	8a7b      	ldrh	r3, [r7, #18]
 80072f4:	4413      	add	r3, r2
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	8a7a      	ldrh	r2, [r7, #18]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d901      	bls.n	8007302 <pbuf_add_header_impl+0x56>
    return 1;
 80072fe:	2301      	movs	r3, #1
 8007300:	e032      	b.n	8007368 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	7b1b      	ldrb	r3, [r3, #12]
 8007306:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007308:	8a3b      	ldrh	r3, [r7, #16]
 800730a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00c      	beq.n	800732c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	425b      	negs	r3, r3
 800731a:	4413      	add	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3310      	adds	r3, #16
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	429a      	cmp	r2, r3
 8007326:	d20d      	bcs.n	8007344 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007328:	2301      	movs	r3, #1
 800732a:	e01d      	b.n	8007368 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d006      	beq.n	8007340 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	425b      	negs	r3, r3
 800733a:	4413      	add	r3, r2
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e001      	b.n	8007344 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007340:	2301      	movs	r3, #1
 8007342:	e011      	b.n	8007368 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	895a      	ldrh	r2, [r3, #10]
 800734e:	8a7b      	ldrh	r3, [r7, #18]
 8007350:	4413      	add	r3, r2
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	891a      	ldrh	r2, [r3, #8]
 800735c:	8a7b      	ldrh	r3, [r7, #18]
 800735e:	4413      	add	r3, r2
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	811a      	strh	r2, [r3, #8]


  return 0;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	08011e58 	.word	0x08011e58
 8007374:	08011fbc 	.word	0x08011fbc
 8007378:	08011eb8 	.word	0x08011eb8

0800737c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007386:	2200      	movs	r2, #0
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff ff8e 	bl	80072ac <pbuf_add_header_impl>
 8007390:	4603      	mov	r3, r0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <pbuf_remove_header+0x1e>
 80073ac:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <pbuf_remove_header+0x94>)
 80073ae:	f240 224b 	movw	r2, #587	@ 0x24b
 80073b2:	4920      	ldr	r1, [pc, #128]	@ (8007434 <pbuf_remove_header+0x98>)
 80073b4:	4820      	ldr	r0, [pc, #128]	@ (8007438 <pbuf_remove_header+0x9c>)
 80073b6:	f009 fa25 	bl	8010804 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <pbuf_remove_header+0x2c>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c6:	d301      	bcc.n	80073cc <pbuf_remove_header+0x30>
    return 1;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e02c      	b.n	8007426 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <pbuf_remove_header+0x3a>
    return 0;
 80073d2:	2300      	movs	r3, #0
 80073d4:	e027      	b.n	8007426 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	895b      	ldrh	r3, [r3, #10]
 80073de:	89fa      	ldrh	r2, [r7, #14]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d908      	bls.n	80073f6 <pbuf_remove_header+0x5a>
 80073e4:	4b12      	ldr	r3, [pc, #72]	@ (8007430 <pbuf_remove_header+0x94>)
 80073e6:	f240 2255 	movw	r2, #597	@ 0x255
 80073ea:	4914      	ldr	r1, [pc, #80]	@ (800743c <pbuf_remove_header+0xa0>)
 80073ec:	4812      	ldr	r0, [pc, #72]	@ (8007438 <pbuf_remove_header+0x9c>)
 80073ee:	f009 fa09 	bl	8010804 <iprintf>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e017      	b.n	8007426 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	441a      	add	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	895a      	ldrh	r2, [r3, #10]
 800740c:	89fb      	ldrh	r3, [r7, #14]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	b29a      	uxth	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	891a      	ldrh	r2, [r3, #8]
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	08011e58 	.word	0x08011e58
 8007434:	08011fbc 	.word	0x08011fbc
 8007438:	08011eb8 	.word	0x08011eb8
 800743c:	08011fc8 	.word	0x08011fc8

08007440 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	460b      	mov	r3, r1
 800744a:	807b      	strh	r3, [r7, #2]
 800744c:	4613      	mov	r3, r2
 800744e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007450:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007454:	2b00      	cmp	r3, #0
 8007456:	da08      	bge.n	800746a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800745c:	425b      	negs	r3, r3
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff9b 	bl	800739c <pbuf_remove_header>
 8007466:	4603      	mov	r3, r0
 8007468:	e007      	b.n	800747a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800746a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800746e:	787a      	ldrb	r2, [r7, #1]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff ff1a 	bl	80072ac <pbuf_add_header_impl>
 8007478:	4603      	mov	r3, r0
  }
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800748e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007492:	2201      	movs	r2, #1
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff ffd2 	bl	8007440 <pbuf_header_impl>
 800749c:	4603      	mov	r3, r0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <pbuf_free+0x22>
 80074bc:	4b38      	ldr	r3, [pc, #224]	@ (80075a0 <pbuf_free+0xf8>)
 80074be:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80074c2:	4938      	ldr	r1, [pc, #224]	@ (80075a4 <pbuf_free+0xfc>)
 80074c4:	4838      	ldr	r0, [pc, #224]	@ (80075a8 <pbuf_free+0x100>)
 80074c6:	f009 f99d 	bl	8010804 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e063      	b.n	8007596 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80074d2:	e05c      	b.n	800758e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	7b9b      	ldrb	r3, [r3, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <pbuf_free+0x42>
 80074dc:	4b30      	ldr	r3, [pc, #192]	@ (80075a0 <pbuf_free+0xf8>)
 80074de:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80074e2:	4932      	ldr	r1, [pc, #200]	@ (80075ac <pbuf_free+0x104>)
 80074e4:	4830      	ldr	r0, [pc, #192]	@ (80075a8 <pbuf_free+0x100>)
 80074e6:	f009 f98d 	bl	8010804 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7b9b      	ldrb	r3, [r3, #14]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	739a      	strb	r2, [r3, #14]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	7b9b      	ldrb	r3, [r3, #14]
 80074fa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80074fc:	7dbb      	ldrb	r3, [r7, #22]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d143      	bne.n	800758a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7b1b      	ldrb	r3, [r3, #12]
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	7b5b      	ldrb	r3, [r3, #13]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d011      	beq.n	8007542 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <pbuf_free+0x90>
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <pbuf_free+0xf8>)
 800752c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007530:	491f      	ldr	r1, [pc, #124]	@ (80075b0 <pbuf_free+0x108>)
 8007532:	481d      	ldr	r0, [pc, #116]	@ (80075a8 <pbuf_free+0x100>)
 8007534:	f009 f966 	bl	8010804 <iprintf>
        pc->custom_free_function(p);
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
 8007540:	e01d      	b.n	800757e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d104      	bne.n	8007552 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	2008      	movs	r0, #8
 800754c:	f7ff f936 	bl	80067bc <memp_free>
 8007550:	e015      	b.n	800757e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d104      	bne.n	8007562 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	2007      	movs	r0, #7
 800755c:	f7ff f92e 	bl	80067bc <memp_free>
 8007560:	e00d      	b.n	800757e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <pbuf_free+0xc8>
          mem_free(p);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fe fdc1 	bl	80060f0 <mem_free>
 800756e:	e006      	b.n	800757e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <pbuf_free+0xf8>)
 8007572:	f240 320f 	movw	r2, #783	@ 0x30f
 8007576:	490f      	ldr	r1, [pc, #60]	@ (80075b4 <pbuf_free+0x10c>)
 8007578:	480b      	ldr	r0, [pc, #44]	@ (80075a8 <pbuf_free+0x100>)
 800757a:	f009 f943 	bl	8010804 <iprintf>
        }
      }
      count++;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	3301      	adds	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	607b      	str	r3, [r7, #4]
 8007588:	e001      	b.n	800758e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d19f      	bne.n	80074d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	08011e58 	.word	0x08011e58
 80075a4:	08011fbc 	.word	0x08011fbc
 80075a8:	08011eb8 	.word	0x08011eb8
 80075ac:	08011fe8 	.word	0x08011fe8
 80075b0:	08012000 	.word	0x08012000
 80075b4:	08012024 	.word	0x08012024

080075b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80075c4:	e005      	b.n	80075d2 <pbuf_clen+0x1a>
    ++len;
 80075c6:	89fb      	ldrh	r3, [r7, #14]
 80075c8:	3301      	adds	r3, #1
 80075ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f6      	bne.n	80075c6 <pbuf_clen+0xe>
  }
  return len;
 80075d8:	89fb      	ldrh	r3, [r7, #14]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
	...

080075e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7b9b      	ldrb	r3, [r3, #14]
 80075fa:	3301      	adds	r3, #1
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7b9b      	ldrb	r3, [r3, #14]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <pbuf_ref+0x30>
 800760a:	4b05      	ldr	r3, [pc, #20]	@ (8007620 <pbuf_ref+0x38>)
 800760c:	f240 3242 	movw	r2, #834	@ 0x342
 8007610:	4904      	ldr	r1, [pc, #16]	@ (8007624 <pbuf_ref+0x3c>)
 8007612:	4805      	ldr	r0, [pc, #20]	@ (8007628 <pbuf_ref+0x40>)
 8007614:	f009 f8f6 	bl	8010804 <iprintf>
  }
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08011e58 	.word	0x08011e58
 8007624:	08012038 	.word	0x08012038
 8007628:	08011eb8 	.word	0x08011eb8

0800762c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <pbuf_cat+0x16>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <pbuf_cat+0x26>
 8007642:	4b20      	ldr	r3, [pc, #128]	@ (80076c4 <pbuf_cat+0x98>)
 8007644:	f240 3259 	movw	r2, #857	@ 0x359
 8007648:	491f      	ldr	r1, [pc, #124]	@ (80076c8 <pbuf_cat+0x9c>)
 800764a:	4820      	ldr	r0, [pc, #128]	@ (80076cc <pbuf_cat+0xa0>)
 800764c:	f009 f8da 	bl	8010804 <iprintf>
 8007650:	e034      	b.n	80076bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	e00a      	b.n	800766e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	891a      	ldrh	r2, [r3, #8]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	891b      	ldrh	r3, [r3, #8]
 8007660:	4413      	add	r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1f0      	bne.n	8007658 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	891a      	ldrh	r2, [r3, #8]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	895b      	ldrh	r3, [r3, #10]
 800767e:	429a      	cmp	r2, r3
 8007680:	d006      	beq.n	8007690 <pbuf_cat+0x64>
 8007682:	4b10      	ldr	r3, [pc, #64]	@ (80076c4 <pbuf_cat+0x98>)
 8007684:	f240 3262 	movw	r2, #866	@ 0x362
 8007688:	4911      	ldr	r1, [pc, #68]	@ (80076d0 <pbuf_cat+0xa4>)
 800768a:	4810      	ldr	r0, [pc, #64]	@ (80076cc <pbuf_cat+0xa0>)
 800768c:	f009 f8ba 	bl	8010804 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d006      	beq.n	80076a6 <pbuf_cat+0x7a>
 8007698:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <pbuf_cat+0x98>)
 800769a:	f240 3263 	movw	r2, #867	@ 0x363
 800769e:	490d      	ldr	r1, [pc, #52]	@ (80076d4 <pbuf_cat+0xa8>)
 80076a0:	480a      	ldr	r0, [pc, #40]	@ (80076cc <pbuf_cat+0xa0>)
 80076a2:	f009 f8af 	bl	8010804 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	891a      	ldrh	r2, [r3, #8]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	891b      	ldrh	r3, [r3, #8]
 80076ae:	4413      	add	r3, r2
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	08011e58 	.word	0x08011e58
 80076c8:	0801204c 	.word	0x0801204c
 80076cc:	08011eb8 	.word	0x08011eb8
 80076d0:	08012084 	.word	0x08012084
 80076d4:	080120b4 	.word	0x080120b4

080076d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80076e2:	2300      	movs	r3, #0
 80076e4:	617b      	str	r3, [r7, #20]
 80076e6:	2300      	movs	r3, #0
 80076e8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <pbuf_copy+0x2a>
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <pbuf_copy+0x2a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	891a      	ldrh	r2, [r3, #8]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	891b      	ldrh	r3, [r3, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d209      	bcs.n	8007716 <pbuf_copy+0x3e>
 8007702:	4b57      	ldr	r3, [pc, #348]	@ (8007860 <pbuf_copy+0x188>)
 8007704:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007708:	4956      	ldr	r1, [pc, #344]	@ (8007864 <pbuf_copy+0x18c>)
 800770a:	4857      	ldr	r0, [pc, #348]	@ (8007868 <pbuf_copy+0x190>)
 800770c:	f009 f87a 	bl	8010804 <iprintf>
 8007710:	f06f 030f 	mvn.w	r3, #15
 8007714:	e09f      	b.n	8007856 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	895b      	ldrh	r3, [r3, #10]
 800771a:	461a      	mov	r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	1ad2      	subs	r2, r2, r3
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	895b      	ldrh	r3, [r3, #10]
 8007724:	4619      	mov	r1, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1acb      	subs	r3, r1, r3
 800772a:	429a      	cmp	r2, r3
 800772c:	d306      	bcc.n	800773c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	895b      	ldrh	r3, [r3, #10]
 8007732:	461a      	mov	r2, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e005      	b.n	8007748 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	895b      	ldrh	r3, [r3, #10]
 8007740:	461a      	mov	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	18d0      	adds	r0, r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4413      	add	r3, r2
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4619      	mov	r1, r3
 800775c:	f009 f94b 	bl	80109f6 <memcpy>
    offset_to += len;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4413      	add	r3, r2
 800776e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	895b      	ldrh	r3, [r3, #10]
 8007774:	461a      	mov	r2, r3
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	4293      	cmp	r3, r2
 800777a:	d906      	bls.n	800778a <pbuf_copy+0xb2>
 800777c:	4b38      	ldr	r3, [pc, #224]	@ (8007860 <pbuf_copy+0x188>)
 800777e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007782:	493a      	ldr	r1, [pc, #232]	@ (800786c <pbuf_copy+0x194>)
 8007784:	4838      	ldr	r0, [pc, #224]	@ (8007868 <pbuf_copy+0x190>)
 8007786:	f009 f83d 	bl	8010804 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	895b      	ldrh	r3, [r3, #10]
 800778e:	461a      	mov	r2, r3
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4293      	cmp	r3, r2
 8007794:	d906      	bls.n	80077a4 <pbuf_copy+0xcc>
 8007796:	4b32      	ldr	r3, [pc, #200]	@ (8007860 <pbuf_copy+0x188>)
 8007798:	f240 32da 	movw	r2, #986	@ 0x3da
 800779c:	4934      	ldr	r1, [pc, #208]	@ (8007870 <pbuf_copy+0x198>)
 800779e:	4832      	ldr	r0, [pc, #200]	@ (8007868 <pbuf_copy+0x190>)
 80077a0:	f009 f830 	bl	8010804 <iprintf>
    if (offset_from >= p_from->len) {
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	895b      	ldrh	r3, [r3, #10]
 80077a8:	461a      	mov	r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d304      	bcc.n	80077ba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	895b      	ldrh	r3, [r3, #10]
 80077be:	461a      	mov	r2, r3
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d114      	bne.n	80077f0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10c      	bne.n	80077f0 <pbuf_copy+0x118>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d009      	beq.n	80077f0 <pbuf_copy+0x118>
 80077dc:	4b20      	ldr	r3, [pc, #128]	@ (8007860 <pbuf_copy+0x188>)
 80077de:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80077e2:	4924      	ldr	r1, [pc, #144]	@ (8007874 <pbuf_copy+0x19c>)
 80077e4:	4820      	ldr	r0, [pc, #128]	@ (8007868 <pbuf_copy+0x190>)
 80077e6:	f009 f80d 	bl	8010804 <iprintf>
 80077ea:	f06f 030f 	mvn.w	r3, #15
 80077ee:	e032      	b.n	8007856 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d013      	beq.n	800781e <pbuf_copy+0x146>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	895a      	ldrh	r2, [r3, #10]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	891b      	ldrh	r3, [r3, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d10d      	bne.n	800781e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <pbuf_copy+0x146>
 800780a:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <pbuf_copy+0x188>)
 800780c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007810:	4919      	ldr	r1, [pc, #100]	@ (8007878 <pbuf_copy+0x1a0>)
 8007812:	4815      	ldr	r0, [pc, #84]	@ (8007868 <pbuf_copy+0x190>)
 8007814:	f008 fff6 	bl	8010804 <iprintf>
 8007818:	f06f 0305 	mvn.w	r3, #5
 800781c:	e01b      	b.n	8007856 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d013      	beq.n	800784c <pbuf_copy+0x174>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	895a      	ldrh	r2, [r3, #10]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	891b      	ldrh	r3, [r3, #8]
 800782c:	429a      	cmp	r2, r3
 800782e:	d10d      	bne.n	800784c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <pbuf_copy+0x174>
 8007838:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <pbuf_copy+0x188>)
 800783a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800783e:	490e      	ldr	r1, [pc, #56]	@ (8007878 <pbuf_copy+0x1a0>)
 8007840:	4809      	ldr	r0, [pc, #36]	@ (8007868 <pbuf_copy+0x190>)
 8007842:	f008 ffdf 	bl	8010804 <iprintf>
 8007846:	f06f 0305 	mvn.w	r3, #5
 800784a:	e004      	b.n	8007856 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f af61 	bne.w	8007716 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3718      	adds	r7, #24
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	08011e58 	.word	0x08011e58
 8007864:	08012100 	.word	0x08012100
 8007868:	08011eb8 	.word	0x08011eb8
 800786c:	08012130 	.word	0x08012130
 8007870:	08012148 	.word	0x08012148
 8007874:	08012164 	.word	0x08012164
 8007878:	08012174 	.word	0x08012174

0800787c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4611      	mov	r1, r2
 8007888:	461a      	mov	r2, r3
 800788a:	460b      	mov	r3, r1
 800788c:	80fb      	strh	r3, [r7, #6]
 800788e:	4613      	mov	r3, r2
 8007890:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d108      	bne.n	80078b2 <pbuf_copy_partial+0x36>
 80078a0:	4b2b      	ldr	r3, [pc, #172]	@ (8007950 <pbuf_copy_partial+0xd4>)
 80078a2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80078a6:	492b      	ldr	r1, [pc, #172]	@ (8007954 <pbuf_copy_partial+0xd8>)
 80078a8:	482b      	ldr	r0, [pc, #172]	@ (8007958 <pbuf_copy_partial+0xdc>)
 80078aa:	f008 ffab 	bl	8010804 <iprintf>
 80078ae:	2300      	movs	r3, #0
 80078b0:	e04a      	b.n	8007948 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d108      	bne.n	80078ca <pbuf_copy_partial+0x4e>
 80078b8:	4b25      	ldr	r3, [pc, #148]	@ (8007950 <pbuf_copy_partial+0xd4>)
 80078ba:	f240 420b 	movw	r2, #1035	@ 0x40b
 80078be:	4927      	ldr	r1, [pc, #156]	@ (800795c <pbuf_copy_partial+0xe0>)
 80078c0:	4825      	ldr	r0, [pc, #148]	@ (8007958 <pbuf_copy_partial+0xdc>)
 80078c2:	f008 ff9f 	bl	8010804 <iprintf>
 80078c6:	2300      	movs	r3, #0
 80078c8:	e03e      	b.n	8007948 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	61fb      	str	r3, [r7, #28]
 80078ce:	e034      	b.n	800793a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80078d0:	88bb      	ldrh	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <pbuf_copy_partial+0x70>
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	895b      	ldrh	r3, [r3, #10]
 80078da:	88ba      	ldrh	r2, [r7, #4]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d305      	bcc.n	80078ec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	895b      	ldrh	r3, [r3, #10]
 80078e4:	88ba      	ldrh	r2, [r7, #4]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	80bb      	strh	r3, [r7, #4]
 80078ea:	e023      	b.n	8007934 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	895a      	ldrh	r2, [r3, #10]
 80078f0:	88bb      	ldrh	r3, [r7, #4]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80078f6:	8b3a      	ldrh	r2, [r7, #24]
 80078f8:	88fb      	ldrh	r3, [r7, #6]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d901      	bls.n	8007902 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007902:	8b7b      	ldrh	r3, [r7, #26]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	18d0      	adds	r0, r2, r3
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	88bb      	ldrh	r3, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	8b3a      	ldrh	r2, [r7, #24]
 8007912:	4619      	mov	r1, r3
 8007914:	f009 f86f 	bl	80109f6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007918:	8afa      	ldrh	r2, [r7, #22]
 800791a:	8b3b      	ldrh	r3, [r7, #24]
 800791c:	4413      	add	r3, r2
 800791e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007920:	8b7a      	ldrh	r2, [r7, #26]
 8007922:	8b3b      	ldrh	r3, [r7, #24]
 8007924:	4413      	add	r3, r2
 8007926:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007928:	88fa      	ldrh	r2, [r7, #6]
 800792a:	8b3b      	ldrh	r3, [r7, #24]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <pbuf_copy_partial+0xca>
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1c4      	bne.n	80078d0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007946:	8afb      	ldrh	r3, [r7, #22]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08011e58 	.word	0x08011e58
 8007954:	080121a0 	.word	0x080121a0
 8007958:	08011eb8 	.word	0x08011eb8
 800795c:	080121c0 	.word	0x080121c0

08007960 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	603a      	str	r2, [r7, #0]
 800796a:	71fb      	strb	r3, [r7, #7]
 800796c:	460b      	mov	r3, r1
 800796e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	8919      	ldrh	r1, [r3, #8]
 8007974:	88ba      	ldrh	r2, [r7, #4]
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fab1 	bl	8006ee0 <pbuf_alloc>
 800797e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <pbuf_clone+0x2a>
    return NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	e011      	b.n	80079ae <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fea3 	bl	80076d8 <pbuf_copy>
 8007992:	4603      	mov	r3, r0
 8007994:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007996:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d006      	beq.n	80079ac <pbuf_clone+0x4c>
 800799e:	4b06      	ldr	r3, [pc, #24]	@ (80079b8 <pbuf_clone+0x58>)
 80079a0:	f240 5224 	movw	r2, #1316	@ 0x524
 80079a4:	4905      	ldr	r1, [pc, #20]	@ (80079bc <pbuf_clone+0x5c>)
 80079a6:	4806      	ldr	r0, [pc, #24]	@ (80079c0 <pbuf_clone+0x60>)
 80079a8:	f008 ff2c 	bl	8010804 <iprintf>
  return q;
 80079ac:	68fb      	ldr	r3, [r7, #12]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	08011e58 	.word	0x08011e58
 80079bc:	080122cc 	.word	0x080122cc
 80079c0:	08011eb8 	.word	0x08011eb8

080079c4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80079c8:	f008 fe1c 	bl	8010604 <rand>
 80079cc:	4603      	mov	r3, r0
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80079da:	b29a      	uxth	r2, r3
 80079dc:	4b01      	ldr	r3, [pc, #4]	@ (80079e4 <tcp_init+0x20>)
 80079de:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80079e0:	bf00      	nop
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	20000020 	.word	0x20000020

080079e8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7d1b      	ldrb	r3, [r3, #20]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d105      	bne.n	8007a04 <tcp_free+0x1c>
 80079f8:	4b06      	ldr	r3, [pc, #24]	@ (8007a14 <tcp_free+0x2c>)
 80079fa:	22d4      	movs	r2, #212	@ 0xd4
 80079fc:	4906      	ldr	r1, [pc, #24]	@ (8007a18 <tcp_free+0x30>)
 80079fe:	4807      	ldr	r0, [pc, #28]	@ (8007a1c <tcp_free+0x34>)
 8007a00:	f008 ff00 	bl	8010804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	2001      	movs	r0, #1
 8007a08:	f7fe fed8 	bl	80067bc <memp_free>
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	08012358 	.word	0x08012358
 8007a18:	08012388 	.word	0x08012388
 8007a1c:	0801239c 	.word	0x0801239c

08007a20 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7d1b      	ldrb	r3, [r3, #20]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d105      	bne.n	8007a3c <tcp_free_listen+0x1c>
 8007a30:	4b06      	ldr	r3, [pc, #24]	@ (8007a4c <tcp_free_listen+0x2c>)
 8007a32:	22df      	movs	r2, #223	@ 0xdf
 8007a34:	4906      	ldr	r1, [pc, #24]	@ (8007a50 <tcp_free_listen+0x30>)
 8007a36:	4807      	ldr	r0, [pc, #28]	@ (8007a54 <tcp_free_listen+0x34>)
 8007a38:	f008 fee4 	bl	8010804 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	2002      	movs	r0, #2
 8007a40:	f7fe febc 	bl	80067bc <memp_free>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	08012358 	.word	0x08012358
 8007a50:	080123c4 	.word	0x080123c4
 8007a54:	0801239c 	.word	0x0801239c

08007a58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007a5c:	f001 f85e 	bl	8008b1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007a60:	4b07      	ldr	r3, [pc, #28]	@ (8007a80 <tcp_tmr+0x28>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	4b05      	ldr	r3, [pc, #20]	@ (8007a80 <tcp_tmr+0x28>)
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	4b04      	ldr	r3, [pc, #16]	@ (8007a80 <tcp_tmr+0x28>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007a78:	f000 fd0e 	bl	8008498 <tcp_slowtmr>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	200080c9 	.word	0x200080c9

08007a84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <tcp_remove_listener+0x1c>
 8007a94:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <tcp_remove_listener+0x48>)
 8007a96:	22ff      	movs	r2, #255	@ 0xff
 8007a98:	490d      	ldr	r1, [pc, #52]	@ (8007ad0 <tcp_remove_listener+0x4c>)
 8007a9a:	480e      	ldr	r0, [pc, #56]	@ (8007ad4 <tcp_remove_listener+0x50>)
 8007a9c:	f008 feb2 	bl	8010804 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	e00a      	b.n	8007abc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d102      	bne.n	8007ab6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f1      	bne.n	8007aa6 <tcp_remove_listener+0x22>
    }
  }
}
 8007ac2:	bf00      	nop
 8007ac4:	bf00      	nop
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	08012358 	.word	0x08012358
 8007ad0:	080123e0 	.word	0x080123e0
 8007ad4:	0801239c 	.word	0x0801239c

08007ad8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <tcp_listen_closed+0x1c>
 8007ae6:	4b14      	ldr	r3, [pc, #80]	@ (8007b38 <tcp_listen_closed+0x60>)
 8007ae8:	f240 1211 	movw	r2, #273	@ 0x111
 8007aec:	4913      	ldr	r1, [pc, #76]	@ (8007b3c <tcp_listen_closed+0x64>)
 8007aee:	4814      	ldr	r0, [pc, #80]	@ (8007b40 <tcp_listen_closed+0x68>)
 8007af0:	f008 fe88 	bl	8010804 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d006      	beq.n	8007b0a <tcp_listen_closed+0x32>
 8007afc:	4b0e      	ldr	r3, [pc, #56]	@ (8007b38 <tcp_listen_closed+0x60>)
 8007afe:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8007b02:	4910      	ldr	r1, [pc, #64]	@ (8007b44 <tcp_listen_closed+0x6c>)
 8007b04:	480e      	ldr	r0, [pc, #56]	@ (8007b40 <tcp_listen_closed+0x68>)
 8007b06:	f008 fe7d 	bl	8010804 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
 8007b0e:	e00b      	b.n	8007b28 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007b10:	4a0d      	ldr	r2, [pc, #52]	@ (8007b48 <tcp_listen_closed+0x70>)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff ffb1 	bl	8007a84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d9f0      	bls.n	8007b10 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007b2e:	bf00      	nop
 8007b30:	bf00      	nop
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	08012358 	.word	0x08012358
 8007b3c:	08012408 	.word	0x08012408
 8007b40:	0801239c 	.word	0x0801239c
 8007b44:	08012414 	.word	0x08012414
 8007b48:	0801513c 	.word	0x0801513c

08007b4c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007b4c:	b5b0      	push	{r4, r5, r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af04      	add	r7, sp, #16
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <tcp_close_shutdown+0x20>
 8007b5e:	4b63      	ldr	r3, [pc, #396]	@ (8007cec <tcp_close_shutdown+0x1a0>)
 8007b60:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8007b64:	4962      	ldr	r1, [pc, #392]	@ (8007cf0 <tcp_close_shutdown+0x1a4>)
 8007b66:	4863      	ldr	r0, [pc, #396]	@ (8007cf4 <tcp_close_shutdown+0x1a8>)
 8007b68:	f008 fe4c 	bl	8010804 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d066      	beq.n	8007c40 <tcp_close_shutdown+0xf4>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7d1b      	ldrb	r3, [r3, #20]
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	d003      	beq.n	8007b82 <tcp_close_shutdown+0x36>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7d1b      	ldrb	r3, [r3, #20]
 8007b7e:	2b07      	cmp	r3, #7
 8007b80:	d15e      	bne.n	8007c40 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d104      	bne.n	8007b94 <tcp_close_shutdown+0x48>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b8e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8007b92:	d055      	beq.n	8007c40 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8b5b      	ldrh	r3, [r3, #26]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d106      	bne.n	8007bae <tcp_close_shutdown+0x62>
 8007ba0:	4b52      	ldr	r3, [pc, #328]	@ (8007cec <tcp_close_shutdown+0x1a0>)
 8007ba2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8007ba6:	4954      	ldr	r1, [pc, #336]	@ (8007cf8 <tcp_close_shutdown+0x1ac>)
 8007ba8:	4852      	ldr	r0, [pc, #328]	@ (8007cf4 <tcp_close_shutdown+0x1a8>)
 8007baa:	f008 fe2b 	bl	8010804 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007bb6:	687d      	ldr	r5, [r7, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	8ad2      	ldrh	r2, [r2, #22]
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	8b09      	ldrh	r1, [r1, #24]
 8007bc4:	9102      	str	r1, [sp, #8]
 8007bc6:	9201      	str	r2, [sp, #4]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	462b      	mov	r3, r5
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4601      	mov	r1, r0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f005 fd8b 	bl	800d6ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fb6e 	bl	80092b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007bdc:	4b47      	ldr	r3, [pc, #284]	@ (8007cfc <tcp_close_shutdown+0x1b0>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d105      	bne.n	8007bf2 <tcp_close_shutdown+0xa6>
 8007be6:	4b45      	ldr	r3, [pc, #276]	@ (8007cfc <tcp_close_shutdown+0x1b0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	4a43      	ldr	r2, [pc, #268]	@ (8007cfc <tcp_close_shutdown+0x1b0>)
 8007bee:	6013      	str	r3, [r2, #0]
 8007bf0:	e013      	b.n	8007c1a <tcp_close_shutdown+0xce>
 8007bf2:	4b42      	ldr	r3, [pc, #264]	@ (8007cfc <tcp_close_shutdown+0x1b0>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	e00c      	b.n	8007c14 <tcp_close_shutdown+0xc8>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d104      	bne.n	8007c0e <tcp_close_shutdown+0xc2>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e005      	b.n	8007c1a <tcp_close_shutdown+0xce>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1ef      	bne.n	8007bfa <tcp_close_shutdown+0xae>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	4b37      	ldr	r3, [pc, #220]	@ (8007d00 <tcp_close_shutdown+0x1b4>)
 8007c22:	2201      	movs	r2, #1
 8007c24:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8007c26:	4b37      	ldr	r3, [pc, #220]	@ (8007d04 <tcp_close_shutdown+0x1b8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d102      	bne.n	8007c36 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007c30:	f004 f802 	bl	800bc38 <tcp_trigger_input_pcb_close>
 8007c34:	e002      	b.n	8007c3c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff fed6 	bl	80079e8 <tcp_free>
      }
      return ERR_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e050      	b.n	8007ce2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7d1b      	ldrb	r3, [r3, #20]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d03b      	beq.n	8007cc0 <tcp_close_shutdown+0x174>
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	dc44      	bgt.n	8007cd6 <tcp_close_shutdown+0x18a>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <tcp_close_shutdown+0x10a>
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d02a      	beq.n	8007caa <tcp_close_shutdown+0x15e>
 8007c54:	e03f      	b.n	8007cd6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	8adb      	ldrh	r3, [r3, #22]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d021      	beq.n	8007ca2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d08 <tcp_close_shutdown+0x1bc>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d105      	bne.n	8007c74 <tcp_close_shutdown+0x128>
 8007c68:	4b27      	ldr	r3, [pc, #156]	@ (8007d08 <tcp_close_shutdown+0x1bc>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	4a26      	ldr	r2, [pc, #152]	@ (8007d08 <tcp_close_shutdown+0x1bc>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e013      	b.n	8007c9c <tcp_close_shutdown+0x150>
 8007c74:	4b24      	ldr	r3, [pc, #144]	@ (8007d08 <tcp_close_shutdown+0x1bc>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60bb      	str	r3, [r7, #8]
 8007c7a:	e00c      	b.n	8007c96 <tcp_close_shutdown+0x14a>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d104      	bne.n	8007c90 <tcp_close_shutdown+0x144>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	e005      	b.n	8007c9c <tcp_close_shutdown+0x150>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ef      	bne.n	8007c7c <tcp_close_shutdown+0x130>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff fea0 	bl	80079e8 <tcp_free>
      break;
 8007ca8:	e01a      	b.n	8007ce0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff ff14 	bl	8007ad8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007cb0:	6879      	ldr	r1, [r7, #4]
 8007cb2:	4816      	ldr	r0, [pc, #88]	@ (8007d0c <tcp_close_shutdown+0x1c0>)
 8007cb4:	f001 fb50 	bl	8009358 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff feb1 	bl	8007a20 <tcp_free_listen>
      break;
 8007cbe:	e00f      	b.n	8007ce0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	480e      	ldr	r0, [pc, #56]	@ (8007cfc <tcp_close_shutdown+0x1b0>)
 8007cc4:	f001 fb48 	bl	8009358 <tcp_pcb_remove>
 8007cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <tcp_close_shutdown+0x1b4>)
 8007cca:	2201      	movs	r2, #1
 8007ccc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff fe8a 	bl	80079e8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007cd4:	e004      	b.n	8007ce0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f81a 	bl	8007d10 <tcp_close_shutdown_fin>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	e000      	b.n	8007ce2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cea:	bf00      	nop
 8007cec:	08012358 	.word	0x08012358
 8007cf0:	0801242c 	.word	0x0801242c
 8007cf4:	0801239c 	.word	0x0801239c
 8007cf8:	0801244c 	.word	0x0801244c
 8007cfc:	200080c0 	.word	0x200080c0
 8007d00:	200080c8 	.word	0x200080c8
 8007d04:	20008100 	.word	0x20008100
 8007d08:	200080b8 	.word	0x200080b8
 8007d0c:	200080bc 	.word	0x200080bc

08007d10 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <tcp_close_shutdown_fin+0x1c>
 8007d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd8 <tcp_close_shutdown_fin+0xc8>)
 8007d20:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8007d24:	492d      	ldr	r1, [pc, #180]	@ (8007ddc <tcp_close_shutdown_fin+0xcc>)
 8007d26:	482e      	ldr	r0, [pc, #184]	@ (8007de0 <tcp_close_shutdown_fin+0xd0>)
 8007d28:	f008 fd6c 	bl	8010804 <iprintf>

  switch (pcb->state) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7d1b      	ldrb	r3, [r3, #20]
 8007d30:	2b07      	cmp	r3, #7
 8007d32:	d020      	beq.n	8007d76 <tcp_close_shutdown_fin+0x66>
 8007d34:	2b07      	cmp	r3, #7
 8007d36:	dc2b      	bgt.n	8007d90 <tcp_close_shutdown_fin+0x80>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d002      	beq.n	8007d42 <tcp_close_shutdown_fin+0x32>
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d00d      	beq.n	8007d5c <tcp_close_shutdown_fin+0x4c>
 8007d40:	e026      	b.n	8007d90 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f004 fde0 	bl	800c908 <tcp_send_fin>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11f      	bne.n	8007d94 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2205      	movs	r2, #5
 8007d58:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007d5a:	e01b      	b.n	8007d94 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f004 fdd3 	bl	800c908 <tcp_send_fin>
 8007d62:	4603      	mov	r3, r0
 8007d64:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d114      	bne.n	8007d98 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2205      	movs	r2, #5
 8007d72:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007d74:	e010      	b.n	8007d98 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f004 fdc6 	bl	800c908 <tcp_send_fin>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2209      	movs	r2, #9
 8007d8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007d8e:	e005      	b.n	8007d9c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e01c      	b.n	8007dce <tcp_close_shutdown_fin+0xbe>
      break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <tcp_close_shutdown_fin+0x8e>
      break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <tcp_close_shutdown_fin+0x8e>
      break;
 8007d9c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f004 feec 	bl	800cb84 <tcp_output>
 8007dac:	e00d      	b.n	8007dca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db6:	d108      	bne.n	8007dca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	8b5b      	ldrh	r3, [r3, #26]
 8007dbc:	f043 0308 	orr.w	r3, r3, #8
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	e001      	b.n	8007dce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	08012358 	.word	0x08012358
 8007ddc:	08012408 	.word	0x08012408
 8007de0:	0801239c 	.word	0x0801239c

08007de4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <tcp_close+0x22>
 8007df2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <tcp_close+0x4c>)
 8007df4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8007df8:	490e      	ldr	r1, [pc, #56]	@ (8007e34 <tcp_close+0x50>)
 8007dfa:	480f      	ldr	r0, [pc, #60]	@ (8007e38 <tcp_close+0x54>)
 8007dfc:	f008 fd02 	bl	8010804 <iprintf>
 8007e00:	f06f 030f 	mvn.w	r3, #15
 8007e04:	e00f      	b.n	8007e26 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7d1b      	ldrb	r3, [r3, #20]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d006      	beq.n	8007e1c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8b5b      	ldrh	r3, [r3, #26]
 8007e12:	f043 0310 	orr.w	r3, r3, #16
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fe94 	bl	8007b4c <tcp_close_shutdown>
 8007e24:	4603      	mov	r3, r0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08012358 	.word	0x08012358
 8007e34:	08012468 	.word	0x08012468
 8007e38:	0801239c 	.word	0x0801239c

08007e3c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08e      	sub	sp, #56	@ 0x38
 8007e40:	af04      	add	r7, sp, #16
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d107      	bne.n	8007e5c <tcp_abandon+0x20>
 8007e4c:	4b52      	ldr	r3, [pc, #328]	@ (8007f98 <tcp_abandon+0x15c>)
 8007e4e:	f240 223d 	movw	r2, #573	@ 0x23d
 8007e52:	4952      	ldr	r1, [pc, #328]	@ (8007f9c <tcp_abandon+0x160>)
 8007e54:	4852      	ldr	r0, [pc, #328]	@ (8007fa0 <tcp_abandon+0x164>)
 8007e56:	f008 fcd5 	bl	8010804 <iprintf>
 8007e5a:	e099      	b.n	8007f90 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	7d1b      	ldrb	r3, [r3, #20]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d106      	bne.n	8007e72 <tcp_abandon+0x36>
 8007e64:	4b4c      	ldr	r3, [pc, #304]	@ (8007f98 <tcp_abandon+0x15c>)
 8007e66:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8007e6a:	494e      	ldr	r1, [pc, #312]	@ (8007fa4 <tcp_abandon+0x168>)
 8007e6c:	484c      	ldr	r0, [pc, #304]	@ (8007fa0 <tcp_abandon+0x164>)
 8007e6e:	f008 fcc9 	bl	8010804 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7d1b      	ldrb	r3, [r3, #20]
 8007e76:	2b0a      	cmp	r3, #10
 8007e78:	d107      	bne.n	8007e8a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	484a      	ldr	r0, [pc, #296]	@ (8007fa8 <tcp_abandon+0x16c>)
 8007e7e:	f001 fa6b 	bl	8009358 <tcp_pcb_remove>
    tcp_free(pcb);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fdb0 	bl	80079e8 <tcp_free>
 8007e88:	e082      	b.n	8007f90 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e96:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7d1b      	ldrb	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d126      	bne.n	8007f02 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	8adb      	ldrh	r3, [r3, #22]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d02e      	beq.n	8007f1a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8007fac <tcp_abandon+0x170>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d105      	bne.n	8007ed2 <tcp_abandon+0x96>
 8007ec6:	4b39      	ldr	r3, [pc, #228]	@ (8007fac <tcp_abandon+0x170>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4a37      	ldr	r2, [pc, #220]	@ (8007fac <tcp_abandon+0x170>)
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	e013      	b.n	8007efa <tcp_abandon+0xbe>
 8007ed2:	4b36      	ldr	r3, [pc, #216]	@ (8007fac <tcp_abandon+0x170>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	61fb      	str	r3, [r7, #28]
 8007ed8:	e00c      	b.n	8007ef4 <tcp_abandon+0xb8>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d104      	bne.n	8007eee <tcp_abandon+0xb2>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	60da      	str	r2, [r3, #12]
 8007eec:	e005      	b.n	8007efa <tcp_abandon+0xbe>
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1ef      	bne.n	8007eda <tcp_abandon+0x9e>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	60da      	str	r2, [r3, #12]
 8007f00:	e00b      	b.n	8007f1a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8adb      	ldrh	r3, [r3, #22]
 8007f0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4828      	ldr	r0, [pc, #160]	@ (8007fb0 <tcp_abandon+0x174>)
 8007f10:	f001 fa22 	bl	8009358 <tcp_pcb_remove>
 8007f14:	4b27      	ldr	r3, [pc, #156]	@ (8007fb4 <tcp_abandon+0x178>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f26:	4618      	mov	r0, r3
 8007f28:	f000 fed8 	bl	8008cdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f000 fecf 	bl	8008cdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fec6 	bl	8008cdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	8b12      	ldrh	r2, [r2, #24]
 8007f60:	9202      	str	r2, [sp, #8]
 8007f62:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007f64:	9201      	str	r2, [sp, #4]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	69b9      	ldr	r1, [r7, #24]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f005 fbbc 	bl	800d6ec <tcp_rst>
    }
    last_state = pcb->state;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7d1b      	ldrb	r3, [r3, #20]
 8007f78:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fd34 	bl	80079e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <tcp_abandon+0x154>
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f06f 010c 	mvn.w	r1, #12
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	4798      	blx	r3
  }
}
 8007f90:	3728      	adds	r7, #40	@ 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	08012358 	.word	0x08012358
 8007f9c:	0801249c 	.word	0x0801249c
 8007fa0:	0801239c 	.word	0x0801239c
 8007fa4:	080124b8 	.word	0x080124b8
 8007fa8:	200080c4 	.word	0x200080c4
 8007fac:	200080b8 	.word	0x200080b8
 8007fb0:	200080c0 	.word	0x200080c0
 8007fb4:	200080c8 	.word	0x200080c8

08007fb8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff ff3a 	bl	8007e3c <tcp_abandon>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007fde:	2304      	movs	r3, #4
 8007fe0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80080e4 <tcp_bind+0x114>)
 8007fea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d109      	bne.n	8008006 <tcp_bind+0x36>
 8007ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80080e8 <tcp_bind+0x118>)
 8007ff4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8007ff8:	493c      	ldr	r1, [pc, #240]	@ (80080ec <tcp_bind+0x11c>)
 8007ffa:	483d      	ldr	r0, [pc, #244]	@ (80080f0 <tcp_bind+0x120>)
 8007ffc:	f008 fc02 	bl	8010804 <iprintf>
 8008000:	f06f 030f 	mvn.w	r3, #15
 8008004:	e06a      	b.n	80080dc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	7d1b      	ldrb	r3, [r3, #20]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d009      	beq.n	8008022 <tcp_bind+0x52>
 800800e:	4b36      	ldr	r3, [pc, #216]	@ (80080e8 <tcp_bind+0x118>)
 8008010:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8008014:	4937      	ldr	r1, [pc, #220]	@ (80080f4 <tcp_bind+0x124>)
 8008016:	4836      	ldr	r0, [pc, #216]	@ (80080f0 <tcp_bind+0x120>)
 8008018:	f008 fbf4 	bl	8010804 <iprintf>
 800801c:	f06f 0305 	mvn.w	r3, #5
 8008020:	e05c      	b.n	80080dc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <tcp_bind+0x6c>
    port = tcp_new_port();
 8008028:	f000 f9f0 	bl	800840c <tcp_new_port>
 800802c:	4603      	mov	r3, r0
 800802e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d135      	bne.n	80080a2 <tcp_bind+0xd2>
      return ERR_BUF;
 8008036:	f06f 0301 	mvn.w	r3, #1
 800803a:	e04f      	b.n	80080dc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800803c:	2300      	movs	r3, #0
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	e02b      	b.n	800809a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008042:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <tcp_bind+0x128>)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	e01e      	b.n	800808e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	8adb      	ldrh	r3, [r3, #22]
 8008054:	88fa      	ldrh	r2, [r7, #6]
 8008056:	429a      	cmp	r2, r3
 8008058:	d116      	bne.n	8008088 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800805a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800805c:	2b00      	cmp	r3, #0
 800805e:	d010      	beq.n	8008082 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00c      	beq.n	8008082 <tcp_bind+0xb2>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d005      	beq.n	8008082 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800807e:	429a      	cmp	r2, r3
 8008080:	d102      	bne.n	8008088 <tcp_bind+0xb8>
              return ERR_USE;
 8008082:	f06f 0307 	mvn.w	r3, #7
 8008086:	e029      	b.n	80080dc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	61bb      	str	r3, [r7, #24]
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1dd      	bne.n	8008050 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	3301      	adds	r3, #1
 8008098:	61fb      	str	r3, [r7, #28]
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	429a      	cmp	r2, r3
 80080a0:	dbcf      	blt.n	8008042 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <tcp_bind+0xf2>
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d008      	beq.n	80080c2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <tcp_bind+0xec>
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	e000      	b.n	80080be <tcp_bind+0xee>
 80080bc:	2300      	movs	r3, #0
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80080c8:	4b0c      	ldr	r3, [pc, #48]	@ (80080fc <tcp_bind+0x12c>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	60da      	str	r2, [r3, #12]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	@ (80080fc <tcp_bind+0x12c>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	f005 fccb 	bl	800da70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	08015164 	.word	0x08015164
 80080e8:	08012358 	.word	0x08012358
 80080ec:	080124ec 	.word	0x080124ec
 80080f0:	0801239c 	.word	0x0801239c
 80080f4:	08012504 	.word	0x08012504
 80080f8:	0801513c 	.word	0x0801513c
 80080fc:	200080b8 	.word	0x200080b8

08008100 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d106      	bne.n	8008122 <tcp_accept_null+0x22>
 8008114:	4b07      	ldr	r3, [pc, #28]	@ (8008134 <tcp_accept_null+0x34>)
 8008116:	f240 320f 	movw	r2, #783	@ 0x30f
 800811a:	4907      	ldr	r1, [pc, #28]	@ (8008138 <tcp_accept_null+0x38>)
 800811c:	4807      	ldr	r0, [pc, #28]	@ (800813c <tcp_accept_null+0x3c>)
 800811e:	f008 fb71 	bl	8010804 <iprintf>

  tcp_abort(pcb);
 8008122:	68b8      	ldr	r0, [r7, #8]
 8008124:	f7ff ff48 	bl	8007fb8 <tcp_abort>

  return ERR_ABRT;
 8008128:	f06f 030c 	mvn.w	r3, #12
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08012358 	.word	0x08012358
 8008138:	0801252c 	.word	0x0801252c
 800813c:	0801239c 	.word	0x0801239c

08008140 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	460b      	mov	r3, r1
 800814a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	2200      	movs	r2, #0
 8008150:	4619      	mov	r1, r3
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f806 	bl	8008164 <tcp_listen_with_backlog_and_err>
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	460b      	mov	r3, r1
 800816e:	607a      	str	r2, [r7, #4]
 8008170:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <tcp_listen_with_backlog_and_err+0x2c>
 800817c:	4b47      	ldr	r3, [pc, #284]	@ (800829c <tcp_listen_with_backlog_and_err+0x138>)
 800817e:	f240 3259 	movw	r2, #857	@ 0x359
 8008182:	4947      	ldr	r1, [pc, #284]	@ (80082a0 <tcp_listen_with_backlog_and_err+0x13c>)
 8008184:	4847      	ldr	r0, [pc, #284]	@ (80082a4 <tcp_listen_with_backlog_and_err+0x140>)
 8008186:	f008 fb3d 	bl	8010804 <iprintf>
 800818a:	23f0      	movs	r3, #240	@ 0xf0
 800818c:	76fb      	strb	r3, [r7, #27]
 800818e:	e079      	b.n	8008284 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	7d1b      	ldrb	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d009      	beq.n	80081ac <tcp_listen_with_backlog_and_err+0x48>
 8008198:	4b40      	ldr	r3, [pc, #256]	@ (800829c <tcp_listen_with_backlog_and_err+0x138>)
 800819a:	f240 325a 	movw	r2, #858	@ 0x35a
 800819e:	4942      	ldr	r1, [pc, #264]	@ (80082a8 <tcp_listen_with_backlog_and_err+0x144>)
 80081a0:	4840      	ldr	r0, [pc, #256]	@ (80082a4 <tcp_listen_with_backlog_and_err+0x140>)
 80081a2:	f008 fb2f 	bl	8010804 <iprintf>
 80081a6:	23f1      	movs	r3, #241	@ 0xf1
 80081a8:	76fb      	strb	r3, [r7, #27]
 80081aa:	e06b      	b.n	8008284 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	7d1b      	ldrb	r3, [r3, #20]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d104      	bne.n	80081be <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80081b8:	23f7      	movs	r3, #247	@ 0xf7
 80081ba:	76fb      	strb	r3, [r7, #27]
    goto done;
 80081bc:	e062      	b.n	8008284 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80081be:	2002      	movs	r0, #2
 80081c0:	f7fe fa8c 	bl	80066dc <memp_malloc>
 80081c4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80081cc:	23ff      	movs	r3, #255	@ 0xff
 80081ce:	76fb      	strb	r3, [r7, #27]
    goto done;
 80081d0:	e058      	b.n	8008284 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	691a      	ldr	r2, [r3, #16]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8ada      	ldrh	r2, [r3, #22]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2201      	movs	r2, #1
 80081e6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	7d5a      	ldrb	r2, [r3, #21]
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	7a5a      	ldrb	r2, [r3, #9]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2200      	movs	r2, #0
 80081fc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	7ada      	ldrb	r2, [r3, #11]
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	7a9a      	ldrb	r2, [r3, #10]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8adb      	ldrh	r3, [r3, #22]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d021      	beq.n	8008262 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800821e:	4b23      	ldr	r3, [pc, #140]	@ (80082ac <tcp_listen_with_backlog_and_err+0x148>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d105      	bne.n	8008234 <tcp_listen_with_backlog_and_err+0xd0>
 8008228:	4b20      	ldr	r3, [pc, #128]	@ (80082ac <tcp_listen_with_backlog_and_err+0x148>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	4a1f      	ldr	r2, [pc, #124]	@ (80082ac <tcp_listen_with_backlog_and_err+0x148>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	e013      	b.n	800825c <tcp_listen_with_backlog_and_err+0xf8>
 8008234:	4b1d      	ldr	r3, [pc, #116]	@ (80082ac <tcp_listen_with_backlog_and_err+0x148>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e00c      	b.n	8008256 <tcp_listen_with_backlog_and_err+0xf2>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	429a      	cmp	r2, r3
 8008244:	d104      	bne.n	8008250 <tcp_listen_with_backlog_and_err+0xec>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	e005      	b.n	800825c <tcp_listen_with_backlog_and_err+0xf8>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1ef      	bne.n	800823c <tcp_listen_with_backlog_and_err+0xd8>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff fbc0 	bl	80079e8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	4a11      	ldr	r2, [pc, #68]	@ (80082b0 <tcp_listen_with_backlog_and_err+0x14c>)
 800826c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800826e:	4b11      	ldr	r3, [pc, #68]	@ (80082b4 <tcp_listen_with_backlog_and_err+0x150>)
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	60da      	str	r2, [r3, #12]
 8008276:	4a0f      	ldr	r2, [pc, #60]	@ (80082b4 <tcp_listen_with_backlog_and_err+0x150>)
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	f005 fbf8 	bl	800da70 <tcp_timer_needed>
  res = ERR_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7efa      	ldrb	r2, [r7, #27]
 800828e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008290:	69fb      	ldr	r3, [r7, #28]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3720      	adds	r7, #32
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	08012358 	.word	0x08012358
 80082a0:	0801254c 	.word	0x0801254c
 80082a4:	0801239c 	.word	0x0801239c
 80082a8:	0801257c 	.word	0x0801257c
 80082ac:	200080b8 	.word	0x200080b8
 80082b0:	08008101 	.word	0x08008101
 80082b4:	200080bc 	.word	0x200080bc

080082b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <tcp_update_rcv_ann_wnd+0x1c>
 80082c6:	4b25      	ldr	r3, [pc, #148]	@ (800835c <tcp_update_rcv_ann_wnd+0xa4>)
 80082c8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80082cc:	4924      	ldr	r1, [pc, #144]	@ (8008360 <tcp_update_rcv_ann_wnd+0xa8>)
 80082ce:	4825      	ldr	r0, [pc, #148]	@ (8008364 <tcp_update_rcv_ann_wnd+0xac>)
 80082d0:	f008 fa98 	bl	8010804 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80082e8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80082ec:	bf28      	it	cs
 80082ee:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80082f2:	b292      	uxth	r2, r2
 80082f4:	4413      	add	r3, r2
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	db08      	blt.n	8008310 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	e020      	b.n	8008352 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	dd03      	ble.n	8008326 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008324:	e014      	b.n	8008350 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008338:	d306      	bcc.n	8008348 <tcp_update_rcv_ann_wnd+0x90>
 800833a:	4b08      	ldr	r3, [pc, #32]	@ (800835c <tcp_update_rcv_ann_wnd+0xa4>)
 800833c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008340:	4909      	ldr	r1, [pc, #36]	@ (8008368 <tcp_update_rcv_ann_wnd+0xb0>)
 8008342:	4808      	ldr	r0, [pc, #32]	@ (8008364 <tcp_update_rcv_ann_wnd+0xac>)
 8008344:	f008 fa5e 	bl	8010804 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008350:	2300      	movs	r3, #0
  }
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	08012358 	.word	0x08012358
 8008360:	080125b4 	.word	0x080125b4
 8008364:	0801239c 	.word	0x0801239c
 8008368:	080125d8 	.word	0x080125d8

0800836c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <tcp_recved+0x22>
 800837e:	4b1f      	ldr	r3, [pc, #124]	@ (80083fc <tcp_recved+0x90>)
 8008380:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008384:	491e      	ldr	r1, [pc, #120]	@ (8008400 <tcp_recved+0x94>)
 8008386:	481f      	ldr	r0, [pc, #124]	@ (8008404 <tcp_recved+0x98>)
 8008388:	f008 fa3c 	bl	8010804 <iprintf>
 800838c:	e032      	b.n	80083f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7d1b      	ldrb	r3, [r3, #20]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d106      	bne.n	80083a4 <tcp_recved+0x38>
 8008396:	4b19      	ldr	r3, [pc, #100]	@ (80083fc <tcp_recved+0x90>)
 8008398:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800839c:	491a      	ldr	r1, [pc, #104]	@ (8008408 <tcp_recved+0x9c>)
 800839e:	4819      	ldr	r0, [pc, #100]	@ (8008404 <tcp_recved+0x98>)
 80083a0:	f008 fa30 	bl	8010804 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80083a8:	887b      	ldrh	r3, [r7, #2]
 80083aa:	4413      	add	r3, r2
 80083ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80083ae:	89fb      	ldrh	r3, [r7, #14]
 80083b0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80083b4:	d804      	bhi.n	80083c0 <tcp_recved+0x54>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ba:	89fa      	ldrh	r2, [r7, #14]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d204      	bcs.n	80083ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80083c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80083c8:	e002      	b.n	80083d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	89fa      	ldrh	r2, [r7, #14]
 80083ce:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ff71 	bl	80082b8 <tcp_update_rcv_ann_wnd>
 80083d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80083de:	d309      	bcc.n	80083f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8b5b      	ldrh	r3, [r3, #26]
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f004 fbc8 	bl	800cb84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	08012358 	.word	0x08012358
 8008400:	080125f4 	.word	0x080125f4
 8008404:	0801239c 	.word	0x0801239c
 8008408:	0801260c 	.word	0x0801260c

0800840c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8008416:	4b1e      	ldr	r3, [pc, #120]	@ (8008490 <tcp_new_port+0x84>)
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	3301      	adds	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	4b1c      	ldr	r3, [pc, #112]	@ (8008490 <tcp_new_port+0x84>)
 8008420:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008422:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <tcp_new_port+0x84>)
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800842a:	4293      	cmp	r3, r2
 800842c:	d103      	bne.n	8008436 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800842e:	4b18      	ldr	r3, [pc, #96]	@ (8008490 <tcp_new_port+0x84>)
 8008430:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008434:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008436:	2300      	movs	r3, #0
 8008438:	71fb      	strb	r3, [r7, #7]
 800843a:	e01e      	b.n	800847a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	4a15      	ldr	r2, [pc, #84]	@ (8008494 <tcp_new_port+0x88>)
 8008440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	e011      	b.n	800846e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	8ada      	ldrh	r2, [r3, #22]
 800844e:	4b10      	ldr	r3, [pc, #64]	@ (8008490 <tcp_new_port+0x84>)
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d108      	bne.n	8008468 <tcp_new_port+0x5c>
        n++;
 8008456:	88bb      	ldrh	r3, [r7, #4]
 8008458:	3301      	adds	r3, #1
 800845a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800845c:	88bb      	ldrh	r3, [r7, #4]
 800845e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008462:	d3d8      	bcc.n	8008416 <tcp_new_port+0xa>
          return 0;
 8008464:	2300      	movs	r3, #0
 8008466:	e00d      	b.n	8008484 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	603b      	str	r3, [r7, #0]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1ea      	bne.n	800844a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	3301      	adds	r3, #1
 8008478:	71fb      	strb	r3, [r7, #7]
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d9dd      	bls.n	800843c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008480:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <tcp_new_port+0x84>)
 8008482:	881b      	ldrh	r3, [r3, #0]
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000020 	.word	0x20000020
 8008494:	0801513c 	.word	0x0801513c

08008498 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b090      	sub	sp, #64	@ 0x40
 800849c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80084a4:	4b95      	ldr	r3, [pc, #596]	@ (80086fc <tcp_slowtmr+0x264>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3301      	adds	r3, #1
 80084aa:	4a94      	ldr	r2, [pc, #592]	@ (80086fc <tcp_slowtmr+0x264>)
 80084ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80084ae:	4b94      	ldr	r3, [pc, #592]	@ (8008700 <tcp_slowtmr+0x268>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	4b92      	ldr	r3, [pc, #584]	@ (8008700 <tcp_slowtmr+0x268>)
 80084b8:	701a      	strb	r2, [r3, #0]
 80084ba:	e000      	b.n	80084be <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80084bc:	bf00      	nop
  prev = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80084c2:	4b90      	ldr	r3, [pc, #576]	@ (8008704 <tcp_slowtmr+0x26c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80084c8:	e29d      	b.n	8008a06 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	7d1b      	ldrb	r3, [r3, #20]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d106      	bne.n	80084e0 <tcp_slowtmr+0x48>
 80084d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008708 <tcp_slowtmr+0x270>)
 80084d4:	f240 42be 	movw	r2, #1214	@ 0x4be
 80084d8:	498c      	ldr	r1, [pc, #560]	@ (800870c <tcp_slowtmr+0x274>)
 80084da:	488d      	ldr	r0, [pc, #564]	@ (8008710 <tcp_slowtmr+0x278>)
 80084dc:	f008 f992 	bl	8010804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	7d1b      	ldrb	r3, [r3, #20]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d106      	bne.n	80084f6 <tcp_slowtmr+0x5e>
 80084e8:	4b87      	ldr	r3, [pc, #540]	@ (8008708 <tcp_slowtmr+0x270>)
 80084ea:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80084ee:	4989      	ldr	r1, [pc, #548]	@ (8008714 <tcp_slowtmr+0x27c>)
 80084f0:	4887      	ldr	r0, [pc, #540]	@ (8008710 <tcp_slowtmr+0x278>)
 80084f2:	f008 f987 	bl	8010804 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80084f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f8:	7d1b      	ldrb	r3, [r3, #20]
 80084fa:	2b0a      	cmp	r3, #10
 80084fc:	d106      	bne.n	800850c <tcp_slowtmr+0x74>
 80084fe:	4b82      	ldr	r3, [pc, #520]	@ (8008708 <tcp_slowtmr+0x270>)
 8008500:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008504:	4984      	ldr	r1, [pc, #528]	@ (8008718 <tcp_slowtmr+0x280>)
 8008506:	4882      	ldr	r0, [pc, #520]	@ (8008710 <tcp_slowtmr+0x278>)
 8008508:	f008 f97c 	bl	8010804 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	7f9a      	ldrb	r2, [r3, #30]
 8008510:	4b7b      	ldr	r3, [pc, #492]	@ (8008700 <tcp_slowtmr+0x268>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d105      	bne.n	8008524 <tcp_slowtmr+0x8c>
      prev = pcb;
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800851c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8008522:	e270      	b.n	8008a06 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8008524:	4b76      	ldr	r3, [pc, #472]	@ (8008700 <tcp_slowtmr+0x268>)
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	7d1b      	ldrb	r3, [r3, #20]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d10a      	bne.n	8008556 <tcp_slowtmr+0xbe>
 8008540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008542:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008546:	2b05      	cmp	r3, #5
 8008548:	d905      	bls.n	8008556 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800854a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800854e:	3301      	adds	r3, #1
 8008550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008554:	e11e      	b.n	8008794 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008558:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800855c:	2b0b      	cmp	r3, #11
 800855e:	d905      	bls.n	800856c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008564:	3301      	adds	r3, #1
 8008566:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800856a:	e113      	b.n	8008794 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800856c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008572:	2b00      	cmp	r3, #0
 8008574:	d075      	beq.n	8008662 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857a:	2b00      	cmp	r3, #0
 800857c:	d006      	beq.n	800858c <tcp_slowtmr+0xf4>
 800857e:	4b62      	ldr	r3, [pc, #392]	@ (8008708 <tcp_slowtmr+0x270>)
 8008580:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008584:	4965      	ldr	r1, [pc, #404]	@ (800871c <tcp_slowtmr+0x284>)
 8008586:	4862      	ldr	r0, [pc, #392]	@ (8008710 <tcp_slowtmr+0x278>)
 8008588:	f008 f93c 	bl	8010804 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800858c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <tcp_slowtmr+0x10a>
 8008594:	4b5c      	ldr	r3, [pc, #368]	@ (8008708 <tcp_slowtmr+0x270>)
 8008596:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800859a:	4961      	ldr	r1, [pc, #388]	@ (8008720 <tcp_slowtmr+0x288>)
 800859c:	485c      	ldr	r0, [pc, #368]	@ (8008710 <tcp_slowtmr+0x278>)
 800859e:	f008 f931 	bl	8010804 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80085a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80085a8:	2b0b      	cmp	r3, #11
 80085aa:	d905      	bls.n	80085b8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b0:	3301      	adds	r3, #1
 80085b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80085b6:	e0ed      	b.n	8008794 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80085b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80085be:	3b01      	subs	r3, #1
 80085c0:	4a58      	ldr	r2, [pc, #352]	@ (8008724 <tcp_slowtmr+0x28c>)
 80085c2:	5cd3      	ldrb	r3, [r2, r3]
 80085c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80085c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085cc:	7c7a      	ldrb	r2, [r7, #17]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d907      	bls.n	80085e2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80085d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085d8:	3301      	adds	r3, #1
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80085e8:	7c7a      	ldrb	r2, [r7, #17]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f200 80d2 	bhi.w	8008794 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80085f0:	2301      	movs	r3, #1
 80085f2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80085f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d108      	bne.n	8008610 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80085fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008600:	f005 f968 	bl	800d8d4 <tcp_zero_window_probe>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d014      	beq.n	8008634 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800860a:	2300      	movs	r3, #0
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	e011      	b.n	8008634 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008616:	4619      	mov	r1, r3
 8008618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800861a:	f004 f82d 	bl	800c678 <tcp_split_unsent_seg>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d107      	bne.n	8008634 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8008624:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008626:	f004 faad 	bl	800cb84 <tcp_output>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d101      	bne.n	8008634 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8008630:	2300      	movs	r3, #0
 8008632:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8008634:	6a3b      	ldr	r3, [r7, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80ac 	beq.w	8008794 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800864a:	2b06      	cmp	r3, #6
 800864c:	f200 80a2 	bhi.w	8008794 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8008650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008652:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008656:	3301      	adds	r3, #1
 8008658:	b2da      	uxtb	r2, r3
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008660:	e098      	b.n	8008794 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	db0f      	blt.n	800868c <tcp_slowtmr+0x1f4>
 800866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008672:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008676:	4293      	cmp	r3, r2
 8008678:	d008      	beq.n	800868c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800867a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008680:	b29b      	uxth	r3, r3
 8008682:	3301      	adds	r3, #1
 8008684:	b29b      	uxth	r3, r3
 8008686:	b21a      	sxth	r2, r3
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800868c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008694:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008698:	429a      	cmp	r2, r3
 800869a:	db7b      	blt.n	8008794 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800869c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800869e:	f004 fd65 	bl	800d16c <tcp_rexmit_rto_prepare>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <tcp_slowtmr+0x220>
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d171      	bne.n	8008794 <tcp_slowtmr+0x2fc>
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d06d      	beq.n	8008794 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80086b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ba:	7d1b      	ldrb	r3, [r3, #20]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d03a      	beq.n	8008736 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80086c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086c6:	2b0c      	cmp	r3, #12
 80086c8:	bf28      	it	cs
 80086ca:	230c      	movcs	r3, #12
 80086cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80086ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80086d4:	10db      	asrs	r3, r3, #3
 80086d6:	b21b      	sxth	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80086e0:	4413      	add	r3, r2
 80086e2:	7efa      	ldrb	r2, [r7, #27]
 80086e4:	4910      	ldr	r1, [pc, #64]	@ (8008728 <tcp_slowtmr+0x290>)
 80086e6:	5c8a      	ldrb	r2, [r1, r2]
 80086e8:	4093      	lsls	r3, r2
 80086ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80086f2:	4293      	cmp	r3, r2
 80086f4:	dc1a      	bgt.n	800872c <tcp_slowtmr+0x294>
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	b21a      	sxth	r2, r3
 80086fa:	e019      	b.n	8008730 <tcp_slowtmr+0x298>
 80086fc:	200080b4 	.word	0x200080b4
 8008700:	200080ca 	.word	0x200080ca
 8008704:	200080c0 	.word	0x200080c0
 8008708:	08012358 	.word	0x08012358
 800870c:	0801269c 	.word	0x0801269c
 8008710:	0801239c 	.word	0x0801239c
 8008714:	080126c8 	.word	0x080126c8
 8008718:	080126f4 	.word	0x080126f4
 800871c:	08012724 	.word	0x08012724
 8008720:	08012758 	.word	0x08012758
 8008724:	08015134 	.word	0x08015134
 8008728:	08015124 	.word	0x08015124
 800872c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008732:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008738:	2200      	movs	r2, #0
 800873a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008748:	4293      	cmp	r3, r2
 800874a:	bf28      	it	cs
 800874c:	4613      	movcs	r3, r2
 800874e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008750:	8a7b      	ldrh	r3, [r7, #18]
 8008752:	085b      	lsrs	r3, r3, #1
 8008754:	b29a      	uxth	r2, r3
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008764:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008766:	005b      	lsls	r3, r3, #1
 8008768:	b29b      	uxth	r3, r3
 800876a:	429a      	cmp	r2, r3
 800876c:	d206      	bcs.n	800877c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008770:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008778:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008782:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800878e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008790:	f004 fd5c 	bl	800d24c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008796:	7d1b      	ldrb	r3, [r3, #20]
 8008798:	2b06      	cmp	r3, #6
 800879a:	d111      	bne.n	80087c0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800879c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800879e:	8b5b      	ldrh	r3, [r3, #26]
 80087a0:	f003 0310 	and.w	r3, r3, #16
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00b      	beq.n	80087c0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087a8:	4b9c      	ldr	r3, [pc, #624]	@ (8008a1c <tcp_slowtmr+0x584>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b28      	cmp	r3, #40	@ 0x28
 80087b4:	d904      	bls.n	80087c0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80087b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087ba:	3301      	adds	r3, #1
 80087bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80087c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c2:	7a5b      	ldrb	r3, [r3, #9]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d04a      	beq.n	8008862 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80087cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d003      	beq.n	80087dc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80087d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80087d8:	2b07      	cmp	r3, #7
 80087da:	d142      	bne.n	8008862 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087dc:	4b8f      	ldr	r3, [pc, #572]	@ (8008a1c <tcp_slowtmr+0x584>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80087ec:	4b8c      	ldr	r3, [pc, #560]	@ (8008a20 <tcp_slowtmr+0x588>)
 80087ee:	440b      	add	r3, r1
 80087f0:	498c      	ldr	r1, [pc, #560]	@ (8008a24 <tcp_slowtmr+0x58c>)
 80087f2:	fba1 1303 	umull	r1, r3, r1, r3
 80087f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d90a      	bls.n	8008812 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80087fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008800:	3301      	adds	r3, #1
 8008802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008806:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800880a:	3301      	adds	r3, #1
 800880c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008810:	e027      	b.n	8008862 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008812:	4b82      	ldr	r3, [pc, #520]	@ (8008a1c <tcp_slowtmr+0x584>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008828:	4618      	mov	r0, r3
 800882a:	4b7f      	ldr	r3, [pc, #508]	@ (8008a28 <tcp_slowtmr+0x590>)
 800882c:	fb00 f303 	mul.w	r3, r0, r3
 8008830:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008832:	497c      	ldr	r1, [pc, #496]	@ (8008a24 <tcp_slowtmr+0x58c>)
 8008834:	fba1 1303 	umull	r1, r3, r1, r3
 8008838:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800883a:	429a      	cmp	r2, r3
 800883c:	d911      	bls.n	8008862 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800883e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008840:	f005 f808 	bl	800d854 <tcp_keepalive>
 8008844:	4603      	mov	r3, r0
 8008846:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800884a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800884e:	2b00      	cmp	r3, #0
 8008850:	d107      	bne.n	8008862 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008854:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008858:	3301      	adds	r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008866:	2b00      	cmp	r3, #0
 8008868:	d011      	beq.n	800888e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800886a:	4b6c      	ldr	r3, [pc, #432]	@ (8008a1c <tcp_slowtmr+0x584>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	1ad2      	subs	r2, r2, r3
 8008874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008876:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800887a:	4619      	mov	r1, r3
 800887c:	460b      	mov	r3, r1
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	440b      	add	r3, r1
 8008882:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008884:	429a      	cmp	r2, r3
 8008886:	d302      	bcc.n	800888e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800888a:	f000 fec9 	bl	8009620 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800888e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008890:	7d1b      	ldrb	r3, [r3, #20]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d10b      	bne.n	80088ae <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008896:	4b61      	ldr	r3, [pc, #388]	@ (8008a1c <tcp_slowtmr+0x584>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b28      	cmp	r3, #40	@ 0x28
 80088a2:	d904      	bls.n	80088ae <tcp_slowtmr+0x416>
        ++pcb_remove;
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a8:	3301      	adds	r3, #1
 80088aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	7d1b      	ldrb	r3, [r3, #20]
 80088b2:	2b09      	cmp	r3, #9
 80088b4:	d10b      	bne.n	80088ce <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80088b6:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <tcp_slowtmr+0x584>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80088c2:	d904      	bls.n	80088ce <tcp_slowtmr+0x436>
        ++pcb_remove;
 80088c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088c8:	3301      	adds	r3, #1
 80088ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80088ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d060      	beq.n	8008998 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088dc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80088de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80088e0:	f000 fcea 	bl	80092b8 <tcp_pcb_purge>
      if (prev != NULL) {
 80088e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d010      	beq.n	800890c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80088ea:	4b50      	ldr	r3, [pc, #320]	@ (8008a2c <tcp_slowtmr+0x594>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d106      	bne.n	8008902 <tcp_slowtmr+0x46a>
 80088f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008a30 <tcp_slowtmr+0x598>)
 80088f6:	f240 526d 	movw	r2, #1389	@ 0x56d
 80088fa:	494e      	ldr	r1, [pc, #312]	@ (8008a34 <tcp_slowtmr+0x59c>)
 80088fc:	484e      	ldr	r0, [pc, #312]	@ (8008a38 <tcp_slowtmr+0x5a0>)
 80088fe:	f007 ff81 	bl	8010804 <iprintf>
        prev->next = pcb->next;
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	e00f      	b.n	800892c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800890c:	4b47      	ldr	r3, [pc, #284]	@ (8008a2c <tcp_slowtmr+0x594>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008912:	429a      	cmp	r2, r3
 8008914:	d006      	beq.n	8008924 <tcp_slowtmr+0x48c>
 8008916:	4b46      	ldr	r3, [pc, #280]	@ (8008a30 <tcp_slowtmr+0x598>)
 8008918:	f240 5271 	movw	r2, #1393	@ 0x571
 800891c:	4947      	ldr	r1, [pc, #284]	@ (8008a3c <tcp_slowtmr+0x5a4>)
 800891e:	4846      	ldr	r0, [pc, #280]	@ (8008a38 <tcp_slowtmr+0x5a0>)
 8008920:	f007 ff70 	bl	8010804 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	4a40      	ldr	r2, [pc, #256]	@ (8008a2c <tcp_slowtmr+0x594>)
 800892a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800892c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008930:	2b00      	cmp	r3, #0
 8008932:	d013      	beq.n	800895c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008936:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800893c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800893e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008940:	3304      	adds	r3, #4
 8008942:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008944:	8ad2      	ldrh	r2, [r2, #22]
 8008946:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008948:	8b09      	ldrh	r1, [r1, #24]
 800894a:	9102      	str	r1, [sp, #8]
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	462b      	mov	r3, r5
 8008952:	4622      	mov	r2, r4
 8008954:	4601      	mov	r1, r0
 8008956:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008958:	f004 fec8 	bl	800d6ec <tcp_rst>
      err_arg = pcb->callback_arg;
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800896c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008972:	6838      	ldr	r0, [r7, #0]
 8008974:	f7ff f838 	bl	80079e8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008978:	4b31      	ldr	r3, [pc, #196]	@ (8008a40 <tcp_slowtmr+0x5a8>)
 800897a:	2200      	movs	r2, #0
 800897c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d004      	beq.n	800898e <tcp_slowtmr+0x4f6>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f06f 010c 	mvn.w	r1, #12
 800898a:	68b8      	ldr	r0, [r7, #8]
 800898c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800898e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a40 <tcp_slowtmr+0x5a8>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d037      	beq.n	8008a06 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008996:	e592      	b.n	80084be <tcp_slowtmr+0x26>
      prev = pcb;
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	7f1b      	ldrb	r3, [r3, #28]
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	7f1a      	ldrb	r2, [r3, #28]
 80089b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b4:	7f5b      	ldrb	r3, [r3, #29]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d325      	bcc.n	8008a06 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	2200      	movs	r2, #0
 80089be:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80089c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a40 <tcp_slowtmr+0x5a8>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <tcp_slowtmr+0x550>
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089d8:	6912      	ldr	r2, [r2, #16]
 80089da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80089e6:	e002      	b.n	80089ee <tcp_slowtmr+0x556>
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80089ee:	4b14      	ldr	r3, [pc, #80]	@ (8008a40 <tcp_slowtmr+0x5a8>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f47f ad62 	bne.w	80084bc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80089f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a02:	f004 f8bf 	bl	800cb84 <tcp_output>
  while (pcb != NULL) {
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f47f ad5e 	bne.w	80084ca <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008a12:	4b0c      	ldr	r3, [pc, #48]	@ (8008a44 <tcp_slowtmr+0x5ac>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008a18:	e069      	b.n	8008aee <tcp_slowtmr+0x656>
 8008a1a:	bf00      	nop
 8008a1c:	200080b4 	.word	0x200080b4
 8008a20:	000a4cb8 	.word	0x000a4cb8
 8008a24:	10624dd3 	.word	0x10624dd3
 8008a28:	000124f8 	.word	0x000124f8
 8008a2c:	200080c0 	.word	0x200080c0
 8008a30:	08012358 	.word	0x08012358
 8008a34:	08012790 	.word	0x08012790
 8008a38:	0801239c 	.word	0x0801239c
 8008a3c:	080127bc 	.word	0x080127bc
 8008a40:	200080c8 	.word	0x200080c8
 8008a44:	200080c4 	.word	0x200080c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	7d1b      	ldrb	r3, [r3, #20]
 8008a4c:	2b0a      	cmp	r3, #10
 8008a4e:	d006      	beq.n	8008a5e <tcp_slowtmr+0x5c6>
 8008a50:	4b2b      	ldr	r3, [pc, #172]	@ (8008b00 <tcp_slowtmr+0x668>)
 8008a52:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008a56:	492b      	ldr	r1, [pc, #172]	@ (8008b04 <tcp_slowtmr+0x66c>)
 8008a58:	482b      	ldr	r0, [pc, #172]	@ (8008b08 <tcp_slowtmr+0x670>)
 8008a5a:	f007 fed3 	bl	8010804 <iprintf>
    pcb_remove = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008a64:	4b29      	ldr	r3, [pc, #164]	@ (8008b0c <tcp_slowtmr+0x674>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a70:	d904      	bls.n	8008a7c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a76:	3301      	adds	r3, #1
 8008a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02f      	beq.n	8008ae4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008a84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a86:	f000 fc17 	bl	80092b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d010      	beq.n	8008ab2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008a90:	4b1f      	ldr	r3, [pc, #124]	@ (8008b10 <tcp_slowtmr+0x678>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d106      	bne.n	8008aa8 <tcp_slowtmr+0x610>
 8008a9a:	4b19      	ldr	r3, [pc, #100]	@ (8008b00 <tcp_slowtmr+0x668>)
 8008a9c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008aa0:	491c      	ldr	r1, [pc, #112]	@ (8008b14 <tcp_slowtmr+0x67c>)
 8008aa2:	4819      	ldr	r0, [pc, #100]	@ (8008b08 <tcp_slowtmr+0x670>)
 8008aa4:	f007 feae 	bl	8010804 <iprintf>
        prev->next = pcb->next;
 8008aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	60da      	str	r2, [r3, #12]
 8008ab0:	e00f      	b.n	8008ad2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008ab2:	4b17      	ldr	r3, [pc, #92]	@ (8008b10 <tcp_slowtmr+0x678>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d006      	beq.n	8008aca <tcp_slowtmr+0x632>
 8008abc:	4b10      	ldr	r3, [pc, #64]	@ (8008b00 <tcp_slowtmr+0x668>)
 8008abe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008ac2:	4915      	ldr	r1, [pc, #84]	@ (8008b18 <tcp_slowtmr+0x680>)
 8008ac4:	4810      	ldr	r0, [pc, #64]	@ (8008b08 <tcp_slowtmr+0x670>)
 8008ac6:	f007 fe9d 	bl	8010804 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	4a10      	ldr	r2, [pc, #64]	@ (8008b10 <tcp_slowtmr+0x678>)
 8008ad0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008adc:	69f8      	ldr	r0, [r7, #28]
 8008ade:	f7fe ff83 	bl	80079e8 <tcp_free>
 8008ae2:	e004      	b.n	8008aee <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1a9      	bne.n	8008a48 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop
 8008af8:	3730      	adds	r7, #48	@ 0x30
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bdb0      	pop	{r4, r5, r7, pc}
 8008afe:	bf00      	nop
 8008b00:	08012358 	.word	0x08012358
 8008b04:	080127e8 	.word	0x080127e8
 8008b08:	0801239c 	.word	0x0801239c
 8008b0c:	200080b4 	.word	0x200080b4
 8008b10:	200080c4 	.word	0x200080c4
 8008b14:	08012818 	.word	0x08012818
 8008b18:	08012840 	.word	0x08012840

08008b1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008b22:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd8 <tcp_fasttmr+0xbc>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	3301      	adds	r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8008bd8 <tcp_fasttmr+0xbc>)
 8008b2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8008bdc <tcp_fasttmr+0xc0>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008b34:	e048      	b.n	8008bc8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	7f9a      	ldrb	r2, [r3, #30]
 8008b3a:	4b27      	ldr	r3, [pc, #156]	@ (8008bd8 <tcp_fasttmr+0xbc>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d03f      	beq.n	8008bc2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008b42:	4b25      	ldr	r3, [pc, #148]	@ (8008bd8 <tcp_fasttmr+0xbc>)
 8008b44:	781a      	ldrb	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8b5b      	ldrh	r3, [r3, #26]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d010      	beq.n	8008b78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8b5b      	ldrh	r3, [r3, #26]
 8008b5a:	f043 0302 	orr.w	r3, r3, #2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f004 f80d 	bl	800cb84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	8b5b      	ldrh	r3, [r3, #26]
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	b29a      	uxth	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8b5b      	ldrh	r3, [r3, #26]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	8b5b      	ldrh	r3, [r3, #26]
 8008b88:	f023 0308 	bic.w	r3, r3, #8
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff f8bc 	bl	8007d10 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8008be0 <tcp_fasttmr+0xc4>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f819 	bl	8008be4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008be0 <tcp_fasttmr+0xc4>)
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d000      	beq.n	8008bbc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008bba:	e7b8      	b.n	8008b2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e002      	b.n	8008bc8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1b3      	bne.n	8008b36 <tcp_fasttmr+0x1a>
    }
  }
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200080ca 	.word	0x200080ca
 8008bdc:	200080c0 	.word	0x200080c0
 8008be0:	200080c8 	.word	0x200080c8

08008be4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <tcp_process_refused_data+0x22>
 8008bf2:	4b37      	ldr	r3, [pc, #220]	@ (8008cd0 <tcp_process_refused_data+0xec>)
 8008bf4:	f240 6209 	movw	r2, #1545	@ 0x609
 8008bf8:	4936      	ldr	r1, [pc, #216]	@ (8008cd4 <tcp_process_refused_data+0xf0>)
 8008bfa:	4837      	ldr	r0, [pc, #220]	@ (8008cd8 <tcp_process_refused_data+0xf4>)
 8008bfc:	f007 fe02 	bl	8010804 <iprintf>
 8008c00:	f06f 030f 	mvn.w	r3, #15
 8008c04:	e060      	b.n	8008cc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c0a:	7b5b      	ldrb	r3, [r3, #13]
 8008c0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00b      	beq.n	8008c3c <tcp_process_refused_data+0x58>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6918      	ldr	r0, [r3, #16]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	47a0      	blx	r4
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]
 8008c3a:	e007      	b.n	8008c4c <tcp_process_refused_data+0x68>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	2000      	movs	r0, #0
 8008c44:	f000 f8c2 	bl	8008dcc <tcp_recv_null>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d12a      	bne.n	8008caa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	f003 0320 	and.w	r3, r3, #32
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d033      	beq.n	8008cc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c62:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008c66:	d005      	beq.n	8008c74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <tcp_process_refused_data+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6918      	ldr	r0, [r3, #16]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	6879      	ldr	r1, [r7, #4]
 8008c8e:	47a0      	blx	r4
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e001      	b.n	8008c9a <tcp_process_refused_data+0xb6>
 8008c96:	2300      	movs	r3, #0
 8008c98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c9e:	f113 0f0d 	cmn.w	r3, #13
 8008ca2:	d110      	bne.n	8008cc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008ca4:	f06f 030c 	mvn.w	r3, #12
 8008ca8:	e00e      	b.n	8008cc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cae:	f113 0f0d 	cmn.w	r3, #13
 8008cb2:	d102      	bne.n	8008cba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008cb4:	f06f 030c 	mvn.w	r3, #12
 8008cb8:	e006      	b.n	8008cc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8008cc0:	f06f 0304 	mvn.w	r3, #4
 8008cc4:	e000      	b.n	8008cc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd90      	pop	{r4, r7, pc}
 8008cd0:	08012358 	.word	0x08012358
 8008cd4:	08012868 	.word	0x08012868
 8008cd8:	0801239c 	.word	0x0801239c

08008cdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008ce4:	e007      	b.n	8008cf6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f80a 	bl	8008d06 <tcp_seg_free>
    seg = next;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1f4      	bne.n	8008ce6 <tcp_segs_free+0xa>
  }
}
 8008cfc:	bf00      	nop
 8008cfe:	bf00      	nop
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00c      	beq.n	8008d2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fbc1 	bl	80074a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	2003      	movs	r0, #3
 8008d2a:	f7fd fd47 	bl	80067bc <memp_free>
  }
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
	...

08008d38 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <tcp_setprio+0x22>
 8008d4a:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <tcp_setprio+0x30>)
 8008d4c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8008d50:	4906      	ldr	r1, [pc, #24]	@ (8008d6c <tcp_setprio+0x34>)
 8008d52:	4807      	ldr	r0, [pc, #28]	@ (8008d70 <tcp_setprio+0x38>)
 8008d54:	f007 fd56 	bl	8010804 <iprintf>
 8008d58:	e002      	b.n	8008d60 <tcp_setprio+0x28>

  pcb->prio = prio;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	78fa      	ldrb	r2, [r7, #3]
 8008d5e:	755a      	strb	r2, [r3, #21]
}
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	08012358 	.word	0x08012358
 8008d6c:	08012890 	.word	0x08012890
 8008d70:	0801239c 	.word	0x0801239c

08008d74 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <tcp_seg_copy+0x1c>
 8008d82:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <tcp_seg_copy+0x4c>)
 8008d84:	f240 6282 	movw	r2, #1666	@ 0x682
 8008d88:	490e      	ldr	r1, [pc, #56]	@ (8008dc4 <tcp_seg_copy+0x50>)
 8008d8a:	480f      	ldr	r0, [pc, #60]	@ (8008dc8 <tcp_seg_copy+0x54>)
 8008d8c:	f007 fd3a 	bl	8010804 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008d90:	2003      	movs	r0, #3
 8008d92:	f7fd fca3 	bl	80066dc <memp_malloc>
 8008d96:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <tcp_seg_copy+0x2e>
    return NULL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e00a      	b.n	8008db8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008da2:	2210      	movs	r2, #16
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f007 fe25 	bl	80109f6 <memcpy>
  pbuf_ref(cseg->p);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fe fc19 	bl	80075e8 <pbuf_ref>
  return cseg;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	08012358 	.word	0x08012358
 8008dc4:	080128ac 	.word	0x080128ac
 8008dc8:	0801239c 	.word	0x0801239c

08008dcc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
 8008dd8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <tcp_recv_null+0x28>
 8008de0:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <tcp_recv_null+0x60>)
 8008de2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8008de6:	4912      	ldr	r1, [pc, #72]	@ (8008e30 <tcp_recv_null+0x64>)
 8008de8:	4812      	ldr	r0, [pc, #72]	@ (8008e34 <tcp_recv_null+0x68>)
 8008dea:	f007 fd0b 	bl	8010804 <iprintf>
 8008dee:	f06f 030f 	mvn.w	r3, #15
 8008df2:	e016      	b.n	8008e22 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	891b      	ldrh	r3, [r3, #8]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68b8      	ldr	r0, [r7, #8]
 8008e02:	f7ff fab3 	bl	800836c <tcp_recved>
    pbuf_free(p);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fe fb4e 	bl	80074a8 <pbuf_free>
 8008e0c:	e008      	b.n	8008e20 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008e16:	68b8      	ldr	r0, [r7, #8]
 8008e18:	f7fe ffe4 	bl	8007de4 <tcp_close>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	e000      	b.n	8008e22 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08012358 	.word	0x08012358
 8008e30:	080128c8 	.word	0x080128c8
 8008e34:	0801239c 	.word	0x0801239c

08008e38 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	db01      	blt.n	8008e4e <tcp_kill_prio+0x16>
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	e000      	b.n	8008e50 <tcp_kill_prio+0x18>
 8008e4e:	237f      	movs	r3, #127	@ 0x7f
 8008e50:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d034      	beq.n	8008ec2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008e58:	7afb      	ldrb	r3, [r7, #11]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e66:	4b19      	ldr	r3, [pc, #100]	@ (8008ecc <tcp_kill_prio+0x94>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	e01f      	b.n	8008eae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	7d5b      	ldrb	r3, [r3, #21]
 8008e72:	7afa      	ldrb	r2, [r7, #11]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d80c      	bhi.n	8008e92 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008e7c:	7afa      	ldrb	r2, [r7, #11]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d112      	bne.n	8008ea8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008e82:	4b13      	ldr	r3, [pc, #76]	@ (8008ed0 <tcp_kill_prio+0x98>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d80a      	bhi.n	8008ea8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008e92:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed0 <tcp_kill_prio+0x98>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	7d5b      	ldrb	r3, [r3, #21]
 8008ea6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1dc      	bne.n	8008e6e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008eba:	6938      	ldr	r0, [r7, #16]
 8008ebc:	f7ff f87c 	bl	8007fb8 <tcp_abort>
 8008ec0:	e000      	b.n	8008ec4 <tcp_kill_prio+0x8c>
    return;
 8008ec2:	bf00      	nop
  }
}
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	200080c0 	.word	0x200080c0
 8008ed0:	200080b4 	.word	0x200080b4

08008ed4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008ede:	79fb      	ldrb	r3, [r7, #7]
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d009      	beq.n	8008ef8 <tcp_kill_state+0x24>
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b09      	cmp	r3, #9
 8008ee8:	d006      	beq.n	8008ef8 <tcp_kill_state+0x24>
 8008eea:	4b1a      	ldr	r3, [pc, #104]	@ (8008f54 <tcp_kill_state+0x80>)
 8008eec:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8008ef0:	4919      	ldr	r1, [pc, #100]	@ (8008f58 <tcp_kill_state+0x84>)
 8008ef2:	481a      	ldr	r0, [pc, #104]	@ (8008f5c <tcp_kill_state+0x88>)
 8008ef4:	f007 fc86 	bl	8010804 <iprintf>

  inactivity = 0;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f00:	4b17      	ldr	r3, [pc, #92]	@ (8008f60 <tcp_kill_state+0x8c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	e017      	b.n	8008f38 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	7d1b      	ldrb	r3, [r3, #20]
 8008f0c:	79fa      	ldrb	r2, [r7, #7]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d10f      	bne.n	8008f32 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f12:	4b14      	ldr	r3, [pc, #80]	@ (8008f64 <tcp_kill_state+0x90>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d807      	bhi.n	8008f32 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <tcp_kill_state+0x90>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e4      	bne.n	8008f08 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008f44:	2100      	movs	r1, #0
 8008f46:	6938      	ldr	r0, [r7, #16]
 8008f48:	f7fe ff78 	bl	8007e3c <tcp_abandon>
  }
}
 8008f4c:	bf00      	nop
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	08012358 	.word	0x08012358
 8008f58:	080128e4 	.word	0x080128e4
 8008f5c:	0801239c 	.word	0x0801239c
 8008f60:	200080c0 	.word	0x200080c0
 8008f64:	200080b4 	.word	0x200080b4

08008f68 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f76:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <tcp_kill_timewait+0x58>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e012      	b.n	8008fa4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f7e:	4b11      	ldr	r3, [pc, #68]	@ (8008fc4 <tcp_kill_timewait+0x5c>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d807      	bhi.n	8008f9e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fc4 <tcp_kill_timewait+0x5c>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e9      	bne.n	8008f7e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008fb0:	68b8      	ldr	r0, [r7, #8]
 8008fb2:	f7ff f801 	bl	8007fb8 <tcp_abort>
  }
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	200080c4 	.word	0x200080c4
 8008fc4:	200080b4 	.word	0x200080b4

08008fc8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008fce:	4b10      	ldr	r3, [pc, #64]	@ (8009010 <tcp_handle_closepend+0x48>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008fd4:	e014      	b.n	8009000 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	8b5b      	ldrh	r3, [r3, #26]
 8008fe0:	f003 0308 	and.w	r3, r3, #8
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d009      	beq.n	8008ffc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8b5b      	ldrh	r3, [r3, #26]
 8008fec:	f023 0308 	bic.w	r3, r3, #8
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f7fe fe8a 	bl	8007d10 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1e7      	bne.n	8008fd6 <tcp_handle_closepend+0xe>
  }
}
 8009006:	bf00      	nop
 8009008:	bf00      	nop
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200080c0 	.word	0x200080c0

08009014 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800901e:	2001      	movs	r0, #1
 8009020:	f7fd fb5c 	bl	80066dc <memp_malloc>
 8009024:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d126      	bne.n	800907a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800902c:	f7ff ffcc 	bl	8008fc8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009030:	f7ff ff9a 	bl	8008f68 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009034:	2001      	movs	r0, #1
 8009036:	f7fd fb51 	bl	80066dc <memp_malloc>
 800903a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d11b      	bne.n	800907a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009042:	2009      	movs	r0, #9
 8009044:	f7ff ff46 	bl	8008ed4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009048:	2001      	movs	r0, #1
 800904a:	f7fd fb47 	bl	80066dc <memp_malloc>
 800904e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d111      	bne.n	800907a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009056:	2008      	movs	r0, #8
 8009058:	f7ff ff3c 	bl	8008ed4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800905c:	2001      	movs	r0, #1
 800905e:	f7fd fb3d 	bl	80066dc <memp_malloc>
 8009062:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d107      	bne.n	800907a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800906a:	79fb      	ldrb	r3, [r7, #7]
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fee3 	bl	8008e38 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009072:	2001      	movs	r0, #1
 8009074:	f7fd fb32 	bl	80066dc <memp_malloc>
 8009078:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d03f      	beq.n	8009100 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009080:	229c      	movs	r2, #156	@ 0x9c
 8009082:	2100      	movs	r1, #0
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f007 fc22 	bl	80108ce <memset>
    pcb->prio = prio;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	79fa      	ldrb	r2, [r7, #7]
 800908e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009096:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80090a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	22ff      	movs	r2, #255	@ 0xff
 80090ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80090b6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2206      	movs	r2, #6
 80090bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2206      	movs	r2, #6
 80090c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090cc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80090d6:	4b0d      	ldr	r3, [pc, #52]	@ (800910c <tcp_alloc+0xf8>)
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80090de:	4b0c      	ldr	r3, [pc, #48]	@ (8009110 <tcp_alloc+0xfc>)
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80090ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a08      	ldr	r2, [pc, #32]	@ (8009114 <tcp_alloc+0x100>)
 80090f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4a07      	ldr	r2, [pc, #28]	@ (8009118 <tcp_alloc+0x104>)
 80090fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009100:	68fb      	ldr	r3, [r7, #12]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200080b4 	.word	0x200080b4
 8009110:	200080ca 	.word	0x200080ca
 8009114:	08008dcd 	.word	0x08008dcd
 8009118:	006ddd00 	.word	0x006ddd00

0800911c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	4603      	mov	r3, r0
 8009124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009126:	2040      	movs	r0, #64	@ 0x40
 8009128:	f7ff ff74 	bl	8009014 <tcp_alloc>
 800912c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800912e:	68fb      	ldr	r3, [r7, #12]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	611a      	str	r2, [r3, #16]
  }
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00e      	beq.n	800918a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7d1b      	ldrb	r3, [r3, #20]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d106      	bne.n	8009182 <tcp_recv+0x26>
 8009174:	4b07      	ldr	r3, [pc, #28]	@ (8009194 <tcp_recv+0x38>)
 8009176:	f240 72df 	movw	r2, #2015	@ 0x7df
 800917a:	4907      	ldr	r1, [pc, #28]	@ (8009198 <tcp_recv+0x3c>)
 800917c:	4807      	ldr	r0, [pc, #28]	@ (800919c <tcp_recv+0x40>)
 800917e:	f007 fb41 	bl	8010804 <iprintf>
    pcb->recv = recv;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	08012358 	.word	0x08012358
 8009198:	080128f4 	.word	0x080128f4
 800919c:	0801239c 	.word	0x0801239c

080091a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	7d1b      	ldrb	r3, [r3, #20]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d106      	bne.n	80091c6 <tcp_sent+0x26>
 80091b8:	4b07      	ldr	r3, [pc, #28]	@ (80091d8 <tcp_sent+0x38>)
 80091ba:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80091be:	4907      	ldr	r1, [pc, #28]	@ (80091dc <tcp_sent+0x3c>)
 80091c0:	4807      	ldr	r0, [pc, #28]	@ (80091e0 <tcp_sent+0x40>)
 80091c2:	f007 fb1f 	bl	8010804 <iprintf>
    pcb->sent = sent;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	08012358 	.word	0x08012358
 80091dc:	0801291c 	.word	0x0801291c
 80091e0:	0801239c 	.word	0x0801239c

080091e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	7d1b      	ldrb	r3, [r3, #20]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d106      	bne.n	800920a <tcp_err+0x26>
 80091fc:	4b07      	ldr	r3, [pc, #28]	@ (800921c <tcp_err+0x38>)
 80091fe:	f640 020d 	movw	r2, #2061	@ 0x80d
 8009202:	4907      	ldr	r1, [pc, #28]	@ (8009220 <tcp_err+0x3c>)
 8009204:	4807      	ldr	r0, [pc, #28]	@ (8009224 <tcp_err+0x40>)
 8009206:	f007 fafd 	bl	8010804 <iprintf>
    pcb->errf = err;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	08012358 	.word	0x08012358
 8009220:	08012944 	.word	0x08012944
 8009224:	0801239c 	.word	0x0801239c

08009228 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <tcp_accept+0x22>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	7d1b      	ldrb	r3, [r3, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d104      	bne.n	800924a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	619a      	str	r2, [r3, #24]
  }
}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d107      	bne.n	800927c <tcp_poll+0x24>
 800926c:	4b0e      	ldr	r3, [pc, #56]	@ (80092a8 <tcp_poll+0x50>)
 800926e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8009272:	490e      	ldr	r1, [pc, #56]	@ (80092ac <tcp_poll+0x54>)
 8009274:	480e      	ldr	r0, [pc, #56]	@ (80092b0 <tcp_poll+0x58>)
 8009276:	f007 fac5 	bl	8010804 <iprintf>
 800927a:	e011      	b.n	80092a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	7d1b      	ldrb	r3, [r3, #20]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d106      	bne.n	8009292 <tcp_poll+0x3a>
 8009284:	4b08      	ldr	r3, [pc, #32]	@ (80092a8 <tcp_poll+0x50>)
 8009286:	f640 023e 	movw	r2, #2110	@ 0x83e
 800928a:	490a      	ldr	r1, [pc, #40]	@ (80092b4 <tcp_poll+0x5c>)
 800928c:	4808      	ldr	r0, [pc, #32]	@ (80092b0 <tcp_poll+0x58>)
 800928e:	f007 fab9 	bl	8010804 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	79fa      	ldrb	r2, [r7, #7]
 800929e:	775a      	strb	r2, [r3, #29]
}
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	08012358 	.word	0x08012358
 80092ac:	0801296c 	.word	0x0801296c
 80092b0:	0801239c 	.word	0x0801239c
 80092b4:	08012984 	.word	0x08012984

080092b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <tcp_pcb_purge+0x1e>
 80092c6:	4b21      	ldr	r3, [pc, #132]	@ (800934c <tcp_pcb_purge+0x94>)
 80092c8:	f640 0251 	movw	r2, #2129	@ 0x851
 80092cc:	4920      	ldr	r1, [pc, #128]	@ (8009350 <tcp_pcb_purge+0x98>)
 80092ce:	4821      	ldr	r0, [pc, #132]	@ (8009354 <tcp_pcb_purge+0x9c>)
 80092d0:	f007 fa98 	bl	8010804 <iprintf>
 80092d4:	e037      	b.n	8009346 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	7d1b      	ldrb	r3, [r3, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d033      	beq.n	8009346 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80092e2:	2b0a      	cmp	r3, #10
 80092e4:	d02f      	beq.n	8009346 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d02b      	beq.n	8009346 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe f8d4 	bl	80074a8 <pbuf_free>
      pcb->refused_data = NULL;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800930a:	2b00      	cmp	r3, #0
 800930c:	d002      	beq.n	8009314 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f986 	bl	8009620 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800931a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fcdb 	bl	8008cdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932a:	4618      	mov	r0, r3
 800932c:	f7ff fcd6 	bl	8008cdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	08012358 	.word	0x08012358
 8009350:	080129a4 	.word	0x080129a4
 8009354:	0801239c 	.word	0x0801239c

08009358 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d106      	bne.n	8009376 <tcp_pcb_remove+0x1e>
 8009368:	4b3e      	ldr	r3, [pc, #248]	@ (8009464 <tcp_pcb_remove+0x10c>)
 800936a:	f640 0283 	movw	r2, #2179	@ 0x883
 800936e:	493e      	ldr	r1, [pc, #248]	@ (8009468 <tcp_pcb_remove+0x110>)
 8009370:	483e      	ldr	r0, [pc, #248]	@ (800946c <tcp_pcb_remove+0x114>)
 8009372:	f007 fa47 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d106      	bne.n	800938a <tcp_pcb_remove+0x32>
 800937c:	4b39      	ldr	r3, [pc, #228]	@ (8009464 <tcp_pcb_remove+0x10c>)
 800937e:	f640 0284 	movw	r2, #2180	@ 0x884
 8009382:	493b      	ldr	r1, [pc, #236]	@ (8009470 <tcp_pcb_remove+0x118>)
 8009384:	4839      	ldr	r0, [pc, #228]	@ (800946c <tcp_pcb_remove+0x114>)
 8009386:	f007 fa3d 	bl	8010804 <iprintf>

  TCP_RMV(pcblist, pcb);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	683a      	ldr	r2, [r7, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d105      	bne.n	80093a0 <tcp_pcb_remove+0x48>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	e013      	b.n	80093c8 <tcp_pcb_remove+0x70>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	e00c      	b.n	80093c2 <tcp_pcb_remove+0x6a>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d104      	bne.n	80093bc <tcp_pcb_remove+0x64>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	60da      	str	r2, [r3, #12]
 80093ba:	e005      	b.n	80093c8 <tcp_pcb_remove+0x70>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	60fb      	str	r3, [r7, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ef      	bne.n	80093a8 <tcp_pcb_remove+0x50>
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2200      	movs	r2, #0
 80093cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80093ce:	6838      	ldr	r0, [r7, #0]
 80093d0:	f7ff ff72 	bl	80092b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	7d1b      	ldrb	r3, [r3, #20]
 80093d8:	2b0a      	cmp	r3, #10
 80093da:	d013      	beq.n	8009404 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d00f      	beq.n	8009404 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	8b5b      	ldrh	r3, [r3, #26]
 80093e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d009      	beq.n	8009404 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	8b5b      	ldrh	r3, [r3, #26]
 80093f4:	f043 0302 	orr.w	r3, r3, #2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80093fe:	6838      	ldr	r0, [r7, #0]
 8009400:	f003 fbc0 	bl	800cb84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	7d1b      	ldrb	r3, [r3, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d020      	beq.n	800944e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009410:	2b00      	cmp	r3, #0
 8009412:	d006      	beq.n	8009422 <tcp_pcb_remove+0xca>
 8009414:	4b13      	ldr	r3, [pc, #76]	@ (8009464 <tcp_pcb_remove+0x10c>)
 8009416:	f640 0293 	movw	r2, #2195	@ 0x893
 800941a:	4916      	ldr	r1, [pc, #88]	@ (8009474 <tcp_pcb_remove+0x11c>)
 800941c:	4813      	ldr	r0, [pc, #76]	@ (800946c <tcp_pcb_remove+0x114>)
 800941e:	f007 f9f1 	bl	8010804 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <tcp_pcb_remove+0xe0>
 800942a:	4b0e      	ldr	r3, [pc, #56]	@ (8009464 <tcp_pcb_remove+0x10c>)
 800942c:	f640 0294 	movw	r2, #2196	@ 0x894
 8009430:	4911      	ldr	r1, [pc, #68]	@ (8009478 <tcp_pcb_remove+0x120>)
 8009432:	480e      	ldr	r0, [pc, #56]	@ (800946c <tcp_pcb_remove+0x114>)
 8009434:	f007 f9e6 	bl	8010804 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800943c:	2b00      	cmp	r3, #0
 800943e:	d006      	beq.n	800944e <tcp_pcb_remove+0xf6>
 8009440:	4b08      	ldr	r3, [pc, #32]	@ (8009464 <tcp_pcb_remove+0x10c>)
 8009442:	f640 0296 	movw	r2, #2198	@ 0x896
 8009446:	490d      	ldr	r1, [pc, #52]	@ (800947c <tcp_pcb_remove+0x124>)
 8009448:	4808      	ldr	r0, [pc, #32]	@ (800946c <tcp_pcb_remove+0x114>)
 800944a:	f007 f9db 	bl	8010804 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2200      	movs	r2, #0
 8009452:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2200      	movs	r2, #0
 8009458:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800945a:	bf00      	nop
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	08012358 	.word	0x08012358
 8009468:	080129c0 	.word	0x080129c0
 800946c:	0801239c 	.word	0x0801239c
 8009470:	080129dc 	.word	0x080129dc
 8009474:	080129fc 	.word	0x080129fc
 8009478:	08012a14 	.word	0x08012a14
 800947c:	08012a30 	.word	0x08012a30

08009480 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d106      	bne.n	800949c <tcp_next_iss+0x1c>
 800948e:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <tcp_next_iss+0x38>)
 8009490:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009494:	4909      	ldr	r1, [pc, #36]	@ (80094bc <tcp_next_iss+0x3c>)
 8009496:	480a      	ldr	r0, [pc, #40]	@ (80094c0 <tcp_next_iss+0x40>)
 8009498:	f007 f9b4 	bl	8010804 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800949c:	4b09      	ldr	r3, [pc, #36]	@ (80094c4 <tcp_next_iss+0x44>)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	4b09      	ldr	r3, [pc, #36]	@ (80094c8 <tcp_next_iss+0x48>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4413      	add	r3, r2
 80094a6:	4a07      	ldr	r2, [pc, #28]	@ (80094c4 <tcp_next_iss+0x44>)
 80094a8:	6013      	str	r3, [r2, #0]
  return iss;
 80094aa:	4b06      	ldr	r3, [pc, #24]	@ (80094c4 <tcp_next_iss+0x44>)
 80094ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	08012358 	.word	0x08012358
 80094bc:	08012a48 	.word	0x08012a48
 80094c0:	0801239c 	.word	0x0801239c
 80094c4:	20000024 	.word	0x20000024
 80094c8:	200080b4 	.word	0x200080b4

080094cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <tcp_eff_send_mss_netif+0x22>
 80094e0:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <tcp_eff_send_mss_netif+0x68>)
 80094e2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80094e6:	4914      	ldr	r1, [pc, #80]	@ (8009538 <tcp_eff_send_mss_netif+0x6c>)
 80094e8:	4814      	ldr	r0, [pc, #80]	@ (800953c <tcp_eff_send_mss_netif+0x70>)
 80094ea:	f007 f98b 	bl	8010804 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80094f4:	89fb      	ldrh	r3, [r7, #14]
 80094f6:	e019      	b.n	800952c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80094fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80094fe:	8afb      	ldrh	r3, [r7, #22]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d012      	beq.n	800952a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8009504:	2328      	movs	r3, #40	@ 0x28
 8009506:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009508:	8afa      	ldrh	r2, [r7, #22]
 800950a:	8abb      	ldrh	r3, [r7, #20]
 800950c:	429a      	cmp	r2, r3
 800950e:	d904      	bls.n	800951a <tcp_eff_send_mss_netif+0x4e>
 8009510:	8afa      	ldrh	r2, [r7, #22]
 8009512:	8abb      	ldrh	r3, [r7, #20]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	b29b      	uxth	r3, r3
 8009518:	e000      	b.n	800951c <tcp_eff_send_mss_netif+0x50>
 800951a:	2300      	movs	r3, #0
 800951c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800951e:	8a7a      	ldrh	r2, [r7, #18]
 8009520:	89fb      	ldrh	r3, [r7, #14]
 8009522:	4293      	cmp	r3, r2
 8009524:	bf28      	it	cs
 8009526:	4613      	movcs	r3, r2
 8009528:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800952a:	89fb      	ldrh	r3, [r7, #14]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3718      	adds	r7, #24
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	08012358 	.word	0x08012358
 8009538:	08012a64 	.word	0x08012a64
 800953c:	0801239c 	.word	0x0801239c

08009540 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d119      	bne.n	8009588 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009554:	4b10      	ldr	r3, [pc, #64]	@ (8009598 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009556:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800955a:	4910      	ldr	r1, [pc, #64]	@ (800959c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800955c:	4810      	ldr	r0, [pc, #64]	@ (80095a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800955e:	f007 f951 	bl	8010804 <iprintf>

  while (pcb != NULL) {
 8009562:	e011      	b.n	8009588 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d108      	bne.n	8009582 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	68db      	ldr	r3, [r3, #12]
 8009574:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7fe fd1e 	bl	8007fb8 <tcp_abort>
      pcb = next;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	60fb      	str	r3, [r7, #12]
 8009580:	e002      	b.n	8009588 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1ea      	bne.n	8009564 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	08012358 	.word	0x08012358
 800959c:	08012a8c 	.word	0x08012a8c
 80095a0:	0801239c 	.word	0x0801239c

080095a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d02a      	beq.n	800960a <tcp_netif_ip_addr_changed+0x66>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d026      	beq.n	800960a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80095bc:	4b15      	ldr	r3, [pc, #84]	@ (8009614 <tcp_netif_ip_addr_changed+0x70>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7ff ffbc 	bl	8009540 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80095c8:	4b13      	ldr	r3, [pc, #76]	@ (8009618 <tcp_netif_ip_addr_changed+0x74>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ffb6 	bl	8009540 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d017      	beq.n	800960a <tcp_netif_ip_addr_changed+0x66>
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d013      	beq.n	800960a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80095e2:	4b0e      	ldr	r3, [pc, #56]	@ (800961c <tcp_netif_ip_addr_changed+0x78>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	e00c      	b.n	8009604 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d103      	bne.n	80095fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1ef      	bne.n	80095ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	200080c0 	.word	0x200080c0
 8009618:	200080b8 	.word	0x200080b8
 800961c:	200080bc 	.word	0x200080bc

08009620 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fb51 	bl	8008cdc <tcp_segs_free>
    pcb->ooseq = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b08d      	sub	sp, #52	@ 0x34
 800964c:	af04      	add	r7, sp, #16
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <tcp_input+0x1c>
 8009658:	4b9b      	ldr	r3, [pc, #620]	@ (80098c8 <tcp_input+0x280>)
 800965a:	2283      	movs	r2, #131	@ 0x83
 800965c:	499b      	ldr	r1, [pc, #620]	@ (80098cc <tcp_input+0x284>)
 800965e:	489c      	ldr	r0, [pc, #624]	@ (80098d0 <tcp_input+0x288>)
 8009660:	f007 f8d0 	bl	8010804 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	4a9a      	ldr	r2, [pc, #616]	@ (80098d4 <tcp_input+0x28c>)
 800966a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	895b      	ldrh	r3, [r3, #10]
 8009670:	2b13      	cmp	r3, #19
 8009672:	f240 83d1 	bls.w	8009e18 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009676:	4b98      	ldr	r3, [pc, #608]	@ (80098d8 <tcp_input+0x290>)
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	4a97      	ldr	r2, [pc, #604]	@ (80098d8 <tcp_input+0x290>)
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f006 f869 	bl	800f758 <ip4_addr_isbroadcast_u32>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 83c7 	bne.w	8009e1c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800968e:	4b92      	ldr	r3, [pc, #584]	@ (80098d8 <tcp_input+0x290>)
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009696:	2be0      	cmp	r3, #224	@ 0xe0
 8009698:	f000 83c0 	beq.w	8009e1c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800969c:	4b8d      	ldr	r3, [pc, #564]	@ (80098d4 <tcp_input+0x28c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	899b      	ldrh	r3, [r3, #12]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fc fb6f 	bl	8005d88 <lwip_htons>
 80096aa:	4603      	mov	r3, r0
 80096ac:	0b1b      	lsrs	r3, r3, #12
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80096b6:	7cbb      	ldrb	r3, [r7, #18]
 80096b8:	2b13      	cmp	r3, #19
 80096ba:	f240 83b1 	bls.w	8009e20 <tcp_input+0x7d8>
 80096be:	7cbb      	ldrb	r3, [r7, #18]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	891b      	ldrh	r3, [r3, #8]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	f200 83aa 	bhi.w	8009e20 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80096cc:	7cbb      	ldrb	r3, [r7, #18]
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3b14      	subs	r3, #20
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	4b81      	ldr	r3, [pc, #516]	@ (80098dc <tcp_input+0x294>)
 80096d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80096d8:	4b81      	ldr	r3, [pc, #516]	@ (80098e0 <tcp_input+0x298>)
 80096da:	2200      	movs	r2, #0
 80096dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	895a      	ldrh	r2, [r3, #10]
 80096e2:	7cbb      	ldrb	r3, [r7, #18]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d309      	bcc.n	80096fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80096ea:	4b7c      	ldr	r3, [pc, #496]	@ (80098dc <tcp_input+0x294>)
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	4b7d      	ldr	r3, [pc, #500]	@ (80098e4 <tcp_input+0x29c>)
 80096f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80096f2:	7cbb      	ldrb	r3, [r7, #18]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7fd fe50 	bl	800739c <pbuf_remove_header>
 80096fc:	e04e      	b.n	800979c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <tcp_input+0xca>
 8009706:	4b70      	ldr	r3, [pc, #448]	@ (80098c8 <tcp_input+0x280>)
 8009708:	22c2      	movs	r2, #194	@ 0xc2
 800970a:	4977      	ldr	r1, [pc, #476]	@ (80098e8 <tcp_input+0x2a0>)
 800970c:	4870      	ldr	r0, [pc, #448]	@ (80098d0 <tcp_input+0x288>)
 800970e:	f007 f879 	bl	8010804 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8009712:	2114      	movs	r1, #20
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7fd fe41 	bl	800739c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	895a      	ldrh	r2, [r3, #10]
 800971e:	4b71      	ldr	r3, [pc, #452]	@ (80098e4 <tcp_input+0x29c>)
 8009720:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8009722:	4b6e      	ldr	r3, [pc, #440]	@ (80098dc <tcp_input+0x294>)
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	4b6f      	ldr	r3, [pc, #444]	@ (80098e4 <tcp_input+0x29c>)
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800972e:	4b6d      	ldr	r3, [pc, #436]	@ (80098e4 <tcp_input+0x29c>)
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7fd fe31 	bl	800739c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	895b      	ldrh	r3, [r3, #10]
 8009740:	8a3a      	ldrh	r2, [r7, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	f200 836e 	bhi.w	8009e24 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4a64      	ldr	r2, [pc, #400]	@ (80098e0 <tcp_input+0x298>)
 8009750:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	8a3a      	ldrh	r2, [r7, #16]
 8009758:	4611      	mov	r1, r2
 800975a:	4618      	mov	r0, r3
 800975c:	f7fd fe1e 	bl	800739c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	891a      	ldrh	r2, [r3, #8]
 8009764:	8a3b      	ldrh	r3, [r7, #16]
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	895b      	ldrh	r3, [r3, #10]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <tcp_input+0x13a>
 8009776:	4b54      	ldr	r3, [pc, #336]	@ (80098c8 <tcp_input+0x280>)
 8009778:	22df      	movs	r2, #223	@ 0xdf
 800977a:	495c      	ldr	r1, [pc, #368]	@ (80098ec <tcp_input+0x2a4>)
 800977c:	4854      	ldr	r0, [pc, #336]	@ (80098d0 <tcp_input+0x288>)
 800977e:	f007 f841 	bl	8010804 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	891a      	ldrh	r2, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	891b      	ldrh	r3, [r3, #8]
 800978c:	429a      	cmp	r2, r3
 800978e:	d005      	beq.n	800979c <tcp_input+0x154>
 8009790:	4b4d      	ldr	r3, [pc, #308]	@ (80098c8 <tcp_input+0x280>)
 8009792:	22e0      	movs	r2, #224	@ 0xe0
 8009794:	4956      	ldr	r1, [pc, #344]	@ (80098f0 <tcp_input+0x2a8>)
 8009796:	484e      	ldr	r0, [pc, #312]	@ (80098d0 <tcp_input+0x288>)
 8009798:	f007 f834 	bl	8010804 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800979c:	4b4d      	ldr	r3, [pc, #308]	@ (80098d4 <tcp_input+0x28c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	4a4b      	ldr	r2, [pc, #300]	@ (80098d4 <tcp_input+0x28c>)
 80097a6:	6814      	ldr	r4, [r2, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fc faed 	bl	8005d88 <lwip_htons>
 80097ae:	4603      	mov	r3, r0
 80097b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80097b2:	4b48      	ldr	r3, [pc, #288]	@ (80098d4 <tcp_input+0x28c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	885b      	ldrh	r3, [r3, #2]
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4a46      	ldr	r2, [pc, #280]	@ (80098d4 <tcp_input+0x28c>)
 80097bc:	6814      	ldr	r4, [r2, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fc fae2 	bl	8005d88 <lwip_htons>
 80097c4:	4603      	mov	r3, r0
 80097c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80097c8:	4b42      	ldr	r3, [pc, #264]	@ (80098d4 <tcp_input+0x28c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	4a41      	ldr	r2, [pc, #260]	@ (80098d4 <tcp_input+0x28c>)
 80097d0:	6814      	ldr	r4, [r2, #0]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc faed 	bl	8005db2 <lwip_htonl>
 80097d8:	4603      	mov	r3, r0
 80097da:	6063      	str	r3, [r4, #4]
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	4a45      	ldr	r2, [pc, #276]	@ (80098f4 <tcp_input+0x2ac>)
 80097e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80097e2:	4b3c      	ldr	r3, [pc, #240]	@ (80098d4 <tcp_input+0x28c>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	4a3a      	ldr	r2, [pc, #232]	@ (80098d4 <tcp_input+0x28c>)
 80097ea:	6814      	ldr	r4, [r2, #0]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fc fae0 	bl	8005db2 <lwip_htonl>
 80097f2:	4603      	mov	r3, r0
 80097f4:	60a3      	str	r3, [r4, #8]
 80097f6:	68a3      	ldr	r3, [r4, #8]
 80097f8:	4a3f      	ldr	r2, [pc, #252]	@ (80098f8 <tcp_input+0x2b0>)
 80097fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80097fc:	4b35      	ldr	r3, [pc, #212]	@ (80098d4 <tcp_input+0x28c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	89db      	ldrh	r3, [r3, #14]
 8009802:	b29b      	uxth	r3, r3
 8009804:	4a33      	ldr	r2, [pc, #204]	@ (80098d4 <tcp_input+0x28c>)
 8009806:	6814      	ldr	r4, [r2, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f7fc fabd 	bl	8005d88 <lwip_htons>
 800980e:	4603      	mov	r3, r0
 8009810:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009812:	4b30      	ldr	r3, [pc, #192]	@ (80098d4 <tcp_input+0x28c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	899b      	ldrh	r3, [r3, #12]
 8009818:	b29b      	uxth	r3, r3
 800981a:	4618      	mov	r0, r3
 800981c:	f7fc fab4 	bl	8005d88 <lwip_htons>
 8009820:	4603      	mov	r3, r0
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009828:	b2da      	uxtb	r2, r3
 800982a:	4b34      	ldr	r3, [pc, #208]	@ (80098fc <tcp_input+0x2b4>)
 800982c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	891a      	ldrh	r2, [r3, #8]
 8009832:	4b33      	ldr	r3, [pc, #204]	@ (8009900 <tcp_input+0x2b8>)
 8009834:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009836:	4b31      	ldr	r3, [pc, #196]	@ (80098fc <tcp_input+0x2b4>)
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	f003 0303 	and.w	r3, r3, #3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00c      	beq.n	800985c <tcp_input+0x214>
    tcplen++;
 8009842:	4b2f      	ldr	r3, [pc, #188]	@ (8009900 <tcp_input+0x2b8>)
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	4b2d      	ldr	r3, [pc, #180]	@ (8009900 <tcp_input+0x2b8>)
 800984c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	891a      	ldrh	r2, [r3, #8]
 8009852:	4b2b      	ldr	r3, [pc, #172]	@ (8009900 <tcp_input+0x2b8>)
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	f200 82e6 	bhi.w	8009e28 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009860:	4b28      	ldr	r3, [pc, #160]	@ (8009904 <tcp_input+0x2bc>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	e09d      	b.n	80099a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	7d1b      	ldrb	r3, [r3, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d105      	bne.n	800987c <tcp_input+0x234>
 8009870:	4b15      	ldr	r3, [pc, #84]	@ (80098c8 <tcp_input+0x280>)
 8009872:	22fb      	movs	r2, #251	@ 0xfb
 8009874:	4924      	ldr	r1, [pc, #144]	@ (8009908 <tcp_input+0x2c0>)
 8009876:	4816      	ldr	r0, [pc, #88]	@ (80098d0 <tcp_input+0x288>)
 8009878:	f006 ffc4 	bl	8010804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	7d1b      	ldrb	r3, [r3, #20]
 8009880:	2b0a      	cmp	r3, #10
 8009882:	d105      	bne.n	8009890 <tcp_input+0x248>
 8009884:	4b10      	ldr	r3, [pc, #64]	@ (80098c8 <tcp_input+0x280>)
 8009886:	22fc      	movs	r2, #252	@ 0xfc
 8009888:	4920      	ldr	r1, [pc, #128]	@ (800990c <tcp_input+0x2c4>)
 800988a:	4811      	ldr	r0, [pc, #68]	@ (80098d0 <tcp_input+0x288>)
 800988c:	f006 ffba 	bl	8010804 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	7d1b      	ldrb	r3, [r3, #20]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d105      	bne.n	80098a4 <tcp_input+0x25c>
 8009898:	4b0b      	ldr	r3, [pc, #44]	@ (80098c8 <tcp_input+0x280>)
 800989a:	22fd      	movs	r2, #253	@ 0xfd
 800989c:	491c      	ldr	r1, [pc, #112]	@ (8009910 <tcp_input+0x2c8>)
 800989e:	480c      	ldr	r0, [pc, #48]	@ (80098d0 <tcp_input+0x288>)
 80098a0:	f006 ffb0 	bl	8010804 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	7a1b      	ldrb	r3, [r3, #8]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d033      	beq.n	8009914 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	7a1a      	ldrb	r2, [r3, #8]
 80098b0:	4b09      	ldr	r3, [pc, #36]	@ (80098d8 <tcp_input+0x290>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098b8:	3301      	adds	r3, #1
 80098ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80098bc:	429a      	cmp	r2, r3
 80098be:	d029      	beq.n	8009914 <tcp_input+0x2cc>
      prev = pcb;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	61bb      	str	r3, [r7, #24]
      continue;
 80098c4:	e06b      	b.n	800999e <tcp_input+0x356>
 80098c6:	bf00      	nop
 80098c8:	08012ac0 	.word	0x08012ac0
 80098cc:	08012af4 	.word	0x08012af4
 80098d0:	08012b0c 	.word	0x08012b0c
 80098d4:	200080dc 	.word	0x200080dc
 80098d8:	20005198 	.word	0x20005198
 80098dc:	200080e0 	.word	0x200080e0
 80098e0:	200080e4 	.word	0x200080e4
 80098e4:	200080e2 	.word	0x200080e2
 80098e8:	08012b34 	.word	0x08012b34
 80098ec:	08012b44 	.word	0x08012b44
 80098f0:	08012b50 	.word	0x08012b50
 80098f4:	200080ec 	.word	0x200080ec
 80098f8:	200080f0 	.word	0x200080f0
 80098fc:	200080f8 	.word	0x200080f8
 8009900:	200080f6 	.word	0x200080f6
 8009904:	200080c0 	.word	0x200080c0
 8009908:	08012b70 	.word	0x08012b70
 800990c:	08012b98 	.word	0x08012b98
 8009910:	08012bc4 	.word	0x08012bc4
    }

    if (pcb->remote_port == tcphdr->src &&
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	8b1a      	ldrh	r2, [r3, #24]
 8009918:	4b72      	ldr	r3, [pc, #456]	@ (8009ae4 <tcp_input+0x49c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	b29b      	uxth	r3, r3
 8009920:	429a      	cmp	r2, r3
 8009922:	d13a      	bne.n	800999a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	8ada      	ldrh	r2, [r3, #22]
 8009928:	4b6e      	ldr	r3, [pc, #440]	@ (8009ae4 <tcp_input+0x49c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	885b      	ldrh	r3, [r3, #2]
 800992e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009930:	429a      	cmp	r2, r3
 8009932:	d132      	bne.n	800999a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	4b6b      	ldr	r3, [pc, #428]	@ (8009ae8 <tcp_input+0x4a0>)
 800993a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800993c:	429a      	cmp	r2, r3
 800993e:	d12c      	bne.n	800999a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	4b68      	ldr	r3, [pc, #416]	@ (8009ae8 <tcp_input+0x4a0>)
 8009946:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009948:	429a      	cmp	r2, r3
 800994a:	d126      	bne.n	800999a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	69fa      	ldr	r2, [r7, #28]
 8009952:	429a      	cmp	r2, r3
 8009954:	d106      	bne.n	8009964 <tcp_input+0x31c>
 8009956:	4b65      	ldr	r3, [pc, #404]	@ (8009aec <tcp_input+0x4a4>)
 8009958:	f240 120d 	movw	r2, #269	@ 0x10d
 800995c:	4964      	ldr	r1, [pc, #400]	@ (8009af0 <tcp_input+0x4a8>)
 800995e:	4865      	ldr	r0, [pc, #404]	@ (8009af4 <tcp_input+0x4ac>)
 8009960:	f006 ff50 	bl	8010804 <iprintf>
      if (prev != NULL) {
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <tcp_input+0x338>
        prev->next = pcb->next;
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009972:	4b61      	ldr	r3, [pc, #388]	@ (8009af8 <tcp_input+0x4b0>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800997a:	4a5f      	ldr	r2, [pc, #380]	@ (8009af8 <tcp_input+0x4b0>)
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	429a      	cmp	r2, r3
 8009988:	d111      	bne.n	80099ae <tcp_input+0x366>
 800998a:	4b58      	ldr	r3, [pc, #352]	@ (8009aec <tcp_input+0x4a4>)
 800998c:	f240 1215 	movw	r2, #277	@ 0x115
 8009990:	495a      	ldr	r1, [pc, #360]	@ (8009afc <tcp_input+0x4b4>)
 8009992:	4858      	ldr	r0, [pc, #352]	@ (8009af4 <tcp_input+0x4ac>)
 8009994:	f006 ff36 	bl	8010804 <iprintf>
      break;
 8009998:	e009      	b.n	80099ae <tcp_input+0x366>
    }
    prev = pcb;
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	61fb      	str	r3, [r7, #28]
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f47f af5e 	bne.w	8009868 <tcp_input+0x220>
 80099ac:	e000      	b.n	80099b0 <tcp_input+0x368>
      break;
 80099ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f040 80aa 	bne.w	8009b0c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80099b8:	4b51      	ldr	r3, [pc, #324]	@ (8009b00 <tcp_input+0x4b8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	e03f      	b.n	8009a40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	7d1b      	ldrb	r3, [r3, #20]
 80099c4:	2b0a      	cmp	r3, #10
 80099c6:	d006      	beq.n	80099d6 <tcp_input+0x38e>
 80099c8:	4b48      	ldr	r3, [pc, #288]	@ (8009aec <tcp_input+0x4a4>)
 80099ca:	f240 121f 	movw	r2, #287	@ 0x11f
 80099ce:	494d      	ldr	r1, [pc, #308]	@ (8009b04 <tcp_input+0x4bc>)
 80099d0:	4848      	ldr	r0, [pc, #288]	@ (8009af4 <tcp_input+0x4ac>)
 80099d2:	f006 ff17 	bl	8010804 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	7a1b      	ldrb	r3, [r3, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d009      	beq.n	80099f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80099de:	69fb      	ldr	r3, [r7, #28]
 80099e0:	7a1a      	ldrb	r2, [r3, #8]
 80099e2:	4b41      	ldr	r3, [pc, #260]	@ (8009ae8 <tcp_input+0x4a0>)
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099ea:	3301      	adds	r3, #1
 80099ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d122      	bne.n	8009a38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	8b1a      	ldrh	r2, [r3, #24]
 80099f6:	4b3b      	ldr	r3, [pc, #236]	@ (8009ae4 <tcp_input+0x49c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d11b      	bne.n	8009a3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	8ada      	ldrh	r2, [r3, #22]
 8009a06:	4b37      	ldr	r3, [pc, #220]	@ (8009ae4 <tcp_input+0x49c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	885b      	ldrh	r3, [r3, #2]
 8009a0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d113      	bne.n	8009a3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	4b34      	ldr	r3, [pc, #208]	@ (8009ae8 <tcp_input+0x4a0>)
 8009a18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d10d      	bne.n	8009a3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b31      	ldr	r3, [pc, #196]	@ (8009ae8 <tcp_input+0x4a0>)
 8009a24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d107      	bne.n	8009a3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009a2a:	69f8      	ldr	r0, [r7, #28]
 8009a2c:	f000 fb56 	bl	800a0dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fd fd39 	bl	80074a8 <pbuf_free>
        return;
 8009a36:	e1fd      	b.n	8009e34 <tcp_input+0x7ec>
        continue;
 8009a38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	61fb      	str	r3, [r7, #28]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1bc      	bne.n	80099c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009b08 <tcp_input+0x4c0>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e02a      	b.n	8009aa8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	7a1b      	ldrb	r3, [r3, #8]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00c      	beq.n	8009a74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	7a1a      	ldrb	r2, [r3, #8]
 8009a5e:	4b22      	ldr	r3, [pc, #136]	@ (8009ae8 <tcp_input+0x4a0>)
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a66:	3301      	adds	r3, #1
 8009a68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d002      	beq.n	8009a74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	61bb      	str	r3, [r7, #24]
        continue;
 8009a72:	e016      	b.n	8009aa2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	8ada      	ldrh	r2, [r3, #22]
 8009a78:	4b1a      	ldr	r3, [pc, #104]	@ (8009ae4 <tcp_input+0x49c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	885b      	ldrh	r3, [r3, #2]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d10c      	bne.n	8009a9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	4b17      	ldr	r3, [pc, #92]	@ (8009ae8 <tcp_input+0x4a0>)
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d00f      	beq.n	8009ab0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d00d      	beq.n	8009ab2 <tcp_input+0x46a>
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1d1      	bne.n	8009a52 <tcp_input+0x40a>
 8009aae:	e000      	b.n	8009ab2 <tcp_input+0x46a>
            break;
 8009ab0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d029      	beq.n	8009b0c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	68da      	ldr	r2, [r3, #12]
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009ac6:	4b10      	ldr	r3, [pc, #64]	@ (8009b08 <tcp_input+0x4c0>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009ace:	4a0e      	ldr	r2, [pc, #56]	@ (8009b08 <tcp_input+0x4c0>)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009ad4:	6978      	ldr	r0, [r7, #20]
 8009ad6:	f000 fa03 	bl	8009ee0 <tcp_listen_input>
      }
      pbuf_free(p);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fd fce4 	bl	80074a8 <pbuf_free>
      return;
 8009ae0:	e1a8      	b.n	8009e34 <tcp_input+0x7ec>
 8009ae2:	bf00      	nop
 8009ae4:	200080dc 	.word	0x200080dc
 8009ae8:	20005198 	.word	0x20005198
 8009aec:	08012ac0 	.word	0x08012ac0
 8009af0:	08012bec 	.word	0x08012bec
 8009af4:	08012b0c 	.word	0x08012b0c
 8009af8:	200080c0 	.word	0x200080c0
 8009afc:	08012c18 	.word	0x08012c18
 8009b00:	200080c4 	.word	0x200080c4
 8009b04:	08012c44 	.word	0x08012c44
 8009b08:	200080bc 	.word	0x200080bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009b0c:	69fb      	ldr	r3, [r7, #28]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8158 	beq.w	8009dc4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009b14:	4b95      	ldr	r3, [pc, #596]	@ (8009d6c <tcp_input+0x724>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	891a      	ldrh	r2, [r3, #8]
 8009b1e:	4b93      	ldr	r3, [pc, #588]	@ (8009d6c <tcp_input+0x724>)
 8009b20:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009b22:	4a92      	ldr	r2, [pc, #584]	@ (8009d6c <tcp_input+0x724>)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009b28:	4b91      	ldr	r3, [pc, #580]	@ (8009d70 <tcp_input+0x728>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a8f      	ldr	r2, [pc, #572]	@ (8009d6c <tcp_input+0x724>)
 8009b2e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009b30:	4b90      	ldr	r3, [pc, #576]	@ (8009d74 <tcp_input+0x72c>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009b36:	4b90      	ldr	r3, [pc, #576]	@ (8009d78 <tcp_input+0x730>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8009d7c <tcp_input+0x734>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009b42:	4b8f      	ldr	r3, [pc, #572]	@ (8009d80 <tcp_input+0x738>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 0308 	and.w	r3, r3, #8
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	7b5b      	ldrb	r3, [r3, #13]
 8009b52:	f043 0301 	orr.w	r3, r3, #1
 8009b56:	b2da      	uxtb	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d017      	beq.n	8009b94 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009b64:	69f8      	ldr	r0, [r7, #28]
 8009b66:	f7ff f83d 	bl	8008be4 <tcp_process_refused_data>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	f113 0f0d 	cmn.w	r3, #13
 8009b70:	d007      	beq.n	8009b82 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00c      	beq.n	8009b94 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009b7a:	4b82      	ldr	r3, [pc, #520]	@ (8009d84 <tcp_input+0x73c>)
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d008      	beq.n	8009b94 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f040 80e3 	bne.w	8009d52 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009b8c:	69f8      	ldr	r0, [r7, #28]
 8009b8e:	f003 fdff 	bl	800d790 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009b92:	e0de      	b.n	8009d52 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009b94:	4a7c      	ldr	r2, [pc, #496]	@ (8009d88 <tcp_input+0x740>)
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009b9a:	69f8      	ldr	r0, [r7, #28]
 8009b9c:	f000 fb18 	bl	800a1d0 <tcp_process>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009ba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ba8:	f113 0f0d 	cmn.w	r3, #13
 8009bac:	f000 80d3 	beq.w	8009d56 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009bb0:	4b71      	ldr	r3, [pc, #452]	@ (8009d78 <tcp_input+0x730>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d015      	beq.n	8009be8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <tcp_input+0x590>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bcc:	69fa      	ldr	r2, [r7, #28]
 8009bce:	6912      	ldr	r2, [r2, #16]
 8009bd0:	f06f 010d 	mvn.w	r1, #13
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009bd8:	69f9      	ldr	r1, [r7, #28]
 8009bda:	486c      	ldr	r0, [pc, #432]	@ (8009d8c <tcp_input+0x744>)
 8009bdc:	f7ff fbbc 	bl	8009358 <tcp_pcb_remove>
        tcp_free(pcb);
 8009be0:	69f8      	ldr	r0, [r7, #28]
 8009be2:	f7fd ff01 	bl	80079e8 <tcp_free>
 8009be6:	e0da      	b.n	8009d9e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009bec:	4b63      	ldr	r3, [pc, #396]	@ (8009d7c <tcp_input+0x734>)
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d01d      	beq.n	8009c30 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009bf4:	4b61      	ldr	r3, [pc, #388]	@ (8009d7c <tcp_input+0x734>)
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00a      	beq.n	8009c1a <tcp_input+0x5d2>
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	6910      	ldr	r0, [r2, #16]
 8009c0e:	89fa      	ldrh	r2, [r7, #14]
 8009c10:	69f9      	ldr	r1, [r7, #28]
 8009c12:	4798      	blx	r3
 8009c14:	4603      	mov	r3, r0
 8009c16:	74fb      	strb	r3, [r7, #19]
 8009c18:	e001      	b.n	8009c1e <tcp_input+0x5d6>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009c1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c22:	f113 0f0d 	cmn.w	r3, #13
 8009c26:	f000 8098 	beq.w	8009d5a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009c2a:	4b54      	ldr	r3, [pc, #336]	@ (8009d7c <tcp_input+0x734>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009c30:	69f8      	ldr	r0, [r7, #28]
 8009c32:	f000 f915 	bl	8009e60 <tcp_input_delayed_close>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f040 8090 	bne.w	8009d5e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8009d74 <tcp_input+0x72c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d041      	beq.n	8009cca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d006      	beq.n	8009c5c <tcp_input+0x614>
 8009c4e:	4b50      	ldr	r3, [pc, #320]	@ (8009d90 <tcp_input+0x748>)
 8009c50:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009c54:	494f      	ldr	r1, [pc, #316]	@ (8009d94 <tcp_input+0x74c>)
 8009c56:	4850      	ldr	r0, [pc, #320]	@ (8009d98 <tcp_input+0x750>)
 8009c58:	f006 fdd4 	bl	8010804 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	8b5b      	ldrh	r3, [r3, #26]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009c68:	4b42      	ldr	r3, [pc, #264]	@ (8009d74 <tcp_input+0x72c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fc1b 	bl	80074a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009c72:	69f8      	ldr	r0, [r7, #28]
 8009c74:	f7fe f9a0 	bl	8007fb8 <tcp_abort>
            goto aborted;
 8009c78:	e091      	b.n	8009d9e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00c      	beq.n	8009c9e <tcp_input+0x656>
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	6918      	ldr	r0, [r3, #16]
 8009c8e:	4b39      	ldr	r3, [pc, #228]	@ (8009d74 <tcp_input+0x72c>)
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	69f9      	ldr	r1, [r7, #28]
 8009c96:	47a0      	blx	r4
 8009c98:	4603      	mov	r3, r0
 8009c9a:	74fb      	strb	r3, [r7, #19]
 8009c9c:	e008      	b.n	8009cb0 <tcp_input+0x668>
 8009c9e:	4b35      	ldr	r3, [pc, #212]	@ (8009d74 <tcp_input+0x72c>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	69f9      	ldr	r1, [r7, #28]
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	f7ff f890 	bl	8008dcc <tcp_recv_null>
 8009cac:	4603      	mov	r3, r0
 8009cae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009cb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cb4:	f113 0f0d 	cmn.w	r3, #13
 8009cb8:	d053      	beq.n	8009d62 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009cba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009cc2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d74 <tcp_input+0x72c>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009cca:	4b2b      	ldr	r3, [pc, #172]	@ (8009d78 <tcp_input+0x730>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d030      	beq.n	8009d38 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d009      	beq.n	8009cf2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ce2:	7b5a      	ldrb	r2, [r3, #13]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ce8:	f042 0220 	orr.w	r2, r2, #32
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	735a      	strb	r2, [r3, #13]
 8009cf0:	e022      	b.n	8009d38 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009cfa:	d005      	beq.n	8009d08 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d00:	3301      	adds	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <tcp_input+0x6e2>
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	6918      	ldr	r0, [r3, #16]
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2200      	movs	r2, #0
 8009d20:	69f9      	ldr	r1, [r7, #28]
 8009d22:	47a0      	blx	r4
 8009d24:	4603      	mov	r3, r0
 8009d26:	74fb      	strb	r3, [r7, #19]
 8009d28:	e001      	b.n	8009d2e <tcp_input+0x6e6>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d32:	f113 0f0d 	cmn.w	r3, #13
 8009d36:	d016      	beq.n	8009d66 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009d38:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <tcp_input+0x740>)
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009d3e:	69f8      	ldr	r0, [r7, #28]
 8009d40:	f000 f88e 	bl	8009e60 <tcp_input_delayed_close>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d128      	bne.n	8009d9c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009d4a:	69f8      	ldr	r0, [r7, #28]
 8009d4c:	f002 ff1a 	bl	800cb84 <tcp_output>
 8009d50:	e025      	b.n	8009d9e <tcp_input+0x756>
        goto aborted;
 8009d52:	bf00      	nop
 8009d54:	e023      	b.n	8009d9e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009d56:	bf00      	nop
 8009d58:	e021      	b.n	8009d9e <tcp_input+0x756>
              goto aborted;
 8009d5a:	bf00      	nop
 8009d5c:	e01f      	b.n	8009d9e <tcp_input+0x756>
          goto aborted;
 8009d5e:	bf00      	nop
 8009d60:	e01d      	b.n	8009d9e <tcp_input+0x756>
            goto aborted;
 8009d62:	bf00      	nop
 8009d64:	e01b      	b.n	8009d9e <tcp_input+0x756>
              goto aborted;
 8009d66:	bf00      	nop
 8009d68:	e019      	b.n	8009d9e <tcp_input+0x756>
 8009d6a:	bf00      	nop
 8009d6c:	200080cc 	.word	0x200080cc
 8009d70:	200080dc 	.word	0x200080dc
 8009d74:	200080fc 	.word	0x200080fc
 8009d78:	200080f9 	.word	0x200080f9
 8009d7c:	200080f4 	.word	0x200080f4
 8009d80:	200080f8 	.word	0x200080f8
 8009d84:	200080f6 	.word	0x200080f6
 8009d88:	20008100 	.word	0x20008100
 8009d8c:	200080c0 	.word	0x200080c0
 8009d90:	08012ac0 	.word	0x08012ac0
 8009d94:	08012c74 	.word	0x08012c74
 8009d98:	08012b0c 	.word	0x08012b0c
          goto aborted;
 8009d9c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009d9e:	4b27      	ldr	r3, [pc, #156]	@ (8009e3c <tcp_input+0x7f4>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009da4:	4b26      	ldr	r3, [pc, #152]	@ (8009e40 <tcp_input+0x7f8>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009daa:	4b26      	ldr	r3, [pc, #152]	@ (8009e44 <tcp_input+0x7fc>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d03f      	beq.n	8009e32 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009db2:	4b24      	ldr	r3, [pc, #144]	@ (8009e44 <tcp_input+0x7fc>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd fb76 	bl	80074a8 <pbuf_free>
      inseg.p = NULL;
 8009dbc:	4b21      	ldr	r3, [pc, #132]	@ (8009e44 <tcp_input+0x7fc>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009dc2:	e036      	b.n	8009e32 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009dc4:	4b20      	ldr	r3, [pc, #128]	@ (8009e48 <tcp_input+0x800>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	899b      	ldrh	r3, [r3, #12]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fb ffdb 	bl	8005d88 <lwip_htons>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	f003 0304 	and.w	r3, r3, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d118      	bne.n	8009e10 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dde:	4b1b      	ldr	r3, [pc, #108]	@ (8009e4c <tcp_input+0x804>)
 8009de0:	6819      	ldr	r1, [r3, #0]
 8009de2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e50 <tcp_input+0x808>)
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e54 <tcp_input+0x80c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009dee:	4b16      	ldr	r3, [pc, #88]	@ (8009e48 <tcp_input+0x800>)
 8009df0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009df6:	4a14      	ldr	r2, [pc, #80]	@ (8009e48 <tcp_input+0x800>)
 8009df8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009dfa:	8812      	ldrh	r2, [r2, #0]
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	9202      	str	r2, [sp, #8]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	4b15      	ldr	r3, [pc, #84]	@ (8009e58 <tcp_input+0x810>)
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	4b15      	ldr	r3, [pc, #84]	@ (8009e5c <tcp_input+0x814>)
 8009e08:	4602      	mov	r2, r0
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	f003 fc6e 	bl	800d6ec <tcp_rst>
    pbuf_free(p);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f7fd fb49 	bl	80074a8 <pbuf_free>
  return;
 8009e16:	e00c      	b.n	8009e32 <tcp_input+0x7ea>
    goto dropped;
 8009e18:	bf00      	nop
 8009e1a:	e006      	b.n	8009e2a <tcp_input+0x7e2>
    goto dropped;
 8009e1c:	bf00      	nop
 8009e1e:	e004      	b.n	8009e2a <tcp_input+0x7e2>
    goto dropped;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <tcp_input+0x7e2>
      goto dropped;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <tcp_input+0x7e2>
      goto dropped;
 8009e28:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fd fb3c 	bl	80074a8 <pbuf_free>
 8009e30:	e000      	b.n	8009e34 <tcp_input+0x7ec>
  return;
 8009e32:	bf00      	nop
}
 8009e34:	3724      	adds	r7, #36	@ 0x24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd90      	pop	{r4, r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20008100 	.word	0x20008100
 8009e40:	200080fc 	.word	0x200080fc
 8009e44:	200080cc 	.word	0x200080cc
 8009e48:	200080dc 	.word	0x200080dc
 8009e4c:	200080f0 	.word	0x200080f0
 8009e50:	200080f6 	.word	0x200080f6
 8009e54:	200080ec 	.word	0x200080ec
 8009e58:	200051a8 	.word	0x200051a8
 8009e5c:	200051ac 	.word	0x200051ac

08009e60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d106      	bne.n	8009e7c <tcp_input_delayed_close+0x1c>
 8009e6e:	4b17      	ldr	r3, [pc, #92]	@ (8009ecc <tcp_input_delayed_close+0x6c>)
 8009e70:	f240 225a 	movw	r2, #602	@ 0x25a
 8009e74:	4916      	ldr	r1, [pc, #88]	@ (8009ed0 <tcp_input_delayed_close+0x70>)
 8009e76:	4817      	ldr	r0, [pc, #92]	@ (8009ed4 <tcp_input_delayed_close+0x74>)
 8009e78:	f006 fcc4 	bl	8010804 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009e7c:	4b16      	ldr	r3, [pc, #88]	@ (8009ed8 <tcp_input_delayed_close+0x78>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0310 	and.w	r3, r3, #16
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01c      	beq.n	8009ec2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	8b5b      	ldrh	r3, [r3, #26]
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10d      	bne.n	8009eb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d008      	beq.n	8009eb0 <tcp_input_delayed_close+0x50>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6912      	ldr	r2, [r2, #16]
 8009ea8:	f06f 010e 	mvn.w	r1, #14
 8009eac:	4610      	mov	r0, r2
 8009eae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	480a      	ldr	r0, [pc, #40]	@ (8009edc <tcp_input_delayed_close+0x7c>)
 8009eb4:	f7ff fa50 	bl	8009358 <tcp_pcb_remove>
    tcp_free(pcb);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fd fd95 	bl	80079e8 <tcp_free>
    return 1;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e000      	b.n	8009ec4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	08012ac0 	.word	0x08012ac0
 8009ed0:	08012c90 	.word	0x08012c90
 8009ed4:	08012b0c 	.word	0x08012b0c
 8009ed8:	200080f9 	.word	0x200080f9
 8009edc:	200080c0 	.word	0x200080c0

08009ee0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b08b      	sub	sp, #44	@ 0x2c
 8009ee4:	af04      	add	r7, sp, #16
 8009ee6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009ee8:	4b6f      	ldr	r3, [pc, #444]	@ (800a0a8 <tcp_listen_input+0x1c8>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f040 80d2 	bne.w	800a09a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <tcp_listen_input+0x2a>
 8009efc:	4b6b      	ldr	r3, [pc, #428]	@ (800a0ac <tcp_listen_input+0x1cc>)
 8009efe:	f240 2281 	movw	r2, #641	@ 0x281
 8009f02:	496b      	ldr	r1, [pc, #428]	@ (800a0b0 <tcp_listen_input+0x1d0>)
 8009f04:	486b      	ldr	r0, [pc, #428]	@ (800a0b4 <tcp_listen_input+0x1d4>)
 8009f06:	f006 fc7d 	bl	8010804 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009f0a:	4b67      	ldr	r3, [pc, #412]	@ (800a0a8 <tcp_listen_input+0x1c8>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 0310 	and.w	r3, r3, #16
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d019      	beq.n	8009f4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f16:	4b68      	ldr	r3, [pc, #416]	@ (800a0b8 <tcp_listen_input+0x1d8>)
 8009f18:	6819      	ldr	r1, [r3, #0]
 8009f1a:	4b68      	ldr	r3, [pc, #416]	@ (800a0bc <tcp_listen_input+0x1dc>)
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4b67      	ldr	r3, [pc, #412]	@ (800a0c0 <tcp_listen_input+0x1e0>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f26:	4b67      	ldr	r3, [pc, #412]	@ (800a0c4 <tcp_listen_input+0x1e4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f2a:	885b      	ldrh	r3, [r3, #2]
 8009f2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f2e:	4a65      	ldr	r2, [pc, #404]	@ (800a0c4 <tcp_listen_input+0x1e4>)
 8009f30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f32:	8812      	ldrh	r2, [r2, #0]
 8009f34:	b292      	uxth	r2, r2
 8009f36:	9202      	str	r2, [sp, #8]
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	4b63      	ldr	r3, [pc, #396]	@ (800a0c8 <tcp_listen_input+0x1e8>)
 8009f3c:	9300      	str	r3, [sp, #0]
 8009f3e:	4b63      	ldr	r3, [pc, #396]	@ (800a0cc <tcp_listen_input+0x1ec>)
 8009f40:	4602      	mov	r2, r0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f003 fbd2 	bl	800d6ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009f48:	e0a9      	b.n	800a09e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8009f4a:	4b57      	ldr	r3, [pc, #348]	@ (800a0a8 <tcp_listen_input+0x1c8>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 80a3 	beq.w	800a09e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7d5b      	ldrb	r3, [r3, #21]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff f859 	bl	8009014 <tcp_alloc>
 8009f62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d111      	bne.n	8009f8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <tcp_listen_input+0xa8>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6910      	ldr	r0, [r2, #16]
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7e:	2100      	movs	r1, #0
 8009f80:	4798      	blx	r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      return;
 8009f86:	e08b      	b.n	800a0a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009f88:	23f0      	movs	r3, #240	@ 0xf0
 8009f8a:	73bb      	strb	r3, [r7, #14]
      return;
 8009f8c:	e088      	b.n	800a0a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009f8e:	4b50      	ldr	r3, [pc, #320]	@ (800a0d0 <tcp_listen_input+0x1f0>)
 8009f90:	695a      	ldr	r2, [r3, #20]
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009f96:	4b4e      	ldr	r3, [pc, #312]	@ (800a0d0 <tcp_listen_input+0x1f0>)
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	8ada      	ldrh	r2, [r3, #22]
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009fa6:	4b47      	ldr	r3, [pc, #284]	@ (800a0c4 <tcp_listen_input+0x1e4>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	2203      	movs	r2, #3
 8009fb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009fb8:	4b41      	ldr	r3, [pc, #260]	@ (800a0c0 <tcp_listen_input+0x1e0>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8009fca:	6978      	ldr	r0, [r7, #20]
 8009fcc:	f7ff fa58 	bl	8009480 <tcp_next_iss>
 8009fd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	693a      	ldr	r2, [r7, #16]
 8009fe2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	693a      	ldr	r2, [r7, #16]
 8009fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009fea:	4b35      	ldr	r3, [pc, #212]	@ (800a0c0 <tcp_listen_input+0x1e0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	1e5a      	subs	r2, r3, #1
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	691a      	ldr	r2, [r3, #16]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	7a5b      	ldrb	r3, [r3, #9]
 800a006:	f003 030c 	and.w	r3, r3, #12
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7a1a      	ldrb	r2, [r3, #8]
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a018:	4b2e      	ldr	r3, [pc, #184]	@ (800a0d4 <tcp_listen_input+0x1f4>)
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	60da      	str	r2, [r3, #12]
 800a020:	4a2c      	ldr	r2, [pc, #176]	@ (800a0d4 <tcp_listen_input+0x1f4>)
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	f003 fd23 	bl	800da70 <tcp_timer_needed>
 800a02a:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d8 <tcp_listen_input+0x1f8>)
 800a02c:	2201      	movs	r2, #1
 800a02e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a030:	6978      	ldr	r0, [r7, #20]
 800a032:	f001 fd8b 	bl	800bb4c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a036:	4b23      	ldr	r3, [pc, #140]	@ (800a0c4 <tcp_listen_input+0x1e4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	89db      	ldrh	r3, [r3, #14]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	3304      	adds	r3, #4
 800a058:	4618      	mov	r0, r3
 800a05a:	f005 f8e7 	bl	800f22c <ip4_route>
 800a05e:	4601      	mov	r1, r0
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	3304      	adds	r3, #4
 800a064:	461a      	mov	r2, r3
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff fa30 	bl	80094cc <tcp_eff_send_mss_netif>
 800a06c:	4603      	mov	r3, r0
 800a06e:	461a      	mov	r2, r3
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a074:	2112      	movs	r1, #18
 800a076:	6978      	ldr	r0, [r7, #20]
 800a078:	f002 fc96 	bl	800c9a8 <tcp_enqueue_flags>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a088:	2100      	movs	r1, #0
 800a08a:	6978      	ldr	r0, [r7, #20]
 800a08c:	f7fd fed6 	bl	8007e3c <tcp_abandon>
      return;
 800a090:	e006      	b.n	800a0a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a092:	6978      	ldr	r0, [r7, #20]
 800a094:	f002 fd76 	bl	800cb84 <tcp_output>
  return;
 800a098:	e001      	b.n	800a09e <tcp_listen_input+0x1be>
    return;
 800a09a:	bf00      	nop
 800a09c:	e000      	b.n	800a0a0 <tcp_listen_input+0x1c0>
  return;
 800a09e:	bf00      	nop
}
 800a0a0:	371c      	adds	r7, #28
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd90      	pop	{r4, r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	200080f8 	.word	0x200080f8
 800a0ac:	08012ac0 	.word	0x08012ac0
 800a0b0:	08012cb8 	.word	0x08012cb8
 800a0b4:	08012b0c 	.word	0x08012b0c
 800a0b8:	200080f0 	.word	0x200080f0
 800a0bc:	200080f6 	.word	0x200080f6
 800a0c0:	200080ec 	.word	0x200080ec
 800a0c4:	200080dc 	.word	0x200080dc
 800a0c8:	200051a8 	.word	0x200051a8
 800a0cc:	200051ac 	.word	0x200051ac
 800a0d0:	20005198 	.word	0x20005198
 800a0d4:	200080c0 	.word	0x200080c0
 800a0d8:	200080c8 	.word	0x200080c8

0800a0dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af04      	add	r7, sp, #16
 800a0e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a0e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a1a4 <tcp_timewait_input+0xc8>)
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d153      	bne.n	800a198 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d106      	bne.n	800a104 <tcp_timewait_input+0x28>
 800a0f6:	4b2c      	ldr	r3, [pc, #176]	@ (800a1a8 <tcp_timewait_input+0xcc>)
 800a0f8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a0fc:	492b      	ldr	r1, [pc, #172]	@ (800a1ac <tcp_timewait_input+0xd0>)
 800a0fe:	482c      	ldr	r0, [pc, #176]	@ (800a1b0 <tcp_timewait_input+0xd4>)
 800a100:	f006 fb80 	bl	8010804 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a104:	4b27      	ldr	r3, [pc, #156]	@ (800a1a4 <tcp_timewait_input+0xc8>)
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d02a      	beq.n	800a166 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a110:	4b28      	ldr	r3, [pc, #160]	@ (800a1b4 <tcp_timewait_input+0xd8>)
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	db2d      	blt.n	800a17a <tcp_timewait_input+0x9e>
 800a11e:	4b25      	ldr	r3, [pc, #148]	@ (800a1b4 <tcp_timewait_input+0xd8>)
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a12a:	440b      	add	r3, r1
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	dc23      	bgt.n	800a17a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a132:	4b21      	ldr	r3, [pc, #132]	@ (800a1b8 <tcp_timewait_input+0xdc>)
 800a134:	6819      	ldr	r1, [r3, #0]
 800a136:	4b21      	ldr	r3, [pc, #132]	@ (800a1bc <tcp_timewait_input+0xe0>)
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1b4 <tcp_timewait_input+0xd8>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a142:	4b1f      	ldr	r3, [pc, #124]	@ (800a1c0 <tcp_timewait_input+0xe4>)
 800a144:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a146:	885b      	ldrh	r3, [r3, #2]
 800a148:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a14a:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c0 <tcp_timewait_input+0xe4>)
 800a14c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a14e:	8812      	ldrh	r2, [r2, #0]
 800a150:	b292      	uxth	r2, r2
 800a152:	9202      	str	r2, [sp, #8]
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c4 <tcp_timewait_input+0xe8>)
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <tcp_timewait_input+0xec>)
 800a15c:	4602      	mov	r2, r0
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f003 fac4 	bl	800d6ec <tcp_rst>
      return;
 800a164:	e01b      	b.n	800a19e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a166:	4b0f      	ldr	r3, [pc, #60]	@ (800a1a4 <tcp_timewait_input+0xc8>)
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a172:	4b16      	ldr	r3, [pc, #88]	@ (800a1cc <tcp_timewait_input+0xf0>)
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a17a:	4b10      	ldr	r3, [pc, #64]	@ (800a1bc <tcp_timewait_input+0xe0>)
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00c      	beq.n	800a19c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8b5b      	ldrh	r3, [r3, #26]
 800a186:	f043 0302 	orr.w	r3, r3, #2
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f002 fcf7 	bl	800cb84 <tcp_output>
  }
  return;
 800a196:	e001      	b.n	800a19c <tcp_timewait_input+0xc0>
    return;
 800a198:	bf00      	nop
 800a19a:	e000      	b.n	800a19e <tcp_timewait_input+0xc2>
  return;
 800a19c:	bf00      	nop
}
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	200080f8 	.word	0x200080f8
 800a1a8:	08012ac0 	.word	0x08012ac0
 800a1ac:	08012cd8 	.word	0x08012cd8
 800a1b0:	08012b0c 	.word	0x08012b0c
 800a1b4:	200080ec 	.word	0x200080ec
 800a1b8:	200080f0 	.word	0x200080f0
 800a1bc:	200080f6 	.word	0x200080f6
 800a1c0:	200080dc 	.word	0x200080dc
 800a1c4:	200051a8 	.word	0x200051a8
 800a1c8:	200051ac 	.word	0x200051ac
 800a1cc:	200080b4 	.word	0x200080b4

0800a1d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a1d0:	b590      	push	{r4, r7, lr}
 800a1d2:	b08d      	sub	sp, #52	@ 0x34
 800a1d4:	af04      	add	r7, sp, #16
 800a1d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <tcp_process+0x24>
 800a1e6:	4b9d      	ldr	r3, [pc, #628]	@ (800a45c <tcp_process+0x28c>)
 800a1e8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a1ec:	499c      	ldr	r1, [pc, #624]	@ (800a460 <tcp_process+0x290>)
 800a1ee:	489d      	ldr	r0, [pc, #628]	@ (800a464 <tcp_process+0x294>)
 800a1f0:	f006 fb08 	bl	8010804 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a1f4:	4b9c      	ldr	r3, [pc, #624]	@ (800a468 <tcp_process+0x298>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d04e      	beq.n	800a29e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7d1b      	ldrb	r3, [r3, #20]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d108      	bne.n	800a21a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a20c:	4b97      	ldr	r3, [pc, #604]	@ (800a46c <tcp_process+0x29c>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	429a      	cmp	r2, r3
 800a212:	d123      	bne.n	800a25c <tcp_process+0x8c>
        acceptable = 1;
 800a214:	2301      	movs	r3, #1
 800a216:	76fb      	strb	r3, [r7, #27]
 800a218:	e020      	b.n	800a25c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a21e:	4b94      	ldr	r3, [pc, #592]	@ (800a470 <tcp_process+0x2a0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	429a      	cmp	r2, r3
 800a224:	d102      	bne.n	800a22c <tcp_process+0x5c>
        acceptable = 1;
 800a226:	2301      	movs	r3, #1
 800a228:	76fb      	strb	r3, [r7, #27]
 800a22a:	e017      	b.n	800a25c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a22c:	4b90      	ldr	r3, [pc, #576]	@ (800a470 <tcp_process+0x2a0>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b00      	cmp	r3, #0
 800a238:	db10      	blt.n	800a25c <tcp_process+0x8c>
 800a23a:	4b8d      	ldr	r3, [pc, #564]	@ (800a470 <tcp_process+0x2a0>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a242:	6879      	ldr	r1, [r7, #4]
 800a244:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a246:	440b      	add	r3, r1
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	dc06      	bgt.n	800a25c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	8b5b      	ldrh	r3, [r3, #26]
 800a252:	f043 0302 	orr.w	r3, r3, #2
 800a256:	b29a      	uxth	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a25c:	7efb      	ldrb	r3, [r7, #27]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d01b      	beq.n	800a29a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	7d1b      	ldrb	r3, [r3, #20]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d106      	bne.n	800a278 <tcp_process+0xa8>
 800a26a:	4b7c      	ldr	r3, [pc, #496]	@ (800a45c <tcp_process+0x28c>)
 800a26c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a270:	4980      	ldr	r1, [pc, #512]	@ (800a474 <tcp_process+0x2a4>)
 800a272:	487c      	ldr	r0, [pc, #496]	@ (800a464 <tcp_process+0x294>)
 800a274:	f006 fac6 	bl	8010804 <iprintf>
      recv_flags |= TF_RESET;
 800a278:	4b7f      	ldr	r3, [pc, #508]	@ (800a478 <tcp_process+0x2a8>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f043 0308 	orr.w	r3, r3, #8
 800a280:	b2da      	uxtb	r2, r3
 800a282:	4b7d      	ldr	r3, [pc, #500]	@ (800a478 <tcp_process+0x2a8>)
 800a284:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	8b5b      	ldrh	r3, [r3, #26]
 800a28a:	f023 0301 	bic.w	r3, r3, #1
 800a28e:	b29a      	uxth	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a294:	f06f 030d 	mvn.w	r3, #13
 800a298:	e37a      	b.n	800a990 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	e378      	b.n	800a990 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a29e:	4b72      	ldr	r3, [pc, #456]	@ (800a468 <tcp_process+0x298>)
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	f003 0302 	and.w	r3, r3, #2
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d010      	beq.n	800a2cc <tcp_process+0xfc>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	7d1b      	ldrb	r3, [r3, #20]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d00c      	beq.n	800a2cc <tcp_process+0xfc>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	7d1b      	ldrb	r3, [r3, #20]
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d008      	beq.n	800a2cc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	8b5b      	ldrh	r3, [r3, #26]
 800a2be:	f043 0302 	orr.w	r3, r3, #2
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	e361      	b.n	800a990 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	8b5b      	ldrh	r3, [r3, #26]
 800a2d0:	f003 0310 	and.w	r3, r3, #16
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a2d8:	4b68      	ldr	r3, [pc, #416]	@ (800a47c <tcp_process+0x2ac>)
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fc2b 	bl	800bb4c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	7d1b      	ldrb	r3, [r3, #20]
 800a2fa:	3b02      	subs	r3, #2
 800a2fc:	2b07      	cmp	r3, #7
 800a2fe:	f200 8337 	bhi.w	800a970 <tcp_process+0x7a0>
 800a302:	a201      	add	r2, pc, #4	@ (adr r2, 800a308 <tcp_process+0x138>)
 800a304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a308:	0800a329 	.word	0x0800a329
 800a30c:	0800a559 	.word	0x0800a559
 800a310:	0800a6d1 	.word	0x0800a6d1
 800a314:	0800a6fb 	.word	0x0800a6fb
 800a318:	0800a81f 	.word	0x0800a81f
 800a31c:	0800a6d1 	.word	0x0800a6d1
 800a320:	0800a8ab 	.word	0x0800a8ab
 800a324:	0800a93b 	.word	0x0800a93b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a328:	4b4f      	ldr	r3, [pc, #316]	@ (800a468 <tcp_process+0x298>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 80e4 	beq.w	800a4fe <tcp_process+0x32e>
 800a336:	4b4c      	ldr	r3, [pc, #304]	@ (800a468 <tcp_process+0x298>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 80dd 	beq.w	800a4fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	4b48      	ldr	r3, [pc, #288]	@ (800a46c <tcp_process+0x29c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	f040 80d5 	bne.w	800a4fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a354:	4b46      	ldr	r3, [pc, #280]	@ (800a470 <tcp_process+0x2a0>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	1c5a      	adds	r2, r3, #1
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a366:	4b41      	ldr	r3, [pc, #260]	@ (800a46c <tcp_process+0x29c>)
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a36e:	4b44      	ldr	r3, [pc, #272]	@ (800a480 <tcp_process+0x2b0>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	89db      	ldrh	r3, [r3, #14]
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a388:	4b39      	ldr	r3, [pc, #228]	@ (800a470 <tcp_process+0x2a0>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1e5a      	subs	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2204      	movs	r2, #4
 800a396:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f004 ff43 	bl	800f22c <ip4_route>
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff f88c 	bl	80094cc <tcp_eff_send_mss_netif>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3c0:	009a      	lsls	r2, r3, #2
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3c6:	005b      	lsls	r3, r3, #1
 800a3c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf38      	it	cc
 800a3d0:	460b      	movcc	r3, r1
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d204      	bcs.n	800a3e0 <tcp_process+0x210>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	e00d      	b.n	800a3fc <tcp_process+0x22c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d904      	bls.n	800a3f8 <tcp_process+0x228>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	e001      	b.n	800a3fc <tcp_process+0x22c>
 800a3f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d106      	bne.n	800a41a <tcp_process+0x24a>
 800a40c:	4b13      	ldr	r3, [pc, #76]	@ (800a45c <tcp_process+0x28c>)
 800a40e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a412:	491c      	ldr	r1, [pc, #112]	@ (800a484 <tcp_process+0x2b4>)
 800a414:	4813      	ldr	r0, [pc, #76]	@ (800a464 <tcp_process+0x294>)
 800a416:	f006 f9f5 	bl	8010804 <iprintf>
        --pcb->snd_queuelen;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a42e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d12a      	bne.n	800a48c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a43a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d106      	bne.n	800a450 <tcp_process+0x280>
 800a442:	4b06      	ldr	r3, [pc, #24]	@ (800a45c <tcp_process+0x28c>)
 800a444:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a448:	490f      	ldr	r1, [pc, #60]	@ (800a488 <tcp_process+0x2b8>)
 800a44a:	4806      	ldr	r0, [pc, #24]	@ (800a464 <tcp_process+0x294>)
 800a44c:	f006 f9da 	bl	8010804 <iprintf>
          pcb->unsent = rseg->next;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a458:	e01c      	b.n	800a494 <tcp_process+0x2c4>
 800a45a:	bf00      	nop
 800a45c:	08012ac0 	.word	0x08012ac0
 800a460:	08012cf8 	.word	0x08012cf8
 800a464:	08012b0c 	.word	0x08012b0c
 800a468:	200080f8 	.word	0x200080f8
 800a46c:	200080f0 	.word	0x200080f0
 800a470:	200080ec 	.word	0x200080ec
 800a474:	08012d14 	.word	0x08012d14
 800a478:	200080f9 	.word	0x200080f9
 800a47c:	200080b4 	.word	0x200080b4
 800a480:	200080dc 	.word	0x200080dc
 800a484:	08012d34 	.word	0x08012d34
 800a488:	08012d4c 	.word	0x08012d4c
        } else {
          pcb->unacked = rseg->next;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a494:	69f8      	ldr	r0, [r7, #28]
 800a496:	f7fe fc36 	bl	8008d06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d104      	bne.n	800a4ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a4a8:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a4aa:	e006      	b.n	800a4ba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00a      	beq.n	800a4da <tcp_process+0x30a>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6910      	ldr	r0, [r2, #16]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	6879      	ldr	r1, [r7, #4]
 800a4d2:	4798      	blx	r3
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	76bb      	strb	r3, [r7, #26]
 800a4d8:	e001      	b.n	800a4de <tcp_process+0x30e>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a4de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a4e2:	f113 0f0d 	cmn.w	r3, #13
 800a4e6:	d102      	bne.n	800a4ee <tcp_process+0x31e>
          return ERR_ABRT;
 800a4e8:	f06f 030c 	mvn.w	r3, #12
 800a4ec:	e250      	b.n	800a990 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	8b5b      	ldrh	r3, [r3, #26]
 800a4f2:	f043 0302 	orr.w	r3, r3, #2
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a4fc:	e23a      	b.n	800a974 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a4fe:	4b98      	ldr	r3, [pc, #608]	@ (800a760 <tcp_process+0x590>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f003 0310 	and.w	r3, r3, #16
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 8234 	beq.w	800a974 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a50c:	4b95      	ldr	r3, [pc, #596]	@ (800a764 <tcp_process+0x594>)
 800a50e:	6819      	ldr	r1, [r3, #0]
 800a510:	4b95      	ldr	r3, [pc, #596]	@ (800a768 <tcp_process+0x598>)
 800a512:	881b      	ldrh	r3, [r3, #0]
 800a514:	461a      	mov	r2, r3
 800a516:	4b95      	ldr	r3, [pc, #596]	@ (800a76c <tcp_process+0x59c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a51c:	4b94      	ldr	r3, [pc, #592]	@ (800a770 <tcp_process+0x5a0>)
 800a51e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a524:	4a92      	ldr	r2, [pc, #584]	@ (800a770 <tcp_process+0x5a0>)
 800a526:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a528:	8812      	ldrh	r2, [r2, #0]
 800a52a:	b292      	uxth	r2, r2
 800a52c:	9202      	str	r2, [sp, #8]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	4b90      	ldr	r3, [pc, #576]	@ (800a774 <tcp_process+0x5a4>)
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	4b90      	ldr	r3, [pc, #576]	@ (800a778 <tcp_process+0x5a8>)
 800a536:	4602      	mov	r2, r0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f003 f8d7 	bl	800d6ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a544:	2b05      	cmp	r3, #5
 800a546:	f200 8215 	bhi.w	800a974 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f002 fea3 	bl	800d29c <tcp_rexmit_rto>
      break;
 800a556:	e20d      	b.n	800a974 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a558:	4b81      	ldr	r3, [pc, #516]	@ (800a760 <tcp_process+0x590>)
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	f003 0310 	and.w	r3, r3, #16
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 80a1 	beq.w	800a6a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a566:	4b7f      	ldr	r3, [pc, #508]	@ (800a764 <tcp_process+0x594>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	db7e      	blt.n	800a674 <tcp_process+0x4a4>
 800a576:	4b7b      	ldr	r3, [pc, #492]	@ (800a764 <tcp_process+0x594>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	dc77      	bgt.n	800a674 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2204      	movs	r2, #4
 800a588:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a592:	23fa      	movs	r3, #250	@ 0xfa
 800a594:	76bb      	strb	r3, [r7, #26]
 800a596:	e01d      	b.n	800a5d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a59c:	699b      	ldr	r3, [r3, #24]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d106      	bne.n	800a5b0 <tcp_process+0x3e0>
 800a5a2:	4b76      	ldr	r3, [pc, #472]	@ (800a77c <tcp_process+0x5ac>)
 800a5a4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a5a8:	4975      	ldr	r1, [pc, #468]	@ (800a780 <tcp_process+0x5b0>)
 800a5aa:	4876      	ldr	r0, [pc, #472]	@ (800a784 <tcp_process+0x5b4>)
 800a5ac:	f006 f92a 	bl	8010804 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <tcp_process+0x400>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6910      	ldr	r0, [r2, #16]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	76bb      	strb	r3, [r7, #26]
 800a5ce:	e001      	b.n	800a5d4 <tcp_process+0x404>
 800a5d0:	23f0      	movs	r3, #240	@ 0xf0
 800a5d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a5d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a5dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a5e0:	f113 0f0d 	cmn.w	r3, #13
 800a5e4:	d002      	beq.n	800a5ec <tcp_process+0x41c>
              tcp_abort(pcb);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fd fce6 	bl	8007fb8 <tcp_abort>
            }
            return ERR_ABRT;
 800a5ec:	f06f 030c 	mvn.w	r3, #12
 800a5f0:	e1ce      	b.n	800a990 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fae0 	bl	800abb8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a5f8:	4b63      	ldr	r3, [pc, #396]	@ (800a788 <tcp_process+0x5b8>)
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <tcp_process+0x43c>
            recv_acked--;
 800a600:	4b61      	ldr	r3, [pc, #388]	@ (800a788 <tcp_process+0x5b8>)
 800a602:	881b      	ldrh	r3, [r3, #0]
 800a604:	3b01      	subs	r3, #1
 800a606:	b29a      	uxth	r2, r3
 800a608:	4b5f      	ldr	r3, [pc, #380]	@ (800a788 <tcp_process+0x5b8>)
 800a60a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a610:	009a      	lsls	r2, r3, #2
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a61c:	428b      	cmp	r3, r1
 800a61e:	bf38      	it	cc
 800a620:	460b      	movcc	r3, r1
 800a622:	429a      	cmp	r2, r3
 800a624:	d204      	bcs.n	800a630 <tcp_process+0x460>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	e00d      	b.n	800a64c <tcp_process+0x47c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a634:	005b      	lsls	r3, r3, #1
 800a636:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d904      	bls.n	800a648 <tcp_process+0x478>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	b29b      	uxth	r3, r3
 800a646:	e001      	b.n	800a64c <tcp_process+0x47c>
 800a648:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a652:	4b4e      	ldr	r3, [pc, #312]	@ (800a78c <tcp_process+0x5bc>)
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d037      	beq.n	800a6ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	8b5b      	ldrh	r3, [r3, #26]
 800a662:	f043 0302 	orr.w	r3, r3, #2
 800a666:	b29a      	uxth	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2207      	movs	r2, #7
 800a670:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a672:	e02c      	b.n	800a6ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a674:	4b3b      	ldr	r3, [pc, #236]	@ (800a764 <tcp_process+0x594>)
 800a676:	6819      	ldr	r1, [r3, #0]
 800a678:	4b3b      	ldr	r3, [pc, #236]	@ (800a768 <tcp_process+0x598>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	4b3b      	ldr	r3, [pc, #236]	@ (800a76c <tcp_process+0x59c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a684:	4b3a      	ldr	r3, [pc, #232]	@ (800a770 <tcp_process+0x5a0>)
 800a686:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a688:	885b      	ldrh	r3, [r3, #2]
 800a68a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a68c:	4a38      	ldr	r2, [pc, #224]	@ (800a770 <tcp_process+0x5a0>)
 800a68e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a690:	8812      	ldrh	r2, [r2, #0]
 800a692:	b292      	uxth	r2, r2
 800a694:	9202      	str	r2, [sp, #8]
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	4b36      	ldr	r3, [pc, #216]	@ (800a774 <tcp_process+0x5a4>)
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	4b36      	ldr	r3, [pc, #216]	@ (800a778 <tcp_process+0x5a8>)
 800a69e:	4602      	mov	r2, r0
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f003 f823 	bl	800d6ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a6a6:	e167      	b.n	800a978 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a6a8:	4b2d      	ldr	r3, [pc, #180]	@ (800a760 <tcp_process+0x590>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f000 8161 	beq.w	800a978 <tcp_process+0x7a8>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6ba:	1e5a      	subs	r2, r3, #1
 800a6bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a76c <tcp_process+0x59c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	f040 8159 	bne.w	800a978 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f002 fe0a 	bl	800d2e0 <tcp_rexmit>
      break;
 800a6cc:	e154      	b.n	800a978 <tcp_process+0x7a8>
 800a6ce:	e153      	b.n	800a978 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fa71 	bl	800abb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a6d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a78c <tcp_process+0x5bc>)
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	f000 814c 	beq.w	800a97c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	8b5b      	ldrh	r3, [r3, #26]
 800a6e8:	f043 0302 	orr.w	r3, r3, #2
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2207      	movs	r2, #7
 800a6f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a6f8:	e140      	b.n	800a97c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fa5c 	bl	800abb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a700:	4b22      	ldr	r3, [pc, #136]	@ (800a78c <tcp_process+0x5bc>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 0320 	and.w	r3, r3, #32
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d071      	beq.n	800a7f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a70c:	4b14      	ldr	r3, [pc, #80]	@ (800a760 <tcp_process+0x590>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b00      	cmp	r3, #0
 800a716:	d060      	beq.n	800a7da <tcp_process+0x60a>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a71c:	4b11      	ldr	r3, [pc, #68]	@ (800a764 <tcp_process+0x594>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d15a      	bne.n	800a7da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d156      	bne.n	800a7da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8b5b      	ldrh	r3, [r3, #26]
 800a730:	f043 0302 	orr.w	r3, r3, #2
 800a734:	b29a      	uxth	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f7fe fdbc 	bl	80092b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a740:	4b13      	ldr	r3, [pc, #76]	@ (800a790 <tcp_process+0x5c0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	429a      	cmp	r2, r3
 800a748:	d105      	bne.n	800a756 <tcp_process+0x586>
 800a74a:	4b11      	ldr	r3, [pc, #68]	@ (800a790 <tcp_process+0x5c0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	4a0f      	ldr	r2, [pc, #60]	@ (800a790 <tcp_process+0x5c0>)
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	e02e      	b.n	800a7b4 <tcp_process+0x5e4>
 800a756:	4b0e      	ldr	r3, [pc, #56]	@ (800a790 <tcp_process+0x5c0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	e027      	b.n	800a7ae <tcp_process+0x5de>
 800a75e:	bf00      	nop
 800a760:	200080f8 	.word	0x200080f8
 800a764:	200080f0 	.word	0x200080f0
 800a768:	200080f6 	.word	0x200080f6
 800a76c:	200080ec 	.word	0x200080ec
 800a770:	200080dc 	.word	0x200080dc
 800a774:	200051a8 	.word	0x200051a8
 800a778:	200051ac 	.word	0x200051ac
 800a77c:	08012ac0 	.word	0x08012ac0
 800a780:	08012d60 	.word	0x08012d60
 800a784:	08012b0c 	.word	0x08012b0c
 800a788:	200080f4 	.word	0x200080f4
 800a78c:	200080f9 	.word	0x200080f9
 800a790:	200080c0 	.word	0x200080c0
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d104      	bne.n	800a7a8 <tcp_process+0x5d8>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68da      	ldr	r2, [r3, #12]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	60da      	str	r2, [r3, #12]
 800a7a6:	e005      	b.n	800a7b4 <tcp_process+0x5e4>
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	617b      	str	r3, [r7, #20]
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1ef      	bne.n	800a794 <tcp_process+0x5c4>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	4b77      	ldr	r3, [pc, #476]	@ (800a998 <tcp_process+0x7c8>)
 800a7bc:	2201      	movs	r2, #1
 800a7be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	220a      	movs	r2, #10
 800a7c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a7c6:	4b75      	ldr	r3, [pc, #468]	@ (800a99c <tcp_process+0x7cc>)
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	4a73      	ldr	r2, [pc, #460]	@ (800a99c <tcp_process+0x7cc>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	f003 f94c 	bl	800da70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a7d8:	e0d2      	b.n	800a980 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8b5b      	ldrh	r3, [r3, #26]
 800a7de:	f043 0302 	orr.w	r3, r3, #2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	751a      	strb	r2, [r3, #20]
      break;
 800a7ee:	e0c7      	b.n	800a980 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a7f0:	4b6b      	ldr	r3, [pc, #428]	@ (800a9a0 <tcp_process+0x7d0>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 0310 	and.w	r3, r3, #16
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80c1 	beq.w	800a980 <tcp_process+0x7b0>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a802:	4b68      	ldr	r3, [pc, #416]	@ (800a9a4 <tcp_process+0x7d4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	429a      	cmp	r2, r3
 800a808:	f040 80ba 	bne.w	800a980 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a810:	2b00      	cmp	r3, #0
 800a812:	f040 80b5 	bne.w	800a980 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2206      	movs	r2, #6
 800a81a:	751a      	strb	r2, [r3, #20]
      break;
 800a81c:	e0b0      	b.n	800a980 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9ca 	bl	800abb8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a824:	4b60      	ldr	r3, [pc, #384]	@ (800a9a8 <tcp_process+0x7d8>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 80a9 	beq.w	800a984 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	8b5b      	ldrh	r3, [r3, #26]
 800a836:	f043 0302 	orr.w	r3, r3, #2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f7fe fd39 	bl	80092b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a846:	4b59      	ldr	r3, [pc, #356]	@ (800a9ac <tcp_process+0x7dc>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d105      	bne.n	800a85c <tcp_process+0x68c>
 800a850:	4b56      	ldr	r3, [pc, #344]	@ (800a9ac <tcp_process+0x7dc>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	68db      	ldr	r3, [r3, #12]
 800a856:	4a55      	ldr	r2, [pc, #340]	@ (800a9ac <tcp_process+0x7dc>)
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	e013      	b.n	800a884 <tcp_process+0x6b4>
 800a85c:	4b53      	ldr	r3, [pc, #332]	@ (800a9ac <tcp_process+0x7dc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e00c      	b.n	800a87e <tcp_process+0x6ae>
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d104      	bne.n	800a878 <tcp_process+0x6a8>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68da      	ldr	r2, [r3, #12]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	60da      	str	r2, [r3, #12]
 800a876:	e005      	b.n	800a884 <tcp_process+0x6b4>
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	613b      	str	r3, [r7, #16]
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d1ef      	bne.n	800a864 <tcp_process+0x694>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	60da      	str	r2, [r3, #12]
 800a88a:	4b43      	ldr	r3, [pc, #268]	@ (800a998 <tcp_process+0x7c8>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	220a      	movs	r2, #10
 800a894:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a896:	4b41      	ldr	r3, [pc, #260]	@ (800a99c <tcp_process+0x7cc>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	60da      	str	r2, [r3, #12]
 800a89e:	4a3f      	ldr	r2, [pc, #252]	@ (800a99c <tcp_process+0x7cc>)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	f003 f8e4 	bl	800da70 <tcp_timer_needed>
      }
      break;
 800a8a8:	e06c      	b.n	800a984 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f984 	bl	800abb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a8b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a0 <tcp_process+0x7d0>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d065      	beq.n	800a988 <tcp_process+0x7b8>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8c0:	4b38      	ldr	r3, [pc, #224]	@ (800a9a4 <tcp_process+0x7d4>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d15f      	bne.n	800a988 <tcp_process+0x7b8>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d15b      	bne.n	800a988 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7fe fcf1 	bl	80092b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a8d6:	4b35      	ldr	r3, [pc, #212]	@ (800a9ac <tcp_process+0x7dc>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d105      	bne.n	800a8ec <tcp_process+0x71c>
 800a8e0:	4b32      	ldr	r3, [pc, #200]	@ (800a9ac <tcp_process+0x7dc>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	4a31      	ldr	r2, [pc, #196]	@ (800a9ac <tcp_process+0x7dc>)
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	e013      	b.n	800a914 <tcp_process+0x744>
 800a8ec:	4b2f      	ldr	r3, [pc, #188]	@ (800a9ac <tcp_process+0x7dc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	e00c      	b.n	800a90e <tcp_process+0x73e>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d104      	bne.n	800a908 <tcp_process+0x738>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	60da      	str	r2, [r3, #12]
 800a906:	e005      	b.n	800a914 <tcp_process+0x744>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1ef      	bne.n	800a8f4 <tcp_process+0x724>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	4b1f      	ldr	r3, [pc, #124]	@ (800a998 <tcp_process+0x7c8>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	220a      	movs	r2, #10
 800a924:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a926:	4b1d      	ldr	r3, [pc, #116]	@ (800a99c <tcp_process+0x7cc>)
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60da      	str	r2, [r3, #12]
 800a92e:	4a1b      	ldr	r2, [pc, #108]	@ (800a99c <tcp_process+0x7cc>)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6013      	str	r3, [r2, #0]
 800a934:	f003 f89c 	bl	800da70 <tcp_timer_needed>
      }
      break;
 800a938:	e026      	b.n	800a988 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f93c 	bl	800abb8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a940:	4b17      	ldr	r3, [pc, #92]	@ (800a9a0 <tcp_process+0x7d0>)
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01f      	beq.n	800a98c <tcp_process+0x7bc>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a950:	4b14      	ldr	r3, [pc, #80]	@ (800a9a4 <tcp_process+0x7d4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	429a      	cmp	r2, r3
 800a956:	d119      	bne.n	800a98c <tcp_process+0x7bc>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d115      	bne.n	800a98c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a960:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <tcp_process+0x7d8>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	f043 0310 	orr.w	r3, r3, #16
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	4b0f      	ldr	r3, [pc, #60]	@ (800a9a8 <tcp_process+0x7d8>)
 800a96c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a96e:	e00d      	b.n	800a98c <tcp_process+0x7bc>
    default:
      break;
 800a970:	bf00      	nop
 800a972:	e00c      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a974:	bf00      	nop
 800a976:	e00a      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a978:	bf00      	nop
 800a97a:	e008      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a97c:	bf00      	nop
 800a97e:	e006      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a980:	bf00      	nop
 800a982:	e004      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a984:	bf00      	nop
 800a986:	e002      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a988:	bf00      	nop
 800a98a:	e000      	b.n	800a98e <tcp_process+0x7be>
      break;
 800a98c:	bf00      	nop
  }
  return ERR_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3724      	adds	r7, #36	@ 0x24
 800a994:	46bd      	mov	sp, r7
 800a996:	bd90      	pop	{r4, r7, pc}
 800a998:	200080c8 	.word	0x200080c8
 800a99c:	200080c4 	.word	0x200080c4
 800a9a0:	200080f8 	.word	0x200080f8
 800a9a4:	200080f0 	.word	0x200080f0
 800a9a8:	200080f9 	.word	0x200080f9
 800a9ac:	200080c0 	.word	0x200080c0

0800a9b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a9b0:	b590      	push	{r4, r7, lr}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d106      	bne.n	800a9ce <tcp_oos_insert_segment+0x1e>
 800a9c0:	4b3b      	ldr	r3, [pc, #236]	@ (800aab0 <tcp_oos_insert_segment+0x100>)
 800a9c2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800a9c6:	493b      	ldr	r1, [pc, #236]	@ (800aab4 <tcp_oos_insert_segment+0x104>)
 800a9c8:	483b      	ldr	r0, [pc, #236]	@ (800aab8 <tcp_oos_insert_segment+0x108>)
 800a9ca:	f005 ff1b 	bl	8010804 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	899b      	ldrh	r3, [r3, #12]
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fb f9d6 	bl	8005d88 <lwip_htons>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d028      	beq.n	800aa3a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a9e8:	6838      	ldr	r0, [r7, #0]
 800a9ea:	f7fe f977 	bl	8008cdc <tcp_segs_free>
    next = NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	603b      	str	r3, [r7, #0]
 800a9f2:	e056      	b.n	800aaa2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	899b      	ldrh	r3, [r3, #12]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7fb f9c3 	bl	8005d88 <lwip_htons>
 800aa02:	4603      	mov	r3, r0
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00d      	beq.n	800aa2a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	899b      	ldrh	r3, [r3, #12]
 800aa14:	b29c      	uxth	r4, r3
 800aa16:	2001      	movs	r0, #1
 800aa18:	f7fb f9b6 	bl	8005d88 <lwip_htons>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	4322      	orrs	r2, r4
 800aa26:	b292      	uxth	r2, r2
 800aa28:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f7fe f966 	bl	8008d06 <tcp_seg_free>
    while (next &&
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	891b      	ldrh	r3, [r3, #8]
 800aa44:	461a      	mov	r2, r3
 800aa46:	4b1d      	ldr	r3, [pc, #116]	@ (800aabc <tcp_oos_insert_segment+0x10c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	441a      	add	r2, r3
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	8909      	ldrh	r1, [r1, #8]
 800aa56:	440b      	add	r3, r1
 800aa58:	1ad3      	subs	r3, r2, r3
    while (next &&
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	daca      	bge.n	800a9f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01e      	beq.n	800aaa2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	891b      	ldrh	r3, [r3, #8]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b14      	ldr	r3, [pc, #80]	@ (800aabc <tcp_oos_insert_segment+0x10c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	441a      	add	r2, r3
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	1ad3      	subs	r3, r2, r3
    if (next &&
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dd12      	ble.n	800aaa2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	4b0d      	ldr	r3, [pc, #52]	@ (800aabc <tcp_oos_insert_segment+0x10c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	685a      	ldr	r2, [r3, #4]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	891b      	ldrh	r3, [r3, #8]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7fc fb7d 	bl	800719c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	683a      	ldr	r2, [r7, #0]
 800aaa6:	601a      	str	r2, [r3, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd90      	pop	{r4, r7, pc}
 800aab0:	08012ac0 	.word	0x08012ac0
 800aab4:	08012d80 	.word	0x08012d80
 800aab8:	08012b0c 	.word	0x08012b0c
 800aabc:	200080ec 	.word	0x200080ec

0800aac0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800aace:	e03e      	b.n	800ab4e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fc fd6a 	bl	80075b8 <pbuf_clen>
 800aae4:	4603      	mov	r3, r0
 800aae6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aaee:	8a7a      	ldrh	r2, [r7, #18]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d906      	bls.n	800ab02 <tcp_free_acked_segments+0x42>
 800aaf4:	4b2a      	ldr	r3, [pc, #168]	@ (800aba0 <tcp_free_acked_segments+0xe0>)
 800aaf6:	f240 4257 	movw	r2, #1111	@ 0x457
 800aafa:	492a      	ldr	r1, [pc, #168]	@ (800aba4 <tcp_free_acked_segments+0xe4>)
 800aafc:	482a      	ldr	r0, [pc, #168]	@ (800aba8 <tcp_free_acked_segments+0xe8>)
 800aafe:	f005 fe81 	bl	8010804 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ab08:	8a7b      	ldrh	r3, [r7, #18]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	891a      	ldrh	r2, [r3, #8]
 800ab18:	4b24      	ldr	r3, [pc, #144]	@ (800abac <tcp_free_acked_segments+0xec>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	4b22      	ldr	r3, [pc, #136]	@ (800abac <tcp_free_acked_segments+0xec>)
 800ab22:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ab24:	6978      	ldr	r0, [r7, #20]
 800ab26:	f7fe f8ee 	bl	8008d06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00c      	beq.n	800ab4e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <tcp_free_acked_segments+0x8e>
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d106      	bne.n	800ab4e <tcp_free_acked_segments+0x8e>
 800ab40:	4b17      	ldr	r3, [pc, #92]	@ (800aba0 <tcp_free_acked_segments+0xe0>)
 800ab42:	f240 4261 	movw	r2, #1121	@ 0x461
 800ab46:	491a      	ldr	r1, [pc, #104]	@ (800abb0 <tcp_free_acked_segments+0xf0>)
 800ab48:	4817      	ldr	r0, [pc, #92]	@ (800aba8 <tcp_free_acked_segments+0xe8>)
 800ab4a:	f005 fe5b 	bl	8010804 <iprintf>
  while (seg_list != NULL &&
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d020      	beq.n	800ab96 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fb f929 	bl	8005db2 <lwip_htonl>
 800ab60:	4604      	mov	r4, r0
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	891b      	ldrh	r3, [r3, #8]
 800ab66:	461d      	mov	r5, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	899b      	ldrh	r3, [r3, #12]
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fb f909 	bl	8005d88 <lwip_htons>
 800ab76:	4603      	mov	r3, r0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 0303 	and.w	r3, r3, #3
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <tcp_free_acked_segments+0xc6>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <tcp_free_acked_segments+0xc8>
 800ab86:	2300      	movs	r3, #0
 800ab88:	442b      	add	r3, r5
 800ab8a:	18e2      	adds	r2, r4, r3
 800ab8c:	4b09      	ldr	r3, [pc, #36]	@ (800abb4 <tcp_free_acked_segments+0xf4>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	dd9c      	ble.n	800aad0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ab96:	68bb      	ldr	r3, [r7, #8]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bdb0      	pop	{r4, r5, r7, pc}
 800aba0:	08012ac0 	.word	0x08012ac0
 800aba4:	08012da8 	.word	0x08012da8
 800aba8:	08012b0c 	.word	0x08012b0c
 800abac:	200080f4 	.word	0x200080f4
 800abb0:	08012dd0 	.word	0x08012dd0
 800abb4:	200080f0 	.word	0x200080f0

0800abb8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800abb8:	b5b0      	push	{r4, r5, r7, lr}
 800abba:	b094      	sub	sp, #80	@ 0x50
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800abc0:	2300      	movs	r3, #0
 800abc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d106      	bne.n	800abd8 <tcp_receive+0x20>
 800abca:	4b91      	ldr	r3, [pc, #580]	@ (800ae10 <tcp_receive+0x258>)
 800abcc:	f240 427b 	movw	r2, #1147	@ 0x47b
 800abd0:	4990      	ldr	r1, [pc, #576]	@ (800ae14 <tcp_receive+0x25c>)
 800abd2:	4891      	ldr	r0, [pc, #580]	@ (800ae18 <tcp_receive+0x260>)
 800abd4:	f005 fe16 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7d1b      	ldrb	r3, [r3, #20]
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d806      	bhi.n	800abee <tcp_receive+0x36>
 800abe0:	4b8b      	ldr	r3, [pc, #556]	@ (800ae10 <tcp_receive+0x258>)
 800abe2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800abe6:	498d      	ldr	r1, [pc, #564]	@ (800ae1c <tcp_receive+0x264>)
 800abe8:	488b      	ldr	r0, [pc, #556]	@ (800ae18 <tcp_receive+0x260>)
 800abea:	f005 fe0b 	bl	8010804 <iprintf>

  if (flags & TCP_ACK) {
 800abee:	4b8c      	ldr	r3, [pc, #560]	@ (800ae20 <tcp_receive+0x268>)
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 8264 	beq.w	800b0c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac02:	461a      	mov	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac08:	4413      	add	r3, r2
 800ac0a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac10:	4b84      	ldr	r3, [pc, #528]	@ (800ae24 <tcp_receive+0x26c>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	db1b      	blt.n	800ac52 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ac1e:	4b81      	ldr	r3, [pc, #516]	@ (800ae24 <tcp_receive+0x26c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d106      	bne.n	800ac34 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac2a:	4b7f      	ldr	r3, [pc, #508]	@ (800ae28 <tcp_receive+0x270>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	db0e      	blt.n	800ac52 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ac38:	4b7b      	ldr	r3, [pc, #492]	@ (800ae28 <tcp_receive+0x270>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d125      	bne.n	800ac8c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ac40:	4b7a      	ldr	r3, [pc, #488]	@ (800ae2c <tcp_receive+0x274>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	89db      	ldrh	r3, [r3, #14]
 800ac46:	b29a      	uxth	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d91c      	bls.n	800ac8c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ac52:	4b76      	ldr	r3, [pc, #472]	@ (800ae2c <tcp_receive+0x274>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	89db      	ldrh	r3, [r3, #14]
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d205      	bcs.n	800ac7c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ac7c:	4b69      	ldr	r3, [pc, #420]	@ (800ae24 <tcp_receive+0x26c>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ac84:	4b68      	ldr	r3, [pc, #416]	@ (800ae28 <tcp_receive+0x270>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ac8c:	4b66      	ldr	r3, [pc, #408]	@ (800ae28 <tcp_receive+0x270>)
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dc58      	bgt.n	800ad4c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ac9a:	4b65      	ldr	r3, [pc, #404]	@ (800ae30 <tcp_receive+0x278>)
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d14b      	bne.n	800ad3a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800acac:	4413      	add	r3, r2
 800acae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d142      	bne.n	800ad3a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800acba:	2b00      	cmp	r3, #0
 800acbc:	db3d      	blt.n	800ad3a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acc2:	4b59      	ldr	r3, [pc, #356]	@ (800ae28 <tcp_receive+0x270>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d137      	bne.n	800ad3a <tcp_receive+0x182>
              found_dupack = 1;
 800acca:	2301      	movs	r3, #1
 800accc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800acd4:	2bff      	cmp	r3, #255	@ 0xff
 800acd6:	d007      	beq.n	800ace8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800acde:	3301      	adds	r3, #1
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d91b      	bls.n	800ad2a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800acfc:	4413      	add	r3, r2
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d30a      	bcc.n	800ad20 <tcp_receive+0x168>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad14:	4413      	add	r3, r2
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ad1e:	e004      	b.n	800ad2a <tcp_receive+0x172>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad26:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d902      	bls.n	800ad3a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 fb3f 	bl	800d3b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ad3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f040 8161 	bne.w	800b004 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad4a:	e15b      	b.n	800b004 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ad4c:	4b36      	ldr	r3, [pc, #216]	@ (800ae28 <tcp_receive+0x270>)
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	3b01      	subs	r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f2c0 814e 	blt.w	800affa <tcp_receive+0x442>
 800ad5e:	4b32      	ldr	r3, [pc, #200]	@ (800ae28 <tcp_receive+0x270>)
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f300 8146 	bgt.w	800affa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8b5b      	ldrh	r3, [r3, #26]
 800ad72:	f003 0304 	and.w	r3, r3, #4
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d010      	beq.n	800ad9c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	8b5b      	ldrh	r3, [r3, #26]
 800ad7e:	f023 0304 	bic.w	r3, r3, #4
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800adaa:	10db      	asrs	r3, r3, #3
 800adac:	b21b      	sxth	r3, r3
 800adae:	b29a      	uxth	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	4413      	add	r3, r2
 800adba:	b29b      	uxth	r3, r3
 800adbc:	b21a      	sxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800adc4:	4b18      	ldr	r3, [pc, #96]	@ (800ae28 <tcp_receive+0x270>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	b29a      	uxth	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adce:	b29b      	uxth	r3, r3
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800addc:	4b12      	ldr	r3, [pc, #72]	@ (800ae28 <tcp_receive+0x270>)
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7d1b      	ldrb	r3, [r3, #20]
 800ade8:	2b03      	cmp	r3, #3
 800adea:	f240 8097 	bls.w	800af1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d245      	bcs.n	800ae8a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	8b5b      	ldrh	r3, [r3, #26]
 800ae02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d014      	beq.n	800ae34 <tcp_receive+0x27c>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e013      	b.n	800ae36 <tcp_receive+0x27e>
 800ae0e:	bf00      	nop
 800ae10:	08012ac0 	.word	0x08012ac0
 800ae14:	08012df0 	.word	0x08012df0
 800ae18:	08012b0c 	.word	0x08012b0c
 800ae1c:	08012e0c 	.word	0x08012e0c
 800ae20:	200080f8 	.word	0x200080f8
 800ae24:	200080ec 	.word	0x200080ec
 800ae28:	200080f0 	.word	0x200080f0
 800ae2c:	200080dc 	.word	0x200080dc
 800ae30:	200080f6 	.word	0x200080f6
 800ae34:	2302      	movs	r3, #2
 800ae36:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ae3a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ae44:	fb12 f303 	smulbb	r3, r2, r3
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	bf28      	it	cs
 800ae50:	4613      	movcs	r3, r2
 800ae52:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae5a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae5c:	4413      	add	r3, r2
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d309      	bcc.n	800ae7e <tcp_receive+0x2c6>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ae70:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ae72:	4413      	add	r3, r2
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ae7c:	e04e      	b.n	800af1c <tcp_receive+0x364>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ae88:	e048      	b.n	800af1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ae90:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ae92:	4413      	add	r3, r2
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d309      	bcc.n	800aeb4 <tcp_receive+0x2fc>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aea6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aea8:	4413      	add	r3, r2
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800aeb2:	e004      	b.n	800aebe <tcp_receive+0x306>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aeba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d326      	bcc.n	800af1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aeee:	4413      	add	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d30a      	bcc.n	800af12 <tcp_receive+0x35a>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af06:	4413      	add	r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800af10:	e004      	b.n	800af1c <tcp_receive+0x364>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af24:	4a98      	ldr	r2, [pc, #608]	@ (800b188 <tcp_receive+0x5d0>)
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fdca 	bl	800aac0 <tcp_free_acked_segments>
 800af2c:	4602      	mov	r2, r0
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af3a:	4a94      	ldr	r2, [pc, #592]	@ (800b18c <tcp_receive+0x5d4>)
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fdbf 	bl	800aac0 <tcp_free_acked_segments>
 800af42:	4602      	mov	r2, r0
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d104      	bne.n	800af5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800af56:	861a      	strh	r2, [r3, #48]	@ 0x30
 800af58:	e002      	b.n	800af60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d103      	bne.n	800af76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800af7c:	4b84      	ldr	r3, [pc, #528]	@ (800b190 <tcp_receive+0x5d8>)
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	4413      	add	r3, r2
 800af82:	b29a      	uxth	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	8b5b      	ldrh	r3, [r3, #26]
 800af8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af92:	2b00      	cmp	r3, #0
 800af94:	d035      	beq.n	800b002 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d118      	bne.n	800afd0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00c      	beq.n	800afc0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fa fefd 	bl	8005db2 <lwip_htonl>
 800afb8:	4603      	mov	r3, r0
 800afba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dc20      	bgt.n	800b002 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	8b5b      	ldrh	r3, [r3, #26]
 800afc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800afc8:	b29a      	uxth	r2, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800afce:	e018      	b.n	800b002 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fa fee8 	bl	8005db2 <lwip_htonl>
 800afe2:	4603      	mov	r3, r0
 800afe4:	1ae3      	subs	r3, r4, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dc0b      	bgt.n	800b002 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	8b5b      	ldrh	r3, [r3, #26]
 800afee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aff8:	e003      	b.n	800b002 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f002 fbc8 	bl	800d790 <tcp_send_empty_ack>
 800b000:	e000      	b.n	800b004 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b002:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d05b      	beq.n	800b0c4 <tcp_receive+0x50c>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b010:	4b60      	ldr	r3, [pc, #384]	@ (800b194 <tcp_receive+0x5dc>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	da54      	bge.n	800b0c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b01a:	4b5f      	ldr	r3, [pc, #380]	@ (800b198 <tcp_receive+0x5e0>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	b29a      	uxth	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b024:	b29b      	uxth	r3, r3
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	b29b      	uxth	r3, r3
 800b02a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b02e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b038:	10db      	asrs	r3, r3, #3
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	b29b      	uxth	r3, r3
 800b042:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b052:	4413      	add	r3, r2
 800b054:	b29b      	uxth	r3, r3
 800b056:	b21a      	sxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b05c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b060:	2b00      	cmp	r3, #0
 800b062:	da05      	bge.n	800b070 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b064:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b068:	425b      	negs	r3, r3
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b070:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b07a:	109b      	asrs	r3, r3, #2
 800b07c:	b21b      	sxth	r3, r3
 800b07e:	b29b      	uxth	r3, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	b29b      	uxth	r3, r3
 800b084:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b08e:	b29a      	uxth	r2, r3
 800b090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b094:	4413      	add	r3, r2
 800b096:	b29b      	uxth	r3, r3
 800b098:	b21a      	sxth	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b0a4:	10db      	asrs	r3, r3, #3
 800b0a6:	b21b      	sxth	r3, r3
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	4413      	add	r3, r2
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	b21a      	sxth	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b0c4:	4b35      	ldr	r3, [pc, #212]	@ (800b19c <tcp_receive+0x5e4>)
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 84df 	beq.w	800ba8c <tcp_receive+0xed4>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	7d1b      	ldrb	r3, [r3, #20]
 800b0d2:	2b06      	cmp	r3, #6
 800b0d4:	f200 84da 	bhi.w	800ba8c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0dc:	4b30      	ldr	r3, [pc, #192]	@ (800b1a0 <tcp_receive+0x5e8>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f2c0 808f 	blt.w	800b208 <tcp_receive+0x650>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0ee:	4b2b      	ldr	r3, [pc, #172]	@ (800b19c <tcp_receive+0x5e4>)
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	4b2a      	ldr	r3, [pc, #168]	@ (800b1a0 <tcp_receive+0x5e8>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	440b      	add	r3, r1
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f300 8082 	bgt.w	800b208 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b104:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b10e:	4b24      	ldr	r3, [pc, #144]	@ (800b1a0 <tcp_receive+0x5e8>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b116:	4b23      	ldr	r3, [pc, #140]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d106      	bne.n	800b12c <tcp_receive+0x574>
 800b11e:	4b22      	ldr	r3, [pc, #136]	@ (800b1a8 <tcp_receive+0x5f0>)
 800b120:	f240 5294 	movw	r2, #1428	@ 0x594
 800b124:	4921      	ldr	r1, [pc, #132]	@ (800b1ac <tcp_receive+0x5f4>)
 800b126:	4822      	ldr	r0, [pc, #136]	@ (800b1b0 <tcp_receive+0x5f8>)
 800b128:	f005 fb6c 	bl	8010804 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b12e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b132:	4293      	cmp	r3, r2
 800b134:	d906      	bls.n	800b144 <tcp_receive+0x58c>
 800b136:	4b1c      	ldr	r3, [pc, #112]	@ (800b1a8 <tcp_receive+0x5f0>)
 800b138:	f240 5295 	movw	r2, #1429	@ 0x595
 800b13c:	491d      	ldr	r1, [pc, #116]	@ (800b1b4 <tcp_receive+0x5fc>)
 800b13e:	481c      	ldr	r0, [pc, #112]	@ (800b1b0 <tcp_receive+0x5f8>)
 800b140:	f005 fb60 	bl	8010804 <iprintf>
      off = (u16_t)off32;
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b14a:	4b16      	ldr	r3, [pc, #88]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	891b      	ldrh	r3, [r3, #8]
 800b150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b154:	429a      	cmp	r2, r3
 800b156:	d906      	bls.n	800b166 <tcp_receive+0x5ae>
 800b158:	4b13      	ldr	r3, [pc, #76]	@ (800b1a8 <tcp_receive+0x5f0>)
 800b15a:	f240 5297 	movw	r2, #1431	@ 0x597
 800b15e:	4916      	ldr	r1, [pc, #88]	@ (800b1b8 <tcp_receive+0x600>)
 800b160:	4813      	ldr	r0, [pc, #76]	@ (800b1b0 <tcp_receive+0x5f8>)
 800b162:	f005 fb4f 	bl	8010804 <iprintf>
      inseg.len -= off;
 800b166:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b168:	891a      	ldrh	r2, [r3, #8]
 800b16a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	b29a      	uxth	r2, r3
 800b172:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b174:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b176:	4b0b      	ldr	r3, [pc, #44]	@ (800b1a4 <tcp_receive+0x5ec>)
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	891a      	ldrh	r2, [r3, #8]
 800b17c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b184:	e02a      	b.n	800b1dc <tcp_receive+0x624>
 800b186:	bf00      	nop
 800b188:	08012e28 	.word	0x08012e28
 800b18c:	08012e30 	.word	0x08012e30
 800b190:	200080f4 	.word	0x200080f4
 800b194:	200080f0 	.word	0x200080f0
 800b198:	200080b4 	.word	0x200080b4
 800b19c:	200080f6 	.word	0x200080f6
 800b1a0:	200080ec 	.word	0x200080ec
 800b1a4:	200080cc 	.word	0x200080cc
 800b1a8:	08012ac0 	.word	0x08012ac0
 800b1ac:	08012e38 	.word	0x08012e38
 800b1b0:	08012b0c 	.word	0x08012b0c
 800b1b4:	08012e48 	.word	0x08012e48
 800b1b8:	08012e58 	.word	0x08012e58
        off -= p->len;
 800b1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1be:	895b      	ldrh	r3, [r3, #10]
 800b1c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b1ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1cc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b1ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b1d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b1dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1de:	895b      	ldrh	r3, [r3, #10]
 800b1e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d8e9      	bhi.n	800b1bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b1e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b1f0:	f7fc f8d4 	bl	800739c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f8:	4a90      	ldr	r2, [pc, #576]	@ (800b43c <tcp_receive+0x884>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	4b90      	ldr	r3, [pc, #576]	@ (800b440 <tcp_receive+0x888>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	4a8e      	ldr	r2, [pc, #568]	@ (800b43c <tcp_receive+0x884>)
 800b202:	6812      	ldr	r2, [r2, #0]
 800b204:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b206:	e00d      	b.n	800b224 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b208:	4b8c      	ldr	r3, [pc, #560]	@ (800b43c <tcp_receive+0x884>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	da06      	bge.n	800b224 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	8b5b      	ldrh	r3, [r3, #26]
 800b21a:	f043 0302 	orr.w	r3, r3, #2
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b224:	4b85      	ldr	r3, [pc, #532]	@ (800b43c <tcp_receive+0x884>)
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f2c0 8427 	blt.w	800ba82 <tcp_receive+0xeca>
 800b234:	4b81      	ldr	r3, [pc, #516]	@ (800b43c <tcp_receive+0x884>)
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b240:	440b      	add	r3, r1
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	3301      	adds	r3, #1
 800b246:	2b00      	cmp	r3, #0
 800b248:	f300 841b 	bgt.w	800ba82 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b250:	4b7a      	ldr	r3, [pc, #488]	@ (800b43c <tcp_receive+0x884>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	f040 8298 	bne.w	800b78a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b25a:	4b79      	ldr	r3, [pc, #484]	@ (800b440 <tcp_receive+0x888>)
 800b25c:	891c      	ldrh	r4, [r3, #8]
 800b25e:	4b78      	ldr	r3, [pc, #480]	@ (800b440 <tcp_receive+0x888>)
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	899b      	ldrh	r3, [r3, #12]
 800b264:	b29b      	uxth	r3, r3
 800b266:	4618      	mov	r0, r3
 800b268:	f7fa fd8e 	bl	8005d88 <lwip_htons>
 800b26c:	4603      	mov	r3, r0
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	f003 0303 	and.w	r3, r3, #3
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <tcp_receive+0x6c4>
 800b278:	2301      	movs	r3, #1
 800b27a:	e000      	b.n	800b27e <tcp_receive+0x6c6>
 800b27c:	2300      	movs	r3, #0
 800b27e:	4423      	add	r3, r4
 800b280:	b29a      	uxth	r2, r3
 800b282:	4b70      	ldr	r3, [pc, #448]	@ (800b444 <tcp_receive+0x88c>)
 800b284:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b28a:	4b6e      	ldr	r3, [pc, #440]	@ (800b444 <tcp_receive+0x88c>)
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d274      	bcs.n	800b37c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b292:	4b6b      	ldr	r3, [pc, #428]	@ (800b440 <tcp_receive+0x888>)
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	899b      	ldrh	r3, [r3, #12]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fa fd74 	bl	8005d88 <lwip_htons>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d01e      	beq.n	800b2ea <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b2ac:	4b64      	ldr	r3, [pc, #400]	@ (800b440 <tcp_receive+0x888>)
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	899b      	ldrh	r3, [r3, #12]
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	b21b      	sxth	r3, r3
 800b2b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b2ba:	b21c      	sxth	r4, r3
 800b2bc:	4b60      	ldr	r3, [pc, #384]	@ (800b440 <tcp_receive+0x888>)
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	899b      	ldrh	r3, [r3, #12]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa fd5f 	bl	8005d88 <lwip_htons>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7fa fd57 	bl	8005d88 <lwip_htons>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	b21b      	sxth	r3, r3
 800b2de:	4323      	orrs	r3, r4
 800b2e0:	b21a      	sxth	r2, r3
 800b2e2:	4b57      	ldr	r3, [pc, #348]	@ (800b440 <tcp_receive+0x888>)
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	b292      	uxth	r2, r2
 800b2e8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b2ee:	4b54      	ldr	r3, [pc, #336]	@ (800b440 <tcp_receive+0x888>)
 800b2f0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b2f2:	4b53      	ldr	r3, [pc, #332]	@ (800b440 <tcp_receive+0x888>)
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	899b      	ldrh	r3, [r3, #12]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fa fd44 	bl	8005d88 <lwip_htons>
 800b300:	4603      	mov	r3, r0
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <tcp_receive+0x760>
            inseg.len -= 1;
 800b30c:	4b4c      	ldr	r3, [pc, #304]	@ (800b440 <tcp_receive+0x888>)
 800b30e:	891b      	ldrh	r3, [r3, #8]
 800b310:	3b01      	subs	r3, #1
 800b312:	b29a      	uxth	r2, r3
 800b314:	4b4a      	ldr	r3, [pc, #296]	@ (800b440 <tcp_receive+0x888>)
 800b316:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b318:	4b49      	ldr	r3, [pc, #292]	@ (800b440 <tcp_receive+0x888>)
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	4a48      	ldr	r2, [pc, #288]	@ (800b440 <tcp_receive+0x888>)
 800b31e:	8912      	ldrh	r2, [r2, #8]
 800b320:	4611      	mov	r1, r2
 800b322:	4618      	mov	r0, r3
 800b324:	f7fb ff3a 	bl	800719c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b328:	4b45      	ldr	r3, [pc, #276]	@ (800b440 <tcp_receive+0x888>)
 800b32a:	891c      	ldrh	r4, [r3, #8]
 800b32c:	4b44      	ldr	r3, [pc, #272]	@ (800b440 <tcp_receive+0x888>)
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	899b      	ldrh	r3, [r3, #12]
 800b332:	b29b      	uxth	r3, r3
 800b334:	4618      	mov	r0, r3
 800b336:	f7fa fd27 	bl	8005d88 <lwip_htons>
 800b33a:	4603      	mov	r3, r0
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	f003 0303 	and.w	r3, r3, #3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <tcp_receive+0x792>
 800b346:	2301      	movs	r3, #1
 800b348:	e000      	b.n	800b34c <tcp_receive+0x794>
 800b34a:	2300      	movs	r3, #0
 800b34c:	4423      	add	r3, r4
 800b34e:	b29a      	uxth	r2, r3
 800b350:	4b3c      	ldr	r3, [pc, #240]	@ (800b444 <tcp_receive+0x88c>)
 800b352:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b354:	4b3b      	ldr	r3, [pc, #236]	@ (800b444 <tcp_receive+0x88c>)
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	461a      	mov	r2, r3
 800b35a:	4b38      	ldr	r3, [pc, #224]	@ (800b43c <tcp_receive+0x884>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	441a      	add	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b368:	440b      	add	r3, r1
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d006      	beq.n	800b37c <tcp_receive+0x7c4>
 800b36e:	4b36      	ldr	r3, [pc, #216]	@ (800b448 <tcp_receive+0x890>)
 800b370:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b374:	4935      	ldr	r1, [pc, #212]	@ (800b44c <tcp_receive+0x894>)
 800b376:	4836      	ldr	r0, [pc, #216]	@ (800b450 <tcp_receive+0x898>)
 800b378:	f005 fa44 	bl	8010804 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 80e6 	beq.w	800b552 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b386:	4b2e      	ldr	r3, [pc, #184]	@ (800b440 <tcp_receive+0x888>)
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	899b      	ldrh	r3, [r3, #12]
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fa fcfa 	bl	8005d88 <lwip_htons>
 800b394:	4603      	mov	r3, r0
 800b396:	b2db      	uxtb	r3, r3
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d010      	beq.n	800b3c2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b3a0:	e00a      	b.n	800b3b8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3a6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7fd fca7 	bl	8008d06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1f0      	bne.n	800b3a2 <tcp_receive+0x7ea>
 800b3c0:	e0c7      	b.n	800b552 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b3c8:	e051      	b.n	800b46e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b3ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	899b      	ldrh	r3, [r3, #12]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fa fcd8 	bl	8005d88 <lwip_htons>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	f003 0301 	and.w	r3, r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d03c      	beq.n	800b45e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b3e4:	4b16      	ldr	r3, [pc, #88]	@ (800b440 <tcp_receive+0x888>)
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	899b      	ldrh	r3, [r3, #12]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fa fccb 	bl	8005d88 <lwip_htons>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d12f      	bne.n	800b45e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b3fe:	4b10      	ldr	r3, [pc, #64]	@ (800b440 <tcp_receive+0x888>)
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	899b      	ldrh	r3, [r3, #12]
 800b404:	b29c      	uxth	r4, r3
 800b406:	2001      	movs	r0, #1
 800b408:	f7fa fcbe 	bl	8005d88 <lwip_htons>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	4b0b      	ldr	r3, [pc, #44]	@ (800b440 <tcp_receive+0x888>)
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	4322      	orrs	r2, r4
 800b416:	b292      	uxth	r2, r2
 800b418:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <tcp_receive+0x888>)
 800b41c:	891c      	ldrh	r4, [r3, #8]
 800b41e:	4b08      	ldr	r3, [pc, #32]	@ (800b440 <tcp_receive+0x888>)
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	899b      	ldrh	r3, [r3, #12]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7fa fcae 	bl	8005d88 <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0303 	and.w	r3, r3, #3
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00d      	beq.n	800b454 <tcp_receive+0x89c>
 800b438:	2301      	movs	r3, #1
 800b43a:	e00c      	b.n	800b456 <tcp_receive+0x89e>
 800b43c:	200080ec 	.word	0x200080ec
 800b440:	200080cc 	.word	0x200080cc
 800b444:	200080f6 	.word	0x200080f6
 800b448:	08012ac0 	.word	0x08012ac0
 800b44c:	08012e68 	.word	0x08012e68
 800b450:	08012b0c 	.word	0x08012b0c
 800b454:	2300      	movs	r3, #0
 800b456:	4423      	add	r3, r4
 800b458:	b29a      	uxth	r2, r3
 800b45a:	4b98      	ldr	r3, [pc, #608]	@ (800b6bc <tcp_receive+0xb04>)
 800b45c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b45e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b460:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b468:	6938      	ldr	r0, [r7, #16]
 800b46a:	f7fd fc4c 	bl	8008d06 <tcp_seg_free>
            while (next &&
 800b46e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b470:	2b00      	cmp	r3, #0
 800b472:	d00e      	beq.n	800b492 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b474:	4b91      	ldr	r3, [pc, #580]	@ (800b6bc <tcp_receive+0xb04>)
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	461a      	mov	r2, r3
 800b47a:	4b91      	ldr	r3, [pc, #580]	@ (800b6c0 <tcp_receive+0xb08>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	441a      	add	r2, r3
 800b480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b488:	8909      	ldrh	r1, [r1, #8]
 800b48a:	440b      	add	r3, r1
 800b48c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b48e:	2b00      	cmp	r3, #0
 800b490:	da9b      	bge.n	800b3ca <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b494:	2b00      	cmp	r3, #0
 800b496:	d059      	beq.n	800b54c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b498:	4b88      	ldr	r3, [pc, #544]	@ (800b6bc <tcp_receive+0xb04>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	461a      	mov	r2, r3
 800b49e:	4b88      	ldr	r3, [pc, #544]	@ (800b6c0 <tcp_receive+0xb08>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	441a      	add	r2, r3
 800b4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd4d      	ble.n	800b54c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b4b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	4b81      	ldr	r3, [pc, #516]	@ (800b6c0 <tcp_receive+0xb08>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	4b80      	ldr	r3, [pc, #512]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4c4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4c6:	4b7f      	ldr	r3, [pc, #508]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	899b      	ldrh	r3, [r3, #12]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fa fc5a 	bl	8005d88 <lwip_htons>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d005      	beq.n	800b4ec <tcp_receive+0x934>
                inseg.len -= 1;
 800b4e0:	4b78      	ldr	r3, [pc, #480]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4e2:	891b      	ldrh	r3, [r3, #8]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	4b76      	ldr	r3, [pc, #472]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4ea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b4ec:	4b75      	ldr	r3, [pc, #468]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	4a74      	ldr	r2, [pc, #464]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4f2:	8912      	ldrh	r2, [r2, #8]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fb fe50 	bl	800719c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b4fc:	4b71      	ldr	r3, [pc, #452]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b4fe:	891c      	ldrh	r4, [r3, #8]
 800b500:	4b70      	ldr	r3, [pc, #448]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	899b      	ldrh	r3, [r3, #12]
 800b506:	b29b      	uxth	r3, r3
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fa fc3d 	bl	8005d88 <lwip_htons>
 800b50e:	4603      	mov	r3, r0
 800b510:	b2db      	uxtb	r3, r3
 800b512:	f003 0303 	and.w	r3, r3, #3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d001      	beq.n	800b51e <tcp_receive+0x966>
 800b51a:	2301      	movs	r3, #1
 800b51c:	e000      	b.n	800b520 <tcp_receive+0x968>
 800b51e:	2300      	movs	r3, #0
 800b520:	4423      	add	r3, r4
 800b522:	b29a      	uxth	r2, r3
 800b524:	4b65      	ldr	r3, [pc, #404]	@ (800b6bc <tcp_receive+0xb04>)
 800b526:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b528:	4b64      	ldr	r3, [pc, #400]	@ (800b6bc <tcp_receive+0xb04>)
 800b52a:	881b      	ldrh	r3, [r3, #0]
 800b52c:	461a      	mov	r2, r3
 800b52e:	4b64      	ldr	r3, [pc, #400]	@ (800b6c0 <tcp_receive+0xb08>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	441a      	add	r2, r3
 800b534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d006      	beq.n	800b54c <tcp_receive+0x994>
 800b53e:	4b62      	ldr	r3, [pc, #392]	@ (800b6c8 <tcp_receive+0xb10>)
 800b540:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b544:	4961      	ldr	r1, [pc, #388]	@ (800b6cc <tcp_receive+0xb14>)
 800b546:	4862      	ldr	r0, [pc, #392]	@ (800b6d0 <tcp_receive+0xb18>)
 800b548:	f005 f95c 	bl	8010804 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b550:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b552:	4b5a      	ldr	r3, [pc, #360]	@ (800b6bc <tcp_receive+0xb04>)
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	461a      	mov	r2, r3
 800b558:	4b59      	ldr	r3, [pc, #356]	@ (800b6c0 <tcp_receive+0xb08>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	441a      	add	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b566:	4b55      	ldr	r3, [pc, #340]	@ (800b6bc <tcp_receive+0xb04>)
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d206      	bcs.n	800b57c <tcp_receive+0x9c4>
 800b56e:	4b56      	ldr	r3, [pc, #344]	@ (800b6c8 <tcp_receive+0xb10>)
 800b570:	f240 6207 	movw	r2, #1543	@ 0x607
 800b574:	4957      	ldr	r1, [pc, #348]	@ (800b6d4 <tcp_receive+0xb1c>)
 800b576:	4856      	ldr	r0, [pc, #344]	@ (800b6d0 <tcp_receive+0xb18>)
 800b578:	f005 f944 	bl	8010804 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b580:	4b4e      	ldr	r3, [pc, #312]	@ (800b6bc <tcp_receive+0xb04>)
 800b582:	881b      	ldrh	r3, [r3, #0]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7fc fe93 	bl	80082b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b592:	4b4c      	ldr	r3, [pc, #304]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	891b      	ldrh	r3, [r3, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b59c:	4b49      	ldr	r3, [pc, #292]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	4a4d      	ldr	r2, [pc, #308]	@ (800b6d8 <tcp_receive+0xb20>)
 800b5a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b5a4:	4b47      	ldr	r3, [pc, #284]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b5aa:	4b46      	ldr	r3, [pc, #280]	@ (800b6c4 <tcp_receive+0xb0c>)
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	899b      	ldrh	r3, [r3, #12]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fa fbe8 	bl	8005d88 <lwip_htons>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80b8 	beq.w	800b736 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b5c6:	4b45      	ldr	r3, [pc, #276]	@ (800b6dc <tcp_receive+0xb24>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f043 0320 	orr.w	r3, r3, #32
 800b5ce:	b2da      	uxtb	r2, r3
 800b5d0:	4b42      	ldr	r3, [pc, #264]	@ (800b6dc <tcp_receive+0xb24>)
 800b5d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b5d4:	e0af      	b.n	800b736 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	4a36      	ldr	r2, [pc, #216]	@ (800b6c0 <tcp_receive+0xb08>)
 800b5e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	891b      	ldrh	r3, [r3, #8]
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	899b      	ldrh	r3, [r3, #12]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fa fbc6 	bl	8005d88 <lwip_htons>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <tcp_receive+0xa54>
 800b608:	2301      	movs	r3, #1
 800b60a:	e000      	b.n	800b60e <tcp_receive+0xa56>
 800b60c:	2300      	movs	r3, #0
 800b60e:	191a      	adds	r2, r3, r4
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b614:	441a      	add	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b61e:	461c      	mov	r4, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	891b      	ldrh	r3, [r3, #8]
 800b624:	461d      	mov	r5, r3
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	899b      	ldrh	r3, [r3, #12]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fa fbaa 	bl	8005d88 <lwip_htons>
 800b634:	4603      	mov	r3, r0
 800b636:	b2db      	uxtb	r3, r3
 800b638:	f003 0303 	and.w	r3, r3, #3
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <tcp_receive+0xa8c>
 800b640:	2301      	movs	r3, #1
 800b642:	e000      	b.n	800b646 <tcp_receive+0xa8e>
 800b644:	2300      	movs	r3, #0
 800b646:	442b      	add	r3, r5
 800b648:	429c      	cmp	r4, r3
 800b64a:	d206      	bcs.n	800b65a <tcp_receive+0xaa2>
 800b64c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c8 <tcp_receive+0xb10>)
 800b64e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b652:	4923      	ldr	r1, [pc, #140]	@ (800b6e0 <tcp_receive+0xb28>)
 800b654:	481e      	ldr	r0, [pc, #120]	@ (800b6d0 <tcp_receive+0xb18>)
 800b656:	f005 f8d5 	bl	8010804 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	891b      	ldrh	r3, [r3, #8]
 800b65e:	461c      	mov	r4, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	899b      	ldrh	r3, [r3, #12]
 800b666:	b29b      	uxth	r3, r3
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fa fb8d 	bl	8005d88 <lwip_htons>
 800b66e:	4603      	mov	r3, r0
 800b670:	b2db      	uxtb	r3, r3
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <tcp_receive+0xac6>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <tcp_receive+0xac8>
 800b67e:	2300      	movs	r3, #0
 800b680:	1919      	adds	r1, r3, r4
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b686:	b28b      	uxth	r3, r1
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fc fe11 	bl	80082b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	891b      	ldrh	r3, [r3, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d028      	beq.n	800b6f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b6a0:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d8 <tcp_receive+0xb20>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01d      	beq.n	800b6e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b6a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d8 <tcp_receive+0xb20>)
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	4610      	mov	r0, r2
 800b6b4:	f7fb ffba 	bl	800762c <pbuf_cat>
 800b6b8:	e018      	b.n	800b6ec <tcp_receive+0xb34>
 800b6ba:	bf00      	nop
 800b6bc:	200080f6 	.word	0x200080f6
 800b6c0:	200080ec 	.word	0x200080ec
 800b6c4:	200080cc 	.word	0x200080cc
 800b6c8:	08012ac0 	.word	0x08012ac0
 800b6cc:	08012ea0 	.word	0x08012ea0
 800b6d0:	08012b0c 	.word	0x08012b0c
 800b6d4:	08012edc 	.word	0x08012edc
 800b6d8:	200080fc 	.word	0x200080fc
 800b6dc:	200080f9 	.word	0x200080f9
 800b6e0:	08012efc 	.word	0x08012efc
            } else {
              recv_data = cseg->p;
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a70      	ldr	r2, [pc, #448]	@ (800b8ac <tcp_receive+0xcf4>)
 800b6ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	899b      	ldrh	r3, [r3, #12]
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fa fb44 	bl	8005d88 <lwip_htons>
 800b700:	4603      	mov	r3, r0
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0301 	and.w	r3, r3, #1
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00d      	beq.n	800b728 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b70c:	4b68      	ldr	r3, [pc, #416]	@ (800b8b0 <tcp_receive+0xcf8>)
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	f043 0320 	orr.w	r3, r3, #32
 800b714:	b2da      	uxtb	r2, r3
 800b716:	4b66      	ldr	r3, [pc, #408]	@ (800b8b0 <tcp_receive+0xcf8>)
 800b718:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7d1b      	ldrb	r3, [r3, #20]
 800b71e:	2b04      	cmp	r3, #4
 800b720:	d102      	bne.n	800b728 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2207      	movs	r2, #7
 800b726:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b730:	68b8      	ldr	r0, [r7, #8]
 800b732:	f7fd fae8 	bl	8008d06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d008      	beq.n	800b750 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b74a:	429a      	cmp	r2, r3
 800b74c:	f43f af43 	beq.w	800b5d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	8b5b      	ldrh	r3, [r3, #26]
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00e      	beq.n	800b77a <tcp_receive+0xbc2>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8b5b      	ldrh	r3, [r3, #26]
 800b760:	f023 0301 	bic.w	r3, r3, #1
 800b764:	b29a      	uxth	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	835a      	strh	r2, [r3, #26]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	8b5b      	ldrh	r3, [r3, #26]
 800b76e:	f043 0302 	orr.w	r3, r3, #2
 800b772:	b29a      	uxth	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b778:	e187      	b.n	800ba8a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	8b5b      	ldrh	r3, [r3, #26]
 800b77e:	f043 0301 	orr.w	r3, r3, #1
 800b782:	b29a      	uxth	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b788:	e17f      	b.n	800ba8a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b792:	4848      	ldr	r0, [pc, #288]	@ (800b8b4 <tcp_receive+0xcfc>)
 800b794:	f7fd faee 	bl	8008d74 <tcp_seg_copy>
 800b798:	4602      	mov	r2, r0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b79e:	e16c      	b.n	800ba7a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7aa:	e156      	b.n	800ba5a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	685a      	ldr	r2, [r3, #4]
 800b7b2:	4b41      	ldr	r3, [pc, #260]	@ (800b8b8 <tcp_receive+0xd00>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d11d      	bne.n	800b7f6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b7ba:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b4 <tcp_receive+0xcfc>)
 800b7bc:	891a      	ldrh	r2, [r3, #8]
 800b7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7c0:	891b      	ldrh	r3, [r3, #8]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	f240 814e 	bls.w	800ba64 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b7c8:	483a      	ldr	r0, [pc, #232]	@ (800b8b4 <tcp_receive+0xcfc>)
 800b7ca:	f7fd fad3 	bl	8008d74 <tcp_seg_copy>
 800b7ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 8148 	beq.w	800ba68 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	601a      	str	r2, [r3, #0]
 800b7e4:	e002      	b.n	800b7ec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b7ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7ee:	6978      	ldr	r0, [r7, #20]
 800b7f0:	f7ff f8de 	bl	800a9b0 <tcp_oos_insert_segment>
                }
                break;
 800b7f4:	e138      	b.n	800ba68 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d117      	bne.n	800b82c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b7fc:	4b2e      	ldr	r3, [pc, #184]	@ (800b8b8 <tcp_receive+0xd00>)
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	da57      	bge.n	800b8bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b80c:	4829      	ldr	r0, [pc, #164]	@ (800b8b4 <tcp_receive+0xcfc>)
 800b80e:	f7fd fab1 	bl	8008d74 <tcp_seg_copy>
 800b812:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 8128 	beq.w	800ba6c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	69ba      	ldr	r2, [r7, #24]
 800b820:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b822:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b824:	69b8      	ldr	r0, [r7, #24]
 800b826:	f7ff f8c3 	bl	800a9b0 <tcp_oos_insert_segment>
                  }
                  break;
 800b82a:	e11f      	b.n	800ba6c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b82c:	4b22      	ldr	r3, [pc, #136]	@ (800b8b8 <tcp_receive+0xd00>)
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	3b01      	subs	r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	db3e      	blt.n	800b8bc <tcp_receive+0xd04>
 800b83e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8b8 <tcp_receive+0xd00>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	3301      	adds	r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dc35      	bgt.n	800b8bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b850:	4818      	ldr	r0, [pc, #96]	@ (800b8b4 <tcp_receive+0xcfc>)
 800b852:	f7fd fa8f 	bl	8008d74 <tcp_seg_copy>
 800b856:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f000 8108 	beq.w	800ba70 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b868:	8912      	ldrh	r2, [r2, #8]
 800b86a:	441a      	add	r2, r3
 800b86c:	4b12      	ldr	r3, [pc, #72]	@ (800b8b8 <tcp_receive+0xd00>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	2b00      	cmp	r3, #0
 800b874:	dd12      	ble.n	800b89c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b876:	4b10      	ldr	r3, [pc, #64]	@ (800b8b8 <tcp_receive+0xd00>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	685b      	ldr	r3, [r3, #4]
 800b882:	b29b      	uxth	r3, r3
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	b29a      	uxth	r2, r3
 800b888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b88c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88e:	685a      	ldr	r2, [r3, #4]
 800b890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b892:	891b      	ldrh	r3, [r3, #8]
 800b894:	4619      	mov	r1, r3
 800b896:	4610      	mov	r0, r2
 800b898:	f7fb fc80 	bl	800719c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b89e:	69fa      	ldr	r2, [r7, #28]
 800b8a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b8a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b8a4:	69f8      	ldr	r0, [r7, #28]
 800b8a6:	f7ff f883 	bl	800a9b0 <tcp_oos_insert_segment>
                  }
                  break;
 800b8aa:	e0e1      	b.n	800ba70 <tcp_receive+0xeb8>
 800b8ac:	200080fc 	.word	0x200080fc
 800b8b0:	200080f9 	.word	0x200080f9
 800b8b4:	200080cc 	.word	0x200080cc
 800b8b8:	200080ec 	.word	0x200080ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8be:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f040 80c5 	bne.w	800ba54 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b8ca:	4b7f      	ldr	r3, [pc, #508]	@ (800bac8 <tcp_receive+0xf10>)
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f340 80bc 	ble.w	800ba54 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	899b      	ldrh	r3, [r3, #12]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fa fa4f 	bl	8005d88 <lwip_htons>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 80be 	bne.w	800ba74 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b8f8:	4874      	ldr	r0, [pc, #464]	@ (800bacc <tcp_receive+0xf14>)
 800b8fa:	f7fd fa3b 	bl	8008d74 <tcp_seg_copy>
 800b8fe:	4602      	mov	r2, r0
 800b900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b902:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 80b5 	beq.w	800ba78 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b916:	8912      	ldrh	r2, [r2, #8]
 800b918:	441a      	add	r2, r3
 800b91a:	4b6b      	ldr	r3, [pc, #428]	@ (800bac8 <tcp_receive+0xf10>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	dd12      	ble.n	800b94a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b924:	4b68      	ldr	r3, [pc, #416]	@ (800bac8 <tcp_receive+0xf10>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	b29a      	uxth	r2, r3
 800b92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	b29b      	uxth	r3, r3
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	b29a      	uxth	r2, r3
 800b936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b938:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b93c:	685a      	ldr	r2, [r3, #4]
 800b93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b940:	891b      	ldrh	r3, [r3, #8]
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7fb fc29 	bl	800719c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b94a:	4b61      	ldr	r3, [pc, #388]	@ (800bad0 <tcp_receive+0xf18>)
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	4b5d      	ldr	r3, [pc, #372]	@ (800bac8 <tcp_receive+0xf10>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	441a      	add	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95a:	6879      	ldr	r1, [r7, #4]
 800b95c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b95e:	440b      	add	r3, r1
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	f340 8088 	ble.w	800ba78 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	899b      	ldrh	r3, [r3, #12]
 800b970:	b29b      	uxth	r3, r3
 800b972:	4618      	mov	r0, r3
 800b974:	f7fa fa08 	bl	8005d88 <lwip_htons>
 800b978:	4603      	mov	r3, r0
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d021      	beq.n	800b9c8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	899b      	ldrh	r3, [r3, #12]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	b21b      	sxth	r3, r3
 800b990:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b994:	b21c      	sxth	r4, r3
 800b996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	899b      	ldrh	r3, [r3, #12]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fa f9f1 	bl	8005d88 <lwip_htons>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fa f9e9 	bl	8005d88 <lwip_htons>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	b21b      	sxth	r3, r3
 800b9ba:	4323      	orrs	r3, r4
 800b9bc:	b21a      	sxth	r2, r3
 800b9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	b292      	uxth	r2, r2
 800b9c6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9cc:	b29a      	uxth	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9d2:	4413      	add	r3, r2
 800b9d4:	b299      	uxth	r1, r3
 800b9d6:	4b3c      	ldr	r3, [pc, #240]	@ (800bac8 <tcp_receive+0xf10>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	1a8a      	subs	r2, r1, r2
 800b9e2:	b292      	uxth	r2, r2
 800b9e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	891b      	ldrh	r3, [r3, #8]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f7fb fbd1 	bl	800719c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	891c      	ldrh	r4, [r3, #8]
 800ba00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	899b      	ldrh	r3, [r3, #12]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fa f9bc 	bl	8005d88 <lwip_htons>
 800ba10:	4603      	mov	r3, r0
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 0303 	and.w	r3, r3, #3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <tcp_receive+0xe68>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e000      	b.n	800ba22 <tcp_receive+0xe6a>
 800ba20:	2300      	movs	r3, #0
 800ba22:	4423      	add	r3, r4
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	4b2a      	ldr	r3, [pc, #168]	@ (800bad0 <tcp_receive+0xf18>)
 800ba28:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ba2a:	4b29      	ldr	r3, [pc, #164]	@ (800bad0 <tcp_receive+0xf18>)
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	4b25      	ldr	r3, [pc, #148]	@ (800bac8 <tcp_receive+0xf10>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	441a      	add	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3a:	6879      	ldr	r1, [r7, #4]
 800ba3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ba3e:	440b      	add	r3, r1
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d019      	beq.n	800ba78 <tcp_receive+0xec0>
 800ba44:	4b23      	ldr	r3, [pc, #140]	@ (800bad4 <tcp_receive+0xf1c>)
 800ba46:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800ba4a:	4923      	ldr	r1, [pc, #140]	@ (800bad8 <tcp_receive+0xf20>)
 800ba4c:	4823      	ldr	r0, [pc, #140]	@ (800badc <tcp_receive+0xf24>)
 800ba4e:	f004 fed9 	bl	8010804 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ba52:	e011      	b.n	800ba78 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	f47f aea5 	bne.w	800b7ac <tcp_receive+0xbf4>
 800ba62:	e00a      	b.n	800ba7a <tcp_receive+0xec2>
                break;
 800ba64:	bf00      	nop
 800ba66:	e008      	b.n	800ba7a <tcp_receive+0xec2>
                break;
 800ba68:	bf00      	nop
 800ba6a:	e006      	b.n	800ba7a <tcp_receive+0xec2>
                  break;
 800ba6c:	bf00      	nop
 800ba6e:	e004      	b.n	800ba7a <tcp_receive+0xec2>
                  break;
 800ba70:	bf00      	nop
 800ba72:	e002      	b.n	800ba7a <tcp_receive+0xec2>
                  break;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <tcp_receive+0xec2>
                break;
 800ba78:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fe88 	bl	800d790 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ba80:	e003      	b.n	800ba8a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f001 fe84 	bl	800d790 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ba88:	e01a      	b.n	800bac0 <tcp_receive+0xf08>
 800ba8a:	e019      	b.n	800bac0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ba8c:	4b0e      	ldr	r3, [pc, #56]	@ (800bac8 <tcp_receive+0xf10>)
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	db0a      	blt.n	800bab0 <tcp_receive+0xef8>
 800ba9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bac8 <tcp_receive+0xf10>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa2:	6879      	ldr	r1, [r7, #4]
 800baa4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800baa6:	440b      	add	r3, r1
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	3301      	adds	r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	dd07      	ble.n	800bac0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	8b5b      	ldrh	r3, [r3, #26]
 800bab4:	f043 0302 	orr.w	r3, r3, #2
 800bab8:	b29a      	uxth	r2, r3
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800babe:	e7ff      	b.n	800bac0 <tcp_receive+0xf08>
 800bac0:	bf00      	nop
 800bac2:	3750      	adds	r7, #80	@ 0x50
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bdb0      	pop	{r4, r5, r7, pc}
 800bac8:	200080ec 	.word	0x200080ec
 800bacc:	200080cc 	.word	0x200080cc
 800bad0:	200080f6 	.word	0x200080f6
 800bad4:	08012ac0 	.word	0x08012ac0
 800bad8:	08012e68 	.word	0x08012e68
 800badc:	08012b0c 	.word	0x08012b0c

0800bae0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bae6:	4b15      	ldr	r3, [pc, #84]	@ (800bb3c <tcp_get_next_optbyte+0x5c>)
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	b291      	uxth	r1, r2
 800baee:	4a13      	ldr	r2, [pc, #76]	@ (800bb3c <tcp_get_next_optbyte+0x5c>)
 800baf0:	8011      	strh	r1, [r2, #0]
 800baf2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <tcp_get_next_optbyte+0x60>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <tcp_get_next_optbyte+0x26>
 800bafc:	4b11      	ldr	r3, [pc, #68]	@ (800bb44 <tcp_get_next_optbyte+0x64>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	88fa      	ldrh	r2, [r7, #6]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d208      	bcs.n	800bb18 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bb06:	4b10      	ldr	r3, [pc, #64]	@ (800bb48 <tcp_get_next_optbyte+0x68>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3314      	adds	r3, #20
 800bb0c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bb0e:	88fb      	ldrh	r3, [r7, #6]
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	4413      	add	r3, r2
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	e00b      	b.n	800bb30 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bb18:	88fb      	ldrh	r3, [r7, #6]
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	4b09      	ldr	r3, [pc, #36]	@ (800bb44 <tcp_get_next_optbyte+0x64>)
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bb26:	4b06      	ldr	r3, [pc, #24]	@ (800bb40 <tcp_get_next_optbyte+0x60>)
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	797b      	ldrb	r3, [r7, #5]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	200080e8 	.word	0x200080e8
 800bb40:	200080e4 	.word	0x200080e4
 800bb44:	200080e2 	.word	0x200080e2
 800bb48:	200080dc 	.word	0x200080dc

0800bb4c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d106      	bne.n	800bb68 <tcp_parseopt+0x1c>
 800bb5a:	4b32      	ldr	r3, [pc, #200]	@ (800bc24 <tcp_parseopt+0xd8>)
 800bb5c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bb60:	4931      	ldr	r1, [pc, #196]	@ (800bc28 <tcp_parseopt+0xdc>)
 800bb62:	4832      	ldr	r0, [pc, #200]	@ (800bc2c <tcp_parseopt+0xe0>)
 800bb64:	f004 fe4e 	bl	8010804 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bb68:	4b31      	ldr	r3, [pc, #196]	@ (800bc30 <tcp_parseopt+0xe4>)
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d056      	beq.n	800bc1e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb70:	4b30      	ldr	r3, [pc, #192]	@ (800bc34 <tcp_parseopt+0xe8>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	801a      	strh	r2, [r3, #0]
 800bb76:	e046      	b.n	800bc06 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bb78:	f7ff ffb2 	bl	800bae0 <tcp_get_next_optbyte>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d006      	beq.n	800bb94 <tcp_parseopt+0x48>
 800bb86:	2b02      	cmp	r3, #2
 800bb88:	dc2a      	bgt.n	800bbe0 <tcp_parseopt+0x94>
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d042      	beq.n	800bc14 <tcp_parseopt+0xc8>
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d038      	beq.n	800bc04 <tcp_parseopt+0xb8>
 800bb92:	e025      	b.n	800bbe0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bb94:	f7ff ffa4 	bl	800bae0 <tcp_get_next_optbyte>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d13c      	bne.n	800bc18 <tcp_parseopt+0xcc>
 800bb9e:	4b25      	ldr	r3, [pc, #148]	@ (800bc34 <tcp_parseopt+0xe8>)
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a22      	ldr	r2, [pc, #136]	@ (800bc30 <tcp_parseopt+0xe4>)
 800bba6:	8812      	ldrh	r2, [r2, #0]
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	da35      	bge.n	800bc18 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bbac:	f7ff ff98 	bl	800bae0 <tcp_get_next_optbyte>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	021b      	lsls	r3, r3, #8
 800bbb4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bbb6:	f7ff ff93 	bl	800bae0 <tcp_get_next_optbyte>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	89bb      	ldrh	r3, [r7, #12]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bbc4:	89bb      	ldrh	r3, [r7, #12]
 800bbc6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bbca:	d804      	bhi.n	800bbd6 <tcp_parseopt+0x8a>
 800bbcc:	89bb      	ldrh	r3, [r7, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <tcp_parseopt+0x8a>
 800bbd2:	89ba      	ldrh	r2, [r7, #12]
 800bbd4:	e001      	b.n	800bbda <tcp_parseopt+0x8e>
 800bbd6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800bbde:	e012      	b.n	800bc06 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bbe0:	f7ff ff7e 	bl	800bae0 <tcp_get_next_optbyte>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d916      	bls.n	800bc1c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	4b10      	ldr	r3, [pc, #64]	@ (800bc34 <tcp_parseopt+0xe8>)
 800bbf4:	881b      	ldrh	r3, [r3, #0]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	3b02      	subs	r3, #2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	4b0d      	ldr	r3, [pc, #52]	@ (800bc34 <tcp_parseopt+0xe8>)
 800bc00:	801a      	strh	r2, [r3, #0]
 800bc02:	e000      	b.n	800bc06 <tcp_parseopt+0xba>
          break;
 800bc04:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bc06:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <tcp_parseopt+0xe8>)
 800bc08:	881a      	ldrh	r2, [r3, #0]
 800bc0a:	4b09      	ldr	r3, [pc, #36]	@ (800bc30 <tcp_parseopt+0xe4>)
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d3b2      	bcc.n	800bb78 <tcp_parseopt+0x2c>
 800bc12:	e004      	b.n	800bc1e <tcp_parseopt+0xd2>
          return;
 800bc14:	bf00      	nop
 800bc16:	e002      	b.n	800bc1e <tcp_parseopt+0xd2>
            return;
 800bc18:	bf00      	nop
 800bc1a:	e000      	b.n	800bc1e <tcp_parseopt+0xd2>
            return;
 800bc1c:	bf00      	nop
      }
    }
  }
}
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	08012ac0 	.word	0x08012ac0
 800bc28:	08012f24 	.word	0x08012f24
 800bc2c:	08012b0c 	.word	0x08012b0c
 800bc30:	200080e0 	.word	0x200080e0
 800bc34:	200080e8 	.word	0x200080e8

0800bc38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800bc3c:	4b05      	ldr	r3, [pc, #20]	@ (800bc54 <tcp_trigger_input_pcb_close+0x1c>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f043 0310 	orr.w	r3, r3, #16
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	4b03      	ldr	r3, [pc, #12]	@ (800bc54 <tcp_trigger_input_pcb_close+0x1c>)
 800bc48:	701a      	strb	r2, [r3, #0]
}
 800bc4a:	bf00      	nop
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr
 800bc54:	200080f9 	.word	0x200080f9

0800bc58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00a      	beq.n	800bc80 <tcp_route+0x28>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	7a1b      	ldrb	r3, [r3, #8]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	7a1b      	ldrb	r3, [r3, #8]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7fb f8b6 	bl	8006de8 <netif_get_by_index>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	e003      	b.n	800bc88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f003 fad3 	bl	800f22c <ip4_route>
 800bc86:	4603      	mov	r3, r0
  }
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800bc90:	b590      	push	{r4, r7, lr}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	603b      	str	r3, [r7, #0]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d105      	bne.n	800bcb2 <tcp_create_segment+0x22>
 800bca6:	4b43      	ldr	r3, [pc, #268]	@ (800bdb4 <tcp_create_segment+0x124>)
 800bca8:	22a3      	movs	r2, #163	@ 0xa3
 800bcaa:	4943      	ldr	r1, [pc, #268]	@ (800bdb8 <tcp_create_segment+0x128>)
 800bcac:	4843      	ldr	r0, [pc, #268]	@ (800bdbc <tcp_create_segment+0x12c>)
 800bcae:	f004 fda9 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d105      	bne.n	800bcc4 <tcp_create_segment+0x34>
 800bcb8:	4b3e      	ldr	r3, [pc, #248]	@ (800bdb4 <tcp_create_segment+0x124>)
 800bcba:	22a4      	movs	r2, #164	@ 0xa4
 800bcbc:	4940      	ldr	r1, [pc, #256]	@ (800bdc0 <tcp_create_segment+0x130>)
 800bcbe:	483f      	ldr	r0, [pc, #252]	@ (800bdbc <tcp_create_segment+0x12c>)
 800bcc0:	f004 fda0 	bl	8010804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bcc4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	b2db      	uxtb	r3, r3
 800bccc:	f003 0304 	and.w	r3, r3, #4
 800bcd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bcd2:	2003      	movs	r0, #3
 800bcd4:	f7fa fd02 	bl	80066dc <memp_malloc>
 800bcd8:	6138      	str	r0, [r7, #16]
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d104      	bne.n	800bcea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800bce0:	68b8      	ldr	r0, [r7, #8]
 800bce2:	f7fb fbe1 	bl	80074a8 <pbuf_free>
    return NULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e060      	b.n	800bdac <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bcf0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	891a      	ldrh	r2, [r3, #8]
 800bd02:	7dfb      	ldrb	r3, [r7, #23]
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d205      	bcs.n	800bd16 <tcp_create_segment+0x86>
 800bd0a:	4b2a      	ldr	r3, [pc, #168]	@ (800bdb4 <tcp_create_segment+0x124>)
 800bd0c:	22b0      	movs	r2, #176	@ 0xb0
 800bd0e:	492d      	ldr	r1, [pc, #180]	@ (800bdc4 <tcp_create_segment+0x134>)
 800bd10:	482a      	ldr	r0, [pc, #168]	@ (800bdbc <tcp_create_segment+0x12c>)
 800bd12:	f004 fd77 	bl	8010804 <iprintf>
  seg->len = p->tot_len - optlen;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	891a      	ldrh	r2, [r3, #8]
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bd26:	2114      	movs	r1, #20
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7fb fb27 	bl	800737c <pbuf_add_header>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d004      	beq.n	800bd3e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bd34:	6938      	ldr	r0, [r7, #16]
 800bd36:	f7fc ffe6 	bl	8008d06 <tcp_seg_free>
    return NULL;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e036      	b.n	800bdac <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	685a      	ldr	r2, [r3, #4]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	8ada      	ldrh	r2, [r3, #22]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	68dc      	ldr	r4, [r3, #12]
 800bd50:	4610      	mov	r0, r2
 800bd52:	f7fa f819 	bl	8005d88 <lwip_htons>
 800bd56:	4603      	mov	r3, r0
 800bd58:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8b1a      	ldrh	r2, [r3, #24]
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	68dc      	ldr	r4, [r3, #12]
 800bd62:	4610      	mov	r0, r2
 800bd64:	f7fa f810 	bl	8005d88 <lwip_htons>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	68dc      	ldr	r4, [r3, #12]
 800bd70:	6838      	ldr	r0, [r7, #0]
 800bd72:	f7fa f81e 	bl	8005db2 <lwip_htonl>
 800bd76:	4603      	mov	r3, r0
 800bd78:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	089b      	lsrs	r3, r3, #2
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	3305      	adds	r3, #5
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	031b      	lsls	r3, r3, #12
 800bd86:	b29a      	uxth	r2, r3
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	68dc      	ldr	r4, [r3, #12]
 800bd94:	4610      	mov	r0, r2
 800bd96:	f7f9 fff7 	bl	8005d88 <lwip_htons>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	749a      	strb	r2, [r3, #18]
 800bda6:	2200      	movs	r2, #0
 800bda8:	74da      	strb	r2, [r3, #19]
  return seg;
 800bdaa:	693b      	ldr	r3, [r7, #16]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	371c      	adds	r7, #28
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd90      	pop	{r4, r7, pc}
 800bdb4:	08012f40 	.word	0x08012f40
 800bdb8:	08012f74 	.word	0x08012f74
 800bdbc:	08012f94 	.word	0x08012f94
 800bdc0:	08012fbc 	.word	0x08012fbc
 800bdc4:	08012fe0 	.word	0x08012fe0

0800bdc8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	607b      	str	r3, [r7, #4]
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	73fb      	strb	r3, [r7, #15]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	81bb      	strh	r3, [r7, #12]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800bddc:	89bb      	ldrh	r3, [r7, #12]
 800bdde:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d105      	bne.n	800bdf2 <tcp_pbuf_prealloc+0x2a>
 800bde6:	4b30      	ldr	r3, [pc, #192]	@ (800bea8 <tcp_pbuf_prealloc+0xe0>)
 800bde8:	22e8      	movs	r2, #232	@ 0xe8
 800bdea:	4930      	ldr	r1, [pc, #192]	@ (800beac <tcp_pbuf_prealloc+0xe4>)
 800bdec:	4830      	ldr	r0, [pc, #192]	@ (800beb0 <tcp_pbuf_prealloc+0xe8>)
 800bdee:	f004 fd09 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d105      	bne.n	800be04 <tcp_pbuf_prealloc+0x3c>
 800bdf8:	4b2b      	ldr	r3, [pc, #172]	@ (800bea8 <tcp_pbuf_prealloc+0xe0>)
 800bdfa:	22e9      	movs	r2, #233	@ 0xe9
 800bdfc:	492d      	ldr	r1, [pc, #180]	@ (800beb4 <tcp_pbuf_prealloc+0xec>)
 800bdfe:	482c      	ldr	r0, [pc, #176]	@ (800beb0 <tcp_pbuf_prealloc+0xe8>)
 800be00:	f004 fd00 	bl	8010804 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800be04:	89ba      	ldrh	r2, [r7, #12]
 800be06:	897b      	ldrh	r3, [r7, #10]
 800be08:	429a      	cmp	r2, r3
 800be0a:	d221      	bcs.n	800be50 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800be0c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800be10:	f003 0302 	and.w	r3, r3, #2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d111      	bne.n	800be3c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800be18:	6a3b      	ldr	r3, [r7, #32]
 800be1a:	8b5b      	ldrh	r3, [r3, #26]
 800be1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800be20:	2b00      	cmp	r3, #0
 800be22:	d115      	bne.n	800be50 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800be24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d007      	beq.n	800be3c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800be34:	6a3b      	ldr	r3, [r7, #32]
 800be36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d009      	beq.n	800be50 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800be3c:	89bb      	ldrh	r3, [r7, #12]
 800be3e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800be42:	f023 0203 	bic.w	r2, r3, #3
 800be46:	897b      	ldrh	r3, [r7, #10]
 800be48:	4293      	cmp	r3, r2
 800be4a:	bf28      	it	cs
 800be4c:	4613      	movcs	r3, r2
 800be4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800be50:	8af9      	ldrh	r1, [r7, #22]
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fb f841 	bl	8006ee0 <pbuf_alloc>
 800be5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	e019      	b.n	800be9e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d006      	beq.n	800be80 <tcp_pbuf_prealloc+0xb8>
 800be72:	4b0d      	ldr	r3, [pc, #52]	@ (800bea8 <tcp_pbuf_prealloc+0xe0>)
 800be74:	f240 120b 	movw	r2, #267	@ 0x10b
 800be78:	490f      	ldr	r1, [pc, #60]	@ (800beb8 <tcp_pbuf_prealloc+0xf0>)
 800be7a:	480d      	ldr	r0, [pc, #52]	@ (800beb0 <tcp_pbuf_prealloc+0xe8>)
 800be7c:	f004 fcc2 	bl	8010804 <iprintf>
  *oversize = p->len - length;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	895a      	ldrh	r2, [r3, #10]
 800be84:	89bb      	ldrh	r3, [r7, #12]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	b29a      	uxth	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	89ba      	ldrh	r2, [r7, #12]
 800be92:	811a      	strh	r2, [r3, #8]
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	891a      	ldrh	r2, [r3, #8]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	815a      	strh	r2, [r3, #10]
  return p;
 800be9c:	693b      	ldr	r3, [r7, #16]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	08012f40 	.word	0x08012f40
 800beac:	08012ff8 	.word	0x08012ff8
 800beb0:	08012f94 	.word	0x08012f94
 800beb4:	0801301c 	.word	0x0801301c
 800beb8:	0801303c 	.word	0x0801303c

0800bebc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	460b      	mov	r3, r1
 800bec6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_write_checks+0x20>
 800bece:	4b33      	ldr	r3, [pc, #204]	@ (800bf9c <tcp_write_checks+0xe0>)
 800bed0:	f240 1233 	movw	r2, #307	@ 0x133
 800bed4:	4932      	ldr	r1, [pc, #200]	@ (800bfa0 <tcp_write_checks+0xe4>)
 800bed6:	4833      	ldr	r0, [pc, #204]	@ (800bfa4 <tcp_write_checks+0xe8>)
 800bed8:	f004 fc94 	bl	8010804 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7d1b      	ldrb	r3, [r3, #20]
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d00e      	beq.n	800bf02 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bee8:	2b07      	cmp	r3, #7
 800beea:	d00a      	beq.n	800bf02 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d006      	beq.n	800bf02 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d002      	beq.n	800bf02 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800befc:	f06f 030a 	mvn.w	r3, #10
 800bf00:	e048      	b.n	800bf94 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800bf02:	887b      	ldrh	r3, [r7, #2]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d101      	bne.n	800bf0c <tcp_write_checks+0x50>
    return ERR_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	e043      	b.n	800bf94 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800bf12:	887a      	ldrh	r2, [r7, #2]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d909      	bls.n	800bf2c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	8b5b      	ldrh	r3, [r3, #26]
 800bf1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bf26:	f04f 33ff 	mov.w	r3, #4294967295
 800bf2a:	e033      	b.n	800bf94 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	d909      	bls.n	800bf4a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	8b5b      	ldrh	r3, [r3, #26]
 800bf3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf3e:	b29a      	uxth	r2, r3
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bf44:	f04f 33ff 	mov.w	r3, #4294967295
 800bf48:	e024      	b.n	800bf94 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00f      	beq.n	800bf74 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11a      	bne.n	800bf92 <tcp_write_checks+0xd6>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d116      	bne.n	800bf92 <tcp_write_checks+0xd6>
 800bf64:	4b0d      	ldr	r3, [pc, #52]	@ (800bf9c <tcp_write_checks+0xe0>)
 800bf66:	f240 1255 	movw	r2, #341	@ 0x155
 800bf6a:	490f      	ldr	r1, [pc, #60]	@ (800bfa8 <tcp_write_checks+0xec>)
 800bf6c:	480d      	ldr	r0, [pc, #52]	@ (800bfa4 <tcp_write_checks+0xe8>)
 800bf6e:	f004 fc49 	bl	8010804 <iprintf>
 800bf72:	e00e      	b.n	800bf92 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d103      	bne.n	800bf84 <tcp_write_checks+0xc8>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d006      	beq.n	800bf92 <tcp_write_checks+0xd6>
 800bf84:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <tcp_write_checks+0xe0>)
 800bf86:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800bf8a:	4908      	ldr	r1, [pc, #32]	@ (800bfac <tcp_write_checks+0xf0>)
 800bf8c:	4805      	ldr	r0, [pc, #20]	@ (800bfa4 <tcp_write_checks+0xe8>)
 800bf8e:	f004 fc39 	bl	8010804 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bf92:	2300      	movs	r3, #0
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3708      	adds	r7, #8
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	08012f40 	.word	0x08012f40
 800bfa0:	08013050 	.word	0x08013050
 800bfa4:	08012f94 	.word	0x08012f94
 800bfa8:	08013070 	.word	0x08013070
 800bfac:	080130ac 	.word	0x080130ac

0800bfb0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bfb0:	b590      	push	{r4, r7, lr}
 800bfb2:	b09b      	sub	sp, #108	@ 0x6c
 800bfb4:	af04      	add	r7, sp, #16
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	4611      	mov	r1, r2
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	80fb      	strh	r3, [r7, #6]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfce:	2300      	movs	r3, #0
 800bfd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bfea:	2300      	movs	r3, #0
 800bfec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bfee:	2300      	movs	r3, #0
 800bff0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d109      	bne.n	800c00c <tcp_write+0x5c>
 800bff8:	4ba4      	ldr	r3, [pc, #656]	@ (800c28c <tcp_write+0x2dc>)
 800bffa:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800bffe:	49a4      	ldr	r1, [pc, #656]	@ (800c290 <tcp_write+0x2e0>)
 800c000:	48a4      	ldr	r0, [pc, #656]	@ (800c294 <tcp_write+0x2e4>)
 800c002:	f004 fbff 	bl	8010804 <iprintf>
 800c006:	f06f 030f 	mvn.w	r3, #15
 800c00a:	e32a      	b.n	800c662 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c01a:	4293      	cmp	r3, r2
 800c01c:	bf28      	it	cs
 800c01e:	4613      	movcs	r3, r2
 800c020:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800c022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c024:	2b00      	cmp	r3, #0
 800c026:	d102      	bne.n	800c02e <tcp_write+0x7e>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c02c:	e000      	b.n	800c030 <tcp_write+0x80>
 800c02e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c030:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d109      	bne.n	800c04c <tcp_write+0x9c>
 800c038:	4b94      	ldr	r3, [pc, #592]	@ (800c28c <tcp_write+0x2dc>)
 800c03a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800c03e:	4996      	ldr	r1, [pc, #600]	@ (800c298 <tcp_write+0x2e8>)
 800c040:	4894      	ldr	r0, [pc, #592]	@ (800c294 <tcp_write+0x2e4>)
 800c042:	f004 fbdf 	bl	8010804 <iprintf>
 800c046:	f06f 030f 	mvn.w	r3, #15
 800c04a:	e30a      	b.n	800c662 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800c04c:	88fb      	ldrh	r3, [r7, #6]
 800c04e:	4619      	mov	r1, r3
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff ff33 	bl	800bebc <tcp_write_checks>
 800c056:	4603      	mov	r3, r0
 800c058:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800c05c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <tcp_write+0xba>
    return err;
 800c064:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800c068:	e2fb      	b.n	800c662 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c070:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c074:	2300      	movs	r3, #0
 800c076:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f000 80f6 	beq.w	800c270 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c088:	653b      	str	r3, [r7, #80]	@ 0x50
 800c08a:	e002      	b.n	800c092 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800c08c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1f8      	bne.n	800c08c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800c09a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c09c:	7a9b      	ldrb	r3, [r3, #10]
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f003 0304 	and.w	r3, r3, #4
 800c0a6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c0a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ac:	891b      	ldrh	r3, [r3, #8]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	8c3b      	ldrh	r3, [r7, #32]
 800c0b2:	440b      	add	r3, r1
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	da06      	bge.n	800c0c6 <tcp_write+0x116>
 800c0b8:	4b74      	ldr	r3, [pc, #464]	@ (800c28c <tcp_write+0x2dc>)
 800c0ba:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c0be:	4977      	ldr	r1, [pc, #476]	@ (800c29c <tcp_write+0x2ec>)
 800c0c0:	4874      	ldr	r0, [pc, #464]	@ (800c294 <tcp_write+0x2e4>)
 800c0c2:	f004 fb9f 	bl	8010804 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c0c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c8:	891a      	ldrh	r2, [r3, #8]
 800c0ca:	8c3b      	ldrh	r3, [r7, #32]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c0d2:	1ad3      	subs	r3, r2, r3
 800c0d4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c0dc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800c0de:	8a7b      	ldrh	r3, [r7, #18]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d026      	beq.n	800c132 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c0e4:	8a7b      	ldrh	r3, [r7, #18]
 800c0e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d206      	bcs.n	800c0fa <tcp_write+0x14a>
 800c0ec:	4b67      	ldr	r3, [pc, #412]	@ (800c28c <tcp_write+0x2dc>)
 800c0ee:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800c0f2:	496b      	ldr	r1, [pc, #428]	@ (800c2a0 <tcp_write+0x2f0>)
 800c0f4:	4867      	ldr	r0, [pc, #412]	@ (800c294 <tcp_write+0x2e4>)
 800c0f6:	f004 fb85 	bl	8010804 <iprintf>
      seg = last_unsent;
 800c0fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c0fe:	8a7b      	ldrh	r3, [r7, #18]
 800c100:	88fa      	ldrh	r2, [r7, #6]
 800c102:	4293      	cmp	r3, r2
 800c104:	bf28      	it	cs
 800c106:	4613      	movcs	r3, r2
 800c108:	b29b      	uxth	r3, r3
 800c10a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c10c:	4293      	cmp	r3, r2
 800c10e:	bf28      	it	cs
 800c110:	4613      	movcs	r3, r2
 800c112:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800c114:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c118:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c11a:	4413      	add	r3, r2
 800c11c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800c120:	8a7a      	ldrh	r2, [r7, #18]
 800c122:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	b29b      	uxth	r3, r3
 800c128:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800c12a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c12c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c132:	8a7b      	ldrh	r3, [r7, #18]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00b      	beq.n	800c150 <tcp_write+0x1a0>
 800c138:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c13c:	88fb      	ldrh	r3, [r7, #6]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d006      	beq.n	800c150 <tcp_write+0x1a0>
 800c142:	4b52      	ldr	r3, [pc, #328]	@ (800c28c <tcp_write+0x2dc>)
 800c144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c148:	4956      	ldr	r1, [pc, #344]	@ (800c2a4 <tcp_write+0x2f4>)
 800c14a:	4852      	ldr	r0, [pc, #328]	@ (800c294 <tcp_write+0x2e4>)
 800c14c:	f004 fb5a 	bl	8010804 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c154:	88fb      	ldrh	r3, [r7, #6]
 800c156:	429a      	cmp	r2, r3
 800c158:	f080 8167 	bcs.w	800c42a <tcp_write+0x47a>
 800c15c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 8163 	beq.w	800c42a <tcp_write+0x47a>
 800c164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c166:	891b      	ldrh	r3, [r3, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	f000 815e 	beq.w	800c42a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c16e:	88fa      	ldrh	r2, [r7, #6]
 800c170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c174:	1ad2      	subs	r2, r2, r3
 800c176:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c178:	4293      	cmp	r3, r2
 800c17a:	bfa8      	it	ge
 800c17c:	4613      	movge	r3, r2
 800c17e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800c180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c182:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c184:	797b      	ldrb	r3, [r7, #5]
 800c186:	f003 0301 	and.w	r3, r3, #1
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d027      	beq.n	800c1de <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c18e:	f107 0012 	add.w	r0, r7, #18
 800c192:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c194:	8bf9      	ldrh	r1, [r7, #30]
 800c196:	2301      	movs	r3, #1
 800c198:	9302      	str	r3, [sp, #8]
 800c19a:	797b      	ldrb	r3, [r7, #5]
 800c19c:	9301      	str	r3, [sp, #4]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f7ff fe0f 	bl	800bdc8 <tcp_pbuf_prealloc>
 800c1aa:	6578      	str	r0, [r7, #84]	@ 0x54
 800c1ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	f000 8225 	beq.w	800c5fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c1b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1b6:	6858      	ldr	r0, [r3, #4]
 800c1b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	4413      	add	r3, r2
 800c1c0:	8bfa      	ldrh	r2, [r7, #30]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	f004 fc17 	bl	80109f6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800c1c8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c1ca:	f7fb f9f5 	bl	80075b8 <pbuf_clen>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c1d6:	4413      	add	r3, r2
 800c1d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c1dc:	e041      	b.n	800c262 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1e4:	e002      	b.n	800c1ec <tcp_write+0x23c>
 800c1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d1f8      	bne.n	800c1e6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f6:	7b1b      	ldrb	r3, [r3, #12]
 800c1f8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d115      	bne.n	800c22c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c206:	8952      	ldrh	r2, [r2, #10]
 800c208:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d10d      	bne.n	800c22c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c214:	2b00      	cmp	r3, #0
 800c216:	d006      	beq.n	800c226 <tcp_write+0x276>
 800c218:	4b1c      	ldr	r3, [pc, #112]	@ (800c28c <tcp_write+0x2dc>)
 800c21a:	f240 2231 	movw	r2, #561	@ 0x231
 800c21e:	4922      	ldr	r1, [pc, #136]	@ (800c2a8 <tcp_write+0x2f8>)
 800c220:	481c      	ldr	r0, [pc, #112]	@ (800c294 <tcp_write+0x2e4>)
 800c222:	f004 faef 	bl	8010804 <iprintf>
          extendlen = seglen;
 800c226:	8bfb      	ldrh	r3, [r7, #30]
 800c228:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c22a:	e01a      	b.n	800c262 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c22c:	8bfb      	ldrh	r3, [r7, #30]
 800c22e:	2201      	movs	r2, #1
 800c230:	4619      	mov	r1, r3
 800c232:	2000      	movs	r0, #0
 800c234:	f7fa fe54 	bl	8006ee0 <pbuf_alloc>
 800c238:	6578      	str	r0, [r7, #84]	@ 0x54
 800c23a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f000 81e0 	beq.w	800c602 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800c242:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	441a      	add	r2, r3
 800c24a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c24c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800c24e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c250:	f7fb f9b2 	bl	80075b8 <pbuf_clen>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c25c:	4413      	add	r3, r2
 800c25e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800c262:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c266:	8bfb      	ldrh	r3, [r7, #30]
 800c268:	4413      	add	r3, r2
 800c26a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c26e:	e0dc      	b.n	800c42a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80d7 	beq.w	800c42a <tcp_write+0x47a>
 800c27c:	4b03      	ldr	r3, [pc, #12]	@ (800c28c <tcp_write+0x2dc>)
 800c27e:	f240 224a 	movw	r2, #586	@ 0x24a
 800c282:	490a      	ldr	r1, [pc, #40]	@ (800c2ac <tcp_write+0x2fc>)
 800c284:	4803      	ldr	r0, [pc, #12]	@ (800c294 <tcp_write+0x2e4>)
 800c286:	f004 fabd 	bl	8010804 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800c28a:	e0ce      	b.n	800c42a <tcp_write+0x47a>
 800c28c:	08012f40 	.word	0x08012f40
 800c290:	080130e0 	.word	0x080130e0
 800c294:	08012f94 	.word	0x08012f94
 800c298:	080130f8 	.word	0x080130f8
 800c29c:	0801312c 	.word	0x0801312c
 800c2a0:	08013144 	.word	0x08013144
 800c2a4:	08013164 	.word	0x08013164
 800c2a8:	08013184 	.word	0x08013184
 800c2ac:	080131b0 	.word	0x080131b0
    struct pbuf *p;
    u16_t left = len - pos;
 800c2b0:	88fa      	ldrh	r2, [r7, #6]
 800c2b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800c2ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c2c6:	8b7a      	ldrh	r2, [r7, #26]
 800c2c8:	8bbb      	ldrh	r3, [r7, #28]
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bf28      	it	cs
 800c2ce:	4613      	movcs	r3, r2
 800c2d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c2d2:	797b      	ldrb	r3, [r7, #5]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d036      	beq.n	800c34a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c2dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c2e0:	b29a      	uxth	r2, r3
 800c2e2:	8b3b      	ldrh	r3, [r7, #24]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	b299      	uxth	r1, r3
 800c2e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bf0c      	ite	eq
 800c2ee:	2301      	moveq	r3, #1
 800c2f0:	2300      	movne	r3, #0
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f107 0012 	add.w	r0, r7, #18
 800c2f8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	797b      	ldrb	r3, [r7, #5]
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	4603      	mov	r3, r0
 800c306:	2036      	movs	r0, #54	@ 0x36
 800c308:	f7ff fd5e 	bl	800bdc8 <tcp_pbuf_prealloc>
 800c30c:	6338      	str	r0, [r7, #48]	@ 0x30
 800c30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 8178 	beq.w	800c606 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c318:	895b      	ldrh	r3, [r3, #10]
 800c31a:	8b3a      	ldrh	r2, [r7, #24]
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d906      	bls.n	800c32e <tcp_write+0x37e>
 800c320:	4b8c      	ldr	r3, [pc, #560]	@ (800c554 <tcp_write+0x5a4>)
 800c322:	f240 2266 	movw	r2, #614	@ 0x266
 800c326:	498c      	ldr	r1, [pc, #560]	@ (800c558 <tcp_write+0x5a8>)
 800c328:	488c      	ldr	r0, [pc, #560]	@ (800c55c <tcp_write+0x5ac>)
 800c32a:	f004 fa6b 	bl	8010804 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c336:	18d0      	adds	r0, r2, r3
 800c338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	4413      	add	r3, r2
 800c340:	8b3a      	ldrh	r2, [r7, #24]
 800c342:	4619      	mov	r1, r3
 800c344:	f004 fb57 	bl	80109f6 <memcpy>
 800c348:	e02f      	b.n	800c3aa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c34a:	8a7b      	ldrh	r3, [r7, #18]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d006      	beq.n	800c35e <tcp_write+0x3ae>
 800c350:	4b80      	ldr	r3, [pc, #512]	@ (800c554 <tcp_write+0x5a4>)
 800c352:	f240 2271 	movw	r2, #625	@ 0x271
 800c356:	4982      	ldr	r1, [pc, #520]	@ (800c560 <tcp_write+0x5b0>)
 800c358:	4880      	ldr	r0, [pc, #512]	@ (800c55c <tcp_write+0x5ac>)
 800c35a:	f004 fa53 	bl	8010804 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c35e:	8b3b      	ldrh	r3, [r7, #24]
 800c360:	2201      	movs	r2, #1
 800c362:	4619      	mov	r1, r3
 800c364:	2036      	movs	r0, #54	@ 0x36
 800c366:	f7fa fdbb 	bl	8006ee0 <pbuf_alloc>
 800c36a:	6178      	str	r0, [r7, #20]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	f000 814b 	beq.w	800c60a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800c374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	441a      	add	r2, r3
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c380:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800c384:	b29b      	uxth	r3, r3
 800c386:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c38a:	4619      	mov	r1, r3
 800c38c:	2036      	movs	r0, #54	@ 0x36
 800c38e:	f7fa fda7 	bl	8006ee0 <pbuf_alloc>
 800c392:	6338      	str	r0, [r7, #48]	@ 0x30
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	2b00      	cmp	r3, #0
 800c398:	d103      	bne.n	800c3a2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f7fb f884 	bl	80074a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800c3a0:	e136      	b.n	800c610 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800c3a2:	6979      	ldr	r1, [r7, #20]
 800c3a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3a6:	f7fb f941 	bl	800762c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800c3aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3ac:	f7fb f904 	bl	80075b8 <pbuf_clen>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800c3be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c3c2:	2b09      	cmp	r3, #9
 800c3c4:	d903      	bls.n	800c3ce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800c3c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3c8:	f7fb f86e 	bl	80074a8 <pbuf_free>
      goto memerr;
 800c3cc:	e120      	b.n	800c610 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c3d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3d6:	441a      	add	r2, r3
 800c3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3dc:	9300      	str	r3, [sp, #0]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff fc53 	bl	800bc90 <tcp_create_segment>
 800c3ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f000 810d 	beq.w	800c60e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800c3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <tcp_write+0x450>
      queue = seg;
 800c3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3fe:	e00c      	b.n	800c41a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800c400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <tcp_write+0x464>
 800c406:	4b53      	ldr	r3, [pc, #332]	@ (800c554 <tcp_write+0x5a4>)
 800c408:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c40c:	4955      	ldr	r1, [pc, #340]	@ (800c564 <tcp_write+0x5b4>)
 800c40e:	4853      	ldr	r0, [pc, #332]	@ (800c55c <tcp_write+0x5ac>)
 800c410:	f004 f9f8 	bl	8010804 <iprintf>
      prev_seg->next = seg;
 800c414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c418:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800c41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c41c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800c41e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c422:	8b3b      	ldrh	r3, [r7, #24]
 800c424:	4413      	add	r3, r2
 800c426:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800c42a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	429a      	cmp	r2, r3
 800c432:	f4ff af3d 	bcc.w	800c2b0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c436:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d02c      	beq.n	800c496 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c442:	e01e      	b.n	800c482 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800c444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c446:	891a      	ldrh	r2, [r3, #8]
 800c448:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c44a:	4413      	add	r3, r2
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c450:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d110      	bne.n	800c47c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c460:	8952      	ldrh	r2, [r2, #10]
 800c462:	4413      	add	r3, r2
 800c464:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f004 fac4 	bl	80109f6 <memcpy>
        p->len += oversize_used;
 800c46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c470:	895a      	ldrh	r2, [r3, #10]
 800c472:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c474:	4413      	add	r3, r2
 800c476:	b29a      	uxth	r2, r3
 800c478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1dd      	bne.n	800c444 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800c488:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c48a:	891a      	ldrh	r2, [r3, #8]
 800c48c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c48e:	4413      	add	r3, r2
 800c490:	b29a      	uxth	r2, r3
 800c492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c494:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c496:	8a7a      	ldrh	r2, [r7, #18]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d018      	beq.n	800c4d6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d106      	bne.n	800c4b8 <tcp_write+0x508>
 800c4aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c554 <tcp_write+0x5a4>)
 800c4ac:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800c4b0:	492d      	ldr	r1, [pc, #180]	@ (800c568 <tcp_write+0x5b8>)
 800c4b2:	482a      	ldr	r0, [pc, #168]	@ (800c55c <tcp_write+0x5ac>)
 800c4b4:	f004 f9a6 	bl	8010804 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c4b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fb f8b4 	bl	800762c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4c6:	891a      	ldrh	r2, [r3, #8]
 800c4c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4ca:	891b      	ldrh	r3, [r3, #8]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d2:	811a      	strh	r2, [r3, #8]
 800c4d4:	e037      	b.n	800c546 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800c4d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d034      	beq.n	800c546 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <tcp_write+0x53a>
 800c4e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <tcp_write+0x548>
 800c4ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c554 <tcp_write+0x5a4>)
 800c4ec:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c4f0:	491e      	ldr	r1, [pc, #120]	@ (800c56c <tcp_write+0x5bc>)
 800c4f2:	481a      	ldr	r0, [pc, #104]	@ (800c55c <tcp_write+0x5ac>)
 800c4f4:	f004 f986 	bl	8010804 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c4f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4fe:	e009      	b.n	800c514 <tcp_write+0x564>
      p->tot_len += extendlen;
 800c500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c502:	891a      	ldrh	r2, [r3, #8]
 800c504:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c506:	4413      	add	r3, r2
 800c508:	b29a      	uxth	r2, r3
 800c50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d1f1      	bne.n	800c500 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	891a      	ldrh	r2, [r3, #8]
 800c520:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c522:	4413      	add	r3, r2
 800c524:	b29a      	uxth	r2, r3
 800c526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c528:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	895a      	ldrh	r2, [r3, #10]
 800c52e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c530:	4413      	add	r3, r2
 800c532:	b29a      	uxth	r2, r3
 800c534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c536:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c53a:	891a      	ldrh	r2, [r3, #8]
 800c53c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c53e:	4413      	add	r3, r2
 800c540:	b29a      	uxth	r2, r3
 800c542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c544:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d111      	bne.n	800c570 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c550:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c552:	e010      	b.n	800c576 <tcp_write+0x5c6>
 800c554:	08012f40 	.word	0x08012f40
 800c558:	080131e0 	.word	0x080131e0
 800c55c:	08012f94 	.word	0x08012f94
 800c560:	08013220 	.word	0x08013220
 800c564:	08013230 	.word	0x08013230
 800c568:	08013244 	.word	0x08013244
 800c56c:	0801327c 	.word	0x0801327c
  } else {
    last_unsent->next = queue;
 800c570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c574:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	441a      	add	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c588:	88fb      	ldrh	r3, [r7, #6]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800c59a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00e      	beq.n	800c5c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10a      	bne.n	800c5c6 <tcp_write+0x616>
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <tcp_write+0x616>
 800c5b8:	4b2c      	ldr	r3, [pc, #176]	@ (800c66c <tcp_write+0x6bc>)
 800c5ba:	f240 3212 	movw	r2, #786	@ 0x312
 800c5be:	492c      	ldr	r1, [pc, #176]	@ (800c670 <tcp_write+0x6c0>)
 800c5c0:	482c      	ldr	r0, [pc, #176]	@ (800c674 <tcp_write+0x6c4>)
 800c5c2:	f004 f91f 	bl	8010804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d016      	beq.n	800c5fa <tcp_write+0x64a>
 800c5cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d012      	beq.n	800c5fa <tcp_write+0x64a>
 800c5d4:	797b      	ldrb	r3, [r7, #5]
 800c5d6:	f003 0302 	and.w	r3, r3, #2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10d      	bne.n	800c5fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c5de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5e0:	68db      	ldr	r3, [r3, #12]
 800c5e2:	899b      	ldrh	r3, [r3, #12]
 800c5e4:	b29c      	uxth	r4, r3
 800c5e6:	2008      	movs	r0, #8
 800c5e8:	f7f9 fbce 	bl	8005d88 <lwip_htons>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	4322      	orrs	r2, r4
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e031      	b.n	800c662 <tcp_write+0x6b2>
          goto memerr;
 800c5fe:	bf00      	nop
 800c600:	e006      	b.n	800c610 <tcp_write+0x660>
            goto memerr;
 800c602:	bf00      	nop
 800c604:	e004      	b.n	800c610 <tcp_write+0x660>
        goto memerr;
 800c606:	bf00      	nop
 800c608:	e002      	b.n	800c610 <tcp_write+0x660>
        goto memerr;
 800c60a:	bf00      	nop
 800c60c:	e000      	b.n	800c610 <tcp_write+0x660>
      goto memerr;
 800c60e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	8b5b      	ldrh	r3, [r3, #26]
 800c614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c618:	b29a      	uxth	r2, r3
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800c624:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c626:	f7fa ff3f 	bl	80074a8 <pbuf_free>
  }
  if (queue != NULL) {
 800c62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <tcp_write+0x686>
    tcp_segs_free(queue);
 800c630:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c632:	f7fc fb53 	bl	8008cdc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00e      	beq.n	800c65e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10a      	bne.n	800c65e <tcp_write+0x6ae>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <tcp_write+0x6ae>
 800c650:	4b06      	ldr	r3, [pc, #24]	@ (800c66c <tcp_write+0x6bc>)
 800c652:	f240 3227 	movw	r2, #807	@ 0x327
 800c656:	4906      	ldr	r1, [pc, #24]	@ (800c670 <tcp_write+0x6c0>)
 800c658:	4806      	ldr	r0, [pc, #24]	@ (800c674 <tcp_write+0x6c4>)
 800c65a:	f004 f8d3 	bl	8010804 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c65e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c662:	4618      	mov	r0, r3
 800c664:	375c      	adds	r7, #92	@ 0x5c
 800c666:	46bd      	mov	sp, r7
 800c668:	bd90      	pop	{r4, r7, pc}
 800c66a:	bf00      	nop
 800c66c:	08012f40 	.word	0x08012f40
 800c670:	080132b4 	.word	0x080132b4
 800c674:	08012f94 	.word	0x08012f94

0800c678 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c678:	b590      	push	{r4, r7, lr}
 800c67a:	b08b      	sub	sp, #44	@ 0x2c
 800c67c:	af02      	add	r7, sp, #8
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c684:	2300      	movs	r3, #0
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	2300      	movs	r3, #0
 800c68a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c68c:	2300      	movs	r3, #0
 800c68e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <tcp_split_unsent_seg+0x2c>
 800c696:	4b95      	ldr	r3, [pc, #596]	@ (800c8ec <tcp_split_unsent_seg+0x274>)
 800c698:	f240 324b 	movw	r2, #843	@ 0x34b
 800c69c:	4994      	ldr	r1, [pc, #592]	@ (800c8f0 <tcp_split_unsent_seg+0x278>)
 800c69e:	4895      	ldr	r0, [pc, #596]	@ (800c8f4 <tcp_split_unsent_seg+0x27c>)
 800c6a0:	f004 f8b0 	bl	8010804 <iprintf>

  useg = pcb->unsent;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b4:	e116      	b.n	800c8e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c6b6:	887b      	ldrh	r3, [r7, #2]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c6bc:	4b8b      	ldr	r3, [pc, #556]	@ (800c8ec <tcp_split_unsent_seg+0x274>)
 800c6be:	f240 3253 	movw	r2, #851	@ 0x353
 800c6c2:	498d      	ldr	r1, [pc, #564]	@ (800c8f8 <tcp_split_unsent_seg+0x280>)
 800c6c4:	488b      	ldr	r0, [pc, #556]	@ (800c8f4 <tcp_split_unsent_seg+0x27c>)
 800c6c6:	f004 f89d 	bl	8010804 <iprintf>
    return ERR_VAL;
 800c6ca:	f06f 0305 	mvn.w	r3, #5
 800c6ce:	e109      	b.n	800c8e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	891b      	ldrh	r3, [r3, #8]
 800c6d4:	887a      	ldrh	r2, [r7, #2]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d301      	bcc.n	800c6de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e102      	b.n	800c8e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6e2:	887a      	ldrh	r2, [r7, #2]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d906      	bls.n	800c6f6 <tcp_split_unsent_seg+0x7e>
 800c6e8:	4b80      	ldr	r3, [pc, #512]	@ (800c8ec <tcp_split_unsent_seg+0x274>)
 800c6ea:	f240 325b 	movw	r2, #859	@ 0x35b
 800c6ee:	4983      	ldr	r1, [pc, #524]	@ (800c8fc <tcp_split_unsent_seg+0x284>)
 800c6f0:	4880      	ldr	r0, [pc, #512]	@ (800c8f4 <tcp_split_unsent_seg+0x27c>)
 800c6f2:	f004 f887 	bl	8010804 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	891b      	ldrh	r3, [r3, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d106      	bne.n	800c70c <tcp_split_unsent_seg+0x94>
 800c6fe:	4b7b      	ldr	r3, [pc, #492]	@ (800c8ec <tcp_split_unsent_seg+0x274>)
 800c700:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c704:	497e      	ldr	r1, [pc, #504]	@ (800c900 <tcp_split_unsent_seg+0x288>)
 800c706:	487b      	ldr	r0, [pc, #492]	@ (800c8f4 <tcp_split_unsent_seg+0x27c>)
 800c708:	f004 f87c 	bl	8010804 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	7a9b      	ldrb	r3, [r3, #10]
 800c710:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c712:	7bfb      	ldrb	r3, [r7, #15]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	b2db      	uxtb	r3, r3
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	891a      	ldrh	r2, [r3, #8]
 800c722:	887b      	ldrh	r3, [r7, #2]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c728:	7bbb      	ldrb	r3, [r7, #14]
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	89bb      	ldrh	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	b29b      	uxth	r3, r3
 800c732:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c736:	4619      	mov	r1, r3
 800c738:	2036      	movs	r0, #54	@ 0x36
 800c73a:	f7fa fbd1 	bl	8006ee0 <pbuf_alloc>
 800c73e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 80b7 	beq.w	800c8b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	891a      	ldrh	r2, [r3, #8]
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	891b      	ldrh	r3, [r3, #8]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	b29a      	uxth	r2, r3
 800c756:	887b      	ldrh	r3, [r7, #2]
 800c758:	4413      	add	r3, r2
 800c75a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	6858      	ldr	r0, [r3, #4]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	685a      	ldr	r2, [r3, #4]
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	18d1      	adds	r1, r2, r3
 800c768:	897b      	ldrh	r3, [r7, #10]
 800c76a:	89ba      	ldrh	r2, [r7, #12]
 800c76c:	f7fb f886 	bl	800787c <pbuf_copy_partial>
 800c770:	4603      	mov	r3, r0
 800c772:	461a      	mov	r2, r3
 800c774:	89bb      	ldrh	r3, [r7, #12]
 800c776:	4293      	cmp	r3, r2
 800c778:	f040 809f 	bne.w	800c8ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	899b      	ldrh	r3, [r3, #12]
 800c782:	b29b      	uxth	r3, r3
 800c784:	4618      	mov	r0, r3
 800c786:	f7f9 faff 	bl	8005d88 <lwip_htons>
 800c78a:	4603      	mov	r3, r0
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c792:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c794:	2300      	movs	r3, #0
 800c796:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c798:	7efb      	ldrb	r3, [r7, #27]
 800c79a:	f003 0308 	and.w	r3, r3, #8
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d007      	beq.n	800c7b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c7a2:	7efb      	ldrb	r3, [r7, #27]
 800c7a4:	f023 0308 	bic.w	r3, r3, #8
 800c7a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c7aa:	7ebb      	ldrb	r3, [r7, #26]
 800c7ac:	f043 0308 	orr.w	r3, r3, #8
 800c7b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c7b2:	7efb      	ldrb	r3, [r7, #27]
 800c7b4:	f003 0301 	and.w	r3, r3, #1
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d007      	beq.n	800c7cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c7bc:	7efb      	ldrb	r3, [r7, #27]
 800c7be:	f023 0301 	bic.w	r3, r3, #1
 800c7c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c7c4:	7ebb      	ldrb	r3, [r7, #26]
 800c7c6:	f043 0301 	orr.w	r3, r3, #1
 800c7ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7f9 faed 	bl	8005db2 <lwip_htonl>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	887b      	ldrh	r3, [r7, #2]
 800c7dc:	18d1      	adds	r1, r2, r3
 800c7de:	7eba      	ldrb	r2, [r7, #26]
 800c7e0:	7bfb      	ldrb	r3, [r7, #15]
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff fa51 	bl	800bc90 <tcp_create_segment>
 800c7ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d063      	beq.n	800c8be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fa fedc 	bl	80075b8 <pbuf_clen>
 800c800:	4603      	mov	r3, r0
 800c802:	461a      	mov	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c80a:	1a9b      	subs	r3, r3, r2
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	6858      	ldr	r0, [r3, #4]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	891a      	ldrh	r2, [r3, #8]
 800c81e:	89bb      	ldrh	r3, [r7, #12]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	b29b      	uxth	r3, r3
 800c824:	4619      	mov	r1, r3
 800c826:	f7fa fcb9 	bl	800719c <pbuf_realloc>
  useg->len -= remainder;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	891a      	ldrh	r2, [r3, #8]
 800c82e:	89bb      	ldrh	r3, [r7, #12]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	b29a      	uxth	r2, r3
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	899b      	ldrh	r3, [r3, #12]
 800c83e:	b29c      	uxth	r4, r3
 800c840:	7efb      	ldrb	r3, [r7, #27]
 800c842:	b29b      	uxth	r3, r3
 800c844:	4618      	mov	r0, r3
 800c846:	f7f9 fa9f 	bl	8005d88 <lwip_htons>
 800c84a:	4603      	mov	r3, r0
 800c84c:	461a      	mov	r2, r3
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	4322      	orrs	r2, r4
 800c854:	b292      	uxth	r2, r2
 800c856:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fa feab 	bl	80075b8 <pbuf_clen>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c86c:	4413      	add	r3, r2
 800c86e:	b29a      	uxth	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fa fe9c 	bl	80075b8 <pbuf_clen>
 800c880:	4603      	mov	r3, r0
 800c882:	461a      	mov	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c88a:	4413      	add	r3, r2
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	69fa      	ldr	r2, [r7, #28]
 800c8a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d103      	bne.n	800c8b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	e016      	b.n	800c8e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c8b6:	bf00      	nop
 800c8b8:	e002      	b.n	800c8c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c8ba:	bf00      	nop
 800c8bc:	e000      	b.n	800c8c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c8be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d006      	beq.n	800c8d4 <tcp_split_unsent_seg+0x25c>
 800c8c6:	4b09      	ldr	r3, [pc, #36]	@ (800c8ec <tcp_split_unsent_seg+0x274>)
 800c8c8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c8cc:	490d      	ldr	r1, [pc, #52]	@ (800c904 <tcp_split_unsent_seg+0x28c>)
 800c8ce:	4809      	ldr	r0, [pc, #36]	@ (800c8f4 <tcp_split_unsent_seg+0x27c>)
 800c8d0:	f003 ff98 	bl	8010804 <iprintf>
  if (p != NULL) {
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c8da:	6938      	ldr	r0, [r7, #16]
 800c8dc:	f7fa fde4 	bl	80074a8 <pbuf_free>
  }

  return ERR_MEM;
 800c8e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3724      	adds	r7, #36	@ 0x24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd90      	pop	{r4, r7, pc}
 800c8ec:	08012f40 	.word	0x08012f40
 800c8f0:	080132d4 	.word	0x080132d4
 800c8f4:	08012f94 	.word	0x08012f94
 800c8f8:	080132f8 	.word	0x080132f8
 800c8fc:	0801331c 	.word	0x0801331c
 800c900:	0801332c 	.word	0x0801332c
 800c904:	0801333c 	.word	0x0801333c

0800c908 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c908:	b590      	push	{r4, r7, lr}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <tcp_send_fin+0x1c>
 800c916:	4b21      	ldr	r3, [pc, #132]	@ (800c99c <tcp_send_fin+0x94>)
 800c918:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c91c:	4920      	ldr	r1, [pc, #128]	@ (800c9a0 <tcp_send_fin+0x98>)
 800c91e:	4821      	ldr	r0, [pc, #132]	@ (800c9a4 <tcp_send_fin+0x9c>)
 800c920:	f003 ff70 	bl	8010804 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d02e      	beq.n	800c98a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	e002      	b.n	800c93a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1f8      	bne.n	800c934 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	899b      	ldrh	r3, [r3, #12]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7f9 fa1c 	bl	8005d88 <lwip_htons>
 800c950:	4603      	mov	r3, r0
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0307 	and.w	r3, r3, #7
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d116      	bne.n	800c98a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	899b      	ldrh	r3, [r3, #12]
 800c962:	b29c      	uxth	r4, r3
 800c964:	2001      	movs	r0, #1
 800c966:	f7f9 fa0f 	bl	8005d88 <lwip_htons>
 800c96a:	4603      	mov	r3, r0
 800c96c:	461a      	mov	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	4322      	orrs	r2, r4
 800c974:	b292      	uxth	r2, r2
 800c976:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	8b5b      	ldrh	r3, [r3, #26]
 800c97c:	f043 0320 	orr.w	r3, r3, #32
 800c980:	b29a      	uxth	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c986:	2300      	movs	r3, #0
 800c988:	e004      	b.n	800c994 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c98a:	2101      	movs	r1, #1
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f80b 	bl	800c9a8 <tcp_enqueue_flags>
 800c992:	4603      	mov	r3, r0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd90      	pop	{r4, r7, pc}
 800c99c:	08012f40 	.word	0x08012f40
 800c9a0:	08013348 	.word	0x08013348
 800c9a4:	08012f94 	.word	0x08012f94

0800c9a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	@ 0x28
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c9bc:	78fb      	ldrb	r3, [r7, #3]
 800c9be:	f003 0303 	and.w	r3, r3, #3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d106      	bne.n	800c9d4 <tcp_enqueue_flags+0x2c>
 800c9c6:	4b67      	ldr	r3, [pc, #412]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800c9c8:	f240 4211 	movw	r2, #1041	@ 0x411
 800c9cc:	4966      	ldr	r1, [pc, #408]	@ (800cb68 <tcp_enqueue_flags+0x1c0>)
 800c9ce:	4867      	ldr	r0, [pc, #412]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800c9d0:	f003 ff18 	bl	8010804 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d106      	bne.n	800c9e8 <tcp_enqueue_flags+0x40>
 800c9da:	4b62      	ldr	r3, [pc, #392]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800c9dc:	f240 4213 	movw	r2, #1043	@ 0x413
 800c9e0:	4963      	ldr	r1, [pc, #396]	@ (800cb70 <tcp_enqueue_flags+0x1c8>)
 800c9e2:	4862      	ldr	r0, [pc, #392]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800c9e4:	f003 ff0e 	bl	8010804 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c9e8:	78fb      	ldrb	r3, [r7, #3]
 800c9ea:	f003 0302 	and.w	r3, r3, #2
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c9f6:	7ffb      	ldrb	r3, [r7, #31]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0304 	and.w	r3, r3, #4
 800ca00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	2036      	movs	r0, #54	@ 0x36
 800ca0e:	f7fa fa67 	bl	8006ee0 <pbuf_alloc>
 800ca12:	6138      	str	r0, [r7, #16]
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d109      	bne.n	800ca2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	8b5b      	ldrh	r3, [r3, #26]
 800ca1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca22:	b29a      	uxth	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ca28:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2c:	e095      	b.n	800cb5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	895a      	ldrh	r2, [r3, #10]
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d206      	bcs.n	800ca48 <tcp_enqueue_flags+0xa0>
 800ca3a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800ca3c:	f240 4239 	movw	r2, #1081	@ 0x439
 800ca40:	494c      	ldr	r1, [pc, #304]	@ (800cb74 <tcp_enqueue_flags+0x1cc>)
 800ca42:	484a      	ldr	r0, [pc, #296]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800ca44:	f003 fede 	bl	8010804 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800ca4c:	78fa      	ldrb	r2, [r7, #3]
 800ca4e:	7ffb      	ldrb	r3, [r7, #31]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	460b      	mov	r3, r1
 800ca54:	6939      	ldr	r1, [r7, #16]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff f91a 	bl	800bc90 <tcp_create_segment>
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d109      	bne.n	800ca78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8b5b      	ldrh	r3, [r3, #26]
 800ca68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ca72:	f04f 33ff 	mov.w	r3, #4294967295
 800ca76:	e070      	b.n	800cb5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	f003 0303 	and.w	r3, r3, #3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d006      	beq.n	800ca92 <tcp_enqueue_flags+0xea>
 800ca84:	4b37      	ldr	r3, [pc, #220]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800ca86:	f240 4242 	movw	r2, #1090	@ 0x442
 800ca8a:	493b      	ldr	r1, [pc, #236]	@ (800cb78 <tcp_enqueue_flags+0x1d0>)
 800ca8c:	4837      	ldr	r0, [pc, #220]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800ca8e:	f003 feb9 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	891b      	ldrh	r3, [r3, #8]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d006      	beq.n	800caa8 <tcp_enqueue_flags+0x100>
 800ca9a:	4b32      	ldr	r3, [pc, #200]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800ca9c:	f240 4243 	movw	r2, #1091	@ 0x443
 800caa0:	4936      	ldr	r1, [pc, #216]	@ (800cb7c <tcp_enqueue_flags+0x1d4>)
 800caa2:	4832      	ldr	r0, [pc, #200]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800caa4:	f003 feae 	bl	8010804 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800caac:	2b00      	cmp	r3, #0
 800caae:	d103      	bne.n	800cab8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cab6:	e00d      	b.n	800cad4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cabc:	61bb      	str	r3, [r7, #24]
 800cabe:	e002      	b.n	800cac6 <tcp_enqueue_flags+0x11e>
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1f8      	bne.n	800cac0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	68fa      	ldr	r2, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cadc:	78fb      	ldrb	r3, [r7, #3]
 800cade:	f003 0302 	and.w	r3, r3, #2
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d104      	bne.n	800caf0 <tcp_enqueue_flags+0x148>
 800cae6:	78fb      	ldrb	r3, [r7, #3]
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800cafa:	78fb      	ldrb	r3, [r7, #3]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d006      	beq.n	800cb12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8b5b      	ldrh	r3, [r3, #26]
 800cb08:	f043 0320 	orr.w	r3, r3, #32
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fa fd4e 	bl	80075b8 <pbuf_clen>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	461a      	mov	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb26:	4413      	add	r3, r2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d10a      	bne.n	800cb58 <tcp_enqueue_flags+0x1b0>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d106      	bne.n	800cb58 <tcp_enqueue_flags+0x1b0>
 800cb4a:	4b06      	ldr	r3, [pc, #24]	@ (800cb64 <tcp_enqueue_flags+0x1bc>)
 800cb4c:	f240 4265 	movw	r2, #1125	@ 0x465
 800cb50:	490b      	ldr	r1, [pc, #44]	@ (800cb80 <tcp_enqueue_flags+0x1d8>)
 800cb52:	4806      	ldr	r0, [pc, #24]	@ (800cb6c <tcp_enqueue_flags+0x1c4>)
 800cb54:	f003 fe56 	bl	8010804 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3720      	adds	r7, #32
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	08012f40 	.word	0x08012f40
 800cb68:	08013364 	.word	0x08013364
 800cb6c:	08012f94 	.word	0x08012f94
 800cb70:	080133bc 	.word	0x080133bc
 800cb74:	080133dc 	.word	0x080133dc
 800cb78:	08013418 	.word	0x08013418
 800cb7c:	08013430 	.word	0x08013430
 800cb80:	0801345c 	.word	0x0801345c

0800cb84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cb84:	b5b0      	push	{r4, r5, r7, lr}
 800cb86:	b08a      	sub	sp, #40	@ 0x28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <tcp_output+0x1c>
 800cb92:	4b8a      	ldr	r3, [pc, #552]	@ (800cdbc <tcp_output+0x238>)
 800cb94:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800cb98:	4989      	ldr	r1, [pc, #548]	@ (800cdc0 <tcp_output+0x23c>)
 800cb9a:	488a      	ldr	r0, [pc, #552]	@ (800cdc4 <tcp_output+0x240>)
 800cb9c:	f003 fe32 	bl	8010804 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7d1b      	ldrb	r3, [r3, #20]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d106      	bne.n	800cbb6 <tcp_output+0x32>
 800cba8:	4b84      	ldr	r3, [pc, #528]	@ (800cdbc <tcp_output+0x238>)
 800cbaa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800cbae:	4986      	ldr	r1, [pc, #536]	@ (800cdc8 <tcp_output+0x244>)
 800cbb0:	4884      	ldr	r0, [pc, #528]	@ (800cdc4 <tcp_output+0x240>)
 800cbb2:	f003 fe27 	bl	8010804 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cbb6:	4b85      	ldr	r3, [pc, #532]	@ (800cdcc <tcp_output+0x248>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d101      	bne.n	800cbc4 <tcp_output+0x40>
    return ERR_OK;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	e1ce      	b.n	800cf62 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	bf28      	it	cs
 800cbd4:	4613      	movcs	r3, r2
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10b      	bne.n	800cbfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8b5b      	ldrh	r3, [r3, #26]
 800cbea:	f003 0302 	and.w	r3, r3, #2
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f000 81aa 	beq.w	800cf48 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fdcb 	bl	800d790 <tcp_send_empty_ack>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	e1b1      	b.n	800cf62 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800cbfe:	6879      	ldr	r1, [r7, #4]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3304      	adds	r3, #4
 800cc04:	461a      	mov	r2, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff f826 	bl	800bc58 <tcp_route>
 800cc0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <tcp_output+0x96>
    return ERR_RTE;
 800cc14:	f06f 0303 	mvn.w	r3, #3
 800cc18:	e1a3      	b.n	800cf62 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d003      	beq.n	800cc28 <tcp_output+0xa4>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d111      	bne.n	800cc4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d002      	beq.n	800cc34 <tcp_output+0xb0>
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	3304      	adds	r3, #4
 800cc32:	e000      	b.n	800cc36 <tcp_output+0xb2>
 800cc34:	2300      	movs	r3, #0
 800cc36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d102      	bne.n	800cc44 <tcp_output+0xc0>
      return ERR_RTE;
 800cc3e:	f06f 0303 	mvn.w	r3, #3
 800cc42:	e18e      	b.n	800cf62 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	68db      	ldr	r3, [r3, #12]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7f9 f8ad 	bl	8005db2 <lwip_htonl>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc5e:	1ad3      	subs	r3, r2, r3
 800cc60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc62:	8912      	ldrh	r2, [r2, #8]
 800cc64:	4413      	add	r3, r2
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d227      	bcs.n	800ccbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc72:	461a      	mov	r2, r3
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d114      	bne.n	800cca4 <tcp_output+0x120>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d110      	bne.n	800cca4 <tcp_output+0x120>
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10b      	bne.n	800cca4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	8b5b      	ldrh	r3, [r3, #26]
 800cca8:	f003 0302 	and.w	r3, r3, #2
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 814d 	beq.w	800cf4c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fd6c 	bl	800d790 <tcp_send_empty_ack>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	e152      	b.n	800cf62 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ccca:	6a3b      	ldr	r3, [r7, #32]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f000 811c 	beq.w	800cf0a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ccd2:	e002      	b.n	800ccda <tcp_output+0x156>
 800ccd4:	6a3b      	ldr	r3, [r7, #32]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	623b      	str	r3, [r7, #32]
 800ccda:	6a3b      	ldr	r3, [r7, #32]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1f8      	bne.n	800ccd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800cce2:	e112      	b.n	800cf0a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800cce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	899b      	ldrh	r3, [r3, #12]
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7f9 f84b 	bl	8005d88 <lwip_htons>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d006      	beq.n	800cd0c <tcp_output+0x188>
 800ccfe:	4b2f      	ldr	r3, [pc, #188]	@ (800cdbc <tcp_output+0x238>)
 800cd00:	f240 5236 	movw	r2, #1334	@ 0x536
 800cd04:	4932      	ldr	r1, [pc, #200]	@ (800cdd0 <tcp_output+0x24c>)
 800cd06:	482f      	ldr	r0, [pc, #188]	@ (800cdc4 <tcp_output+0x240>)
 800cd08:	f003 fd7c 	bl	8010804 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d01f      	beq.n	800cd54 <tcp_output+0x1d0>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	8b5b      	ldrh	r3, [r3, #26]
 800cd18:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d119      	bne.n	800cd54 <tcp_output+0x1d0>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00b      	beq.n	800cd40 <tcp_output+0x1bc>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d110      	bne.n	800cd54 <tcp_output+0x1d0>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd36:	891a      	ldrh	r2, [r3, #8]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d209      	bcs.n	800cd54 <tcp_output+0x1d0>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <tcp_output+0x1d0>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cd50:	2b08      	cmp	r3, #8
 800cd52:	d901      	bls.n	800cd58 <tcp_output+0x1d4>
 800cd54:	2301      	movs	r3, #1
 800cd56:	e000      	b.n	800cd5a <tcp_output+0x1d6>
 800cd58:	2300      	movs	r3, #0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8b5b      	ldrh	r3, [r3, #26]
 800cd62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 80e4 	beq.w	800cf34 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7d1b      	ldrb	r3, [r3, #20]
 800cd70:	2b02      	cmp	r3, #2
 800cd72:	d00d      	beq.n	800cd90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	899b      	ldrh	r3, [r3, #12]
 800cd7a:	b29c      	uxth	r4, r3
 800cd7c:	2010      	movs	r0, #16
 800cd7e:	f7f9 f803 	bl	8005d88 <lwip_htons>
 800cd82:	4603      	mov	r3, r0
 800cd84:	461a      	mov	r2, r3
 800cd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	4322      	orrs	r2, r4
 800cd8c:	b292      	uxth	r2, r2
 800cd8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800cd90:	697a      	ldr	r2, [r7, #20]
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd96:	f000 f909 	bl	800cfac <tcp_output_segment>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d016      	beq.n	800cdd4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	8b5b      	ldrh	r3, [r3, #26]
 800cdaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	835a      	strh	r2, [r3, #26]
      return err;
 800cdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb8:	e0d3      	b.n	800cf62 <tcp_output+0x3de>
 800cdba:	bf00      	nop
 800cdbc:	08012f40 	.word	0x08012f40
 800cdc0:	08013484 	.word	0x08013484
 800cdc4:	08012f94 	.word	0x08012f94
 800cdc8:	0801349c 	.word	0x0801349c
 800cdcc:	20008100 	.word	0x20008100
 800cdd0:	080134c4 	.word	0x080134c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d006      	beq.n	800cdf2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	8b5b      	ldrh	r3, [r3, #26]
 800cde8:	f023 0303 	bic.w	r3, r3, #3
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f8 ffda 	bl	8005db2 <lwip_htonl>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	891b      	ldrh	r3, [r3, #8]
 800ce04:	461d      	mov	r5, r3
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	899b      	ldrh	r3, [r3, #12]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7f8 ffba 	bl	8005d88 <lwip_htons>
 800ce14:	4603      	mov	r3, r0
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <tcp_output+0x2a0>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <tcp_output+0x2a2>
 800ce24:	2300      	movs	r3, #0
 800ce26:	442b      	add	r3, r5
 800ce28:	4423      	add	r3, r4
 800ce2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	1ad3      	subs	r3, r2, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	da02      	bge.n	800ce3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	891b      	ldrh	r3, [r3, #8]
 800ce42:	461c      	mov	r4, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	899b      	ldrh	r3, [r3, #12]
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f8 ff9b 	bl	8005d88 <lwip_htons>
 800ce52:	4603      	mov	r3, r0
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	f003 0303 	and.w	r3, r3, #3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d001      	beq.n	800ce62 <tcp_output+0x2de>
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e000      	b.n	800ce64 <tcp_output+0x2e0>
 800ce62:	2300      	movs	r3, #0
 800ce64:	4423      	add	r3, r4
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d049      	beq.n	800cefe <tcp_output+0x37a>
      seg->next = NULL;
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d105      	bne.n	800ce84 <tcp_output+0x300>
        pcb->unacked = seg;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce7c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce80:	623b      	str	r3, [r7, #32]
 800ce82:	e03f      	b.n	800cf04 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f8 ff91 	bl	8005db2 <lwip_htonl>
 800ce90:	4604      	mov	r4, r0
 800ce92:	6a3b      	ldr	r3, [r7, #32]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7f8 ff8a 	bl	8005db2 <lwip_htonl>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	1ae3      	subs	r3, r4, r3
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	da24      	bge.n	800cef0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3370      	adds	r3, #112	@ 0x70
 800ceaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ceac:	e002      	b.n	800ceb4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d011      	beq.n	800cee0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7f8 ff74 	bl	8005db2 <lwip_htonl>
 800ceca:	4604      	mov	r4, r0
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7f8 ff6d 	bl	8005db2 <lwip_htonl>
 800ced8:	4603      	mov	r3, r0
 800ceda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cedc:	2b00      	cmp	r3, #0
 800cede:	dbe6      	blt.n	800ceae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	e009      	b.n	800cf04 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cef4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	623b      	str	r3, [r7, #32]
 800cefc:	e002      	b.n	800cf04 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cefe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf00:	f7fb ff01 	bl	8008d06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf08:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d012      	beq.n	800cf36 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	4618      	mov	r0, r3
 800cf18:	f7f8 ff4b 	bl	8005db2 <lwip_htonl>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf26:	8912      	ldrh	r2, [r2, #8]
 800cf28:	4413      	add	r3, r2
  while (seg != NULL &&
 800cf2a:	69ba      	ldr	r2, [r7, #24]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	f4bf aed9 	bcs.w	800cce4 <tcp_output+0x160>
 800cf32:	e000      	b.n	800cf36 <tcp_output+0x3b2>
      break;
 800cf34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d108      	bne.n	800cf50 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800cf46:	e004      	b.n	800cf52 <tcp_output+0x3ce>
    goto output_done;
 800cf48:	bf00      	nop
 800cf4a:	e002      	b.n	800cf52 <tcp_output+0x3ce>
    goto output_done;
 800cf4c:	bf00      	nop
 800cf4e:	e000      	b.n	800cf52 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cf50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	8b5b      	ldrh	r3, [r3, #26]
 800cf56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3728      	adds	r7, #40	@ 0x28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bdb0      	pop	{r4, r5, r7, pc}
 800cf6a:	bf00      	nop

0800cf6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d106      	bne.n	800cf88 <tcp_output_segment_busy+0x1c>
 800cf7a:	4b09      	ldr	r3, [pc, #36]	@ (800cfa0 <tcp_output_segment_busy+0x34>)
 800cf7c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800cf80:	4908      	ldr	r1, [pc, #32]	@ (800cfa4 <tcp_output_segment_busy+0x38>)
 800cf82:	4809      	ldr	r0, [pc, #36]	@ (800cfa8 <tcp_output_segment_busy+0x3c>)
 800cf84:	f003 fc3e 	bl	8010804 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	7b9b      	ldrb	r3, [r3, #14]
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d001      	beq.n	800cf96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e000      	b.n	800cf98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	08012f40 	.word	0x08012f40
 800cfa4:	080134dc 	.word	0x080134dc
 800cfa8:	08012f94 	.word	0x08012f94

0800cfac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cfac:	b5b0      	push	{r4, r5, r7, lr}
 800cfae:	b08c      	sub	sp, #48	@ 0x30
 800cfb0:	af04      	add	r7, sp, #16
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <tcp_output_segment+0x20>
 800cfbe:	4b64      	ldr	r3, [pc, #400]	@ (800d150 <tcp_output_segment+0x1a4>)
 800cfc0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800cfc4:	4963      	ldr	r1, [pc, #396]	@ (800d154 <tcp_output_segment+0x1a8>)
 800cfc6:	4864      	ldr	r0, [pc, #400]	@ (800d158 <tcp_output_segment+0x1ac>)
 800cfc8:	f003 fc1c 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d106      	bne.n	800cfe0 <tcp_output_segment+0x34>
 800cfd2:	4b5f      	ldr	r3, [pc, #380]	@ (800d150 <tcp_output_segment+0x1a4>)
 800cfd4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800cfd8:	4960      	ldr	r1, [pc, #384]	@ (800d15c <tcp_output_segment+0x1b0>)
 800cfda:	485f      	ldr	r0, [pc, #380]	@ (800d158 <tcp_output_segment+0x1ac>)
 800cfdc:	f003 fc12 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <tcp_output_segment+0x48>
 800cfe6:	4b5a      	ldr	r3, [pc, #360]	@ (800d150 <tcp_output_segment+0x1a4>)
 800cfe8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800cfec:	495c      	ldr	r1, [pc, #368]	@ (800d160 <tcp_output_segment+0x1b4>)
 800cfee:	485a      	ldr	r0, [pc, #360]	@ (800d158 <tcp_output_segment+0x1ac>)
 800cff0:	f003 fc08 	bl	8010804 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f7ff ffb9 	bl	800cf6c <tcp_output_segment_busy>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800d000:	2300      	movs	r3, #0
 800d002:	e0a1      	b.n	800d148 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	68dc      	ldr	r4, [r3, #12]
 800d00c:	4610      	mov	r0, r2
 800d00e:	f7f8 fed0 	bl	8005db2 <lwip_htonl>
 800d012:	4603      	mov	r3, r0
 800d014:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	68dc      	ldr	r4, [r3, #12]
 800d01e:	4610      	mov	r0, r2
 800d020:	f7f8 feb2 	bl	8005d88 <lwip_htons>
 800d024:	4603      	mov	r3, r0
 800d026:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d030:	441a      	add	r2, r3
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	3314      	adds	r3, #20
 800d03c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	7a9b      	ldrb	r3, [r3, #10]
 800d042:	f003 0301 	and.w	r3, r3, #1
 800d046:	2b00      	cmp	r3, #0
 800d048:	d015      	beq.n	800d076 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3304      	adds	r3, #4
 800d04e:	461a      	mov	r2, r3
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800d056:	f7fc fa39 	bl	80094cc <tcp_eff_send_mss_netif>
 800d05a:	4603      	mov	r3, r0
 800d05c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d05e:	8b7b      	ldrh	r3, [r7, #26]
 800d060:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800d064:	4618      	mov	r0, r3
 800d066:	f7f8 fea4 	bl	8005db2 <lwip_htonl>
 800d06a:	4602      	mov	r2, r0
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	3304      	adds	r3, #4
 800d074:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	da02      	bge.n	800d086 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2200      	movs	r2, #0
 800d084:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d10c      	bne.n	800d0a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800d08e:	4b35      	ldr	r3, [pc, #212]	@ (800d164 <tcp_output_segment+0x1b8>)
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	685b      	ldr	r3, [r3, #4]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f8 fe88 	bl	8005db2 <lwip_htonl>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68da      	ldr	r2, [r3, #12]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	685b      	ldr	r3, [r3, #4]
 800d0b2:	1ad3      	subs	r3, r2, r3
 800d0b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	8959      	ldrh	r1, [r3, #10]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	8b3a      	ldrh	r2, [r7, #24]
 800d0c2:	1a8a      	subs	r2, r1, r2
 800d0c4:	b292      	uxth	r2, r2
 800d0c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	8919      	ldrh	r1, [r3, #8]
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	8b3a      	ldrh	r2, [r7, #24]
 800d0d4:	1a8a      	subs	r2, r1, r2
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	68d2      	ldr	r2, [r2, #12]
 800d0e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	741a      	strb	r2, [r3, #16]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	7a9b      	ldrb	r3, [r3, #10]
 800d0f8:	f003 0301 	and.w	r3, r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <tcp_output_segment+0x158>
 800d100:	2318      	movs	r3, #24
 800d102:	e000      	b.n	800d106 <tcp_output_segment+0x15a>
 800d104:	2314      	movs	r3, #20
 800d106:	4413      	add	r3, r2
 800d108:	69fa      	ldr	r2, [r7, #28]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d006      	beq.n	800d11c <tcp_output_segment+0x170>
 800d10e:	4b10      	ldr	r3, [pc, #64]	@ (800d150 <tcp_output_segment+0x1a4>)
 800d110:	f240 621c 	movw	r2, #1564	@ 0x61c
 800d114:	4914      	ldr	r1, [pc, #80]	@ (800d168 <tcp_output_segment+0x1bc>)
 800d116:	4810      	ldr	r0, [pc, #64]	@ (800d158 <tcp_output_segment+0x1ac>)
 800d118:	f003 fb74 	bl	8010804 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6858      	ldr	r0, [r3, #4]
 800d120:	68b9      	ldr	r1, [r7, #8]
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	1d1c      	adds	r4, r3, #4
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	7add      	ldrb	r5, [r3, #11]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	7a9b      	ldrb	r3, [r3, #10]
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	9202      	str	r2, [sp, #8]
 800d132:	2206      	movs	r2, #6
 800d134:	9201      	str	r2, [sp, #4]
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	462b      	mov	r3, r5
 800d13a:	4622      	mov	r2, r4
 800d13c:	f002 fa34 	bl	800f5a8 <ip4_output_if>
 800d140:	4603      	mov	r3, r0
 800d142:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800d144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3720      	adds	r7, #32
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bdb0      	pop	{r4, r5, r7, pc}
 800d150:	08012f40 	.word	0x08012f40
 800d154:	08013504 	.word	0x08013504
 800d158:	08012f94 	.word	0x08012f94
 800d15c:	08013524 	.word	0x08013524
 800d160:	08013544 	.word	0x08013544
 800d164:	200080b4 	.word	0x200080b4
 800d168:	08013568 	.word	0x08013568

0800d16c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800d16c:	b5b0      	push	{r4, r5, r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <tcp_rexmit_rto_prepare+0x1c>
 800d17a:	4b31      	ldr	r3, [pc, #196]	@ (800d240 <tcp_rexmit_rto_prepare+0xd4>)
 800d17c:	f240 6263 	movw	r2, #1635	@ 0x663
 800d180:	4930      	ldr	r1, [pc, #192]	@ (800d244 <tcp_rexmit_rto_prepare+0xd8>)
 800d182:	4831      	ldr	r0, [pc, #196]	@ (800d248 <tcp_rexmit_rto_prepare+0xdc>)
 800d184:	f003 fb3e 	bl	8010804 <iprintf>

  if (pcb->unacked == NULL) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d102      	bne.n	800d196 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800d190:	f06f 0305 	mvn.w	r3, #5
 800d194:	e050      	b.n	800d238 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	e00b      	b.n	800d1b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff fee4 	bl	800cf6c <tcp_output_segment_busy>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800d1aa:	f06f 0305 	mvn.w	r3, #5
 800d1ae:	e043      	b.n	800d238 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	60fb      	str	r3, [r7, #12]
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1ef      	bne.n	800d19e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800d1be:	68f8      	ldr	r0, [r7, #12]
 800d1c0:	f7ff fed4 	bl	800cf6c <tcp_output_segment_busy>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d002      	beq.n	800d1d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800d1ca:	f06f 0305 	mvn.w	r3, #5
 800d1ce:	e033      	b.n	800d238 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7f8 fdd9 	bl	8005db2 <lwip_htonl>
 800d200:	4604      	mov	r4, r0
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	461d      	mov	r5, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	899b      	ldrh	r3, [r3, #12]
 800d20e:	b29b      	uxth	r3, r3
 800d210:	4618      	mov	r0, r3
 800d212:	f7f8 fdb9 	bl	8005d88 <lwip_htons>
 800d216:	4603      	mov	r3, r0
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d001      	beq.n	800d226 <tcp_rexmit_rto_prepare+0xba>
 800d222:	2301      	movs	r3, #1
 800d224:	e000      	b.n	800d228 <tcp_rexmit_rto_prepare+0xbc>
 800d226:	2300      	movs	r3, #0
 800d228:	442b      	add	r3, r5
 800d22a:	18e2      	adds	r2, r4, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bdb0      	pop	{r4, r5, r7, pc}
 800d240:	08012f40 	.word	0x08012f40
 800d244:	0801357c 	.word	0x0801357c
 800d248:	08012f94 	.word	0x08012f94

0800d24c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d106      	bne.n	800d268 <tcp_rexmit_rto_commit+0x1c>
 800d25a:	4b0d      	ldr	r3, [pc, #52]	@ (800d290 <tcp_rexmit_rto_commit+0x44>)
 800d25c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d260:	490c      	ldr	r1, [pc, #48]	@ (800d294 <tcp_rexmit_rto_commit+0x48>)
 800d262:	480d      	ldr	r0, [pc, #52]	@ (800d298 <tcp_rexmit_rto_commit+0x4c>)
 800d264:	f003 face 	bl	8010804 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d26e:	2bff      	cmp	r3, #255	@ 0xff
 800d270:	d007      	beq.n	800d282 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d278:	3301      	adds	r3, #1
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff fc7e 	bl	800cb84 <tcp_output>
}
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}
 800d290:	08012f40 	.word	0x08012f40
 800d294:	080135a0 	.word	0x080135a0
 800d298:	08012f94 	.word	0x08012f94

0800d29c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <tcp_rexmit_rto+0x1c>
 800d2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d4 <tcp_rexmit_rto+0x38>)
 800d2ac:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800d2b0:	4909      	ldr	r1, [pc, #36]	@ (800d2d8 <tcp_rexmit_rto+0x3c>)
 800d2b2:	480a      	ldr	r0, [pc, #40]	@ (800d2dc <tcp_rexmit_rto+0x40>)
 800d2b4:	f003 faa6 	bl	8010804 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff ff57 	bl	800d16c <tcp_rexmit_rto_prepare>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d102      	bne.n	800d2ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ffc1 	bl	800d24c <tcp_rexmit_rto_commit>
  }
}
 800d2ca:	bf00      	nop
 800d2cc:	3708      	adds	r7, #8
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08012f40 	.word	0x08012f40
 800d2d8:	080135c4 	.word	0x080135c4
 800d2dc:	08012f94 	.word	0x08012f94

0800d2e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d2e0:	b590      	push	{r4, r7, lr}
 800d2e2:	b085      	sub	sp, #20
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <tcp_rexmit+0x1c>
 800d2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800d3ac <tcp_rexmit+0xcc>)
 800d2f0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800d2f4:	492e      	ldr	r1, [pc, #184]	@ (800d3b0 <tcp_rexmit+0xd0>)
 800d2f6:	482f      	ldr	r0, [pc, #188]	@ (800d3b4 <tcp_rexmit+0xd4>)
 800d2f8:	f003 fa84 	bl	8010804 <iprintf>

  if (pcb->unacked == NULL) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d300:	2b00      	cmp	r3, #0
 800d302:	d102      	bne.n	800d30a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800d304:	f06f 0305 	mvn.w	r3, #5
 800d308:	e04c      	b.n	800d3a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d30e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800d310:	68b8      	ldr	r0, [r7, #8]
 800d312:	f7ff fe2b 	bl	800cf6c <tcp_output_segment_busy>
 800d316:	4603      	mov	r3, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d002      	beq.n	800d322 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800d31c:	f06f 0305 	mvn.w	r3, #5
 800d320:	e040      	b.n	800d3a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	336c      	adds	r3, #108	@ 0x6c
 800d32e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d330:	e002      	b.n	800d338 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d011      	beq.n	800d364 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f8 fd32 	bl	8005db2 <lwip_htonl>
 800d34e:	4604      	mov	r4, r0
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	68db      	ldr	r3, [r3, #12]
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	4618      	mov	r0, r3
 800d358:	f7f8 fd2b 	bl	8005db2 <lwip_htonl>
 800d35c:	4603      	mov	r3, r0
 800d35e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800d360:	2b00      	cmp	r3, #0
 800d362:	dbe6      	blt.n	800d332 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d103      	bne.n	800d382 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d388:	2bff      	cmp	r3, #255	@ 0xff
 800d38a:	d007      	beq.n	800d39c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d392:	3301      	adds	r3, #1
 800d394:	b2da      	uxtb	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd90      	pop	{r4, r7, pc}
 800d3ac:	08012f40 	.word	0x08012f40
 800d3b0:	080135e0 	.word	0x080135e0
 800d3b4:	08012f94 	.word	0x08012f94

0800d3b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d106      	bne.n	800d3d4 <tcp_rexmit_fast+0x1c>
 800d3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800d470 <tcp_rexmit_fast+0xb8>)
 800d3c8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800d3cc:	4929      	ldr	r1, [pc, #164]	@ (800d474 <tcp_rexmit_fast+0xbc>)
 800d3ce:	482a      	ldr	r0, [pc, #168]	@ (800d478 <tcp_rexmit_fast+0xc0>)
 800d3d0:	f003 fa18 	bl	8010804 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d045      	beq.n	800d468 <tcp_rexmit_fast+0xb0>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	8b5b      	ldrh	r3, [r3, #26]
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d13f      	bne.n	800d468 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f7ff ff79 	bl	800d2e0 <tcp_rexmit>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d139      	bne.n	800d468 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d400:	4293      	cmp	r3, r2
 800d402:	bf28      	it	cs
 800d404:	4613      	movcs	r3, r2
 800d406:	b29b      	uxth	r3, r3
 800d408:	2b00      	cmp	r3, #0
 800d40a:	da00      	bge.n	800d40e <tcp_rexmit_fast+0x56>
 800d40c:	3301      	adds	r3, #1
 800d40e:	105b      	asrs	r3, r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d41e:	461a      	mov	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d424:	005b      	lsls	r3, r3, #1
 800d426:	429a      	cmp	r2, r3
 800d428:	d206      	bcs.n	800d438 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	b29a      	uxth	r2, r3
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d442:	4619      	mov	r1, r3
 800d444:	0049      	lsls	r1, r1, #1
 800d446:	440b      	add	r3, r1
 800d448:	b29b      	uxth	r3, r3
 800d44a:	4413      	add	r3, r2
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8b5b      	ldrh	r3, [r3, #26]
 800d458:	f043 0304 	orr.w	r3, r3, #4
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	08012f40 	.word	0x08012f40
 800d474:	080135f8 	.word	0x080135f8
 800d478:	08012f94 	.word	0x08012f94

0800d47c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	460b      	mov	r3, r1
 800d488:	817b      	strh	r3, [r7, #10]
 800d48a:	4613      	mov	r3, r2
 800d48c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d48e:	897a      	ldrh	r2, [r7, #10]
 800d490:	893b      	ldrh	r3, [r7, #8]
 800d492:	4413      	add	r3, r2
 800d494:	b29b      	uxth	r3, r3
 800d496:	3314      	adds	r3, #20
 800d498:	b29b      	uxth	r3, r3
 800d49a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d49e:	4619      	mov	r1, r3
 800d4a0:	2022      	movs	r0, #34	@ 0x22
 800d4a2:	f7f9 fd1d 	bl	8006ee0 <pbuf_alloc>
 800d4a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d04d      	beq.n	800d54a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d4ae:	897b      	ldrh	r3, [r7, #10]
 800d4b0:	3313      	adds	r3, #19
 800d4b2:	697a      	ldr	r2, [r7, #20]
 800d4b4:	8952      	ldrh	r2, [r2, #10]
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	db06      	blt.n	800d4c8 <tcp_output_alloc_header_common+0x4c>
 800d4ba:	4b26      	ldr	r3, [pc, #152]	@ (800d554 <tcp_output_alloc_header_common+0xd8>)
 800d4bc:	f240 7223 	movw	r2, #1827	@ 0x723
 800d4c0:	4925      	ldr	r1, [pc, #148]	@ (800d558 <tcp_output_alloc_header_common+0xdc>)
 800d4c2:	4826      	ldr	r0, [pc, #152]	@ (800d55c <tcp_output_alloc_header_common+0xe0>)
 800d4c4:	f003 f99e 	bl	8010804 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	685b      	ldr	r3, [r3, #4]
 800d4cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d4ce:	8c3b      	ldrh	r3, [r7, #32]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7f8 fc59 	bl	8005d88 <lwip_htons>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	461a      	mov	r2, r3
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d4de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7f8 fc51 	bl	8005d88 <lwip_htons>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7f8 fc5c 	bl	8005db2 <lwip_htonl>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d500:	897b      	ldrh	r3, [r7, #10]
 800d502:	089b      	lsrs	r3, r3, #2
 800d504:	b29b      	uxth	r3, r3
 800d506:	3305      	adds	r3, #5
 800d508:	b29b      	uxth	r3, r3
 800d50a:	031b      	lsls	r3, r3, #12
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d512:	b29b      	uxth	r3, r3
 800d514:	4313      	orrs	r3, r2
 800d516:	b29b      	uxth	r3, r3
 800d518:	4618      	mov	r0, r3
 800d51a:	f7f8 fc35 	bl	8005d88 <lwip_htons>
 800d51e:	4603      	mov	r3, r0
 800d520:	461a      	mov	r2, r3
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d526:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f8 fc2d 	bl	8005d88 <lwip_htons>
 800d52e:	4603      	mov	r3, r0
 800d530:	461a      	mov	r2, r3
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	2200      	movs	r2, #0
 800d53a:	741a      	strb	r2, [r3, #16]
 800d53c:	2200      	movs	r2, #0
 800d53e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2200      	movs	r2, #0
 800d544:	749a      	strb	r2, [r3, #18]
 800d546:	2200      	movs	r2, #0
 800d548:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d54a:	697b      	ldr	r3, [r7, #20]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	08012f40 	.word	0x08012f40
 800d558:	08013618 	.word	0x08013618
 800d55c:	08012f94 	.word	0x08012f94

0800d560 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d560:	b5b0      	push	{r4, r5, r7, lr}
 800d562:	b08a      	sub	sp, #40	@ 0x28
 800d564:	af04      	add	r7, sp, #16
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	607b      	str	r3, [r7, #4]
 800d56a:	460b      	mov	r3, r1
 800d56c:	817b      	strh	r3, [r7, #10]
 800d56e:	4613      	mov	r3, r2
 800d570:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d106      	bne.n	800d586 <tcp_output_alloc_header+0x26>
 800d578:	4b15      	ldr	r3, [pc, #84]	@ (800d5d0 <tcp_output_alloc_header+0x70>)
 800d57a:	f240 7242 	movw	r2, #1858	@ 0x742
 800d57e:	4915      	ldr	r1, [pc, #84]	@ (800d5d4 <tcp_output_alloc_header+0x74>)
 800d580:	4815      	ldr	r0, [pc, #84]	@ (800d5d8 <tcp_output_alloc_header+0x78>)
 800d582:	f003 f93f 	bl	8010804 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	8adb      	ldrh	r3, [r3, #22]
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	8b12      	ldrh	r2, [r2, #24]
 800d592:	68f9      	ldr	r1, [r7, #12]
 800d594:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800d596:	893d      	ldrh	r5, [r7, #8]
 800d598:	897c      	ldrh	r4, [r7, #10]
 800d59a:	9103      	str	r1, [sp, #12]
 800d59c:	2110      	movs	r1, #16
 800d59e:	9102      	str	r1, [sp, #8]
 800d5a0:	9201      	str	r2, [sp, #4]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	462a      	mov	r2, r5
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	f7ff ff67 	bl	800d47c <tcp_output_alloc_header_common>
 800d5ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d006      	beq.n	800d5c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ba:	68fa      	ldr	r2, [r7, #12]
 800d5bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800d5be:	441a      	add	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800d5c4:	697b      	ldr	r3, [r7, #20]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3718      	adds	r7, #24
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	08012f40 	.word	0x08012f40
 800d5d4:	08013648 	.word	0x08013648
 800d5d8:	08012f94 	.word	0x08012f94

0800d5dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	71fb      	strb	r3, [r7, #7]
 800d5ee:	4613      	mov	r3, r2
 800d5f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d106      	bne.n	800d60a <tcp_output_fill_options+0x2e>
 800d5fc:	4b12      	ldr	r3, [pc, #72]	@ (800d648 <tcp_output_fill_options+0x6c>)
 800d5fe:	f240 7256 	movw	r2, #1878	@ 0x756
 800d602:	4912      	ldr	r1, [pc, #72]	@ (800d64c <tcp_output_fill_options+0x70>)
 800d604:	4812      	ldr	r0, [pc, #72]	@ (800d650 <tcp_output_fill_options+0x74>)
 800d606:	f003 f8fd 	bl	8010804 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	3314      	adds	r3, #20
 800d614:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d616:	8bfb      	ldrh	r3, [r7, #30]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	461a      	mov	r2, r3
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	f003 0304 	and.w	r3, r3, #4
 800d624:	4413      	add	r3, r2
 800d626:	3314      	adds	r3, #20
 800d628:	69ba      	ldr	r2, [r7, #24]
 800d62a:	4413      	add	r3, r2
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d006      	beq.n	800d640 <tcp_output_fill_options+0x64>
 800d632:	4b05      	ldr	r3, [pc, #20]	@ (800d648 <tcp_output_fill_options+0x6c>)
 800d634:	f240 7275 	movw	r2, #1909	@ 0x775
 800d638:	4906      	ldr	r1, [pc, #24]	@ (800d654 <tcp_output_fill_options+0x78>)
 800d63a:	4805      	ldr	r0, [pc, #20]	@ (800d650 <tcp_output_fill_options+0x74>)
 800d63c:	f003 f8e2 	bl	8010804 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d640:	bf00      	nop
 800d642:	3720      	adds	r7, #32
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	08012f40 	.word	0x08012f40
 800d64c:	08013670 	.word	0x08013670
 800d650:	08012f94 	.word	0x08012f94
 800d654:	08013568 	.word	0x08013568

0800d658 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b08a      	sub	sp, #40	@ 0x28
 800d65c:	af04      	add	r7, sp, #16
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <tcp_output_control_segment+0x22>
 800d66c:	4b1c      	ldr	r3, [pc, #112]	@ (800d6e0 <tcp_output_control_segment+0x88>)
 800d66e:	f240 7287 	movw	r2, #1927	@ 0x787
 800d672:	491c      	ldr	r1, [pc, #112]	@ (800d6e4 <tcp_output_control_segment+0x8c>)
 800d674:	481c      	ldr	r0, [pc, #112]	@ (800d6e8 <tcp_output_control_segment+0x90>)
 800d676:	f003 f8c5 	bl	8010804 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	68f8      	ldr	r0, [r7, #12]
 800d680:	f7fe faea 	bl	800bc58 <tcp_route>
 800d684:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d68c:	23fc      	movs	r3, #252	@ 0xfc
 800d68e:	75fb      	strb	r3, [r7, #23]
 800d690:	e01c      	b.n	800d6cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d006      	beq.n	800d6a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	7adb      	ldrb	r3, [r3, #11]
 800d69c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	7a9b      	ldrb	r3, [r3, #10]
 800d6a2:	757b      	strb	r3, [r7, #21]
 800d6a4:	e003      	b.n	800d6ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d6a6:	23ff      	movs	r3, #255	@ 0xff
 800d6a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d6ae:	7dba      	ldrb	r2, [r7, #22]
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	9302      	str	r3, [sp, #8]
 800d6b4:	2306      	movs	r3, #6
 800d6b6:	9301      	str	r3, [sp, #4]
 800d6b8:	7d7b      	ldrb	r3, [r7, #21]
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4613      	mov	r3, r2
 800d6be:	683a      	ldr	r2, [r7, #0]
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	68b8      	ldr	r0, [r7, #8]
 800d6c4:	f001 ff70 	bl	800f5a8 <ip4_output_if>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d6cc:	68b8      	ldr	r0, [r7, #8]
 800d6ce:	f7f9 feeb 	bl	80074a8 <pbuf_free>
  return err;
 800d6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	08012f40 	.word	0x08012f40
 800d6e4:	08013698 	.word	0x08013698
 800d6e8:	08012f94 	.word	0x08012f94

0800d6ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d6ec:	b590      	push	{r4, r7, lr}
 800d6ee:	b08b      	sub	sp, #44	@ 0x2c
 800d6f0:	af04      	add	r7, sp, #16
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <tcp_rst+0x22>
 800d700:	4b1f      	ldr	r3, [pc, #124]	@ (800d780 <tcp_rst+0x94>)
 800d702:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d706:	491f      	ldr	r1, [pc, #124]	@ (800d784 <tcp_rst+0x98>)
 800d708:	481f      	ldr	r0, [pc, #124]	@ (800d788 <tcp_rst+0x9c>)
 800d70a:	f003 f87b 	bl	8010804 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d710:	2b00      	cmp	r3, #0
 800d712:	d106      	bne.n	800d722 <tcp_rst+0x36>
 800d714:	4b1a      	ldr	r3, [pc, #104]	@ (800d780 <tcp_rst+0x94>)
 800d716:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d71a:	491c      	ldr	r1, [pc, #112]	@ (800d78c <tcp_rst+0xa0>)
 800d71c:	481a      	ldr	r0, [pc, #104]	@ (800d788 <tcp_rst+0x9c>)
 800d71e:	f003 f871 	bl	8010804 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d722:	2300      	movs	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d726:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d72a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d72c:	7dfb      	ldrb	r3, [r7, #23]
 800d72e:	b29c      	uxth	r4, r3
 800d730:	68b8      	ldr	r0, [r7, #8]
 800d732:	f7f8 fb3e 	bl	8005db2 <lwip_htonl>
 800d736:	4602      	mov	r2, r0
 800d738:	8abb      	ldrh	r3, [r7, #20]
 800d73a:	9303      	str	r3, [sp, #12]
 800d73c:	2314      	movs	r3, #20
 800d73e:	9302      	str	r3, [sp, #8]
 800d740:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	4613      	mov	r3, r2
 800d74a:	2200      	movs	r2, #0
 800d74c:	4621      	mov	r1, r4
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7ff fe94 	bl	800d47c <tcp_output_alloc_header_common>
 800d754:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d00c      	beq.n	800d776 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d75c:	7dfb      	ldrb	r3, [r7, #23]
 800d75e:	2200      	movs	r2, #0
 800d760:	6939      	ldr	r1, [r7, #16]
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f7ff ff3a 	bl	800d5dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	6939      	ldr	r1, [r7, #16]
 800d76e:	68f8      	ldr	r0, [r7, #12]
 800d770:	f7ff ff72 	bl	800d658 <tcp_output_control_segment>
 800d774:	e000      	b.n	800d778 <tcp_rst+0x8c>
    return;
 800d776:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d778:	371c      	adds	r7, #28
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd90      	pop	{r4, r7, pc}
 800d77e:	bf00      	nop
 800d780:	08012f40 	.word	0x08012f40
 800d784:	080136c4 	.word	0x080136c4
 800d788:	08012f94 	.word	0x08012f94
 800d78c:	080136e0 	.word	0x080136e0

0800d790 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d790:	b590      	push	{r4, r7, lr}
 800d792:	b087      	sub	sp, #28
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d79c:	2300      	movs	r3, #0
 800d79e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d106      	bne.n	800d7b4 <tcp_send_empty_ack+0x24>
 800d7a6:	4b28      	ldr	r3, [pc, #160]	@ (800d848 <tcp_send_empty_ack+0xb8>)
 800d7a8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d7ac:	4927      	ldr	r1, [pc, #156]	@ (800d84c <tcp_send_empty_ack+0xbc>)
 800d7ae:	4828      	ldr	r0, [pc, #160]	@ (800d850 <tcp_send_empty_ack+0xc0>)
 800d7b0:	f003 f828 	bl	8010804 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	f003 0304 	and.w	r3, r3, #4
 800d7be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d7c0:	7d7b      	ldrb	r3, [r7, #21]
 800d7c2:	b29c      	uxth	r4, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f8 faf2 	bl	8005db2 <lwip_htonl>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff fec3 	bl	800d560 <tcp_output_alloc_header>
 800d7da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d109      	bne.n	800d7f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	8b5b      	ldrh	r3, [r3, #26]
 800d7e6:	f043 0303 	orr.w	r3, r3, #3
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d7f0:	f06f 0301 	mvn.w	r3, #1
 800d7f4:	e023      	b.n	800d83e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d7f6:	7dbb      	ldrb	r3, [r7, #22]
 800d7f8:	7dfa      	ldrb	r2, [r7, #23]
 800d7fa:	6939      	ldr	r1, [r7, #16]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f7ff feed 	bl	800d5dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	3304      	adds	r3, #4
 800d808:	6939      	ldr	r1, [r7, #16]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7ff ff24 	bl	800d658 <tcp_output_control_segment>
 800d810:	4603      	mov	r3, r0
 800d812:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d007      	beq.n	800d82c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	8b5b      	ldrh	r3, [r3, #26]
 800d820:	f043 0303 	orr.w	r3, r3, #3
 800d824:	b29a      	uxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	835a      	strh	r2, [r3, #26]
 800d82a:	e006      	b.n	800d83a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	8b5b      	ldrh	r3, [r3, #26]
 800d830:	f023 0303 	bic.w	r3, r3, #3
 800d834:	b29a      	uxth	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	371c      	adds	r7, #28
 800d842:	46bd      	mov	sp, r7
 800d844:	bd90      	pop	{r4, r7, pc}
 800d846:	bf00      	nop
 800d848:	08012f40 	.word	0x08012f40
 800d84c:	080136fc 	.word	0x080136fc
 800d850:	08012f94 	.word	0x08012f94

0800d854 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d854:	b590      	push	{r4, r7, lr}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d85c:	2300      	movs	r3, #0
 800d85e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d106      	bne.n	800d874 <tcp_keepalive+0x20>
 800d866:	4b18      	ldr	r3, [pc, #96]	@ (800d8c8 <tcp_keepalive+0x74>)
 800d868:	f640 0224 	movw	r2, #2084	@ 0x824
 800d86c:	4917      	ldr	r1, [pc, #92]	@ (800d8cc <tcp_keepalive+0x78>)
 800d86e:	4818      	ldr	r0, [pc, #96]	@ (800d8d0 <tcp_keepalive+0x7c>)
 800d870:	f002 ffc8 	bl	8010804 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d874:	7dfb      	ldrb	r3, [r7, #23]
 800d876:	b29c      	uxth	r4, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d87c:	3b01      	subs	r3, #1
 800d87e:	4618      	mov	r0, r3
 800d880:	f7f8 fa97 	bl	8005db2 <lwip_htonl>
 800d884:	4603      	mov	r3, r0
 800d886:	2200      	movs	r2, #0
 800d888:	4621      	mov	r1, r4
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7ff fe68 	bl	800d560 <tcp_output_alloc_header>
 800d890:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d898:	f04f 33ff 	mov.w	r3, #4294967295
 800d89c:	e010      	b.n	800d8c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	6939      	ldr	r1, [r7, #16]
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff fe99 	bl	800d5dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3304      	adds	r3, #4
 800d8b0:	6939      	ldr	r1, [r7, #16]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fed0 	bl	800d658 <tcp_output_control_segment>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	371c      	adds	r7, #28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd90      	pop	{r4, r7, pc}
 800d8c8:	08012f40 	.word	0x08012f40
 800d8cc:	0801371c 	.word	0x0801371c
 800d8d0:	08012f94 	.word	0x08012f94

0800d8d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b08b      	sub	sp, #44	@ 0x2c
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <tcp_zero_window_probe+0x22>
 800d8e8:	4b4c      	ldr	r3, [pc, #304]	@ (800da1c <tcp_zero_window_probe+0x148>)
 800d8ea:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d8ee:	494c      	ldr	r1, [pc, #304]	@ (800da20 <tcp_zero_window_probe+0x14c>)
 800d8f0:	484c      	ldr	r0, [pc, #304]	@ (800da24 <tcp_zero_window_probe+0x150>)
 800d8f2:	f002 ff87 	bl	8010804 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d8fc:	6a3b      	ldr	r3, [r7, #32]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d101      	bne.n	800d906 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d902:	2300      	movs	r3, #0
 800d904:	e086      	b.n	800da14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d90c:	2bff      	cmp	r3, #255	@ 0xff
 800d90e:	d007      	beq.n	800d920 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d916:	3301      	adds	r3, #1
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	899b      	ldrh	r3, [r3, #12]
 800d926:	b29b      	uxth	r3, r3
 800d928:	4618      	mov	r0, r3
 800d92a:	f7f8 fa2d 	bl	8005d88 <lwip_htons>
 800d92e:	4603      	mov	r3, r0
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d005      	beq.n	800d946 <tcp_zero_window_probe+0x72>
 800d93a:	6a3b      	ldr	r3, [r7, #32]
 800d93c:	891b      	ldrh	r3, [r3, #8]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <tcp_zero_window_probe+0x72>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <tcp_zero_window_probe+0x74>
 800d946:	2300      	movs	r3, #0
 800d948:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d94a:	7ffb      	ldrb	r3, [r7, #31]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	bf0c      	ite	eq
 800d950:	2301      	moveq	r3, #1
 800d952:	2300      	movne	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d95c:	b299      	uxth	r1, r3
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	8bba      	ldrh	r2, [r7, #28]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff fdfa 	bl	800d560 <tcp_output_alloc_header>
 800d96c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d102      	bne.n	800d97a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d974:	f04f 33ff 	mov.w	r3, #4294967295
 800d978:	e04c      	b.n	800da14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d980:	7ffb      	ldrb	r3, [r7, #31]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	899b      	ldrh	r3, [r3, #12]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	b21b      	sxth	r3, r3
 800d98e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d992:	b21c      	sxth	r4, r3
 800d994:	2011      	movs	r0, #17
 800d996:	f7f8 f9f7 	bl	8005d88 <lwip_htons>
 800d99a:	4603      	mov	r3, r0
 800d99c:	b21b      	sxth	r3, r3
 800d99e:	4323      	orrs	r3, r4
 800d9a0:	b21b      	sxth	r3, r3
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	819a      	strh	r2, [r3, #12]
 800d9a8:	e010      	b.n	800d9cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	3314      	adds	r3, #20
 800d9b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d9b2:	6a3b      	ldr	r3, [r7, #32]
 800d9b4:	6858      	ldr	r0, [r3, #4]
 800d9b6:	6a3b      	ldr	r3, [r7, #32]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	891a      	ldrh	r2, [r3, #8]
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	891b      	ldrh	r3, [r3, #8]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	6939      	ldr	r1, [r7, #16]
 800d9c8:	f7f9 ff58 	bl	800787c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f8 f9ed 	bl	8005db2 <lwip_htonl>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	3301      	adds	r3, #1
 800d9dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	da02      	bge.n	800d9f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d9f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	69b9      	ldr	r1, [r7, #24]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff fdef 	bl	800d5dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d9fe:	687a      	ldr	r2, [r7, #4]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3304      	adds	r3, #4
 800da04:	69b9      	ldr	r1, [r7, #24]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7ff fe26 	bl	800d658 <tcp_output_control_segment>
 800da0c:	4603      	mov	r3, r0
 800da0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800da10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800da14:	4618      	mov	r0, r3
 800da16:	372c      	adds	r7, #44	@ 0x2c
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd90      	pop	{r4, r7, pc}
 800da1c:	08012f40 	.word	0x08012f40
 800da20:	08013738 	.word	0x08013738
 800da24:	08012f94 	.word	0x08012f94

0800da28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800da30:	f7fa f812 	bl	8007a58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800da34:	4b0a      	ldr	r3, [pc, #40]	@ (800da60 <tcpip_tcp_timer+0x38>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d103      	bne.n	800da44 <tcpip_tcp_timer+0x1c>
 800da3c:	4b09      	ldr	r3, [pc, #36]	@ (800da64 <tcpip_tcp_timer+0x3c>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d005      	beq.n	800da50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800da44:	2200      	movs	r2, #0
 800da46:	4908      	ldr	r1, [pc, #32]	@ (800da68 <tcpip_tcp_timer+0x40>)
 800da48:	20fa      	movs	r0, #250	@ 0xfa
 800da4a:	f000 f8f3 	bl	800dc34 <sys_timeout>
 800da4e:	e003      	b.n	800da58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800da50:	4b06      	ldr	r3, [pc, #24]	@ (800da6c <tcpip_tcp_timer+0x44>)
 800da52:	2200      	movs	r2, #0
 800da54:	601a      	str	r2, [r3, #0]
  }
}
 800da56:	bf00      	nop
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	200080c0 	.word	0x200080c0
 800da64:	200080c4 	.word	0x200080c4
 800da68:	0800da29 	.word	0x0800da29
 800da6c:	2000810c 	.word	0x2000810c

0800da70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800da74:	4b0a      	ldr	r3, [pc, #40]	@ (800daa0 <tcp_timer_needed+0x30>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d10f      	bne.n	800da9c <tcp_timer_needed+0x2c>
 800da7c:	4b09      	ldr	r3, [pc, #36]	@ (800daa4 <tcp_timer_needed+0x34>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d103      	bne.n	800da8c <tcp_timer_needed+0x1c>
 800da84:	4b08      	ldr	r3, [pc, #32]	@ (800daa8 <tcp_timer_needed+0x38>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d007      	beq.n	800da9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800da8c:	4b04      	ldr	r3, [pc, #16]	@ (800daa0 <tcp_timer_needed+0x30>)
 800da8e:	2201      	movs	r2, #1
 800da90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800da92:	2200      	movs	r2, #0
 800da94:	4905      	ldr	r1, [pc, #20]	@ (800daac <tcp_timer_needed+0x3c>)
 800da96:	20fa      	movs	r0, #250	@ 0xfa
 800da98:	f000 f8cc 	bl	800dc34 <sys_timeout>
  }
}
 800da9c:	bf00      	nop
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	2000810c 	.word	0x2000810c
 800daa4:	200080c0 	.word	0x200080c0
 800daa8:	200080c4 	.word	0x200080c4
 800daac:	0800da29 	.word	0x0800da29

0800dab0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800dabc:	2006      	movs	r0, #6
 800dabe:	f7f8 fe0d 	bl	80066dc <memp_malloc>
 800dac2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d109      	bne.n	800dade <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d151      	bne.n	800db74 <sys_timeout_abs+0xc4>
 800dad0:	4b2a      	ldr	r3, [pc, #168]	@ (800db7c <sys_timeout_abs+0xcc>)
 800dad2:	22be      	movs	r2, #190	@ 0xbe
 800dad4:	492a      	ldr	r1, [pc, #168]	@ (800db80 <sys_timeout_abs+0xd0>)
 800dad6:	482b      	ldr	r0, [pc, #172]	@ (800db84 <sys_timeout_abs+0xd4>)
 800dad8:	f002 fe94 	bl	8010804 <iprintf>
    return;
 800dadc:	e04a      	b.n	800db74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	68ba      	ldr	r2, [r7, #8]
 800dae8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800daf6:	4b24      	ldr	r3, [pc, #144]	@ (800db88 <sys_timeout_abs+0xd8>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d103      	bne.n	800db06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800dafe:	4a22      	ldr	r2, [pc, #136]	@ (800db88 <sys_timeout_abs+0xd8>)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	6013      	str	r3, [r2, #0]
    return;
 800db04:	e037      	b.n	800db76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	685a      	ldr	r2, [r3, #4]
 800db0a:	4b1f      	ldr	r3, [pc, #124]	@ (800db88 <sys_timeout_abs+0xd8>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	0fdb      	lsrs	r3, r3, #31
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d007      	beq.n	800db2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800db1e:	4b1a      	ldr	r3, [pc, #104]	@ (800db88 <sys_timeout_abs+0xd8>)
 800db20:	681a      	ldr	r2, [r3, #0]
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800db26:	4a18      	ldr	r2, [pc, #96]	@ (800db88 <sys_timeout_abs+0xd8>)
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	e023      	b.n	800db76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800db2e:	4b16      	ldr	r3, [pc, #88]	@ (800db88 <sys_timeout_abs+0xd8>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	617b      	str	r3, [r7, #20]
 800db34:	e01a      	b.n	800db6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <sys_timeout_abs+0xa6>
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	1ad3      	subs	r3, r2, r3
 800db4a:	0fdb      	lsrs	r3, r3, #31
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d007      	beq.n	800db66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	601a      	str	r2, [r3, #0]
        break;
 800db64:	e007      	b.n	800db76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d1e1      	bne.n	800db36 <sys_timeout_abs+0x86>
 800db72:	e000      	b.n	800db76 <sys_timeout_abs+0xc6>
    return;
 800db74:	bf00      	nop
      }
    }
  }
}
 800db76:	3718      	adds	r7, #24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	0801375c 	.word	0x0801375c
 800db80:	08013790 	.word	0x08013790
 800db84:	080137d0 	.word	0x080137d0
 800db88:	20008104 	.word	0x20008104

0800db8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4798      	blx	r3

  now = sys_now();
 800db9e:	f7f7 f8c5 	bl	8004d2c <sys_now>
 800dba2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	4b0f      	ldr	r3, [pc, #60]	@ (800dbe8 <lwip_cyclic_timer+0x5c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4413      	add	r3, r2
 800dbae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	0fdb      	lsrs	r3, r3, #31
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d009      	beq.n	800dbd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	4413      	add	r3, r2
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	4907      	ldr	r1, [pc, #28]	@ (800dbec <lwip_cyclic_timer+0x60>)
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff ff6e 	bl	800dab0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800dbd4:	e004      	b.n	800dbe0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	4904      	ldr	r1, [pc, #16]	@ (800dbec <lwip_cyclic_timer+0x60>)
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7ff ff68 	bl	800dab0 <sys_timeout_abs>
}
 800dbe0:	bf00      	nop
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20008108 	.word	0x20008108
 800dbec:	0800db8d 	.word	0x0800db8d

0800dbf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	607b      	str	r3, [r7, #4]
 800dbfa:	e00e      	b.n	800dc1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800dbfc:	4a0b      	ldr	r2, [pc, #44]	@ (800dc2c <sys_timeouts_init+0x3c>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	00db      	lsls	r3, r3, #3
 800dc08:	4a08      	ldr	r2, [pc, #32]	@ (800dc2c <sys_timeouts_init+0x3c>)
 800dc0a:	4413      	add	r3, r2
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4908      	ldr	r1, [pc, #32]	@ (800dc30 <sys_timeouts_init+0x40>)
 800dc10:	f000 f810 	bl	800dc34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3301      	adds	r3, #1
 800dc18:	607b      	str	r3, [r7, #4]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2b02      	cmp	r3, #2
 800dc1e:	d9ed      	bls.n	800dbfc <sys_timeouts_init+0xc>
  }
}
 800dc20:	bf00      	nop
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0801514c 	.word	0x0801514c
 800dc30:	0800db8d 	.word	0x0800db8d

0800dc34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc46:	d306      	bcc.n	800dc56 <sys_timeout+0x22>
 800dc48:	4b0a      	ldr	r3, [pc, #40]	@ (800dc74 <sys_timeout+0x40>)
 800dc4a:	f240 1229 	movw	r2, #297	@ 0x129
 800dc4e:	490a      	ldr	r1, [pc, #40]	@ (800dc78 <sys_timeout+0x44>)
 800dc50:	480a      	ldr	r0, [pc, #40]	@ (800dc7c <sys_timeout+0x48>)
 800dc52:	f002 fdd7 	bl	8010804 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800dc56:	f7f7 f869 	bl	8004d2c <sys_now>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	4413      	add	r3, r2
 800dc60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	68b9      	ldr	r1, [r7, #8]
 800dc66:	6978      	ldr	r0, [r7, #20]
 800dc68:	f7ff ff22 	bl	800dab0 <sys_timeout_abs>
#endif
}
 800dc6c:	bf00      	nop
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	0801375c 	.word	0x0801375c
 800dc78:	080137f8 	.word	0x080137f8
 800dc7c:	080137d0 	.word	0x080137d0

0800dc80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800dc86:	f7f7 f851 	bl	8004d2c <sys_now>
 800dc8a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800dc8c:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf8 <sys_check_timeouts+0x78>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <sys_check_timeouts+0x1a>
 800dc96:	f7f9 f8cd 	bl	8006e34 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800dc9a:	4b18      	ldr	r3, [pc, #96]	@ (800dcfc <sys_check_timeouts+0x7c>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d022      	beq.n	800dcec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	685b      	ldr	r3, [r3, #4]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	1ad3      	subs	r3, r2, r3
 800dcae:	0fdb      	lsrs	r3, r3, #31
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d11a      	bne.n	800dcf0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a0f      	ldr	r2, [pc, #60]	@ (800dcfc <sys_check_timeouts+0x7c>)
 800dcc0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	4a0b      	ldr	r2, [pc, #44]	@ (800dd00 <sys_check_timeouts+0x80>)
 800dcd4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dcd6:	68b9      	ldr	r1, [r7, #8]
 800dcd8:	2006      	movs	r0, #6
 800dcda:	f7f8 fd6f 	bl	80067bc <memp_free>
    if (handler != NULL) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d0d3      	beq.n	800dc8c <sys_check_timeouts+0xc>
      handler(arg);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6838      	ldr	r0, [r7, #0]
 800dce8:	4798      	blx	r3
  do {
 800dcea:	e7cf      	b.n	800dc8c <sys_check_timeouts+0xc>
      return;
 800dcec:	bf00      	nop
 800dcee:	e000      	b.n	800dcf2 <sys_check_timeouts+0x72>
      return;
 800dcf0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	200080b1 	.word	0x200080b1
 800dcfc:	20008104 	.word	0x20008104
 800dd00:	20008108 	.word	0x20008108

0800dd04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd08:	f002 fc7c 	bl	8010604 <rand>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	4b01      	ldr	r3, [pc, #4]	@ (800dd24 <udp_init+0x20>)
 800dd1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dd20:	bf00      	nop
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	20000028 	.word	0x20000028

0800dd28 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	4613      	mov	r3, r2
 800dd34:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d105      	bne.n	800dd48 <udp_input_local_match+0x20>
 800dd3c:	4b27      	ldr	r3, [pc, #156]	@ (800dddc <udp_input_local_match+0xb4>)
 800dd3e:	2287      	movs	r2, #135	@ 0x87
 800dd40:	4927      	ldr	r1, [pc, #156]	@ (800dde0 <udp_input_local_match+0xb8>)
 800dd42:	4828      	ldr	r0, [pc, #160]	@ (800dde4 <udp_input_local_match+0xbc>)
 800dd44:	f002 fd5e 	bl	8010804 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d105      	bne.n	800dd5a <udp_input_local_match+0x32>
 800dd4e:	4b23      	ldr	r3, [pc, #140]	@ (800dddc <udp_input_local_match+0xb4>)
 800dd50:	2288      	movs	r2, #136	@ 0x88
 800dd52:	4925      	ldr	r1, [pc, #148]	@ (800dde8 <udp_input_local_match+0xc0>)
 800dd54:	4823      	ldr	r0, [pc, #140]	@ (800dde4 <udp_input_local_match+0xbc>)
 800dd56:	f002 fd55 	bl	8010804 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7a1b      	ldrb	r3, [r3, #8]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d00b      	beq.n	800dd7a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	7a1a      	ldrb	r2, [r3, #8]
 800dd66:	4b21      	ldr	r3, [pc, #132]	@ (800ddec <udp_input_local_match+0xc4>)
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dd6e:	3301      	adds	r3, #1
 800dd70:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d001      	beq.n	800dd7a <udp_input_local_match+0x52>
    return 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	e02b      	b.n	800ddd2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d018      	beq.n	800ddb2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d013      	beq.n	800ddae <udp_input_local_match+0x86>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d00f      	beq.n	800ddae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800dd8e:	4b17      	ldr	r3, [pc, #92]	@ (800ddec <udp_input_local_match+0xc4>)
 800dd90:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd96:	d00a      	beq.n	800ddae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	4b13      	ldr	r3, [pc, #76]	@ (800ddec <udp_input_local_match+0xc4>)
 800dd9e:	695b      	ldr	r3, [r3, #20]
 800dda0:	405a      	eors	r2, r3
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	3308      	adds	r3, #8
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d110      	bne.n	800ddd0 <udp_input_local_match+0xa8>
          return 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e00f      	b.n	800ddd2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d009      	beq.n	800ddcc <udp_input_local_match+0xa4>
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d005      	beq.n	800ddcc <udp_input_local_match+0xa4>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	4b09      	ldr	r3, [pc, #36]	@ (800ddec <udp_input_local_match+0xc4>)
 800ddc6:	695b      	ldr	r3, [r3, #20]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d101      	bne.n	800ddd0 <udp_input_local_match+0xa8>
        return 1;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	e000      	b.n	800ddd2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08013844 	.word	0x08013844
 800dde0:	08013874 	.word	0x08013874
 800dde4:	08013898 	.word	0x08013898
 800dde8:	080138c0 	.word	0x080138c0
 800ddec:	20005198 	.word	0x20005198

0800ddf0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ddf0:	b590      	push	{r4, r7, lr}
 800ddf2:	b08d      	sub	sp, #52	@ 0x34
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d105      	bne.n	800de10 <udp_input+0x20>
 800de04:	4b7c      	ldr	r3, [pc, #496]	@ (800dff8 <udp_input+0x208>)
 800de06:	22cf      	movs	r2, #207	@ 0xcf
 800de08:	497c      	ldr	r1, [pc, #496]	@ (800dffc <udp_input+0x20c>)
 800de0a:	487d      	ldr	r0, [pc, #500]	@ (800e000 <udp_input+0x210>)
 800de0c:	f002 fcfa 	bl	8010804 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d105      	bne.n	800de22 <udp_input+0x32>
 800de16:	4b78      	ldr	r3, [pc, #480]	@ (800dff8 <udp_input+0x208>)
 800de18:	22d0      	movs	r2, #208	@ 0xd0
 800de1a:	497a      	ldr	r1, [pc, #488]	@ (800e004 <udp_input+0x214>)
 800de1c:	4878      	ldr	r0, [pc, #480]	@ (800e000 <udp_input+0x210>)
 800de1e:	f002 fcf1 	bl	8010804 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	895b      	ldrh	r3, [r3, #10]
 800de26:	2b07      	cmp	r3, #7
 800de28:	d803      	bhi.n	800de32 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f7f9 fb3c 	bl	80074a8 <pbuf_free>
    goto end;
 800de30:	e0de      	b.n	800dff0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800de38:	4b73      	ldr	r3, [pc, #460]	@ (800e008 <udp_input+0x218>)
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	4a72      	ldr	r2, [pc, #456]	@ (800e008 <udp_input+0x218>)
 800de3e:	6812      	ldr	r2, [r2, #0]
 800de40:	4611      	mov	r1, r2
 800de42:	4618      	mov	r0, r3
 800de44:	f001 fc88 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800de48:	4603      	mov	r3, r0
 800de4a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	881b      	ldrh	r3, [r3, #0]
 800de50:	b29b      	uxth	r3, r3
 800de52:	4618      	mov	r0, r3
 800de54:	f7f7 ff98 	bl	8005d88 <lwip_htons>
 800de58:	4603      	mov	r3, r0
 800de5a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	885b      	ldrh	r3, [r3, #2]
 800de60:	b29b      	uxth	r3, r3
 800de62:	4618      	mov	r0, r3
 800de64:	f7f7 ff90 	bl	8005d88 <lwip_htons>
 800de68:	4603      	mov	r3, r0
 800de6a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800de6c:	2300      	movs	r3, #0
 800de6e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800de70:	2300      	movs	r3, #0
 800de72:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800de78:	4b64      	ldr	r3, [pc, #400]	@ (800e00c <udp_input+0x21c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800de7e:	e054      	b.n	800df2a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800de80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de82:	8a5b      	ldrh	r3, [r3, #18]
 800de84:	89fa      	ldrh	r2, [r7, #14]
 800de86:	429a      	cmp	r2, r3
 800de88:	d14a      	bne.n	800df20 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800de8a:	7cfb      	ldrb	r3, [r7, #19]
 800de8c:	461a      	mov	r2, r3
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de92:	f7ff ff49 	bl	800dd28 <udp_input_local_match>
 800de96:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d041      	beq.n	800df20 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800de9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9e:	7c1b      	ldrb	r3, [r3, #16]
 800dea0:	f003 0304 	and.w	r3, r3, #4
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d11d      	bne.n	800dee4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800deae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb0:	61fb      	str	r3, [r7, #28]
 800deb2:	e017      	b.n	800dee4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800deb4:	7cfb      	ldrb	r3, [r7, #19]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d014      	beq.n	800dee4 <udp_input+0xf4>
 800deba:	4b53      	ldr	r3, [pc, #332]	@ (800e008 <udp_input+0x218>)
 800debc:	695b      	ldr	r3, [r3, #20]
 800debe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec2:	d10f      	bne.n	800dee4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	3304      	adds	r3, #4
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d008      	beq.n	800dee4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ded2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	3304      	adds	r3, #4
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d101      	bne.n	800dee4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800dee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800dee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dee6:	8a9b      	ldrh	r3, [r3, #20]
 800dee8:	8a3a      	ldrh	r2, [r7, #16]
 800deea:	429a      	cmp	r2, r3
 800deec:	d118      	bne.n	800df20 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800deee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800def2:	2b00      	cmp	r3, #0
 800def4:	d005      	beq.n	800df02 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800def6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def8:	685a      	ldr	r2, [r3, #4]
 800defa:	4b43      	ldr	r3, [pc, #268]	@ (800e008 <udp_input+0x218>)
 800defc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800defe:	429a      	cmp	r2, r3
 800df00:	d10e      	bne.n	800df20 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d014      	beq.n	800df32 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800df08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df0a:	68da      	ldr	r2, [r3, #12]
 800df0c:	6a3b      	ldr	r3, [r7, #32]
 800df0e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800df10:	4b3e      	ldr	r3, [pc, #248]	@ (800e00c <udp_input+0x21c>)
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df16:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800df18:	4a3c      	ldr	r2, [pc, #240]	@ (800e00c <udp_input+0x21c>)
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800df1e:	e008      	b.n	800df32 <udp_input+0x142>
      }
    }

    prev = pcb;
 800df20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df22:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800df24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	627b      	str	r3, [r7, #36]	@ 0x24
 800df2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1a7      	bne.n	800de80 <udp_input+0x90>
 800df30:	e000      	b.n	800df34 <udp_input+0x144>
        break;
 800df32:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800df34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df36:	2b00      	cmp	r3, #0
 800df38:	d101      	bne.n	800df3e <udp_input+0x14e>
    pcb = uncon_pcb;
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d002      	beq.n	800df4a <udp_input+0x15a>
    for_us = 1;
 800df44:	2301      	movs	r3, #1
 800df46:	76fb      	strb	r3, [r7, #27]
 800df48:	e00a      	b.n	800df60 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	3304      	adds	r3, #4
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	4b2d      	ldr	r3, [pc, #180]	@ (800e008 <udp_input+0x218>)
 800df52:	695b      	ldr	r3, [r3, #20]
 800df54:	429a      	cmp	r2, r3
 800df56:	bf0c      	ite	eq
 800df58:	2301      	moveq	r3, #1
 800df5a:	2300      	movne	r3, #0
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800df60:	7efb      	ldrb	r3, [r7, #27]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d041      	beq.n	800dfea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800df66:	2108      	movs	r1, #8
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7f9 fa17 	bl	800739c <pbuf_remove_header>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00a      	beq.n	800df8a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800df74:	4b20      	ldr	r3, [pc, #128]	@ (800dff8 <udp_input+0x208>)
 800df76:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800df7a:	4925      	ldr	r1, [pc, #148]	@ (800e010 <udp_input+0x220>)
 800df7c:	4820      	ldr	r0, [pc, #128]	@ (800e000 <udp_input+0x210>)
 800df7e:	f002 fc41 	bl	8010804 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7f9 fa90 	bl	80074a8 <pbuf_free>
      goto end;
 800df88:	e032      	b.n	800dff0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800df8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d012      	beq.n	800dfb6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800df90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d00a      	beq.n	800dfae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800df98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9a:	699c      	ldr	r4, [r3, #24]
 800df9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9e:	69d8      	ldr	r0, [r3, #28]
 800dfa0:	8a3b      	ldrh	r3, [r7, #16]
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	4b1b      	ldr	r3, [pc, #108]	@ (800e014 <udp_input+0x224>)
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dfaa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dfac:	e021      	b.n	800dff2 <udp_input+0x202>
        pbuf_free(p);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7f9 fa7a 	bl	80074a8 <pbuf_free>
        goto end;
 800dfb4:	e01c      	b.n	800dff0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dfb6:	7cfb      	ldrb	r3, [r7, #19]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d112      	bne.n	800dfe2 <udp_input+0x1f2>
 800dfbc:	4b12      	ldr	r3, [pc, #72]	@ (800e008 <udp_input+0x218>)
 800dfbe:	695b      	ldr	r3, [r3, #20]
 800dfc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dfc4:	2be0      	cmp	r3, #224	@ 0xe0
 800dfc6:	d00c      	beq.n	800dfe2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dfc8:	4b0f      	ldr	r3, [pc, #60]	@ (800e008 <udp_input+0x218>)
 800dfca:	899b      	ldrh	r3, [r3, #12]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	b21b      	sxth	r3, r3
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7f9 fa54 	bl	8007482 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dfda:	2103      	movs	r1, #3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f001 f89b 	bl	800f118 <icmp_dest_unreach>
      pbuf_free(p);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f7f9 fa60 	bl	80074a8 <pbuf_free>
  return;
 800dfe8:	e003      	b.n	800dff2 <udp_input+0x202>
    pbuf_free(p);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7f9 fa5c 	bl	80074a8 <pbuf_free>
  return;
 800dff0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dff2:	372c      	adds	r7, #44	@ 0x2c
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	08013844 	.word	0x08013844
 800dffc:	080138e8 	.word	0x080138e8
 800e000:	08013898 	.word	0x08013898
 800e004:	08013900 	.word	0x08013900
 800e008:	20005198 	.word	0x20005198
 800e00c:	20008110 	.word	0x20008110
 800e010:	0801391c 	.word	0x0801391c
 800e014:	200051a8 	.word	0x200051a8

0800e018 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01e      	beq.n	800e066 <udp_netif_ip_addr_changed+0x4e>
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01a      	beq.n	800e066 <udp_netif_ip_addr_changed+0x4e>
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d017      	beq.n	800e066 <udp_netif_ip_addr_changed+0x4e>
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d013      	beq.n	800e066 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e03e:	4b0d      	ldr	r3, [pc, #52]	@ (800e074 <udp_netif_ip_addr_changed+0x5c>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	e00c      	b.n	800e060 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d103      	bne.n	800e05a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1ef      	bne.n	800e046 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e066:	bf00      	nop
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	20008110 	.word	0x20008110

0800e078 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e080:	4915      	ldr	r1, [pc, #84]	@ (800e0d8 <etharp_free_entry+0x60>)
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	440b      	add	r3, r1
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d013      	beq.n	800e0bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e094:	4910      	ldr	r1, [pc, #64]	@ (800e0d8 <etharp_free_entry+0x60>)
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	4613      	mov	r3, r2
 800e09a:	005b      	lsls	r3, r3, #1
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	440b      	add	r3, r1
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f9 f9ff 	bl	80074a8 <pbuf_free>
    arp_table[i].q = NULL;
 800e0aa:	490b      	ldr	r1, [pc, #44]	@ (800e0d8 <etharp_free_entry+0x60>)
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	005b      	lsls	r3, r3, #1
 800e0b2:	4413      	add	r3, r2
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	440b      	add	r3, r1
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e0bc:	4906      	ldr	r1, [pc, #24]	@ (800e0d8 <etharp_free_entry+0x60>)
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	440b      	add	r3, r1
 800e0ca:	3314      	adds	r3, #20
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	20008114 	.word	0x20008114

0800e0dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	607b      	str	r3, [r7, #4]
 800e0e6:	e096      	b.n	800e216 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e0e8:	494f      	ldr	r1, [pc, #316]	@ (800e228 <etharp_tmr+0x14c>)
 800e0ea:	687a      	ldr	r2, [r7, #4]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	4413      	add	r3, r2
 800e0f2:	00db      	lsls	r3, r3, #3
 800e0f4:	440b      	add	r3, r1
 800e0f6:	3314      	adds	r3, #20
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f000 8086 	beq.w	800e210 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e104:	4948      	ldr	r1, [pc, #288]	@ (800e228 <etharp_tmr+0x14c>)
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3312      	adds	r3, #18
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	3301      	adds	r3, #1
 800e118:	b298      	uxth	r0, r3
 800e11a:	4943      	ldr	r1, [pc, #268]	@ (800e228 <etharp_tmr+0x14c>)
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	3312      	adds	r3, #18
 800e12a:	4602      	mov	r2, r0
 800e12c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e12e:	493e      	ldr	r1, [pc, #248]	@ (800e228 <etharp_tmr+0x14c>)
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	440b      	add	r3, r1
 800e13c:	3312      	adds	r3, #18
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e144:	d215      	bcs.n	800e172 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e146:	4938      	ldr	r1, [pc, #224]	@ (800e228 <etharp_tmr+0x14c>)
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	440b      	add	r3, r1
 800e154:	3314      	adds	r3, #20
 800e156:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d10e      	bne.n	800e17a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e15c:	4932      	ldr	r1, [pc, #200]	@ (800e228 <etharp_tmr+0x14c>)
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	4613      	mov	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	4413      	add	r3, r2
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	440b      	add	r3, r1
 800e16a:	3312      	adds	r3, #18
 800e16c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e16e:	2b04      	cmp	r3, #4
 800e170:	d903      	bls.n	800e17a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff ff80 	bl	800e078 <etharp_free_entry>
 800e178:	e04a      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e17a:	492b      	ldr	r1, [pc, #172]	@ (800e228 <etharp_tmr+0x14c>)
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	3314      	adds	r3, #20
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	2b03      	cmp	r3, #3
 800e18e:	d10a      	bne.n	800e1a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e190:	4925      	ldr	r1, [pc, #148]	@ (800e228 <etharp_tmr+0x14c>)
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	4613      	mov	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	440b      	add	r3, r1
 800e19e:	3314      	adds	r3, #20
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	701a      	strb	r2, [r3, #0]
 800e1a4:	e034      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e1a6:	4920      	ldr	r1, [pc, #128]	@ (800e228 <etharp_tmr+0x14c>)
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	440b      	add	r3, r1
 800e1b4:	3314      	adds	r3, #20
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b04      	cmp	r3, #4
 800e1ba:	d10a      	bne.n	800e1d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e1bc:	491a      	ldr	r1, [pc, #104]	@ (800e228 <etharp_tmr+0x14c>)
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	005b      	lsls	r3, r3, #1
 800e1c4:	4413      	add	r3, r2
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	440b      	add	r3, r1
 800e1ca:	3314      	adds	r3, #20
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	701a      	strb	r2, [r3, #0]
 800e1d0:	e01e      	b.n	800e210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1d2:	4915      	ldr	r1, [pc, #84]	@ (800e228 <etharp_tmr+0x14c>)
 800e1d4:	687a      	ldr	r2, [r7, #4]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	005b      	lsls	r3, r3, #1
 800e1da:	4413      	add	r3, r2
 800e1dc:	00db      	lsls	r3, r3, #3
 800e1de:	440b      	add	r3, r1
 800e1e0:	3314      	adds	r3, #20
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d113      	bne.n	800e210 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e1e8:	490f      	ldr	r1, [pc, #60]	@ (800e228 <etharp_tmr+0x14c>)
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	4413      	add	r3, r2
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	440b      	add	r3, r1
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	005b      	lsls	r3, r3, #1
 800e200:	4413      	add	r3, r2
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	4a08      	ldr	r2, [pc, #32]	@ (800e228 <etharp_tmr+0x14c>)
 800e206:	4413      	add	r3, r2
 800e208:	3304      	adds	r3, #4
 800e20a:	4619      	mov	r1, r3
 800e20c:	f000 fe6e 	bl	800eeec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	3301      	adds	r3, #1
 800e214:	607b      	str	r3, [r7, #4]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b09      	cmp	r3, #9
 800e21a:	f77f af65 	ble.w	800e0e8 <etharp_tmr+0xc>
      }
    }
  }
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20008114 	.word	0x20008114

0800e22c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	@ 0x28
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	460b      	mov	r3, r1
 800e236:	607a      	str	r2, [r7, #4]
 800e238:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e23a:	230a      	movs	r3, #10
 800e23c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e23e:	230a      	movs	r3, #10
 800e240:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e242:	230a      	movs	r3, #10
 800e244:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800e246:	2300      	movs	r3, #0
 800e248:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e24a:	230a      	movs	r3, #10
 800e24c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	83bb      	strh	r3, [r7, #28]
 800e252:	2300      	movs	r3, #0
 800e254:	837b      	strh	r3, [r7, #26]
 800e256:	2300      	movs	r3, #0
 800e258:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e25a:	2300      	movs	r3, #0
 800e25c:	843b      	strh	r3, [r7, #32]
 800e25e:	e0ae      	b.n	800e3be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e260:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e264:	49a6      	ldr	r1, [pc, #664]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e266:	4613      	mov	r3, r2
 800e268:	005b      	lsls	r3, r3, #1
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	440b      	add	r3, r1
 800e270:	3314      	adds	r3, #20
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e276:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e27a:	2b0a      	cmp	r3, #10
 800e27c:	d105      	bne.n	800e28a <etharp_find_entry+0x5e>
 800e27e:	7dfb      	ldrb	r3, [r7, #23]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e284:	8c3b      	ldrh	r3, [r7, #32]
 800e286:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e288:	e095      	b.n	800e3b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e28a:	7dfb      	ldrb	r3, [r7, #23]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 8092 	beq.w	800e3b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d009      	beq.n	800e2ac <etharp_find_entry+0x80>
 800e298:	7dfb      	ldrb	r3, [r7, #23]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d806      	bhi.n	800e2ac <etharp_find_entry+0x80>
 800e29e:	4b99      	ldr	r3, [pc, #612]	@ (800e504 <etharp_find_entry+0x2d8>)
 800e2a0:	f240 1223 	movw	r2, #291	@ 0x123
 800e2a4:	4998      	ldr	r1, [pc, #608]	@ (800e508 <etharp_find_entry+0x2dc>)
 800e2a6:	4899      	ldr	r0, [pc, #612]	@ (800e50c <etharp_find_entry+0x2e0>)
 800e2a8:	f002 faac 	bl	8010804 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d020      	beq.n	800e2f4 <etharp_find_entry+0xc8>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6819      	ldr	r1, [r3, #0]
 800e2b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2ba:	4891      	ldr	r0, [pc, #580]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4403      	add	r3, r0
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4299      	cmp	r1, r3
 800e2cc:	d112      	bne.n	800e2f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00c      	beq.n	800e2ee <etharp_find_entry+0xc2>
 800e2d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2d8:	4989      	ldr	r1, [pc, #548]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e2da:	4613      	mov	r3, r2
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	4413      	add	r3, r2
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	440b      	add	r3, r1
 800e2e4:	3308      	adds	r3, #8
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d102      	bne.n	800e2f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e2ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e2f2:	e100      	b.n	800e4f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e2f4:	7dfb      	ldrb	r3, [r7, #23]
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d140      	bne.n	800e37c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e2fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e2fe:	4980      	ldr	r1, [pc, #512]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e300:	4613      	mov	r3, r2
 800e302:	005b      	lsls	r3, r3, #1
 800e304:	4413      	add	r3, r2
 800e306:	00db      	lsls	r3, r3, #3
 800e308:	440b      	add	r3, r1
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01a      	beq.n	800e346 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e314:	497a      	ldr	r1, [pc, #488]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e316:	4613      	mov	r3, r2
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4413      	add	r3, r2
 800e31c:	00db      	lsls	r3, r3, #3
 800e31e:	440b      	add	r3, r1
 800e320:	3312      	adds	r3, #18
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	8bba      	ldrh	r2, [r7, #28]
 800e326:	429a      	cmp	r2, r3
 800e328:	d845      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_queue = i;
 800e32a:	8c3b      	ldrh	r3, [r7, #32]
 800e32c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e32e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e332:	4973      	ldr	r1, [pc, #460]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e334:	4613      	mov	r3, r2
 800e336:	005b      	lsls	r3, r3, #1
 800e338:	4413      	add	r3, r2
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	440b      	add	r3, r1
 800e33e:	3312      	adds	r3, #18
 800e340:	881b      	ldrh	r3, [r3, #0]
 800e342:	83bb      	strh	r3, [r7, #28]
 800e344:	e037      	b.n	800e3b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e34a:	496d      	ldr	r1, [pc, #436]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e34c:	4613      	mov	r3, r2
 800e34e:	005b      	lsls	r3, r3, #1
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	440b      	add	r3, r1
 800e356:	3312      	adds	r3, #18
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	8b7a      	ldrh	r2, [r7, #26]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d82a      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_pending = i;
 800e360:	8c3b      	ldrh	r3, [r7, #32]
 800e362:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800e364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e368:	4965      	ldr	r1, [pc, #404]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e36a:	4613      	mov	r3, r2
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	4413      	add	r3, r2
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	440b      	add	r3, r1
 800e374:	3312      	adds	r3, #18
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	837b      	strh	r3, [r7, #26]
 800e37a:	e01c      	b.n	800e3b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d919      	bls.n	800e3b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e386:	495e      	ldr	r1, [pc, #376]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e388:	4613      	mov	r3, r2
 800e38a:	005b      	lsls	r3, r3, #1
 800e38c:	4413      	add	r3, r2
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	440b      	add	r3, r1
 800e392:	3312      	adds	r3, #18
 800e394:	881b      	ldrh	r3, [r3, #0]
 800e396:	8b3a      	ldrh	r2, [r7, #24]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d80c      	bhi.n	800e3b6 <etharp_find_entry+0x18a>
            old_stable = i;
 800e39c:	8c3b      	ldrh	r3, [r7, #32]
 800e39e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800e3a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e3a4:	4956      	ldr	r1, [pc, #344]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	005b      	lsls	r3, r3, #1
 800e3aa:	4413      	add	r3, r2
 800e3ac:	00db      	lsls	r3, r3, #3
 800e3ae:	440b      	add	r3, r1
 800e3b0:	3312      	adds	r3, #18
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e3b6:	8c3b      	ldrh	r3, [r7, #32]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	843b      	strh	r3, [r7, #32]
 800e3be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e3c2:	2b09      	cmp	r3, #9
 800e3c4:	f77f af4c 	ble.w	800e260 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e3c8:	7afb      	ldrb	r3, [r7, #11]
 800e3ca:	f003 0302 	and.w	r3, r3, #2
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d108      	bne.n	800e3e4 <etharp_find_entry+0x1b8>
 800e3d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e3d6:	2b0a      	cmp	r3, #10
 800e3d8:	d107      	bne.n	800e3ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	f003 0301 	and.w	r3, r3, #1
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d102      	bne.n	800e3ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e8:	e085      	b.n	800e4f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e3ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800e3ee:	2b09      	cmp	r3, #9
 800e3f0:	dc02      	bgt.n	800e3f8 <etharp_find_entry+0x1cc>
    i = empty;
 800e3f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3f4:	843b      	strh	r3, [r7, #32]
 800e3f6:	e039      	b.n	800e46c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e3f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800e3fc:	2b09      	cmp	r3, #9
 800e3fe:	dc14      	bgt.n	800e42a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e400:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e402:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e408:	493d      	ldr	r1, [pc, #244]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e40a:	4613      	mov	r3, r2
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	4413      	add	r3, r2
 800e410:	00db      	lsls	r3, r3, #3
 800e412:	440b      	add	r3, r1
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d018      	beq.n	800e44c <etharp_find_entry+0x220>
 800e41a:	4b3a      	ldr	r3, [pc, #232]	@ (800e504 <etharp_find_entry+0x2d8>)
 800e41c:	f240 126d 	movw	r2, #365	@ 0x16d
 800e420:	493b      	ldr	r1, [pc, #236]	@ (800e510 <etharp_find_entry+0x2e4>)
 800e422:	483a      	ldr	r0, [pc, #232]	@ (800e50c <etharp_find_entry+0x2e0>)
 800e424:	f002 f9ee 	bl	8010804 <iprintf>
 800e428:	e010      	b.n	800e44c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e42a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800e42e:	2b09      	cmp	r3, #9
 800e430:	dc02      	bgt.n	800e438 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e432:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e434:	843b      	strh	r3, [r7, #32]
 800e436:	e009      	b.n	800e44c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e438:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e43c:	2b09      	cmp	r3, #9
 800e43e:	dc02      	bgt.n	800e446 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e440:	8bfb      	ldrh	r3, [r7, #30]
 800e442:	843b      	strh	r3, [r7, #32]
 800e444:	e002      	b.n	800e44c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295
 800e44a:	e054      	b.n	800e4f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e44c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e450:	2b09      	cmp	r3, #9
 800e452:	dd06      	ble.n	800e462 <etharp_find_entry+0x236>
 800e454:	4b2b      	ldr	r3, [pc, #172]	@ (800e504 <etharp_find_entry+0x2d8>)
 800e456:	f240 127f 	movw	r2, #383	@ 0x17f
 800e45a:	492e      	ldr	r1, [pc, #184]	@ (800e514 <etharp_find_entry+0x2e8>)
 800e45c:	482b      	ldr	r0, [pc, #172]	@ (800e50c <etharp_find_entry+0x2e0>)
 800e45e:	f002 f9d1 	bl	8010804 <iprintf>
    etharp_free_entry(i);
 800e462:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e466:	4618      	mov	r0, r3
 800e468:	f7ff fe06 	bl	800e078 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e46c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e470:	2b09      	cmp	r3, #9
 800e472:	dd06      	ble.n	800e482 <etharp_find_entry+0x256>
 800e474:	4b23      	ldr	r3, [pc, #140]	@ (800e504 <etharp_find_entry+0x2d8>)
 800e476:	f240 1283 	movw	r2, #387	@ 0x183
 800e47a:	4926      	ldr	r1, [pc, #152]	@ (800e514 <etharp_find_entry+0x2e8>)
 800e47c:	4823      	ldr	r0, [pc, #140]	@ (800e50c <etharp_find_entry+0x2e0>)
 800e47e:	f002 f9c1 	bl	8010804 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800e482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e486:	491e      	ldr	r1, [pc, #120]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e488:	4613      	mov	r3, r2
 800e48a:	005b      	lsls	r3, r3, #1
 800e48c:	4413      	add	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	440b      	add	r3, r1
 800e492:	3314      	adds	r3, #20
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d006      	beq.n	800e4a8 <etharp_find_entry+0x27c>
 800e49a:	4b1a      	ldr	r3, [pc, #104]	@ (800e504 <etharp_find_entry+0x2d8>)
 800e49c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800e4a0:	491d      	ldr	r1, [pc, #116]	@ (800e518 <etharp_find_entry+0x2ec>)
 800e4a2:	481a      	ldr	r0, [pc, #104]	@ (800e50c <etharp_find_entry+0x2e0>)
 800e4a4:	f002 f9ae 	bl	8010804 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800e4ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6819      	ldr	r1, [r3, #0]
 800e4b6:	4812      	ldr	r0, [pc, #72]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e4b8:	4613      	mov	r3, r2
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	4413      	add	r3, r2
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4403      	add	r3, r0
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800e4c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4ca:	490d      	ldr	r1, [pc, #52]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e4cc:	4613      	mov	r3, r2
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	4413      	add	r3, r2
 800e4d2:	00db      	lsls	r3, r3, #3
 800e4d4:	440b      	add	r3, r1
 800e4d6:	3312      	adds	r3, #18
 800e4d8:	2200      	movs	r2, #0
 800e4da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800e4dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e4e0:	4907      	ldr	r1, [pc, #28]	@ (800e500 <etharp_find_entry+0x2d4>)
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	005b      	lsls	r3, r3, #1
 800e4e6:	4413      	add	r3, r2
 800e4e8:	00db      	lsls	r3, r3, #3
 800e4ea:	440b      	add	r3, r1
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800e4f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3728      	adds	r7, #40	@ 0x28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20008114 	.word	0x20008114
 800e504:	08013ba8 	.word	0x08013ba8
 800e508:	08013be0 	.word	0x08013be0
 800e50c:	08013c20 	.word	0x08013c20
 800e510:	08013c48 	.word	0x08013c48
 800e514:	08013c60 	.word	0x08013c60
 800e518:	08013c74 	.word	0x08013c74

0800e51c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af02      	add	r7, sp, #8
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e530:	2b06      	cmp	r3, #6
 800e532:	d006      	beq.n	800e542 <etharp_update_arp_entry+0x26>
 800e534:	4b48      	ldr	r3, [pc, #288]	@ (800e658 <etharp_update_arp_entry+0x13c>)
 800e536:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800e53a:	4948      	ldr	r1, [pc, #288]	@ (800e65c <etharp_update_arp_entry+0x140>)
 800e53c:	4848      	ldr	r0, [pc, #288]	@ (800e660 <etharp_update_arp_entry+0x144>)
 800e53e:	f002 f961 	bl	8010804 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d012      	beq.n	800e56e <etharp_update_arp_entry+0x52>
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00e      	beq.n	800e56e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	68f9      	ldr	r1, [r7, #12]
 800e556:	4618      	mov	r0, r3
 800e558:	f001 f8fe 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800e55c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d105      	bne.n	800e56e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800e56a:	2be0      	cmp	r3, #224	@ 0xe0
 800e56c:	d102      	bne.n	800e574 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e56e:	f06f 030f 	mvn.w	r3, #15
 800e572:	e06c      	b.n	800e64e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800e574:	78fb      	ldrb	r3, [r7, #3]
 800e576:	68fa      	ldr	r2, [r7, #12]
 800e578:	4619      	mov	r1, r3
 800e57a:	68b8      	ldr	r0, [r7, #8]
 800e57c:	f7ff fe56 	bl	800e22c <etharp_find_entry>
 800e580:	4603      	mov	r3, r0
 800e582:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800e584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	da02      	bge.n	800e592 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800e58c:	8afb      	ldrh	r3, [r7, #22]
 800e58e:	b25b      	sxtb	r3, r3
 800e590:	e05d      	b.n	800e64e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800e592:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e596:	4933      	ldr	r1, [pc, #204]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e598:	4613      	mov	r3, r2
 800e59a:	005b      	lsls	r3, r3, #1
 800e59c:	4413      	add	r3, r2
 800e59e:	00db      	lsls	r3, r3, #3
 800e5a0:	440b      	add	r3, r1
 800e5a2:	3314      	adds	r3, #20
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800e5a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5ac:	492d      	ldr	r1, [pc, #180]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e5ae:	4613      	mov	r3, r2
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	4413      	add	r3, r2
 800e5b4:	00db      	lsls	r3, r3, #3
 800e5b6:	440b      	add	r3, r1
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800e5be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	005b      	lsls	r3, r3, #1
 800e5c6:	4413      	add	r3, r2
 800e5c8:	00db      	lsls	r3, r3, #3
 800e5ca:	3308      	adds	r3, #8
 800e5cc:	4a25      	ldr	r2, [pc, #148]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e5ce:	4413      	add	r3, r2
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	2206      	movs	r2, #6
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f002 fa0d 	bl	80109f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800e5dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5e0:	4920      	ldr	r1, [pc, #128]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	005b      	lsls	r3, r3, #1
 800e5e6:	4413      	add	r3, r2
 800e5e8:	00db      	lsls	r3, r3, #3
 800e5ea:	440b      	add	r3, r1
 800e5ec:	3312      	adds	r3, #18
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800e5f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e5f6:	491b      	ldr	r1, [pc, #108]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	4413      	add	r3, r2
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	440b      	add	r3, r1
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d021      	beq.n	800e64c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800e608:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e60c:	4915      	ldr	r1, [pc, #84]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e60e:	4613      	mov	r3, r2
 800e610:	005b      	lsls	r3, r3, #1
 800e612:	4413      	add	r3, r2
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	440b      	add	r3, r1
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800e61c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800e620:	4910      	ldr	r1, [pc, #64]	@ (800e664 <etharp_update_arp_entry+0x148>)
 800e622:	4613      	mov	r3, r2
 800e624:	005b      	lsls	r3, r3, #1
 800e626:	4413      	add	r3, r2
 800e628:	00db      	lsls	r3, r3, #3
 800e62a:	440b      	add	r3, r1
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e636:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6939      	ldr	r1, [r7, #16]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f001 ff97 	bl	8010574 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800e646:	6938      	ldr	r0, [r7, #16]
 800e648:	f7f8 ff2e 	bl	80074a8 <pbuf_free>
  }
  return ERR_OK;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	08013ba8 	.word	0x08013ba8
 800e65c:	08013ca0 	.word	0x08013ca0
 800e660:	08013c20 	.word	0x08013c20
 800e664:	20008114 	.word	0x20008114

0800e668 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b084      	sub	sp, #16
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e670:	2300      	movs	r3, #0
 800e672:	60fb      	str	r3, [r7, #12]
 800e674:	e01e      	b.n	800e6b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800e676:	4913      	ldr	r1, [pc, #76]	@ (800e6c4 <etharp_cleanup_netif+0x5c>)
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	4613      	mov	r3, r2
 800e67c:	005b      	lsls	r3, r3, #1
 800e67e:	4413      	add	r3, r2
 800e680:	00db      	lsls	r3, r3, #3
 800e682:	440b      	add	r3, r1
 800e684:	3314      	adds	r3, #20
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800e68a:	7afb      	ldrb	r3, [r7, #11]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00e      	beq.n	800e6ae <etharp_cleanup_netif+0x46>
 800e690:	490c      	ldr	r1, [pc, #48]	@ (800e6c4 <etharp_cleanup_netif+0x5c>)
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	4613      	mov	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	4413      	add	r3, r2
 800e69a:	00db      	lsls	r3, r3, #3
 800e69c:	440b      	add	r3, r1
 800e69e:	3308      	adds	r3, #8
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	687a      	ldr	r2, [r7, #4]
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d102      	bne.n	800e6ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f7ff fce5 	bl	800e078 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b09      	cmp	r3, #9
 800e6b8:	dddd      	ble.n	800e676 <etharp_cleanup_netif+0xe>
    }
  }
}
 800e6ba:	bf00      	nop
 800e6bc:	bf00      	nop
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}
 800e6c4:	20008114 	.word	0x20008114

0800e6c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b08a      	sub	sp, #40	@ 0x28
 800e6cc:	af04      	add	r7, sp, #16
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <etharp_input+0x20>
 800e6d8:	4b3d      	ldr	r3, [pc, #244]	@ (800e7d0 <etharp_input+0x108>)
 800e6da:	f240 228a 	movw	r2, #650	@ 0x28a
 800e6de:	493d      	ldr	r1, [pc, #244]	@ (800e7d4 <etharp_input+0x10c>)
 800e6e0:	483d      	ldr	r0, [pc, #244]	@ (800e7d8 <etharp_input+0x110>)
 800e6e2:	f002 f88f 	bl	8010804 <iprintf>
 800e6e6:	e06f      	b.n	800e7c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e6f8:	d10c      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e6fe:	2b06      	cmp	r3, #6
 800e700:	d108      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e706:	2b04      	cmp	r3, #4
 800e708:	d104      	bne.n	800e714 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	885b      	ldrh	r3, [r3, #2]
 800e70e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e710:	2b08      	cmp	r3, #8
 800e712:	d003      	beq.n	800e71c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7f8 fec7 	bl	80074a8 <pbuf_free>
    return;
 800e71a:	e055      	b.n	800e7c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	330e      	adds	r3, #14
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	3318      	adds	r3, #24
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	3304      	adds	r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <etharp_input+0x74>
    for_us = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	75fb      	strb	r3, [r7, #23]
 800e73a:	e009      	b.n	800e750 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	3304      	adds	r3, #4
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	429a      	cmp	r2, r3
 800e746:	bf0c      	ite	eq
 800e748:	2301      	moveq	r3, #1
 800e74a:	2300      	movne	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f103 0208 	add.w	r2, r3, #8
 800e756:	7dfb      	ldrb	r3, [r7, #23]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <etharp_input+0x98>
 800e75c:	2301      	movs	r3, #1
 800e75e:	e000      	b.n	800e762 <etharp_input+0x9a>
 800e760:	2302      	movs	r3, #2
 800e762:	f107 010c 	add.w	r1, r7, #12
 800e766:	6838      	ldr	r0, [r7, #0]
 800e768:	f7ff fed8 	bl	800e51c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	88db      	ldrh	r3, [r3, #6]
 800e770:	b29b      	uxth	r3, r3
 800e772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e776:	d003      	beq.n	800e780 <etharp_input+0xb8>
 800e778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e77c:	d01e      	beq.n	800e7bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e77e:	e020      	b.n	800e7c2 <etharp_input+0xfa>
      if (for_us) {
 800e780:	7dfb      	ldrb	r3, [r7, #23]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d01c      	beq.n	800e7c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e7a0:	2102      	movs	r1, #2
 800e7a2:	9103      	str	r1, [sp, #12]
 800e7a4:	f107 010c 	add.w	r1, r7, #12
 800e7a8:	9102      	str	r1, [sp, #8]
 800e7aa:	9201      	str	r2, [sp, #4]
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	462b      	mov	r3, r5
 800e7b0:	4622      	mov	r2, r4
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	6838      	ldr	r0, [r7, #0]
 800e7b6:	f000 faeb 	bl	800ed90 <etharp_raw>
      break;
 800e7ba:	e001      	b.n	800e7c0 <etharp_input+0xf8>
      break;
 800e7bc:	bf00      	nop
 800e7be:	e000      	b.n	800e7c2 <etharp_input+0xfa>
      break;
 800e7c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7f8 fe70 	bl	80074a8 <pbuf_free>
}
 800e7c8:	3718      	adds	r7, #24
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	08013ba8 	.word	0x08013ba8
 800e7d4:	08013cf8 	.word	0x08013cf8
 800e7d8:	08013c20 	.word	0x08013c20

0800e7dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af02      	add	r7, sp, #8
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e7ea:	79fa      	ldrb	r2, [r7, #7]
 800e7ec:	4944      	ldr	r1, [pc, #272]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	4413      	add	r3, r2
 800e7f4:	00db      	lsls	r3, r3, #3
 800e7f6:	440b      	add	r3, r1
 800e7f8:	3314      	adds	r3, #20
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d806      	bhi.n	800e80e <etharp_output_to_arp_index+0x32>
 800e800:	4b40      	ldr	r3, [pc, #256]	@ (800e904 <etharp_output_to_arp_index+0x128>)
 800e802:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e806:	4940      	ldr	r1, [pc, #256]	@ (800e908 <etharp_output_to_arp_index+0x12c>)
 800e808:	4840      	ldr	r0, [pc, #256]	@ (800e90c <etharp_output_to_arp_index+0x130>)
 800e80a:	f001 fffb 	bl	8010804 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e80e:	79fa      	ldrb	r2, [r7, #7]
 800e810:	493b      	ldr	r1, [pc, #236]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	440b      	add	r3, r1
 800e81c:	3314      	adds	r3, #20
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b02      	cmp	r3, #2
 800e822:	d153      	bne.n	800e8cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e824:	79fa      	ldrb	r2, [r7, #7]
 800e826:	4936      	ldr	r1, [pc, #216]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e828:	4613      	mov	r3, r2
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	4413      	add	r3, r2
 800e82e:	00db      	lsls	r3, r3, #3
 800e830:	440b      	add	r3, r1
 800e832:	3312      	adds	r3, #18
 800e834:	881b      	ldrh	r3, [r3, #0]
 800e836:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e83a:	d919      	bls.n	800e870 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e83c:	79fa      	ldrb	r2, [r7, #7]
 800e83e:	4613      	mov	r3, r2
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	4413      	add	r3, r2
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	4a2e      	ldr	r2, [pc, #184]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e848:	4413      	add	r3, r2
 800e84a:	3304      	adds	r3, #4
 800e84c:	4619      	mov	r1, r3
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f000 fb4c 	bl	800eeec <etharp_request>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	d138      	bne.n	800e8cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e85a:	79fa      	ldrb	r2, [r7, #7]
 800e85c:	4928      	ldr	r1, [pc, #160]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e85e:	4613      	mov	r3, r2
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	4413      	add	r3, r2
 800e864:	00db      	lsls	r3, r3, #3
 800e866:	440b      	add	r3, r1
 800e868:	3314      	adds	r3, #20
 800e86a:	2203      	movs	r2, #3
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	e02d      	b.n	800e8cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e870:	79fa      	ldrb	r2, [r7, #7]
 800e872:	4923      	ldr	r1, [pc, #140]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e874:	4613      	mov	r3, r2
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	4413      	add	r3, r2
 800e87a:	00db      	lsls	r3, r3, #3
 800e87c:	440b      	add	r3, r1
 800e87e:	3312      	adds	r3, #18
 800e880:	881b      	ldrh	r3, [r3, #0]
 800e882:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e886:	d321      	bcc.n	800e8cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e888:	79fa      	ldrb	r2, [r7, #7]
 800e88a:	4613      	mov	r3, r2
 800e88c:	005b      	lsls	r3, r3, #1
 800e88e:	4413      	add	r3, r2
 800e890:	00db      	lsls	r3, r3, #3
 800e892:	4a1b      	ldr	r2, [pc, #108]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e894:	4413      	add	r3, r2
 800e896:	1d19      	adds	r1, r3, #4
 800e898:	79fa      	ldrb	r2, [r7, #7]
 800e89a:	4613      	mov	r3, r2
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	4413      	add	r3, r2
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	4a16      	ldr	r2, [pc, #88]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e8a6:	4413      	add	r3, r2
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 fafb 	bl	800eea8 <etharp_request_dst>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d109      	bne.n	800e8cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e8b8:	79fa      	ldrb	r2, [r7, #7]
 800e8ba:	4911      	ldr	r1, [pc, #68]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e8bc:	4613      	mov	r3, r2
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	4413      	add	r3, r2
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	440b      	add	r3, r1
 800e8c6:	3314      	adds	r3, #20
 800e8c8:	2203      	movs	r2, #3
 800e8ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e8d2:	79fa      	ldrb	r2, [r7, #7]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	005b      	lsls	r3, r3, #1
 800e8d8:	4413      	add	r3, r2
 800e8da:	00db      	lsls	r3, r3, #3
 800e8dc:	3308      	adds	r3, #8
 800e8de:	4a08      	ldr	r2, [pc, #32]	@ (800e900 <etharp_output_to_arp_index+0x124>)
 800e8e0:	4413      	add	r3, r2
 800e8e2:	3304      	adds	r3, #4
 800e8e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e8e8:	9200      	str	r2, [sp, #0]
 800e8ea:	460a      	mov	r2, r1
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f001 fe40 	bl	8010574 <ethernet_output>
 800e8f4:	4603      	mov	r3, r0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20008114 	.word	0x20008114
 800e904:	08013ba8 	.word	0x08013ba8
 800e908:	08013d18 	.word	0x08013d18
 800e90c:	08013c20 	.word	0x08013c20

0800e910 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08a      	sub	sp, #40	@ 0x28
 800e914:	af02      	add	r7, sp, #8
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d106      	bne.n	800e934 <etharp_output+0x24>
 800e926:	4b73      	ldr	r3, [pc, #460]	@ (800eaf4 <etharp_output+0x1e4>)
 800e928:	f240 321e 	movw	r2, #798	@ 0x31e
 800e92c:	4972      	ldr	r1, [pc, #456]	@ (800eaf8 <etharp_output+0x1e8>)
 800e92e:	4873      	ldr	r0, [pc, #460]	@ (800eafc <etharp_output+0x1ec>)
 800e930:	f001 ff68 	bl	8010804 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d106      	bne.n	800e948 <etharp_output+0x38>
 800e93a:	4b6e      	ldr	r3, [pc, #440]	@ (800eaf4 <etharp_output+0x1e4>)
 800e93c:	f240 321f 	movw	r2, #799	@ 0x31f
 800e940:	496f      	ldr	r1, [pc, #444]	@ (800eb00 <etharp_output+0x1f0>)
 800e942:	486e      	ldr	r0, [pc, #440]	@ (800eafc <etharp_output+0x1ec>)
 800e944:	f001 ff5e 	bl	8010804 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <etharp_output+0x4c>
 800e94e:	4b69      	ldr	r3, [pc, #420]	@ (800eaf4 <etharp_output+0x1e4>)
 800e950:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e954:	496b      	ldr	r1, [pc, #428]	@ (800eb04 <etharp_output+0x1f4>)
 800e956:	4869      	ldr	r0, [pc, #420]	@ (800eafc <etharp_output+0x1ec>)
 800e958:	f001 ff54 	bl	8010804 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	68f9      	ldr	r1, [r7, #12]
 800e962:	4618      	mov	r0, r3
 800e964:	f000 fef8 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e96e:	4b66      	ldr	r3, [pc, #408]	@ (800eb08 <etharp_output+0x1f8>)
 800e970:	61fb      	str	r3, [r7, #28]
 800e972:	e0af      	b.n	800ead4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e97c:	2be0      	cmp	r3, #224	@ 0xe0
 800e97e:	d118      	bne.n	800e9b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e980:	2301      	movs	r3, #1
 800e982:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e984:	2300      	movs	r3, #0
 800e986:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e988:	235e      	movs	r3, #94	@ 0x5e
 800e98a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	3301      	adds	r3, #1
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e996:	b2db      	uxtb	r3, r3
 800e998:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	3302      	adds	r3, #2
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3303      	adds	r3, #3
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e9aa:	f107 0310 	add.w	r3, r7, #16
 800e9ae:	61fb      	str	r3, [r7, #28]
 800e9b0:	e090      	b.n	800ead4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	3304      	adds	r3, #4
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	405a      	eors	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3308      	adds	r3, #8
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d012      	beq.n	800e9f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e9d0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00b      	beq.n	800e9f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	330c      	adds	r3, #12
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d003      	beq.n	800e9ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	330c      	adds	r3, #12
 800e9e6:	61bb      	str	r3, [r7, #24]
 800e9e8:	e002      	b.n	800e9f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e9ea:	f06f 0303 	mvn.w	r3, #3
 800e9ee:	e07d      	b.n	800eaec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e9f0:	4b46      	ldr	r3, [pc, #280]	@ (800eb0c <etharp_output+0x1fc>)
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	4a46      	ldr	r2, [pc, #280]	@ (800eb10 <etharp_output+0x200>)
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	005b      	lsls	r3, r3, #1
 800e9fc:	440b      	add	r3, r1
 800e9fe:	00db      	lsls	r3, r3, #3
 800ea00:	4413      	add	r3, r2
 800ea02:	3314      	adds	r3, #20
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d925      	bls.n	800ea56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea0a:	4b40      	ldr	r3, [pc, #256]	@ (800eb0c <etharp_output+0x1fc>)
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	4a3f      	ldr	r2, [pc, #252]	@ (800eb10 <etharp_output+0x200>)
 800ea12:	460b      	mov	r3, r1
 800ea14:	005b      	lsls	r3, r3, #1
 800ea16:	440b      	add	r3, r1
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	4413      	add	r3, r2
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d117      	bne.n	800ea56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	4b38      	ldr	r3, [pc, #224]	@ (800eb0c <etharp_output+0x1fc>)
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	4937      	ldr	r1, [pc, #220]	@ (800eb10 <etharp_output+0x200>)
 800ea32:	4603      	mov	r3, r0
 800ea34:	005b      	lsls	r3, r3, #1
 800ea36:	4403      	add	r3, r0
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	440b      	add	r3, r1
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d108      	bne.n	800ea56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ea44:	4b31      	ldr	r3, [pc, #196]	@ (800eb0c <etharp_output+0x1fc>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	68b9      	ldr	r1, [r7, #8]
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f7ff fec5 	bl	800e7dc <etharp_output_to_arp_index>
 800ea52:	4603      	mov	r3, r0
 800ea54:	e04a      	b.n	800eaec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ea56:	2300      	movs	r3, #0
 800ea58:	75fb      	strb	r3, [r7, #23]
 800ea5a:	e031      	b.n	800eac0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea5c:	7dfa      	ldrb	r2, [r7, #23]
 800ea5e:	492c      	ldr	r1, [pc, #176]	@ (800eb10 <etharp_output+0x200>)
 800ea60:	4613      	mov	r3, r2
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	4413      	add	r3, r2
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	440b      	add	r3, r1
 800ea6a:	3314      	adds	r3, #20
 800ea6c:	781b      	ldrb	r3, [r3, #0]
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d923      	bls.n	800eaba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ea72:	7dfa      	ldrb	r2, [r7, #23]
 800ea74:	4926      	ldr	r1, [pc, #152]	@ (800eb10 <etharp_output+0x200>)
 800ea76:	4613      	mov	r3, r2
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	4413      	add	r3, r2
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	440b      	add	r3, r1
 800ea80:	3308      	adds	r3, #8
 800ea82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d117      	bne.n	800eaba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	6819      	ldr	r1, [r3, #0]
 800ea8e:	7dfa      	ldrb	r2, [r7, #23]
 800ea90:	481f      	ldr	r0, [pc, #124]	@ (800eb10 <etharp_output+0x200>)
 800ea92:	4613      	mov	r3, r2
 800ea94:	005b      	lsls	r3, r3, #1
 800ea96:	4413      	add	r3, r2
 800ea98:	00db      	lsls	r3, r3, #3
 800ea9a:	4403      	add	r3, r0
 800ea9c:	3304      	adds	r3, #4
 800ea9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800eaa0:	4299      	cmp	r1, r3
 800eaa2:	d10a      	bne.n	800eaba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800eaa4:	4a19      	ldr	r2, [pc, #100]	@ (800eb0c <etharp_output+0x1fc>)
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800eaaa:	7dfb      	ldrb	r3, [r7, #23]
 800eaac:	461a      	mov	r2, r3
 800eaae:	68b9      	ldr	r1, [r7, #8]
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	f7ff fe93 	bl	800e7dc <etharp_output_to_arp_index>
 800eab6:	4603      	mov	r3, r0
 800eab8:	e018      	b.n	800eaec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	3301      	adds	r3, #1
 800eabe:	75fb      	strb	r3, [r7, #23]
 800eac0:	7dfb      	ldrb	r3, [r7, #23]
 800eac2:	2b09      	cmp	r3, #9
 800eac4:	d9ca      	bls.n	800ea5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	69b9      	ldr	r1, [r7, #24]
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f000 f822 	bl	800eb14 <etharp_query>
 800ead0:	4603      	mov	r3, r0
 800ead2:	e00b      	b.n	800eaec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800eada:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	68b9      	ldr	r1, [r7, #8]
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f001 fd45 	bl	8010574 <ethernet_output>
 800eaea:	4603      	mov	r3, r0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	08013ba8 	.word	0x08013ba8
 800eaf8:	08013cf8 	.word	0x08013cf8
 800eafc:	08013c20 	.word	0x08013c20
 800eb00:	08013d48 	.word	0x08013d48
 800eb04:	08013ce8 	.word	0x08013ce8
 800eb08:	08015168 	.word	0x08015168
 800eb0c:	20008204 	.word	0x20008204
 800eb10:	20008114 	.word	0x20008114

0800eb14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b08c      	sub	sp, #48	@ 0x30
 800eb18:	af02      	add	r7, sp, #8
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	3326      	adds	r3, #38	@ 0x26
 800eb24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800eb26:	23ff      	movs	r3, #255	@ 0xff
 800eb28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68f9      	ldr	r1, [r7, #12]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fe0e 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10c      	bne.n	800eb5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb4a:	2be0      	cmp	r3, #224	@ 0xe0
 800eb4c:	d006      	beq.n	800eb5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d003      	beq.n	800eb5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d102      	bne.n	800eb62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb5c:	f06f 030f 	mvn.w	r3, #15
 800eb60:	e101      	b.n	800ed66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800eb62:	68fa      	ldr	r2, [r7, #12]
 800eb64:	2101      	movs	r1, #1
 800eb66:	68b8      	ldr	r0, [r7, #8]
 800eb68:	f7ff fb60 	bl	800e22c <etharp_find_entry>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800eb70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	da02      	bge.n	800eb7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800eb78:	8a7b      	ldrh	r3, [r7, #18]
 800eb7a:	b25b      	sxtb	r3, r3
 800eb7c:	e0f3      	b.n	800ed66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800eb7e:	8a7b      	ldrh	r3, [r7, #18]
 800eb80:	2b7e      	cmp	r3, #126	@ 0x7e
 800eb82:	d906      	bls.n	800eb92 <etharp_query+0x7e>
 800eb84:	4b7a      	ldr	r3, [pc, #488]	@ (800ed70 <etharp_query+0x25c>)
 800eb86:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800eb8a:	497a      	ldr	r1, [pc, #488]	@ (800ed74 <etharp_query+0x260>)
 800eb8c:	487a      	ldr	r0, [pc, #488]	@ (800ed78 <etharp_query+0x264>)
 800eb8e:	f001 fe39 	bl	8010804 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800eb92:	8a7b      	ldrh	r3, [r7, #18]
 800eb94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800eb96:	7c7a      	ldrb	r2, [r7, #17]
 800eb98:	4978      	ldr	r1, [pc, #480]	@ (800ed7c <etharp_query+0x268>)
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	005b      	lsls	r3, r3, #1
 800eb9e:	4413      	add	r3, r2
 800eba0:	00db      	lsls	r3, r3, #3
 800eba2:	440b      	add	r3, r1
 800eba4:	3314      	adds	r3, #20
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d115      	bne.n	800ebd8 <etharp_query+0xc4>
    is_new_entry = 1;
 800ebac:	2301      	movs	r3, #1
 800ebae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ebb0:	7c7a      	ldrb	r2, [r7, #17]
 800ebb2:	4972      	ldr	r1, [pc, #456]	@ (800ed7c <etharp_query+0x268>)
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	005b      	lsls	r3, r3, #1
 800ebb8:	4413      	add	r3, r2
 800ebba:	00db      	lsls	r3, r3, #3
 800ebbc:	440b      	add	r3, r1
 800ebbe:	3314      	adds	r3, #20
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ebc4:	7c7a      	ldrb	r2, [r7, #17]
 800ebc6:	496d      	ldr	r1, [pc, #436]	@ (800ed7c <etharp_query+0x268>)
 800ebc8:	4613      	mov	r3, r2
 800ebca:	005b      	lsls	r3, r3, #1
 800ebcc:	4413      	add	r3, r2
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3308      	adds	r3, #8
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ebd8:	7c7a      	ldrb	r2, [r7, #17]
 800ebda:	4968      	ldr	r1, [pc, #416]	@ (800ed7c <etharp_query+0x268>)
 800ebdc:	4613      	mov	r3, r2
 800ebde:	005b      	lsls	r3, r3, #1
 800ebe0:	4413      	add	r3, r2
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	440b      	add	r3, r1
 800ebe6:	3314      	adds	r3, #20
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d011      	beq.n	800ec12 <etharp_query+0xfe>
 800ebee:	7c7a      	ldrb	r2, [r7, #17]
 800ebf0:	4962      	ldr	r1, [pc, #392]	@ (800ed7c <etharp_query+0x268>)
 800ebf2:	4613      	mov	r3, r2
 800ebf4:	005b      	lsls	r3, r3, #1
 800ebf6:	4413      	add	r3, r2
 800ebf8:	00db      	lsls	r3, r3, #3
 800ebfa:	440b      	add	r3, r1
 800ebfc:	3314      	adds	r3, #20
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d806      	bhi.n	800ec12 <etharp_query+0xfe>
 800ec04:	4b5a      	ldr	r3, [pc, #360]	@ (800ed70 <etharp_query+0x25c>)
 800ec06:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800ec0a:	495d      	ldr	r1, [pc, #372]	@ (800ed80 <etharp_query+0x26c>)
 800ec0c:	485a      	ldr	r0, [pc, #360]	@ (800ed78 <etharp_query+0x264>)
 800ec0e:	f001 fdf9 	bl	8010804 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ec12:	6a3b      	ldr	r3, [r7, #32]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d102      	bne.n	800ec1e <etharp_query+0x10a>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10c      	bne.n	800ec38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ec1e:	68b9      	ldr	r1, [r7, #8]
 800ec20:	68f8      	ldr	r0, [r7, #12]
 800ec22:	f000 f963 	bl	800eeec <etharp_request>
 800ec26:	4603      	mov	r3, r0
 800ec28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <etharp_query+0x124>
      return result;
 800ec32:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ec36:	e096      	b.n	800ed66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d106      	bne.n	800ec4c <etharp_query+0x138>
 800ec3e:	4b4c      	ldr	r3, [pc, #304]	@ (800ed70 <etharp_query+0x25c>)
 800ec40:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800ec44:	494f      	ldr	r1, [pc, #316]	@ (800ed84 <etharp_query+0x270>)
 800ec46:	484c      	ldr	r0, [pc, #304]	@ (800ed78 <etharp_query+0x264>)
 800ec48:	f001 fddc 	bl	8010804 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ec4c:	7c7a      	ldrb	r2, [r7, #17]
 800ec4e:	494b      	ldr	r1, [pc, #300]	@ (800ed7c <etharp_query+0x268>)
 800ec50:	4613      	mov	r3, r2
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	4413      	add	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	440b      	add	r3, r1
 800ec5a:	3314      	adds	r3, #20
 800ec5c:	781b      	ldrb	r3, [r3, #0]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d917      	bls.n	800ec92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800ec62:	4a49      	ldr	r2, [pc, #292]	@ (800ed88 <etharp_query+0x274>)
 800ec64:	7c7b      	ldrb	r3, [r7, #17]
 800ec66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ec68:	7c7a      	ldrb	r2, [r7, #17]
 800ec6a:	4613      	mov	r3, r2
 800ec6c:	005b      	lsls	r3, r3, #1
 800ec6e:	4413      	add	r3, r2
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	3308      	adds	r3, #8
 800ec74:	4a41      	ldr	r2, [pc, #260]	@ (800ed7c <etharp_query+0x268>)
 800ec76:	4413      	add	r3, r2
 800ec78:	3304      	adds	r3, #4
 800ec7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ec7e:	9200      	str	r2, [sp, #0]
 800ec80:	697a      	ldr	r2, [r7, #20]
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f001 fc75 	bl	8010574 <ethernet_output>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ec90:	e067      	b.n	800ed62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ec92:	7c7a      	ldrb	r2, [r7, #17]
 800ec94:	4939      	ldr	r1, [pc, #228]	@ (800ed7c <etharp_query+0x268>)
 800ec96:	4613      	mov	r3, r2
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4413      	add	r3, r2
 800ec9c:	00db      	lsls	r3, r3, #3
 800ec9e:	440b      	add	r3, r1
 800eca0:	3314      	adds	r3, #20
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d15c      	bne.n	800ed62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecb0:	e01c      	b.n	800ecec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ecb2:	69fb      	ldr	r3, [r7, #28]
 800ecb4:	895a      	ldrh	r2, [r3, #10]
 800ecb6:	69fb      	ldr	r3, [r7, #28]
 800ecb8:	891b      	ldrh	r3, [r3, #8]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d10a      	bne.n	800ecd4 <etharp_query+0x1c0>
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d006      	beq.n	800ecd4 <etharp_query+0x1c0>
 800ecc6:	4b2a      	ldr	r3, [pc, #168]	@ (800ed70 <etharp_query+0x25c>)
 800ecc8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800eccc:	492f      	ldr	r1, [pc, #188]	@ (800ed8c <etharp_query+0x278>)
 800ecce:	482a      	ldr	r0, [pc, #168]	@ (800ed78 <etharp_query+0x264>)
 800ecd0:	f001 fd98 	bl	8010804 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	7b1b      	ldrb	r3, [r3, #12]
 800ecd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <etharp_query+0x1d2>
        copy_needed = 1;
 800ece0:	2301      	movs	r3, #1
 800ece2:	61bb      	str	r3, [r7, #24]
        break;
 800ece4:	e005      	b.n	800ecf2 <etharp_query+0x1de>
      }
      p = p->next;
 800ece6:	69fb      	ldr	r3, [r7, #28]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1df      	bne.n	800ecb2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d007      	beq.n	800ed08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800ecfe:	200e      	movs	r0, #14
 800ed00:	f7f8 fe2e 	bl	8007960 <pbuf_clone>
 800ed04:	61f8      	str	r0, [r7, #28]
 800ed06:	e004      	b.n	800ed12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ed0c:	69f8      	ldr	r0, [r7, #28]
 800ed0e:	f7f8 fc6b 	bl	80075e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d021      	beq.n	800ed5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ed18:	7c7a      	ldrb	r2, [r7, #17]
 800ed1a:	4918      	ldr	r1, [pc, #96]	@ (800ed7c <etharp_query+0x268>)
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	005b      	lsls	r3, r3, #1
 800ed20:	4413      	add	r3, r2
 800ed22:	00db      	lsls	r3, r3, #3
 800ed24:	440b      	add	r3, r1
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d00a      	beq.n	800ed42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ed2c:	7c7a      	ldrb	r2, [r7, #17]
 800ed2e:	4913      	ldr	r1, [pc, #76]	@ (800ed7c <etharp_query+0x268>)
 800ed30:	4613      	mov	r3, r2
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	4413      	add	r3, r2
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	440b      	add	r3, r1
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f7f8 fbb3 	bl	80074a8 <pbuf_free>
      }
      arp_table[i].q = p;
 800ed42:	7c7a      	ldrb	r2, [r7, #17]
 800ed44:	490d      	ldr	r1, [pc, #52]	@ (800ed7c <etharp_query+0x268>)
 800ed46:	4613      	mov	r3, r2
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	4413      	add	r3, r2
 800ed4c:	00db      	lsls	r3, r3, #3
 800ed4e:	440b      	add	r3, r1
 800ed50:	69fa      	ldr	r2, [r7, #28]
 800ed52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed5a:	e002      	b.n	800ed62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ed5c:	23ff      	movs	r3, #255	@ 0xff
 800ed5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800ed62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3728      	adds	r7, #40	@ 0x28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	bf00      	nop
 800ed70:	08013ba8 	.word	0x08013ba8
 800ed74:	08013d54 	.word	0x08013d54
 800ed78:	08013c20 	.word	0x08013c20
 800ed7c:	20008114 	.word	0x20008114
 800ed80:	08013d64 	.word	0x08013d64
 800ed84:	08013d48 	.word	0x08013d48
 800ed88:	20008204 	.word	0x20008204
 800ed8c:	08013d8c 	.word	0x08013d8c

0800ed90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b08a      	sub	sp, #40	@ 0x28
 800ed94:	af02      	add	r7, sp, #8
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d106      	bne.n	800edb6 <etharp_raw+0x26>
 800eda8:	4b3a      	ldr	r3, [pc, #232]	@ (800ee94 <etharp_raw+0x104>)
 800edaa:	f240 4257 	movw	r2, #1111	@ 0x457
 800edae:	493a      	ldr	r1, [pc, #232]	@ (800ee98 <etharp_raw+0x108>)
 800edb0:	483a      	ldr	r0, [pc, #232]	@ (800ee9c <etharp_raw+0x10c>)
 800edb2:	f001 fd27 	bl	8010804 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800edb6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800edba:	211c      	movs	r1, #28
 800edbc:	200e      	movs	r0, #14
 800edbe:	f7f8 f88f 	bl	8006ee0 <pbuf_alloc>
 800edc2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d102      	bne.n	800edd0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800edca:	f04f 33ff 	mov.w	r3, #4294967295
 800edce:	e05d      	b.n	800ee8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	895b      	ldrh	r3, [r3, #10]
 800edd4:	2b1b      	cmp	r3, #27
 800edd6:	d806      	bhi.n	800ede6 <etharp_raw+0x56>
 800edd8:	4b2e      	ldr	r3, [pc, #184]	@ (800ee94 <etharp_raw+0x104>)
 800edda:	f240 4262 	movw	r2, #1122	@ 0x462
 800edde:	4930      	ldr	r1, [pc, #192]	@ (800eea0 <etharp_raw+0x110>)
 800ede0:	482e      	ldr	r0, [pc, #184]	@ (800ee9c <etharp_raw+0x10c>)
 800ede2:	f001 fd0f 	bl	8010804 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800edec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800edee:	4618      	mov	r0, r3
 800edf0:	f7f6 ffca 	bl	8005d88 <lwip_htons>
 800edf4:	4603      	mov	r3, r0
 800edf6:	461a      	mov	r2, r3
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ee02:	2b06      	cmp	r3, #6
 800ee04:	d006      	beq.n	800ee14 <etharp_raw+0x84>
 800ee06:	4b23      	ldr	r3, [pc, #140]	@ (800ee94 <etharp_raw+0x104>)
 800ee08:	f240 4269 	movw	r2, #1129	@ 0x469
 800ee0c:	4925      	ldr	r1, [pc, #148]	@ (800eea4 <etharp_raw+0x114>)
 800ee0e:	4823      	ldr	r0, [pc, #140]	@ (800ee9c <etharp_raw+0x10c>)
 800ee10:	f001 fcf8 	bl	8010804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	3308      	adds	r3, #8
 800ee18:	2206      	movs	r2, #6
 800ee1a:	6839      	ldr	r1, [r7, #0]
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f001 fdea 	bl	80109f6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	3312      	adds	r3, #18
 800ee26:	2206      	movs	r2, #6
 800ee28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f001 fde3 	bl	80109f6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	330e      	adds	r3, #14
 800ee34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee36:	6812      	ldr	r2, [r2, #0]
 800ee38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	3318      	adds	r3, #24
 800ee3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee40:	6812      	ldr	r2, [r2, #0]
 800ee42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	2200      	movs	r2, #0
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f042 0201 	orr.w	r2, r2, #1
 800ee50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	2200      	movs	r2, #0
 800ee56:	f042 0208 	orr.w	r2, r2, #8
 800ee5a:	709a      	strb	r2, [r3, #2]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	2206      	movs	r2, #6
 800ee64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	2204      	movs	r2, #4
 800ee6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ee6c:	f640 0306 	movw	r3, #2054	@ 0x806
 800ee70:	9300      	str	r3, [sp, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68ba      	ldr	r2, [r7, #8]
 800ee76:	69b9      	ldr	r1, [r7, #24]
 800ee78:	68f8      	ldr	r0, [r7, #12]
 800ee7a:	f001 fb7b 	bl	8010574 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ee7e:	69b8      	ldr	r0, [r7, #24]
 800ee80:	f7f8 fb12 	bl	80074a8 <pbuf_free>
  p = NULL;
 800ee84:	2300      	movs	r3, #0
 800ee86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ee88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3720      	adds	r7, #32
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	08013ba8 	.word	0x08013ba8
 800ee98:	08013cf8 	.word	0x08013cf8
 800ee9c:	08013c20 	.word	0x08013c20
 800eea0:	08013da8 	.word	0x08013da8
 800eea4:	08013ddc 	.word	0x08013ddc

0800eea8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af04      	add	r7, sp, #16
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800eec4:	2201      	movs	r2, #1
 800eec6:	9203      	str	r2, [sp, #12]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	9202      	str	r2, [sp, #8]
 800eecc:	4a06      	ldr	r2, [pc, #24]	@ (800eee8 <etharp_request_dst+0x40>)
 800eece:	9201      	str	r2, [sp, #4]
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	4603      	mov	r3, r0
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	f7ff ff5a 	bl	800ed90 <etharp_raw>
 800eedc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3710      	adds	r7, #16
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	08015170 	.word	0x08015170

0800eeec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800eef6:	4a05      	ldr	r2, [pc, #20]	@ (800ef0c <etharp_request+0x20>)
 800eef8:	6839      	ldr	r1, [r7, #0]
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff ffd4 	bl	800eea8 <etharp_request_dst>
 800ef00:	4603      	mov	r3, r0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	08015168 	.word	0x08015168

0800ef10 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08e      	sub	sp, #56	@ 0x38
 800ef14:	af04      	add	r7, sp, #16
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ef1a:	4b79      	ldr	r3, [pc, #484]	@ (800f100 <icmp_input+0x1f0>)
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ef20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef22:	781b      	ldrb	r3, [r3, #0]
 800ef24:	f003 030f 	and.w	r3, r3, #15
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800ef30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef32:	2b13      	cmp	r3, #19
 800ef34:	f240 80cd 	bls.w	800f0d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	895b      	ldrh	r3, [r3, #10]
 800ef3c:	2b03      	cmp	r3, #3
 800ef3e:	f240 80ca 	bls.w	800f0d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ef4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	f000 80b7 	beq.w	800f0c4 <icmp_input+0x1b4>
 800ef56:	2b08      	cmp	r3, #8
 800ef58:	f040 80b7 	bne.w	800f0ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ef5c:	4b69      	ldr	r3, [pc, #420]	@ (800f104 <icmp_input+0x1f4>)
 800ef5e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ef60:	4b67      	ldr	r3, [pc, #412]	@ (800f100 <icmp_input+0x1f0>)
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef68:	2be0      	cmp	r3, #224	@ 0xe0
 800ef6a:	f000 80bb 	beq.w	800f0e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ef6e:	4b64      	ldr	r3, [pc, #400]	@ (800f100 <icmp_input+0x1f0>)
 800ef70:	695b      	ldr	r3, [r3, #20]
 800ef72:	4a63      	ldr	r2, [pc, #396]	@ (800f100 <icmp_input+0x1f0>)
 800ef74:	6812      	ldr	r2, [r2, #0]
 800ef76:	4611      	mov	r1, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 fbed 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f040 80b1 	bne.w	800f0e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	891b      	ldrh	r3, [r3, #8]
 800ef8a:	2b07      	cmp	r3, #7
 800ef8c:	f240 80a5 	bls.w	800f0da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ef90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef92:	330e      	adds	r3, #14
 800ef94:	4619      	mov	r1, r3
 800ef96:	6878      	ldr	r0, [r7, #4]
 800ef98:	f7f8 f9f0 	bl	800737c <pbuf_add_header>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d04b      	beq.n	800f03a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	891a      	ldrh	r2, [r3, #8]
 800efa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efa8:	4413      	add	r3, r2
 800efaa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	891b      	ldrh	r3, [r3, #8]
 800efb0:	8b7a      	ldrh	r2, [r7, #26]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	f0c0 809a 	bcc.w	800f0ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800efb8:	8b7b      	ldrh	r3, [r7, #26]
 800efba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800efbe:	4619      	mov	r1, r3
 800efc0:	200e      	movs	r0, #14
 800efc2:	f7f7 ff8d 	bl	8006ee0 <pbuf_alloc>
 800efc6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 8090 	beq.w	800f0f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	895b      	ldrh	r3, [r3, #10]
 800efd4:	461a      	mov	r2, r3
 800efd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efd8:	3308      	adds	r3, #8
 800efda:	429a      	cmp	r2, r3
 800efdc:	d203      	bcs.n	800efe6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800efde:	6978      	ldr	r0, [r7, #20]
 800efe0:	f7f8 fa62 	bl	80074a8 <pbuf_free>
          goto icmperr;
 800efe4:	e085      	b.n	800f0f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800efec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 fd01 	bl	80109f6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800eff4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eff6:	4619      	mov	r1, r3
 800eff8:	6978      	ldr	r0, [r7, #20]
 800effa:	f7f8 f9cf 	bl	800739c <pbuf_remove_header>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d009      	beq.n	800f018 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f004:	4b40      	ldr	r3, [pc, #256]	@ (800f108 <icmp_input+0x1f8>)
 800f006:	22b6      	movs	r2, #182	@ 0xb6
 800f008:	4940      	ldr	r1, [pc, #256]	@ (800f10c <icmp_input+0x1fc>)
 800f00a:	4841      	ldr	r0, [pc, #260]	@ (800f110 <icmp_input+0x200>)
 800f00c:	f001 fbfa 	bl	8010804 <iprintf>
          pbuf_free(r);
 800f010:	6978      	ldr	r0, [r7, #20]
 800f012:	f7f8 fa49 	bl	80074a8 <pbuf_free>
          goto icmperr;
 800f016:	e06c      	b.n	800f0f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f018:	6879      	ldr	r1, [r7, #4]
 800f01a:	6978      	ldr	r0, [r7, #20]
 800f01c:	f7f8 fb5c 	bl	80076d8 <pbuf_copy>
 800f020:	4603      	mov	r3, r0
 800f022:	2b00      	cmp	r3, #0
 800f024:	d003      	beq.n	800f02e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f026:	6978      	ldr	r0, [r7, #20]
 800f028:	f7f8 fa3e 	bl	80074a8 <pbuf_free>
          goto icmperr;
 800f02c:	e061      	b.n	800f0f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7f8 fa3a 	bl	80074a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	607b      	str	r3, [r7, #4]
 800f038:	e00f      	b.n	800f05a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f03a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f03c:	330e      	adds	r3, #14
 800f03e:	4619      	mov	r1, r3
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7f8 f9ab 	bl	800739c <pbuf_remove_header>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d006      	beq.n	800f05a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f04c:	4b2e      	ldr	r3, [pc, #184]	@ (800f108 <icmp_input+0x1f8>)
 800f04e:	22c7      	movs	r2, #199	@ 0xc7
 800f050:	4930      	ldr	r1, [pc, #192]	@ (800f114 <icmp_input+0x204>)
 800f052:	482f      	ldr	r0, [pc, #188]	@ (800f110 <icmp_input+0x200>)
 800f054:	f001 fbd6 	bl	8010804 <iprintf>
          goto icmperr;
 800f058:	e04b      	b.n	800f0f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f060:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f062:	4619      	mov	r1, r3
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f7f8 f989 	bl	800737c <pbuf_add_header>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d12b      	bne.n	800f0c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f07e:	4b20      	ldr	r3, [pc, #128]	@ (800f100 <icmp_input+0x1f0>)
 800f080:	691a      	ldr	r2, [r3, #16]
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	2200      	movs	r2, #0
 800f090:	709a      	strb	r2, [r3, #2]
 800f092:	2200      	movs	r2, #0
 800f094:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	22ff      	movs	r2, #255	@ 0xff
 800f09a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	729a      	strb	r2, [r3, #10]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	9302      	str	r3, [sp, #8]
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	9301      	str	r3, [sp, #4]
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	23ff      	movs	r3, #255	@ 0xff
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	69f9      	ldr	r1, [r7, #28]
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 fa75 	bl	800f5a8 <ip4_output_if>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f0c2:	e001      	b.n	800f0c8 <icmp_input+0x1b8>
      break;
 800f0c4:	bf00      	nop
 800f0c6:	e000      	b.n	800f0ca <icmp_input+0x1ba>
      break;
 800f0c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7f8 f9ec 	bl	80074a8 <pbuf_free>
  return;
 800f0d0:	e013      	b.n	800f0fa <icmp_input+0x1ea>
    goto lenerr;
 800f0d2:	bf00      	nop
 800f0d4:	e002      	b.n	800f0dc <icmp_input+0x1cc>
    goto lenerr;
 800f0d6:	bf00      	nop
 800f0d8:	e000      	b.n	800f0dc <icmp_input+0x1cc>
        goto lenerr;
 800f0da:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7f8 f9e3 	bl	80074a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f0e2:	e00a      	b.n	800f0fa <icmp_input+0x1ea>
        goto icmperr;
 800f0e4:	bf00      	nop
 800f0e6:	e004      	b.n	800f0f2 <icmp_input+0x1e2>
        goto icmperr;
 800f0e8:	bf00      	nop
 800f0ea:	e002      	b.n	800f0f2 <icmp_input+0x1e2>
          goto icmperr;
 800f0ec:	bf00      	nop
 800f0ee:	e000      	b.n	800f0f2 <icmp_input+0x1e2>
          goto icmperr;
 800f0f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7f8 f9d8 	bl	80074a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f0f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f0fa:	3728      	adds	r7, #40	@ 0x28
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	20005198 	.word	0x20005198
 800f104:	200051ac 	.word	0x200051ac
 800f108:	08013e20 	.word	0x08013e20
 800f10c:	08013e58 	.word	0x08013e58
 800f110:	08013e90 	.word	0x08013e90
 800f114:	08013eb8 	.word	0x08013eb8

0800f118 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
 800f120:	460b      	mov	r3, r1
 800f122:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f124:	78fb      	ldrb	r3, [r7, #3]
 800f126:	461a      	mov	r2, r3
 800f128:	2103      	movs	r1, #3
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 f814 	bl	800f158 <icmp_send_response>
}
 800f130:	bf00      	nop
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	460b      	mov	r3, r1
 800f142:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	461a      	mov	r2, r3
 800f148:	210b      	movs	r1, #11
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f000 f804 	bl	800f158 <icmp_send_response>
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08c      	sub	sp, #48	@ 0x30
 800f15c:	af04      	add	r7, sp, #16
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	70fb      	strb	r3, [r7, #3]
 800f164:	4613      	mov	r3, r2
 800f166:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f168:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f16c:	2124      	movs	r1, #36	@ 0x24
 800f16e:	2022      	movs	r0, #34	@ 0x22
 800f170:	f7f7 feb6 	bl	8006ee0 <pbuf_alloc>
 800f174:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d04c      	beq.n	800f216 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	895b      	ldrh	r3, [r3, #10]
 800f180:	2b23      	cmp	r3, #35	@ 0x23
 800f182:	d806      	bhi.n	800f192 <icmp_send_response+0x3a>
 800f184:	4b26      	ldr	r3, [pc, #152]	@ (800f220 <icmp_send_response+0xc8>)
 800f186:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800f18a:	4926      	ldr	r1, [pc, #152]	@ (800f224 <icmp_send_response+0xcc>)
 800f18c:	4826      	ldr	r0, [pc, #152]	@ (800f228 <icmp_send_response+0xd0>)
 800f18e:	f001 fb39 	bl	8010804 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	78fa      	ldrb	r2, [r7, #3]
 800f1a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	78ba      	ldrb	r2, [r7, #2]
 800f1a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	711a      	strb	r2, [r3, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	719a      	strb	r2, [r3, #6]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	f103 0008 	add.w	r0, r3, #8
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	221c      	movs	r2, #28
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f001 fc12 	bl	80109f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	68db      	ldr	r3, [r3, #12]
 800f1d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f1d8:	f107 030c 	add.w	r3, r7, #12
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f000 f825 	bl	800f22c <ip4_route>
 800f1e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d011      	beq.n	800f20e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	709a      	strb	r2, [r3, #2]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f1f4:	f107 020c 	add.w	r2, r7, #12
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	9302      	str	r3, [sp, #8]
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	9301      	str	r3, [sp, #4]
 800f200:	2300      	movs	r3, #0
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	23ff      	movs	r3, #255	@ 0xff
 800f206:	2100      	movs	r1, #0
 800f208:	69f8      	ldr	r0, [r7, #28]
 800f20a:	f000 f9cd 	bl	800f5a8 <ip4_output_if>
  }
  pbuf_free(q);
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f7f8 f94a 	bl	80074a8 <pbuf_free>
 800f214:	e000      	b.n	800f218 <icmp_send_response+0xc0>
    return;
 800f216:	bf00      	nop
}
 800f218:	3720      	adds	r7, #32
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	08013e20 	.word	0x08013e20
 800f224:	08013eec 	.word	0x08013eec
 800f228:	08013e90 	.word	0x08013e90

0800f22c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f234:	4b33      	ldr	r3, [pc, #204]	@ (800f304 <ip4_route+0xd8>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	60fb      	str	r3, [r7, #12]
 800f23a:	e036      	b.n	800f2aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	b2db      	uxtb	r3, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d02b      	beq.n	800f2a4 <ip4_route+0x78>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f252:	089b      	lsrs	r3, r3, #2
 800f254:	f003 0301 	and.w	r3, r3, #1
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d022      	beq.n	800f2a4 <ip4_route+0x78>
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	3304      	adds	r3, #4
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d01d      	beq.n	800f2a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	3304      	adds	r3, #4
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	405a      	eors	r2, r3
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	3308      	adds	r3, #8
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4013      	ands	r3, r2
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d101      	bne.n	800f284 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	e038      	b.n	800f2f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f28a:	f003 0302 	and.w	r3, r3, #2
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d108      	bne.n	800f2a4 <ip4_route+0x78>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	330c      	adds	r3, #12
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d101      	bne.n	800f2a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	e028      	b.n	800f2f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	60fb      	str	r3, [r7, #12]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1c5      	bne.n	800f23c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f2b0:	4b15      	ldr	r3, [pc, #84]	@ (800f308 <ip4_route+0xdc>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d01a      	beq.n	800f2ee <ip4_route+0xc2>
 800f2b8:	4b13      	ldr	r3, [pc, #76]	@ (800f308 <ip4_route+0xdc>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2c0:	f003 0301 	and.w	r3, r3, #1
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d012      	beq.n	800f2ee <ip4_route+0xc2>
 800f2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f308 <ip4_route+0xdc>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2d0:	f003 0304 	and.w	r3, r3, #4
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00a      	beq.n	800f2ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f2d8:	4b0b      	ldr	r3, [pc, #44]	@ (800f308 <ip4_route+0xdc>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	3304      	adds	r3, #4
 800f2de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d004      	beq.n	800f2ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800f2ec:	d101      	bne.n	800f2f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e001      	b.n	800f2f6 <ip4_route+0xca>
  }

  return netif_default;
 800f2f2:	4b05      	ldr	r3, [pc, #20]	@ (800f308 <ip4_route+0xdc>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
}
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	200080a8 	.word	0x200080a8
 800f308:	200080ac 	.word	0x200080ac

0800f30c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f31a:	f003 0301 	and.w	r3, r3, #1
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	2b00      	cmp	r3, #0
 800f322:	d016      	beq.n	800f352 <ip4_input_accept+0x46>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3304      	adds	r3, #4
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d011      	beq.n	800f352 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f32e:	4b0b      	ldr	r3, [pc, #44]	@ (800f35c <ip4_input_accept+0x50>)
 800f330:	695a      	ldr	r2, [r3, #20]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	3304      	adds	r3, #4
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d008      	beq.n	800f34e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f33c:	4b07      	ldr	r3, [pc, #28]	@ (800f35c <ip4_input_accept+0x50>)
 800f33e:	695b      	ldr	r3, [r3, #20]
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 fa08 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800f348:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d001      	beq.n	800f352 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f34e:	2301      	movs	r3, #1
 800f350:	e000      	b.n	800f354 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f352:	2300      	movs	r3, #0
}
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	20005198 	.word	0x20005198

0800f360 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b086      	sub	sp, #24
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	091b      	lsrs	r3, r3, #4
 800f376:	b2db      	uxtb	r3, r3
 800f378:	2b04      	cmp	r3, #4
 800f37a:	d004      	beq.n	800f386 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7f8 f893 	bl	80074a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	e107      	b.n	800f596 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	781b      	ldrb	r3, [r3, #0]
 800f38a:	f003 030f 	and.w	r3, r3, #15
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	009b      	lsls	r3, r3, #2
 800f392:	b2db      	uxtb	r3, r3
 800f394:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	885b      	ldrh	r3, [r3, #2]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7f6 fcf3 	bl	8005d88 <lwip_htons>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	891b      	ldrh	r3, [r3, #8]
 800f3aa:	89ba      	ldrh	r2, [r7, #12]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d204      	bcs.n	800f3ba <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800f3b0:	89bb      	ldrh	r3, [r7, #12]
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f7f7 fef1 	bl	800719c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	895b      	ldrh	r3, [r3, #10]
 800f3be:	89fa      	ldrh	r2, [r7, #14]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d807      	bhi.n	800f3d4 <ip4_input+0x74>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	891b      	ldrh	r3, [r3, #8]
 800f3c8:	89ba      	ldrh	r2, [r7, #12]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d802      	bhi.n	800f3d4 <ip4_input+0x74>
 800f3ce:	89fb      	ldrh	r3, [r7, #14]
 800f3d0:	2b13      	cmp	r3, #19
 800f3d2:	d804      	bhi.n	800f3de <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7f8 f867 	bl	80074a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	e0db      	b.n	800f596 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	4a6f      	ldr	r2, [pc, #444]	@ (800f5a0 <ip4_input+0x240>)
 800f3e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	4a6d      	ldr	r2, [pc, #436]	@ (800f5a0 <ip4_input+0x240>)
 800f3ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f3ee:	4b6c      	ldr	r3, [pc, #432]	@ (800f5a0 <ip4_input+0x240>)
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f3f6:	2be0      	cmp	r3, #224	@ 0xe0
 800f3f8:	d112      	bne.n	800f420 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d007      	beq.n	800f41a <ip4_input+0xba>
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	3304      	adds	r3, #4
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d002      	beq.n	800f41a <ip4_input+0xba>
      netif = inp;
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	613b      	str	r3, [r7, #16]
 800f418:	e02a      	b.n	800f470 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f41a:	2300      	movs	r3, #0
 800f41c:	613b      	str	r3, [r7, #16]
 800f41e:	e027      	b.n	800f470 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f420:	6838      	ldr	r0, [r7, #0]
 800f422:	f7ff ff73 	bl	800f30c <ip4_input_accept>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <ip4_input+0xd2>
      netif = inp;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	613b      	str	r3, [r7, #16]
 800f430:	e01e      	b.n	800f470 <ip4_input+0x110>
    } else {
      netif = NULL;
 800f432:	2300      	movs	r3, #0
 800f434:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f436:	4b5a      	ldr	r3, [pc, #360]	@ (800f5a0 <ip4_input+0x240>)
 800f438:	695b      	ldr	r3, [r3, #20]
 800f43a:	b2db      	uxtb	r3, r3
 800f43c:	2b7f      	cmp	r3, #127	@ 0x7f
 800f43e:	d017      	beq.n	800f470 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f440:	4b58      	ldr	r3, [pc, #352]	@ (800f5a4 <ip4_input+0x244>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	613b      	str	r3, [r7, #16]
 800f446:	e00e      	b.n	800f466 <ip4_input+0x106>
          if (netif == inp) {
 800f448:	693a      	ldr	r2, [r7, #16]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	429a      	cmp	r2, r3
 800f44e:	d006      	beq.n	800f45e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800f450:	6938      	ldr	r0, [r7, #16]
 800f452:	f7ff ff5b 	bl	800f30c <ip4_input_accept>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d108      	bne.n	800f46e <ip4_input+0x10e>
 800f45c:	e000      	b.n	800f460 <ip4_input+0x100>
            continue;
 800f45e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1ed      	bne.n	800f448 <ip4_input+0xe8>
 800f46c:	e000      	b.n	800f470 <ip4_input+0x110>
            break;
 800f46e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f470:	4b4b      	ldr	r3, [pc, #300]	@ (800f5a0 <ip4_input+0x240>)
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	6839      	ldr	r1, [r7, #0]
 800f476:	4618      	mov	r0, r3
 800f478:	f000 f96e 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d105      	bne.n	800f48e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f482:	4b47      	ldr	r3, [pc, #284]	@ (800f5a0 <ip4_input+0x240>)
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f48a:	2be0      	cmp	r3, #224	@ 0xe0
 800f48c:	d104      	bne.n	800f498 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7f8 f80a 	bl	80074a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800f494:	2300      	movs	r3, #0
 800f496:	e07e      	b.n	800f596 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d104      	bne.n	800f4a8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f8 f802 	bl	80074a8 <pbuf_free>
    return ERR_OK;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	e076      	b.n	800f596 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	88db      	ldrh	r3, [r3, #6]
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00b      	beq.n	800f4d2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fc92 	bl	800fde4 <ip4_reass>
 800f4c0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d101      	bne.n	800f4cc <ip4_input+0x16c>
      return ERR_OK;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	e064      	b.n	800f596 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800f4d2:	4a33      	ldr	r2, [pc, #204]	@ (800f5a0 <ip4_input+0x240>)
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800f4d8:	4a31      	ldr	r2, [pc, #196]	@ (800f5a0 <ip4_input+0x240>)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800f4de:	4a30      	ldr	r2, [pc, #192]	@ (800f5a0 <ip4_input+0x240>)
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	f003 030f 	and.w	r3, r3, #15
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4b2a      	ldr	r3, [pc, #168]	@ (800f5a0 <ip4_input+0x240>)
 800f4f6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800f4f8:	89fb      	ldrh	r3, [r7, #14]
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f7 ff4d 	bl	800739c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	7a5b      	ldrb	r3, [r3, #9]
 800f506:	2b11      	cmp	r3, #17
 800f508:	d006      	beq.n	800f518 <ip4_input+0x1b8>
 800f50a:	2b11      	cmp	r3, #17
 800f50c:	dc13      	bgt.n	800f536 <ip4_input+0x1d6>
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d00c      	beq.n	800f52c <ip4_input+0x1cc>
 800f512:	2b06      	cmp	r3, #6
 800f514:	d005      	beq.n	800f522 <ip4_input+0x1c2>
 800f516:	e00e      	b.n	800f536 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7fe fc68 	bl	800ddf0 <udp_input>
        break;
 800f520:	e026      	b.n	800f570 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800f522:	6839      	ldr	r1, [r7, #0]
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7fa f88f 	bl	8009648 <tcp_input>
        break;
 800f52a:	e021      	b.n	800f570 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7ff fcee 	bl	800ef10 <icmp_input>
        break;
 800f534:	e01c      	b.n	800f570 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f536:	4b1a      	ldr	r3, [pc, #104]	@ (800f5a0 <ip4_input+0x240>)
 800f538:	695b      	ldr	r3, [r3, #20]
 800f53a:	6939      	ldr	r1, [r7, #16]
 800f53c:	4618      	mov	r0, r3
 800f53e:	f000 f90b 	bl	800f758 <ip4_addr_isbroadcast_u32>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	d10f      	bne.n	800f568 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f548:	4b15      	ldr	r3, [pc, #84]	@ (800f5a0 <ip4_input+0x240>)
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f550:	2be0      	cmp	r3, #224	@ 0xe0
 800f552:	d009      	beq.n	800f568 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800f554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f558:	4619      	mov	r1, r3
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f7f7 ff91 	bl	8007482 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f560:	2102      	movs	r1, #2
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fdd8 	bl	800f118 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7f7 ff9d 	bl	80074a8 <pbuf_free>
        break;
 800f56e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800f570:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a0 <ip4_input+0x240>)
 800f572:	2200      	movs	r2, #0
 800f574:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800f576:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a0 <ip4_input+0x240>)
 800f578:	2200      	movs	r2, #0
 800f57a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800f57c:	4b08      	ldr	r3, [pc, #32]	@ (800f5a0 <ip4_input+0x240>)
 800f57e:	2200      	movs	r2, #0
 800f580:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f582:	4b07      	ldr	r3, [pc, #28]	@ (800f5a0 <ip4_input+0x240>)
 800f584:	2200      	movs	r2, #0
 800f586:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800f588:	4b05      	ldr	r3, [pc, #20]	@ (800f5a0 <ip4_input+0x240>)
 800f58a:	2200      	movs	r2, #0
 800f58c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f58e:	4b04      	ldr	r3, [pc, #16]	@ (800f5a0 <ip4_input+0x240>)
 800f590:	2200      	movs	r2, #0
 800f592:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3718      	adds	r7, #24
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	20005198 	.word	0x20005198
 800f5a4:	200080a8 	.word	0x200080a8

0800f5a8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b08a      	sub	sp, #40	@ 0x28
 800f5ac:	af04      	add	r7, sp, #16
 800f5ae:	60f8      	str	r0, [r7, #12]
 800f5b0:	60b9      	str	r1, [r7, #8]
 800f5b2:	607a      	str	r2, [r7, #4]
 800f5b4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d009      	beq.n	800f5d4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d003      	beq.n	800f5ce <ip4_output_if+0x26>
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d102      	bne.n	800f5d4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800f5ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f5d4:	78fa      	ldrb	r2, [r7, #3]
 800f5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d8:	9302      	str	r3, [sp, #8]
 800f5da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f5de:	9301      	str	r3, [sp, #4]
 800f5e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5e4:	9300      	str	r3, [sp, #0]
 800f5e6:	4613      	mov	r3, r2
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	6979      	ldr	r1, [r7, #20]
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 f805 	bl	800f5fc <ip4_output_if_src>
 800f5f2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3718      	adds	r7, #24
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b088      	sub	sp, #32
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
 800f608:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	7b9b      	ldrb	r3, [r3, #14]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d006      	beq.n	800f620 <ip4_output_if_src+0x24>
 800f612:	4b4b      	ldr	r3, [pc, #300]	@ (800f740 <ip4_output_if_src+0x144>)
 800f614:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800f618:	494a      	ldr	r1, [pc, #296]	@ (800f744 <ip4_output_if_src+0x148>)
 800f61a:	484b      	ldr	r0, [pc, #300]	@ (800f748 <ip4_output_if_src+0x14c>)
 800f61c:	f001 f8f2 	bl	8010804 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d060      	beq.n	800f6e8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800f626:	2314      	movs	r3, #20
 800f628:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800f62a:	2114      	movs	r1, #20
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f7f7 fea5 	bl	800737c <pbuf_add_header>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f638:	f06f 0301 	mvn.w	r3, #1
 800f63c:	e07c      	b.n	800f738 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	895b      	ldrh	r3, [r3, #10]
 800f648:	2b13      	cmp	r3, #19
 800f64a:	d806      	bhi.n	800f65a <ip4_output_if_src+0x5e>
 800f64c:	4b3c      	ldr	r3, [pc, #240]	@ (800f740 <ip4_output_if_src+0x144>)
 800f64e:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800f652:	493e      	ldr	r1, [pc, #248]	@ (800f74c <ip4_output_if_src+0x150>)
 800f654:	483c      	ldr	r0, [pc, #240]	@ (800f748 <ip4_output_if_src+0x14c>)
 800f656:	f001 f8d5 	bl	8010804 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	78fa      	ldrb	r2, [r7, #3]
 800f65e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f666:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f670:	8b7b      	ldrh	r3, [r7, #26]
 800f672:	089b      	lsrs	r3, r3, #2
 800f674:	b29b      	uxth	r3, r3
 800f676:	b2db      	uxtb	r3, r3
 800f678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f67c:	b2da      	uxtb	r2, r3
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f688:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	891b      	ldrh	r3, [r3, #8]
 800f68e:	4618      	mov	r0, r3
 800f690:	f7f6 fb7a 	bl	8005d88 <lwip_htons>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	719a      	strb	r2, [r3, #6]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f6a6:	4b2a      	ldr	r3, [pc, #168]	@ (800f750 <ip4_output_if_src+0x154>)
 800f6a8:	881b      	ldrh	r3, [r3, #0]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f6 fb6c 	bl	8005d88 <lwip_htons>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f6b8:	4b25      	ldr	r3, [pc, #148]	@ (800f750 <ip4_output_if_src+0x154>)
 800f6ba:	881b      	ldrh	r3, [r3, #0]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	4b23      	ldr	r3, [pc, #140]	@ (800f750 <ip4_output_if_src+0x154>)
 800f6c2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d104      	bne.n	800f6d4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f6ca:	4b22      	ldr	r3, [pc, #136]	@ (800f754 <ip4_output_if_src+0x158>)
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	60da      	str	r2, [r3, #12]
 800f6d2:	e003      	b.n	800f6dc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f6dc:	69fb      	ldr	r3, [r7, #28]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	729a      	strb	r2, [r3, #10]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	72da      	strb	r2, [r3, #11]
 800f6e6:	e00f      	b.n	800f708 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	895b      	ldrh	r3, [r3, #10]
 800f6ec:	2b13      	cmp	r3, #19
 800f6ee:	d802      	bhi.n	800f6f6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f6f0:	f06f 0301 	mvn.w	r3, #1
 800f6f4:	e020      	b.n	800f738 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f702:	f107 0314 	add.w	r3, r7, #20
 800f706:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f70a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00c      	beq.n	800f72a <ip4_output_if_src+0x12e>
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	891a      	ldrh	r2, [r3, #8]
 800f714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f716:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f718:	429a      	cmp	r2, r3
 800f71a:	d906      	bls.n	800f72a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f720:	68f8      	ldr	r0, [r7, #12]
 800f722:	f000 fd53 	bl	80101cc <ip4_frag>
 800f726:	4603      	mov	r3, r0
 800f728:	e006      	b.n	800f738 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72c:	695b      	ldr	r3, [r3, #20]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	68f9      	ldr	r1, [r7, #12]
 800f732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f734:	4798      	blx	r3
 800f736:	4603      	mov	r3, r0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3720      	adds	r7, #32
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	08013f18 	.word	0x08013f18
 800f744:	08013f4c 	.word	0x08013f4c
 800f748:	08013f58 	.word	0x08013f58
 800f74c:	08013f80 	.word	0x08013f80
 800f750:	20008206 	.word	0x20008206
 800f754:	08015164 	.word	0x08015164

0800f758 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76c:	d002      	beq.n	800f774 <ip4_addr_isbroadcast_u32+0x1c>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f774:	2301      	movs	r3, #1
 800f776:	e02a      	b.n	800f7ce <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f77e:	f003 0302 	and.w	r3, r3, #2
 800f782:	2b00      	cmp	r3, #0
 800f784:	d101      	bne.n	800f78a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f786:	2300      	movs	r3, #0
 800f788:	e021      	b.n	800f7ce <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	3304      	adds	r3, #4
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	429a      	cmp	r2, r3
 800f794:	d101      	bne.n	800f79a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f796:	2300      	movs	r3, #0
 800f798:	e019      	b.n	800f7ce <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f79a:	68fa      	ldr	r2, [r7, #12]
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	405a      	eors	r2, r3
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	3308      	adds	r3, #8
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	4013      	ands	r3, r2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10d      	bne.n	800f7cc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	3308      	adds	r3, #8
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	43da      	mvns	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d101      	bne.n	800f7cc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	e000      	b.n	800f7ce <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f7cc:	2300      	movs	r3, #0
  }
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3714      	adds	r7, #20
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
	...

0800f7dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f7e6:	4b12      	ldr	r3, [pc, #72]	@ (800f830 <ip_reass_tmr+0x54>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f7ec:	e018      	b.n	800f820 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	7fdb      	ldrb	r3, [r3, #31]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00b      	beq.n	800f80e <ip_reass_tmr+0x32>
      r->timer--;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	7fdb      	ldrb	r3, [r3, #31]
 800f7fa:	3b01      	subs	r3, #1
 800f7fc:	b2da      	uxtb	r2, r3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	60fb      	str	r3, [r7, #12]
 800f80c:	e008      	b.n	800f820 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f818:	68b9      	ldr	r1, [r7, #8]
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 f80a 	bl	800f834 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1e3      	bne.n	800f7ee <ip_reass_tmr+0x12>
    }
  }
}
 800f826:	bf00      	nop
 800f828:	bf00      	nop
 800f82a:	3710      	adds	r7, #16
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}
 800f830:	20008208 	.word	0x20008208

0800f834 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b088      	sub	sp, #32
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f83e:	2300      	movs	r3, #0
 800f840:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	429a      	cmp	r2, r3
 800f848:	d105      	bne.n	800f856 <ip_reass_free_complete_datagram+0x22>
 800f84a:	4b45      	ldr	r3, [pc, #276]	@ (800f960 <ip_reass_free_complete_datagram+0x12c>)
 800f84c:	22ab      	movs	r2, #171	@ 0xab
 800f84e:	4945      	ldr	r1, [pc, #276]	@ (800f964 <ip_reass_free_complete_datagram+0x130>)
 800f850:	4845      	ldr	r0, [pc, #276]	@ (800f968 <ip_reass_free_complete_datagram+0x134>)
 800f852:	f000 ffd7 	bl	8010804 <iprintf>
  if (prev != NULL) {
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00a      	beq.n	800f872 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d005      	beq.n	800f872 <ip_reass_free_complete_datagram+0x3e>
 800f866:	4b3e      	ldr	r3, [pc, #248]	@ (800f960 <ip_reass_free_complete_datagram+0x12c>)
 800f868:	22ad      	movs	r2, #173	@ 0xad
 800f86a:	4940      	ldr	r1, [pc, #256]	@ (800f96c <ip_reass_free_complete_datagram+0x138>)
 800f86c:	483e      	ldr	r0, [pc, #248]	@ (800f968 <ip_reass_free_complete_datagram+0x134>)
 800f86e:	f000 ffc9 	bl	8010804 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	889b      	ldrh	r3, [r3, #4]
 800f87e:	b29b      	uxth	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d12a      	bne.n	800f8da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	6858      	ldr	r0, [r3, #4]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3308      	adds	r3, #8
 800f89a:	2214      	movs	r2, #20
 800f89c:	4619      	mov	r1, r3
 800f89e:	f001 f8aa 	bl	80109f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	69b8      	ldr	r0, [r7, #24]
 800f8a6:	f7ff fc47 	bl	800f138 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f8aa:	69b8      	ldr	r0, [r7, #24]
 800f8ac:	f7f7 fe84 	bl	80075b8 <pbuf_clen>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f8b4:	8bfa      	ldrh	r2, [r7, #30]
 800f8b6:	8a7b      	ldrh	r3, [r7, #18]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8be:	db05      	blt.n	800f8cc <ip_reass_free_complete_datagram+0x98>
 800f8c0:	4b27      	ldr	r3, [pc, #156]	@ (800f960 <ip_reass_free_complete_datagram+0x12c>)
 800f8c2:	22bc      	movs	r2, #188	@ 0xbc
 800f8c4:	492a      	ldr	r1, [pc, #168]	@ (800f970 <ip_reass_free_complete_datagram+0x13c>)
 800f8c6:	4828      	ldr	r0, [pc, #160]	@ (800f968 <ip_reass_free_complete_datagram+0x134>)
 800f8c8:	f000 ff9c 	bl	8010804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f8cc:	8bfa      	ldrh	r2, [r7, #30]
 800f8ce:	8a7b      	ldrh	r3, [r7, #18]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f8d4:	69b8      	ldr	r0, [r7, #24]
 800f8d6:	f7f7 fde7 	bl	80074a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f8e0:	e01f      	b.n	800f922 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f8f2:	68f8      	ldr	r0, [r7, #12]
 800f8f4:	f7f7 fe60 	bl	80075b8 <pbuf_clen>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f8fc:	8bfa      	ldrh	r2, [r7, #30]
 800f8fe:	8a7b      	ldrh	r3, [r7, #18]
 800f900:	4413      	add	r3, r2
 800f902:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f906:	db05      	blt.n	800f914 <ip_reass_free_complete_datagram+0xe0>
 800f908:	4b15      	ldr	r3, [pc, #84]	@ (800f960 <ip_reass_free_complete_datagram+0x12c>)
 800f90a:	22cc      	movs	r2, #204	@ 0xcc
 800f90c:	4918      	ldr	r1, [pc, #96]	@ (800f970 <ip_reass_free_complete_datagram+0x13c>)
 800f90e:	4816      	ldr	r0, [pc, #88]	@ (800f968 <ip_reass_free_complete_datagram+0x134>)
 800f910:	f000 ff78 	bl	8010804 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f914:	8bfa      	ldrh	r2, [r7, #30]
 800f916:	8a7b      	ldrh	r3, [r7, #18]
 800f918:	4413      	add	r3, r2
 800f91a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7f7 fdc3 	bl	80074a8 <pbuf_free>
  while (p != NULL) {
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d1dc      	bne.n	800f8e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f928:	6839      	ldr	r1, [r7, #0]
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f8c2 	bl	800fab4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f930:	4b10      	ldr	r3, [pc, #64]	@ (800f974 <ip_reass_free_complete_datagram+0x140>)
 800f932:	881b      	ldrh	r3, [r3, #0]
 800f934:	8bfa      	ldrh	r2, [r7, #30]
 800f936:	429a      	cmp	r2, r3
 800f938:	d905      	bls.n	800f946 <ip_reass_free_complete_datagram+0x112>
 800f93a:	4b09      	ldr	r3, [pc, #36]	@ (800f960 <ip_reass_free_complete_datagram+0x12c>)
 800f93c:	22d2      	movs	r2, #210	@ 0xd2
 800f93e:	490e      	ldr	r1, [pc, #56]	@ (800f978 <ip_reass_free_complete_datagram+0x144>)
 800f940:	4809      	ldr	r0, [pc, #36]	@ (800f968 <ip_reass_free_complete_datagram+0x134>)
 800f942:	f000 ff5f 	bl	8010804 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f946:	4b0b      	ldr	r3, [pc, #44]	@ (800f974 <ip_reass_free_complete_datagram+0x140>)
 800f948:	881a      	ldrh	r2, [r3, #0]
 800f94a:	8bfb      	ldrh	r3, [r7, #30]
 800f94c:	1ad3      	subs	r3, r2, r3
 800f94e:	b29a      	uxth	r2, r3
 800f950:	4b08      	ldr	r3, [pc, #32]	@ (800f974 <ip_reass_free_complete_datagram+0x140>)
 800f952:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f954:	8bfb      	ldrh	r3, [r7, #30]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3720      	adds	r7, #32
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	08013fb0 	.word	0x08013fb0
 800f964:	08013fec 	.word	0x08013fec
 800f968:	08013ff8 	.word	0x08013ff8
 800f96c:	08014020 	.word	0x08014020
 800f970:	08014034 	.word	0x08014034
 800f974:	2000820c 	.word	0x2000820c
 800f978:	08014054 	.word	0x08014054

0800f97c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08a      	sub	sp, #40	@ 0x28
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f986:	2300      	movs	r3, #0
 800f988:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f98a:	2300      	movs	r3, #0
 800f98c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f98e:	2300      	movs	r3, #0
 800f990:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f992:	2300      	movs	r3, #0
 800f994:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f996:	2300      	movs	r3, #0
 800f998:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f99a:	4b28      	ldr	r3, [pc, #160]	@ (800fa3c <ip_reass_remove_oldest_datagram+0xc0>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f9a0:	e030      	b.n	800fa04 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a4:	695a      	ldr	r2, [r3, #20]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68db      	ldr	r3, [r3, #12]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d10c      	bne.n	800f9c8 <ip_reass_remove_oldest_datagram+0x4c>
 800f9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b0:	699a      	ldr	r2, [r3, #24]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d106      	bne.n	800f9c8 <ip_reass_remove_oldest_datagram+0x4c>
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9bc:	899a      	ldrh	r2, [r3, #12]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	889b      	ldrh	r3, [r3, #4]
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d014      	beq.n	800f9f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d104      	bne.n	800f9de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	61bb      	str	r3, [r7, #24]
 800f9dc:	e009      	b.n	800f9f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e0:	7fda      	ldrb	r2, [r3, #31]
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	7fdb      	ldrb	r3, [r3, #31]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d803      	bhi.n	800f9f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d001      	beq.n	800f9fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800fa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d1cb      	bne.n	800f9a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d008      	beq.n	800fa22 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fa10:	69b9      	ldr	r1, [r7, #24]
 800fa12:	6a38      	ldr	r0, [r7, #32]
 800fa14:	f7ff ff0e 	bl	800f834 <ip_reass_free_complete_datagram>
 800fa18:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4413      	add	r3, r2
 800fa20:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800fa22:	697a      	ldr	r2, [r7, #20]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	429a      	cmp	r2, r3
 800fa28:	da02      	bge.n	800fa30 <ip_reass_remove_oldest_datagram+0xb4>
 800fa2a:	693b      	ldr	r3, [r7, #16]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	dcac      	bgt.n	800f98a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800fa30:	697b      	ldr	r3, [r7, #20]
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3728      	adds	r7, #40	@ 0x28
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
 800fa3a:	bf00      	nop
 800fa3c:	20008208 	.word	0x20008208

0800fa40 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa4a:	2004      	movs	r0, #4
 800fa4c:	f7f6 fe46 	bl	80066dc <memp_malloc>
 800fa50:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d110      	bne.n	800fa7a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800fa58:	6839      	ldr	r1, [r7, #0]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7ff ff8e 	bl	800f97c <ip_reass_remove_oldest_datagram>
 800fa60:	4602      	mov	r2, r0
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	dc03      	bgt.n	800fa70 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800fa68:	2004      	movs	r0, #4
 800fa6a:	f7f6 fe37 	bl	80066dc <memp_malloc>
 800fa6e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e016      	b.n	800faa8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800fa7a:	2220      	movs	r2, #32
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f000 ff25 	bl	80108ce <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	220f      	movs	r2, #15
 800fa88:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800fa8a:	4b09      	ldr	r3, [pc, #36]	@ (800fab0 <ip_reass_enqueue_new_datagram+0x70>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800fa92:	4a07      	ldr	r2, [pc, #28]	@ (800fab0 <ip_reass_enqueue_new_datagram+0x70>)
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	2214      	movs	r2, #20
 800fa9e:	6879      	ldr	r1, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f000 ffa8 	bl	80109f6 <memcpy>
  return ipr;
 800faa6:	68fb      	ldr	r3, [r7, #12]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	20008208 	.word	0x20008208

0800fab4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800fabe:	4b10      	ldr	r3, [pc, #64]	@ (800fb00 <ip_reass_dequeue_datagram+0x4c>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d104      	bne.n	800fad2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a0c      	ldr	r2, [pc, #48]	@ (800fb00 <ip_reass_dequeue_datagram+0x4c>)
 800face:	6013      	str	r3, [r2, #0]
 800fad0:	e00d      	b.n	800faee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d106      	bne.n	800fae6 <ip_reass_dequeue_datagram+0x32>
 800fad8:	4b0a      	ldr	r3, [pc, #40]	@ (800fb04 <ip_reass_dequeue_datagram+0x50>)
 800fada:	f240 1245 	movw	r2, #325	@ 0x145
 800fade:	490a      	ldr	r1, [pc, #40]	@ (800fb08 <ip_reass_dequeue_datagram+0x54>)
 800fae0:	480a      	ldr	r0, [pc, #40]	@ (800fb0c <ip_reass_dequeue_datagram+0x58>)
 800fae2:	f000 fe8f 	bl	8010804 <iprintf>
    prev->next = ipr->next;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800faee:	6879      	ldr	r1, [r7, #4]
 800faf0:	2004      	movs	r0, #4
 800faf2:	f7f6 fe63 	bl	80067bc <memp_free>
}
 800faf6:	bf00      	nop
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20008208 	.word	0x20008208
 800fb04:	08013fb0 	.word	0x08013fb0
 800fb08:	08014078 	.word	0x08014078
 800fb0c:	08013ff8 	.word	0x08013ff8

0800fb10 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b08c      	sub	sp, #48	@ 0x30
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800fb20:	2301      	movs	r3, #1
 800fb22:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	885b      	ldrh	r3, [r3, #2]
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7f6 f929 	bl	8005d88 <lwip_htons>
 800fb36:	4603      	mov	r3, r0
 800fb38:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f003 030f 	and.w	r3, r3, #15
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800fb48:	7e7b      	ldrb	r3, [r7, #25]
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	8b7a      	ldrh	r2, [r7, #26]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d202      	bcs.n	800fb58 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fb52:	f04f 33ff 	mov.w	r3, #4294967295
 800fb56:	e135      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800fb58:	7e7b      	ldrb	r3, [r7, #25]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	8b7a      	ldrh	r2, [r7, #26]
 800fb5e:	1ad3      	subs	r3, r2, r3
 800fb60:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	88db      	ldrh	r3, [r3, #6]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7f6 f90d 	bl	8005d88 <lwip_htons>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb74:	b29b      	uxth	r3, r3
 800fb76:	00db      	lsls	r3, r3, #3
 800fb78:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800fb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb82:	2200      	movs	r2, #0
 800fb84:	701a      	strb	r2, [r3, #0]
 800fb86:	2200      	movs	r2, #0
 800fb88:	705a      	strb	r2, [r3, #1]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	709a      	strb	r2, [r3, #2]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800fb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb94:	8afa      	ldrh	r2, [r7, #22]
 800fb96:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800fb98:	8afa      	ldrh	r2, [r7, #22]
 800fb9a:	8b7b      	ldrh	r3, [r7, #26]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	b29a      	uxth	r2, r3
 800fba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800fba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fba6:	88db      	ldrh	r3, [r3, #6]
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	8afa      	ldrh	r2, [r7, #22]
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d902      	bls.n	800fbb6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb4:	e106      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbbc:	e068      	b.n	800fc90 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800fbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800fbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc6:	889b      	ldrh	r3, [r3, #4]
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	889b      	ldrh	r3, [r3, #4]
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d235      	bcs.n	800fc40 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800fbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbd8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800fbda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d020      	beq.n	800fc22 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbe2:	889b      	ldrh	r3, [r3, #4]
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbe8:	88db      	ldrh	r3, [r3, #6]
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d307      	bcc.n	800fc00 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800fbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbf2:	88db      	ldrh	r3, [r3, #6]
 800fbf4:	b29a      	uxth	r2, r3
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	889b      	ldrh	r3, [r3, #4]
 800fbfa:	b29b      	uxth	r3, r3
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d902      	bls.n	800fc06 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc00:	f04f 33ff 	mov.w	r3, #4294967295
 800fc04:	e0de      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800fc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc08:	68ba      	ldr	r2, [r7, #8]
 800fc0a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800fc0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc0e:	88db      	ldrh	r3, [r3, #6]
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc14:	889b      	ldrh	r3, [r3, #4]
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d03d      	beq.n	800fc98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800fc20:	e03a      	b.n	800fc98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800fc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc24:	88db      	ldrh	r3, [r3, #6]
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	889b      	ldrh	r3, [r3, #4]
 800fc2c:	b29b      	uxth	r3, r3
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d902      	bls.n	800fc38 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc32:	f04f 33ff 	mov.w	r3, #4294967295
 800fc36:	e0c5      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	605a      	str	r2, [r3, #4]
      break;
 800fc3e:	e02b      	b.n	800fc98 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800fc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc42:	889b      	ldrh	r3, [r3, #4]
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	889b      	ldrh	r3, [r3, #4]
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d102      	bne.n	800fc56 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc50:	f04f 33ff 	mov.w	r3, #4294967295
 800fc54:	e0b6      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800fc56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc58:	889b      	ldrh	r3, [r3, #4]
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	88db      	ldrh	r3, [r3, #6]
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d202      	bcs.n	800fc6c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800fc66:	f04f 33ff 	mov.w	r3, #4294967295
 800fc6a:	e0ab      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800fc6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d009      	beq.n	800fc86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800fc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc74:	88db      	ldrh	r3, [r3, #6]
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	889b      	ldrh	r3, [r3, #4]
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	429a      	cmp	r2, r3
 800fc80:	d001      	beq.n	800fc86 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800fc82:	2300      	movs	r3, #0
 800fc84:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800fc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d193      	bne.n	800fbbe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800fc96:	e000      	b.n	800fc9a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800fc98:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800fc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d12d      	bne.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800fca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d01c      	beq.n	800fce0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca8:	88db      	ldrh	r3, [r3, #6]
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcae:	889b      	ldrh	r3, [r3, #4]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d906      	bls.n	800fcc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800fcb6:	4b45      	ldr	r3, [pc, #276]	@ (800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcb8:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800fcbc:	4944      	ldr	r1, [pc, #272]	@ (800fdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800fcbe:	4845      	ldr	r0, [pc, #276]	@ (800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcc0:	f000 fda0 	bl	8010804 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800fcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800fcca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fccc:	88db      	ldrh	r3, [r3, #6]
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd2:	889b      	ldrh	r3, [r3, #4]
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d010      	beq.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	623b      	str	r3, [r7, #32]
 800fcde:	e00d      	b.n	800fcfc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d006      	beq.n	800fcf6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800fce8:	4b38      	ldr	r3, [pc, #224]	@ (800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fcea:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800fcee:	493a      	ldr	r1, [pc, #232]	@ (800fdd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800fcf0:	4838      	ldr	r0, [pc, #224]	@ (800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fcf2:	f000 fd87 	bl	8010804 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d105      	bne.n	800fd0e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	7f9b      	ldrb	r3, [r3, #30]
 800fd06:	f003 0301 	and.w	r3, r3, #1
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d059      	beq.n	800fdc2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800fd0e:	6a3b      	ldr	r3, [r7, #32]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d04f      	beq.n	800fdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d006      	beq.n	800fd2a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	685b      	ldr	r3, [r3, #4]
 800fd22:	889b      	ldrh	r3, [r3, #4]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d002      	beq.n	800fd30 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	623b      	str	r3, [r7, #32]
 800fd2e:	e041      	b.n	800fdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800fd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd32:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800fd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fd3a:	e012      	b.n	800fd62 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3e:	685b      	ldr	r3, [r3, #4]
 800fd40:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800fd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd44:	88db      	ldrh	r3, [r3, #6]
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd4a:	889b      	ldrh	r3, [r3, #4]
 800fd4c:	b29b      	uxth	r3, r3
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d002      	beq.n	800fd58 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800fd52:	2300      	movs	r3, #0
 800fd54:	623b      	str	r3, [r7, #32]
            break;
 800fd56:	e007      	b.n	800fd68 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800fd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5a:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800fd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800fd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1e9      	bne.n	800fd3c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800fd68:	6a3b      	ldr	r3, [r7, #32]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d022      	beq.n	800fdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d106      	bne.n	800fd84 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800fd76:	4b15      	ldr	r3, [pc, #84]	@ (800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd78:	f240 12df 	movw	r2, #479	@ 0x1df
 800fd7c:	4917      	ldr	r1, [pc, #92]	@ (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd7e:	4815      	ldr	r0, [pc, #84]	@ (800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd80:	f000 fd40 	bl	8010804 <iprintf>
          LWIP_ASSERT("sanity check",
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d106      	bne.n	800fd9e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800fd90:	4b0e      	ldr	r3, [pc, #56]	@ (800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fd92:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fd96:	4911      	ldr	r1, [pc, #68]	@ (800fddc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800fd98:	480e      	ldr	r0, [pc, #56]	@ (800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fd9a:	f000 fd33 	bl	8010804 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d006      	beq.n	800fdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800fda6:	4b09      	ldr	r3, [pc, #36]	@ (800fdcc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800fda8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800fdac:	490c      	ldr	r1, [pc, #48]	@ (800fde0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800fdae:	4809      	ldr	r0, [pc, #36]	@ (800fdd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800fdb0:	f000 fd28 	bl	8010804 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800fdb4:	6a3b      	ldr	r3, [r7, #32]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	bf14      	ite	ne
 800fdba:	2301      	movne	r3, #1
 800fdbc:	2300      	moveq	r3, #0
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	e000      	b.n	800fdc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3730      	adds	r7, #48	@ 0x30
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	08013fb0 	.word	0x08013fb0
 800fdd0:	08014094 	.word	0x08014094
 800fdd4:	08013ff8 	.word	0x08013ff8
 800fdd8:	080140b4 	.word	0x080140b4
 800fddc:	080140ec 	.word	0x080140ec
 800fde0:	080140fc 	.word	0x080140fc

0800fde4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08e      	sub	sp, #56	@ 0x38
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800fdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	f003 030f 	and.w	r3, r3, #15
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	009b      	lsls	r3, r3, #2
 800fdfe:	b2db      	uxtb	r3, r3
 800fe00:	2b14      	cmp	r3, #20
 800fe02:	f040 8171 	bne.w	80100e8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800fe06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe08:	88db      	ldrh	r3, [r3, #6]
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7f5 ffbb 	bl	8005d88 <lwip_htons>
 800fe12:	4603      	mov	r3, r0
 800fe14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	00db      	lsls	r3, r3, #3
 800fe1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800fe1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe20:	885b      	ldrh	r3, [r3, #2]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7f5 ffaf 	bl	8005d88 <lwip_htons>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800fe2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	f003 030f 	and.w	r3, r3, #15
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800fe3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe46:	429a      	cmp	r2, r3
 800fe48:	f0c0 8150 	bcc.w	80100ec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800fe4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800fe50:	b29b      	uxth	r3, r3
 800fe52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7f7 fbad 	bl	80075b8 <pbuf_clen>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800fe62:	4b8c      	ldr	r3, [pc, #560]	@ (8010094 <ip4_reass+0x2b0>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	461a      	mov	r2, r3
 800fe68:	8c3b      	ldrh	r3, [r7, #32]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	2b0a      	cmp	r3, #10
 800fe6e:	dd10      	ble.n	800fe92 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe70:	8c3b      	ldrh	r3, [r7, #32]
 800fe72:	4619      	mov	r1, r3
 800fe74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe76:	f7ff fd81 	bl	800f97c <ip_reass_remove_oldest_datagram>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	f000 8137 	beq.w	80100f0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fe82:	4b84      	ldr	r3, [pc, #528]	@ (8010094 <ip4_reass+0x2b0>)
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	461a      	mov	r2, r3
 800fe88:	8c3b      	ldrh	r3, [r7, #32]
 800fe8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fe8c:	2b0a      	cmp	r3, #10
 800fe8e:	f300 812f 	bgt.w	80100f0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fe92:	4b81      	ldr	r3, [pc, #516]	@ (8010098 <ip4_reass+0x2b4>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe98:	e015      	b.n	800fec6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fe9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe9c:	695a      	ldr	r2, [r3, #20]
 800fe9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d10c      	bne.n	800fec0 <ip4_reass+0xdc>
 800fea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea8:	699a      	ldr	r2, [r3, #24]
 800feaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	429a      	cmp	r2, r3
 800feb0:	d106      	bne.n	800fec0 <ip4_reass+0xdc>
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	899a      	ldrh	r2, [r3, #12]
 800feb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb8:	889b      	ldrh	r3, [r3, #4]
 800feba:	b29b      	uxth	r3, r3
 800febc:	429a      	cmp	r2, r3
 800febe:	d006      	beq.n	800fece <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	633b      	str	r3, [r7, #48]	@ 0x30
 800fec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1e6      	bne.n	800fe9a <ip4_reass+0xb6>
 800fecc:	e000      	b.n	800fed0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800fece:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800fed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d109      	bne.n	800feea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800fed6:	8c3b      	ldrh	r3, [r7, #32]
 800fed8:	4619      	mov	r1, r3
 800feda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fedc:	f7ff fdb0 	bl	800fa40 <ip_reass_enqueue_new_datagram>
 800fee0:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800fee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d11c      	bne.n	800ff22 <ip4_reass+0x13e>
      goto nullreturn;
 800fee8:	e105      	b.n	80100f6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800feea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feec:	88db      	ldrh	r3, [r3, #6]
 800feee:	b29b      	uxth	r3, r3
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7f5 ff49 	bl	8005d88 <lwip_htons>
 800fef6:	4603      	mov	r3, r0
 800fef8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d110      	bne.n	800ff22 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ff00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff02:	89db      	ldrh	r3, [r3, #14]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7f5 ff3f 	bl	8005d88 <lwip_htons>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d006      	beq.n	800ff22 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ff14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff16:	3308      	adds	r3, #8
 800ff18:	2214      	movs	r2, #20
 800ff1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 fd6a 	bl	80109f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ff22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff24:	88db      	ldrh	r3, [r3, #6]
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	f003 0320 	and.w	r3, r3, #32
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	bf0c      	ite	eq
 800ff30:	2301      	moveq	r3, #1
 800ff32:	2300      	movne	r3, #0
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d00e      	beq.n	800ff5c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff3e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff42:	4413      	add	r3, r2
 800ff44:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ff46:	8b7a      	ldrh	r2, [r7, #26]
 800ff48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	f0c0 80a0 	bcc.w	8010090 <ip4_reass+0x2ac>
 800ff50:	8b7b      	ldrh	r3, [r7, #26]
 800ff52:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800ff56:	4293      	cmp	r3, r2
 800ff58:	f200 809a 	bhi.w	8010090 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	6879      	ldr	r1, [r7, #4]
 800ff60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ff62:	f7ff fdd5 	bl	800fb10 <ip_reass_chain_frag_into_datagram_and_validate>
 800ff66:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff6e:	f000 809b 	beq.w	80100a8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ff72:	4b48      	ldr	r3, [pc, #288]	@ (8010094 <ip4_reass+0x2b0>)
 800ff74:	881a      	ldrh	r2, [r3, #0]
 800ff76:	8c3b      	ldrh	r3, [r7, #32]
 800ff78:	4413      	add	r3, r2
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b45      	ldr	r3, [pc, #276]	@ (8010094 <ip4_reass+0x2b0>)
 800ff7e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d00d      	beq.n	800ffa2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ff86:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ff88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ff8a:	4413      	add	r3, r2
 800ff8c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ff8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff90:	8a7a      	ldrh	r2, [r7, #18]
 800ff92:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ff94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff96:	7f9b      	ldrb	r3, [r3, #30]
 800ff98:	f043 0301 	orr.w	r3, r3, #1
 800ff9c:	b2da      	uxtb	r2, r3
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffa0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	2b01      	cmp	r3, #1
 800ffa6:	d171      	bne.n	801008c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffaa:	8b9b      	ldrh	r3, [r3, #28]
 800ffac:	3314      	adds	r3, #20
 800ffae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ffba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	685b      	ldr	r3, [r3, #4]
 800ffc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc4:	3308      	adds	r3, #8
 800ffc6:	2214      	movs	r2, #20
 800ffc8:	4619      	mov	r1, r3
 800ffca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffcc:	f000 fd13 	bl	80109f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ffd0:	8a3b      	ldrh	r3, [r7, #16]
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7f5 fed8 	bl	8005d88 <lwip_htons>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	461a      	mov	r2, r3
 800ffdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffde:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	719a      	strb	r2, [r3, #6]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ffea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffec:	2200      	movs	r2, #0
 800ffee:	729a      	strb	r2, [r3, #10]
 800fff0:	2200      	movs	r2, #0
 800fff2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800fff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800fffa:	e00d      	b.n	8010018 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800fffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010002:	2114      	movs	r1, #20
 8010004:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010006:	f7f7 f9c9 	bl	800739c <pbuf_remove_header>
      pbuf_cat(p, r);
 801000a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7f7 fb0d 	bl	800762c <pbuf_cat>
      r = iprh->next_pbuf;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1ee      	bne.n	800fffc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801001e:	4b1e      	ldr	r3, [pc, #120]	@ (8010098 <ip4_reass+0x2b4>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010024:	429a      	cmp	r2, r3
 8010026:	d102      	bne.n	801002e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010028:	2300      	movs	r3, #0
 801002a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801002c:	e010      	b.n	8010050 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801002e:	4b1a      	ldr	r3, [pc, #104]	@ (8010098 <ip4_reass+0x2b4>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010034:	e007      	b.n	8010046 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801003c:	429a      	cmp	r2, r3
 801003e:	d006      	beq.n	801004e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010048:	2b00      	cmp	r3, #0
 801004a:	d1f4      	bne.n	8010036 <ip4_reass+0x252>
 801004c:	e000      	b.n	8010050 <ip4_reass+0x26c>
          break;
 801004e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010050:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010052:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010054:	f7ff fd2e 	bl	800fab4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7f7 faad 	bl	80075b8 <pbuf_clen>
 801005e:	4603      	mov	r3, r0
 8010060:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010062:	4b0c      	ldr	r3, [pc, #48]	@ (8010094 <ip4_reass+0x2b0>)
 8010064:	881b      	ldrh	r3, [r3, #0]
 8010066:	8c3a      	ldrh	r2, [r7, #32]
 8010068:	429a      	cmp	r2, r3
 801006a:	d906      	bls.n	801007a <ip4_reass+0x296>
 801006c:	4b0b      	ldr	r3, [pc, #44]	@ (801009c <ip4_reass+0x2b8>)
 801006e:	f240 229b 	movw	r2, #667	@ 0x29b
 8010072:	490b      	ldr	r1, [pc, #44]	@ (80100a0 <ip4_reass+0x2bc>)
 8010074:	480b      	ldr	r0, [pc, #44]	@ (80100a4 <ip4_reass+0x2c0>)
 8010076:	f000 fbc5 	bl	8010804 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801007a:	4b06      	ldr	r3, [pc, #24]	@ (8010094 <ip4_reass+0x2b0>)
 801007c:	881a      	ldrh	r2, [r3, #0]
 801007e:	8c3b      	ldrh	r3, [r7, #32]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	b29a      	uxth	r2, r3
 8010084:	4b03      	ldr	r3, [pc, #12]	@ (8010094 <ip4_reass+0x2b0>)
 8010086:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	e038      	b.n	80100fe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801008c:	2300      	movs	r3, #0
 801008e:	e036      	b.n	80100fe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010090:	bf00      	nop
 8010092:	e00a      	b.n	80100aa <ip4_reass+0x2c6>
 8010094:	2000820c 	.word	0x2000820c
 8010098:	20008208 	.word	0x20008208
 801009c:	08013fb0 	.word	0x08013fb0
 80100a0:	08014120 	.word	0x08014120
 80100a4:	08013ff8 	.word	0x08013ff8
    goto nullreturn_ipr;
 80100a8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80100aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d106      	bne.n	80100be <ip4_reass+0x2da>
 80100b0:	4b15      	ldr	r3, [pc, #84]	@ (8010108 <ip4_reass+0x324>)
 80100b2:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80100b6:	4915      	ldr	r1, [pc, #84]	@ (801010c <ip4_reass+0x328>)
 80100b8:	4815      	ldr	r0, [pc, #84]	@ (8010110 <ip4_reass+0x32c>)
 80100ba:	f000 fba3 	bl	8010804 <iprintf>
  if (ipr->p == NULL) {
 80100be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d116      	bne.n	80100f4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80100c6:	4b13      	ldr	r3, [pc, #76]	@ (8010114 <ip4_reass+0x330>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d006      	beq.n	80100de <ip4_reass+0x2fa>
 80100d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010108 <ip4_reass+0x324>)
 80100d2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80100d6:	4910      	ldr	r1, [pc, #64]	@ (8010118 <ip4_reass+0x334>)
 80100d8:	480d      	ldr	r0, [pc, #52]	@ (8010110 <ip4_reass+0x32c>)
 80100da:	f000 fb93 	bl	8010804 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80100de:	2100      	movs	r1, #0
 80100e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100e2:	f7ff fce7 	bl	800fab4 <ip_reass_dequeue_datagram>
 80100e6:	e006      	b.n	80100f6 <ip4_reass+0x312>
    goto nullreturn;
 80100e8:	bf00      	nop
 80100ea:	e004      	b.n	80100f6 <ip4_reass+0x312>
    goto nullreturn;
 80100ec:	bf00      	nop
 80100ee:	e002      	b.n	80100f6 <ip4_reass+0x312>
      goto nullreturn;
 80100f0:	bf00      	nop
 80100f2:	e000      	b.n	80100f6 <ip4_reass+0x312>
  }

nullreturn:
 80100f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7f7 f9d6 	bl	80074a8 <pbuf_free>
  return NULL;
 80100fc:	2300      	movs	r3, #0
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3738      	adds	r7, #56	@ 0x38
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	08013fb0 	.word	0x08013fb0
 801010c:	0801413c 	.word	0x0801413c
 8010110:	08013ff8 	.word	0x08013ff8
 8010114:	20008208 	.word	0x20008208
 8010118:	08014148 	.word	0x08014148

0801011c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010120:	2005      	movs	r0, #5
 8010122:	f7f6 fadb 	bl	80066dc <memp_malloc>
 8010126:	4603      	mov	r3, r0
}
 8010128:	4618      	mov	r0, r3
 801012a:	bd80      	pop	{r7, pc}

0801012c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d106      	bne.n	8010148 <ip_frag_free_pbuf_custom_ref+0x1c>
 801013a:	4b07      	ldr	r3, [pc, #28]	@ (8010158 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801013c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010140:	4906      	ldr	r1, [pc, #24]	@ (801015c <ip_frag_free_pbuf_custom_ref+0x30>)
 8010142:	4807      	ldr	r0, [pc, #28]	@ (8010160 <ip_frag_free_pbuf_custom_ref+0x34>)
 8010144:	f000 fb5e 	bl	8010804 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010148:	6879      	ldr	r1, [r7, #4]
 801014a:	2005      	movs	r0, #5
 801014c:	f7f6 fb36 	bl	80067bc <memp_free>
}
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	08013fb0 	.word	0x08013fb0
 801015c:	08014168 	.word	0x08014168
 8010160:	08013ff8 	.word	0x08013ff8

08010164 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <ipfrag_free_pbuf_custom+0x20>
 8010176:	4b11      	ldr	r3, [pc, #68]	@ (80101bc <ipfrag_free_pbuf_custom+0x58>)
 8010178:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801017c:	4910      	ldr	r1, [pc, #64]	@ (80101c0 <ipfrag_free_pbuf_custom+0x5c>)
 801017e:	4811      	ldr	r0, [pc, #68]	@ (80101c4 <ipfrag_free_pbuf_custom+0x60>)
 8010180:	f000 fb40 	bl	8010804 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	429a      	cmp	r2, r3
 801018a:	d006      	beq.n	801019a <ipfrag_free_pbuf_custom+0x36>
 801018c:	4b0b      	ldr	r3, [pc, #44]	@ (80101bc <ipfrag_free_pbuf_custom+0x58>)
 801018e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010192:	490d      	ldr	r1, [pc, #52]	@ (80101c8 <ipfrag_free_pbuf_custom+0x64>)
 8010194:	480b      	ldr	r0, [pc, #44]	@ (80101c4 <ipfrag_free_pbuf_custom+0x60>)
 8010196:	f000 fb35 	bl	8010804 <iprintf>
  if (pcr->original != NULL) {
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	695b      	ldr	r3, [r3, #20]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d004      	beq.n	80101ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	695b      	ldr	r3, [r3, #20]
 80101a6:	4618      	mov	r0, r3
 80101a8:	f7f7 f97e 	bl	80074a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f7ff ffbd 	bl	801012c <ip_frag_free_pbuf_custom_ref>
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	08013fb0 	.word	0x08013fb0
 80101c0:	08014174 	.word	0x08014174
 80101c4:	08013ff8 	.word	0x08013ff8
 80101c8:	08014180 	.word	0x08014180

080101cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b094      	sub	sp, #80	@ 0x50
 80101d0:	af02      	add	r7, sp, #8
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80101d8:	2300      	movs	r3, #0
 80101da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80101e2:	3b14      	subs	r3, #20
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	da00      	bge.n	80101ea <ip4_frag+0x1e>
 80101e8:	3307      	adds	r3, #7
 80101ea:	10db      	asrs	r3, r3, #3
 80101ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80101ee:	2314      	movs	r3, #20
 80101f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80101f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80101fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	f003 030f 	and.w	r3, r3, #15
 8010204:	b2db      	uxtb	r3, r3
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	b2db      	uxtb	r3, r3
 801020a:	2b14      	cmp	r3, #20
 801020c:	d002      	beq.n	8010214 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801020e:	f06f 0305 	mvn.w	r3, #5
 8010212:	e110      	b.n	8010436 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	895b      	ldrh	r3, [r3, #10]
 8010218:	2b13      	cmp	r3, #19
 801021a:	d809      	bhi.n	8010230 <ip4_frag+0x64>
 801021c:	4b88      	ldr	r3, [pc, #544]	@ (8010440 <ip4_frag+0x274>)
 801021e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010222:	4988      	ldr	r1, [pc, #544]	@ (8010444 <ip4_frag+0x278>)
 8010224:	4888      	ldr	r0, [pc, #544]	@ (8010448 <ip4_frag+0x27c>)
 8010226:	f000 faed 	bl	8010804 <iprintf>
 801022a:	f06f 0305 	mvn.w	r3, #5
 801022e:	e102      	b.n	8010436 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010232:	88db      	ldrh	r3, [r3, #6]
 8010234:	b29b      	uxth	r3, r3
 8010236:	4618      	mov	r0, r3
 8010238:	f7f5 fda6 	bl	8005d88 <lwip_htons>
 801023c:	4603      	mov	r3, r0
 801023e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010240:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010242:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010246:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801024a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801024c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010250:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	891b      	ldrh	r3, [r3, #8]
 8010256:	3b14      	subs	r3, #20
 8010258:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801025c:	e0e1      	b.n	8010422 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801025e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010260:	00db      	lsls	r3, r3, #3
 8010262:	b29b      	uxth	r3, r3
 8010264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010268:	4293      	cmp	r3, r2
 801026a:	bf28      	it	cs
 801026c:	4613      	movcs	r3, r2
 801026e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010270:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010274:	2114      	movs	r1, #20
 8010276:	200e      	movs	r0, #14
 8010278:	f7f6 fe32 	bl	8006ee0 <pbuf_alloc>
 801027c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 80d5 	beq.w	8010430 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010288:	895b      	ldrh	r3, [r3, #10]
 801028a:	2b13      	cmp	r3, #19
 801028c:	d806      	bhi.n	801029c <ip4_frag+0xd0>
 801028e:	4b6c      	ldr	r3, [pc, #432]	@ (8010440 <ip4_frag+0x274>)
 8010290:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010294:	496d      	ldr	r1, [pc, #436]	@ (801044c <ip4_frag+0x280>)
 8010296:	486c      	ldr	r0, [pc, #432]	@ (8010448 <ip4_frag+0x27c>)
 8010298:	f000 fab4 	bl	8010804 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	2214      	movs	r2, #20
 80102a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80102a4:	4618      	mov	r0, r3
 80102a6:	f000 fba6 	bl	80109f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80102aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80102b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80102b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80102b6:	e064      	b.n	8010382 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	895a      	ldrh	r2, [r3, #10]
 80102bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	895b      	ldrh	r3, [r3, #10]
 80102c6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d906      	bls.n	80102da <ip4_frag+0x10e>
 80102cc:	4b5c      	ldr	r3, [pc, #368]	@ (8010440 <ip4_frag+0x274>)
 80102ce:	f240 322d 	movw	r2, #813	@ 0x32d
 80102d2:	495f      	ldr	r1, [pc, #380]	@ (8010450 <ip4_frag+0x284>)
 80102d4:	485c      	ldr	r0, [pc, #368]	@ (8010448 <ip4_frag+0x27c>)
 80102d6:	f000 fa95 	bl	8010804 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80102da:	8bfa      	ldrh	r2, [r7, #30]
 80102dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80102e0:	4293      	cmp	r3, r2
 80102e2:	bf28      	it	cs
 80102e4:	4613      	movcs	r3, r2
 80102e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80102ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d105      	bne.n	80102fe <ip4_frag+0x132>
        poff = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	60fb      	str	r3, [r7, #12]
        continue;
 80102fc:	e041      	b.n	8010382 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80102fe:	f7ff ff0d 	bl	801011c <ip_frag_alloc_pbuf_custom_ref>
 8010302:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d103      	bne.n	8010312 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801030a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801030c:	f7f7 f8cc 	bl	80074a8 <pbuf_free>
        goto memerr;
 8010310:	e08f      	b.n	8010432 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010312:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010318:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801031a:	4413      	add	r3, r2
 801031c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010324:	9201      	str	r2, [sp, #4]
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	4603      	mov	r3, r0
 801032a:	2241      	movs	r2, #65	@ 0x41
 801032c:	2000      	movs	r0, #0
 801032e:	f7f6 ff01 	bl	8007134 <pbuf_alloced_custom>
 8010332:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801033a:	69b8      	ldr	r0, [r7, #24]
 801033c:	f7ff fef6 	bl	801012c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010340:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010342:	f7f7 f8b1 	bl	80074a8 <pbuf_free>
        goto memerr;
 8010346:	e074      	b.n	8010432 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010348:	68f8      	ldr	r0, [r7, #12]
 801034a:	f7f7 f94d 	bl	80075e8 <pbuf_ref>
      pcr->original = p;
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	4a3f      	ldr	r2, [pc, #252]	@ (8010454 <ip4_frag+0x288>)
 8010358:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801035a:	6979      	ldr	r1, [r7, #20]
 801035c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801035e:	f7f7 f965 	bl	800762c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010362:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010366:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010370:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010374:	2b00      	cmp	r3, #0
 8010376:	d004      	beq.n	8010382 <ip4_frag+0x1b6>
        poff = 0;
 8010378:	2300      	movs	r3, #0
 801037a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010386:	2b00      	cmp	r3, #0
 8010388:	d196      	bne.n	80102b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801038a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801038c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010390:	4413      	add	r3, r2
 8010392:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010398:	f1a3 0213 	sub.w	r2, r3, #19
 801039c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80103a0:	429a      	cmp	r2, r3
 80103a2:	bfcc      	ite	gt
 80103a4:	2301      	movgt	r3, #1
 80103a6:	2300      	movle	r3, #0
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80103ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80103b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80103b6:	6a3b      	ldr	r3, [r7, #32]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d002      	beq.n	80103c2 <ip4_frag+0x1f6>
 80103bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80103c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80103c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80103c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80103ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7f5 fcdb 	bl	8005d88 <lwip_htons>
 80103d2:	4603      	mov	r3, r0
 80103d4:	461a      	mov	r2, r3
 80103d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80103da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80103dc:	3314      	adds	r3, #20
 80103de:	b29b      	uxth	r3, r3
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f5 fcd1 	bl	8005d88 <lwip_htons>
 80103e6:	4603      	mov	r3, r0
 80103e8:	461a      	mov	r2, r3
 80103ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80103ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f0:	2200      	movs	r2, #0
 80103f2:	729a      	strb	r2, [r3, #10]
 80103f4:	2200      	movs	r2, #0
 80103f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	695b      	ldr	r3, [r3, #20]
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010400:	68b8      	ldr	r0, [r7, #8]
 8010402:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010404:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010406:	f7f7 f84f 	bl	80074a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801040a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801040e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8010416:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801041a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801041c:	4413      	add	r3, r2
 801041e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8010422:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010426:	2b00      	cmp	r3, #0
 8010428:	f47f af19 	bne.w	801025e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801042c:	2300      	movs	r3, #0
 801042e:	e002      	b.n	8010436 <ip4_frag+0x26a>
      goto memerr;
 8010430:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010432:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010436:	4618      	mov	r0, r3
 8010438:	3748      	adds	r7, #72	@ 0x48
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	08013fb0 	.word	0x08013fb0
 8010444:	0801418c 	.word	0x0801418c
 8010448:	08013ff8 	.word	0x08013ff8
 801044c:	080141a8 	.word	0x080141a8
 8010450:	080141c8 	.word	0x080141c8
 8010454:	08010165 	.word	0x08010165

08010458 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b086      	sub	sp, #24
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010462:	230e      	movs	r3, #14
 8010464:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	895b      	ldrh	r3, [r3, #10]
 801046a:	2b0e      	cmp	r3, #14
 801046c:	d96e      	bls.n	801054c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7bdb      	ldrb	r3, [r3, #15]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801047c:	3301      	adds	r3, #1
 801047e:	b2da      	uxtb	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	7b1a      	ldrb	r2, [r3, #12]
 801048e:	7b5b      	ldrb	r3, [r3, #13]
 8010490:	021b      	lsls	r3, r3, #8
 8010492:	4313      	orrs	r3, r2
 8010494:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	f003 0301 	and.w	r3, r3, #1
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d023      	beq.n	80104ea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80104a2:	693b      	ldr	r3, [r7, #16]
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d10f      	bne.n	80104ca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	785b      	ldrb	r3, [r3, #1]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d11b      	bne.n	80104ea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80104b6:	2b5e      	cmp	r3, #94	@ 0x5e
 80104b8:	d117      	bne.n	80104ea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	7b5b      	ldrb	r3, [r3, #13]
 80104be:	f043 0310 	orr.w	r3, r3, #16
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	735a      	strb	r2, [r3, #13]
 80104c8:	e00f      	b.n	80104ea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	2206      	movs	r2, #6
 80104ce:	4928      	ldr	r1, [pc, #160]	@ (8010570 <ethernet_input+0x118>)
 80104d0:	4618      	mov	r0, r3
 80104d2:	f000 f9ec 	bl	80108ae <memcmp>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	7b5b      	ldrb	r3, [r3, #13]
 80104e0:	f043 0308 	orr.w	r3, r3, #8
 80104e4:	b2da      	uxtb	r2, r3
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80104ea:	89fb      	ldrh	r3, [r7, #14]
 80104ec:	2b08      	cmp	r3, #8
 80104ee:	d003      	beq.n	80104f8 <ethernet_input+0xa0>
 80104f0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80104f4:	d014      	beq.n	8010520 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80104f6:	e032      	b.n	801055e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80104fe:	f003 0308 	and.w	r3, r3, #8
 8010502:	2b00      	cmp	r3, #0
 8010504:	d024      	beq.n	8010550 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010506:	8afb      	ldrh	r3, [r7, #22]
 8010508:	4619      	mov	r1, r3
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7f6 ff46 	bl	800739c <pbuf_remove_header>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d11e      	bne.n	8010554 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010516:	6839      	ldr	r1, [r7, #0]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f7fe ff21 	bl	800f360 <ip4_input>
      break;
 801051e:	e013      	b.n	8010548 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010526:	f003 0308 	and.w	r3, r3, #8
 801052a:	2b00      	cmp	r3, #0
 801052c:	d014      	beq.n	8010558 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801052e:	8afb      	ldrh	r3, [r7, #22]
 8010530:	4619      	mov	r1, r3
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7f6 ff32 	bl	800739c <pbuf_remove_header>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10e      	bne.n	801055c <ethernet_input+0x104>
        etharp_input(p, netif);
 801053e:	6839      	ldr	r1, [r7, #0]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7fe f8c1 	bl	800e6c8 <etharp_input>
      break;
 8010546:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	e00c      	b.n	8010566 <ethernet_input+0x10e>
    goto free_and_return;
 801054c:	bf00      	nop
 801054e:	e006      	b.n	801055e <ethernet_input+0x106>
        goto free_and_return;
 8010550:	bf00      	nop
 8010552:	e004      	b.n	801055e <ethernet_input+0x106>
        goto free_and_return;
 8010554:	bf00      	nop
 8010556:	e002      	b.n	801055e <ethernet_input+0x106>
        goto free_and_return;
 8010558:	bf00      	nop
 801055a:	e000      	b.n	801055e <ethernet_input+0x106>
        goto free_and_return;
 801055c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7f6 ffa2 	bl	80074a8 <pbuf_free>
  return ERR_OK;
 8010564:	2300      	movs	r3, #0
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	08015168 	.word	0x08015168

08010574 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010574:	b580      	push	{r7, lr}
 8010576:	b086      	sub	sp, #24
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010582:	8c3b      	ldrh	r3, [r7, #32]
 8010584:	4618      	mov	r0, r3
 8010586:	f7f5 fbff 	bl	8005d88 <lwip_htons>
 801058a:	4603      	mov	r3, r0
 801058c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801058e:	210e      	movs	r1, #14
 8010590:	68b8      	ldr	r0, [r7, #8]
 8010592:	f7f6 fef3 	bl	800737c <pbuf_add_header>
 8010596:	4603      	mov	r3, r0
 8010598:	2b00      	cmp	r3, #0
 801059a:	d125      	bne.n	80105e8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	8afa      	ldrh	r2, [r7, #22]
 80105a6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	2206      	movs	r2, #6
 80105ac:	6839      	ldr	r1, [r7, #0]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 fa21 	bl	80109f6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	3306      	adds	r3, #6
 80105b8:	2206      	movs	r2, #6
 80105ba:	6879      	ldr	r1, [r7, #4]
 80105bc:	4618      	mov	r0, r3
 80105be:	f000 fa1a 	bl	80109f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80105c8:	2b06      	cmp	r3, #6
 80105ca:	d006      	beq.n	80105da <ethernet_output+0x66>
 80105cc:	4b0a      	ldr	r3, [pc, #40]	@ (80105f8 <ethernet_output+0x84>)
 80105ce:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80105d2:	490a      	ldr	r1, [pc, #40]	@ (80105fc <ethernet_output+0x88>)
 80105d4:	480a      	ldr	r0, [pc, #40]	@ (8010600 <ethernet_output+0x8c>)
 80105d6:	f000 f915 	bl	8010804 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	699b      	ldr	r3, [r3, #24]
 80105de:	68b9      	ldr	r1, [r7, #8]
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	4798      	blx	r3
 80105e4:	4603      	mov	r3, r0
 80105e6:	e002      	b.n	80105ee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80105e8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80105ea:	f06f 0301 	mvn.w	r3, #1
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3718      	adds	r7, #24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	080141d8 	.word	0x080141d8
 80105fc:	08014210 	.word	0x08014210
 8010600:	08014244 	.word	0x08014244

08010604 <rand>:
 8010604:	4b16      	ldr	r3, [pc, #88]	@ (8010660 <rand+0x5c>)
 8010606:	b510      	push	{r4, lr}
 8010608:	681c      	ldr	r4, [r3, #0]
 801060a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801060c:	b9b3      	cbnz	r3, 801063c <rand+0x38>
 801060e:	2018      	movs	r0, #24
 8010610:	f000 fa68 	bl	8010ae4 <malloc>
 8010614:	4602      	mov	r2, r0
 8010616:	6320      	str	r0, [r4, #48]	@ 0x30
 8010618:	b920      	cbnz	r0, 8010624 <rand+0x20>
 801061a:	4b12      	ldr	r3, [pc, #72]	@ (8010664 <rand+0x60>)
 801061c:	4812      	ldr	r0, [pc, #72]	@ (8010668 <rand+0x64>)
 801061e:	2152      	movs	r1, #82	@ 0x52
 8010620:	f000 f9f8 	bl	8010a14 <__assert_func>
 8010624:	4911      	ldr	r1, [pc, #68]	@ (801066c <rand+0x68>)
 8010626:	4b12      	ldr	r3, [pc, #72]	@ (8010670 <rand+0x6c>)
 8010628:	e9c0 1300 	strd	r1, r3, [r0]
 801062c:	4b11      	ldr	r3, [pc, #68]	@ (8010674 <rand+0x70>)
 801062e:	6083      	str	r3, [r0, #8]
 8010630:	230b      	movs	r3, #11
 8010632:	8183      	strh	r3, [r0, #12]
 8010634:	2100      	movs	r1, #0
 8010636:	2001      	movs	r0, #1
 8010638:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801063c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801063e:	480e      	ldr	r0, [pc, #56]	@ (8010678 <rand+0x74>)
 8010640:	690b      	ldr	r3, [r1, #16]
 8010642:	694c      	ldr	r4, [r1, #20]
 8010644:	4a0d      	ldr	r2, [pc, #52]	@ (801067c <rand+0x78>)
 8010646:	4358      	muls	r0, r3
 8010648:	fb02 0004 	mla	r0, r2, r4, r0
 801064c:	fba3 3202 	umull	r3, r2, r3, r2
 8010650:	3301      	adds	r3, #1
 8010652:	eb40 0002 	adc.w	r0, r0, r2
 8010656:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801065a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801065e:	bd10      	pop	{r4, pc}
 8010660:	20000038 	.word	0x20000038
 8010664:	08015176 	.word	0x08015176
 8010668:	0801518d 	.word	0x0801518d
 801066c:	abcd330e 	.word	0xabcd330e
 8010670:	e66d1234 	.word	0xe66d1234
 8010674:	0005deec 	.word	0x0005deec
 8010678:	5851f42d 	.word	0x5851f42d
 801067c:	4c957f2d 	.word	0x4c957f2d

08010680 <std>:
 8010680:	2300      	movs	r3, #0
 8010682:	b510      	push	{r4, lr}
 8010684:	4604      	mov	r4, r0
 8010686:	e9c0 3300 	strd	r3, r3, [r0]
 801068a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801068e:	6083      	str	r3, [r0, #8]
 8010690:	8181      	strh	r1, [r0, #12]
 8010692:	6643      	str	r3, [r0, #100]	@ 0x64
 8010694:	81c2      	strh	r2, [r0, #14]
 8010696:	6183      	str	r3, [r0, #24]
 8010698:	4619      	mov	r1, r3
 801069a:	2208      	movs	r2, #8
 801069c:	305c      	adds	r0, #92	@ 0x5c
 801069e:	f000 f916 	bl	80108ce <memset>
 80106a2:	4b0d      	ldr	r3, [pc, #52]	@ (80106d8 <std+0x58>)
 80106a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80106a6:	4b0d      	ldr	r3, [pc, #52]	@ (80106dc <std+0x5c>)
 80106a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80106aa:	4b0d      	ldr	r3, [pc, #52]	@ (80106e0 <std+0x60>)
 80106ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80106ae:	4b0d      	ldr	r3, [pc, #52]	@ (80106e4 <std+0x64>)
 80106b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80106b2:	4b0d      	ldr	r3, [pc, #52]	@ (80106e8 <std+0x68>)
 80106b4:	6224      	str	r4, [r4, #32]
 80106b6:	429c      	cmp	r4, r3
 80106b8:	d006      	beq.n	80106c8 <std+0x48>
 80106ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80106be:	4294      	cmp	r4, r2
 80106c0:	d002      	beq.n	80106c8 <std+0x48>
 80106c2:	33d0      	adds	r3, #208	@ 0xd0
 80106c4:	429c      	cmp	r4, r3
 80106c6:	d105      	bne.n	80106d4 <std+0x54>
 80106c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80106cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106d0:	f000 b98e 	b.w	80109f0 <__retarget_lock_init_recursive>
 80106d4:	bd10      	pop	{r4, pc}
 80106d6:	bf00      	nop
 80106d8:	08010829 	.word	0x08010829
 80106dc:	0801084b 	.word	0x0801084b
 80106e0:	08010883 	.word	0x08010883
 80106e4:	080108a7 	.word	0x080108a7
 80106e8:	20008210 	.word	0x20008210

080106ec <stdio_exit_handler>:
 80106ec:	4a02      	ldr	r2, [pc, #8]	@ (80106f8 <stdio_exit_handler+0xc>)
 80106ee:	4903      	ldr	r1, [pc, #12]	@ (80106fc <stdio_exit_handler+0x10>)
 80106f0:	4803      	ldr	r0, [pc, #12]	@ (8010700 <stdio_exit_handler+0x14>)
 80106f2:	f000 b869 	b.w	80107c8 <_fwalk_sglue>
 80106f6:	bf00      	nop
 80106f8:	2000002c 	.word	0x2000002c
 80106fc:	080112f9 	.word	0x080112f9
 8010700:	2000003c 	.word	0x2000003c

08010704 <cleanup_stdio>:
 8010704:	6841      	ldr	r1, [r0, #4]
 8010706:	4b0c      	ldr	r3, [pc, #48]	@ (8010738 <cleanup_stdio+0x34>)
 8010708:	4299      	cmp	r1, r3
 801070a:	b510      	push	{r4, lr}
 801070c:	4604      	mov	r4, r0
 801070e:	d001      	beq.n	8010714 <cleanup_stdio+0x10>
 8010710:	f000 fdf2 	bl	80112f8 <_fflush_r>
 8010714:	68a1      	ldr	r1, [r4, #8]
 8010716:	4b09      	ldr	r3, [pc, #36]	@ (801073c <cleanup_stdio+0x38>)
 8010718:	4299      	cmp	r1, r3
 801071a:	d002      	beq.n	8010722 <cleanup_stdio+0x1e>
 801071c:	4620      	mov	r0, r4
 801071e:	f000 fdeb 	bl	80112f8 <_fflush_r>
 8010722:	68e1      	ldr	r1, [r4, #12]
 8010724:	4b06      	ldr	r3, [pc, #24]	@ (8010740 <cleanup_stdio+0x3c>)
 8010726:	4299      	cmp	r1, r3
 8010728:	d004      	beq.n	8010734 <cleanup_stdio+0x30>
 801072a:	4620      	mov	r0, r4
 801072c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010730:	f000 bde2 	b.w	80112f8 <_fflush_r>
 8010734:	bd10      	pop	{r4, pc}
 8010736:	bf00      	nop
 8010738:	20008210 	.word	0x20008210
 801073c:	20008278 	.word	0x20008278
 8010740:	200082e0 	.word	0x200082e0

08010744 <global_stdio_init.part.0>:
 8010744:	b510      	push	{r4, lr}
 8010746:	4b0b      	ldr	r3, [pc, #44]	@ (8010774 <global_stdio_init.part.0+0x30>)
 8010748:	4c0b      	ldr	r4, [pc, #44]	@ (8010778 <global_stdio_init.part.0+0x34>)
 801074a:	4a0c      	ldr	r2, [pc, #48]	@ (801077c <global_stdio_init.part.0+0x38>)
 801074c:	601a      	str	r2, [r3, #0]
 801074e:	4620      	mov	r0, r4
 8010750:	2200      	movs	r2, #0
 8010752:	2104      	movs	r1, #4
 8010754:	f7ff ff94 	bl	8010680 <std>
 8010758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801075c:	2201      	movs	r2, #1
 801075e:	2109      	movs	r1, #9
 8010760:	f7ff ff8e 	bl	8010680 <std>
 8010764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010768:	2202      	movs	r2, #2
 801076a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801076e:	2112      	movs	r1, #18
 8010770:	f7ff bf86 	b.w	8010680 <std>
 8010774:	20008348 	.word	0x20008348
 8010778:	20008210 	.word	0x20008210
 801077c:	080106ed 	.word	0x080106ed

08010780 <__sfp_lock_acquire>:
 8010780:	4801      	ldr	r0, [pc, #4]	@ (8010788 <__sfp_lock_acquire+0x8>)
 8010782:	f000 b936 	b.w	80109f2 <__retarget_lock_acquire_recursive>
 8010786:	bf00      	nop
 8010788:	20008351 	.word	0x20008351

0801078c <__sfp_lock_release>:
 801078c:	4801      	ldr	r0, [pc, #4]	@ (8010794 <__sfp_lock_release+0x8>)
 801078e:	f000 b931 	b.w	80109f4 <__retarget_lock_release_recursive>
 8010792:	bf00      	nop
 8010794:	20008351 	.word	0x20008351

08010798 <__sinit>:
 8010798:	b510      	push	{r4, lr}
 801079a:	4604      	mov	r4, r0
 801079c:	f7ff fff0 	bl	8010780 <__sfp_lock_acquire>
 80107a0:	6a23      	ldr	r3, [r4, #32]
 80107a2:	b11b      	cbz	r3, 80107ac <__sinit+0x14>
 80107a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107a8:	f7ff bff0 	b.w	801078c <__sfp_lock_release>
 80107ac:	4b04      	ldr	r3, [pc, #16]	@ (80107c0 <__sinit+0x28>)
 80107ae:	6223      	str	r3, [r4, #32]
 80107b0:	4b04      	ldr	r3, [pc, #16]	@ (80107c4 <__sinit+0x2c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1f5      	bne.n	80107a4 <__sinit+0xc>
 80107b8:	f7ff ffc4 	bl	8010744 <global_stdio_init.part.0>
 80107bc:	e7f2      	b.n	80107a4 <__sinit+0xc>
 80107be:	bf00      	nop
 80107c0:	08010705 	.word	0x08010705
 80107c4:	20008348 	.word	0x20008348

080107c8 <_fwalk_sglue>:
 80107c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107cc:	4607      	mov	r7, r0
 80107ce:	4688      	mov	r8, r1
 80107d0:	4614      	mov	r4, r2
 80107d2:	2600      	movs	r6, #0
 80107d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107d8:	f1b9 0901 	subs.w	r9, r9, #1
 80107dc:	d505      	bpl.n	80107ea <_fwalk_sglue+0x22>
 80107de:	6824      	ldr	r4, [r4, #0]
 80107e0:	2c00      	cmp	r4, #0
 80107e2:	d1f7      	bne.n	80107d4 <_fwalk_sglue+0xc>
 80107e4:	4630      	mov	r0, r6
 80107e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ea:	89ab      	ldrh	r3, [r5, #12]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d907      	bls.n	8010800 <_fwalk_sglue+0x38>
 80107f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107f4:	3301      	adds	r3, #1
 80107f6:	d003      	beq.n	8010800 <_fwalk_sglue+0x38>
 80107f8:	4629      	mov	r1, r5
 80107fa:	4638      	mov	r0, r7
 80107fc:	47c0      	blx	r8
 80107fe:	4306      	orrs	r6, r0
 8010800:	3568      	adds	r5, #104	@ 0x68
 8010802:	e7e9      	b.n	80107d8 <_fwalk_sglue+0x10>

08010804 <iprintf>:
 8010804:	b40f      	push	{r0, r1, r2, r3}
 8010806:	b507      	push	{r0, r1, r2, lr}
 8010808:	4906      	ldr	r1, [pc, #24]	@ (8010824 <iprintf+0x20>)
 801080a:	ab04      	add	r3, sp, #16
 801080c:	6808      	ldr	r0, [r1, #0]
 801080e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010812:	6881      	ldr	r1, [r0, #8]
 8010814:	9301      	str	r3, [sp, #4]
 8010816:	f000 fa45 	bl	8010ca4 <_vfiprintf_r>
 801081a:	b003      	add	sp, #12
 801081c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010820:	b004      	add	sp, #16
 8010822:	4770      	bx	lr
 8010824:	20000038 	.word	0x20000038

08010828 <__sread>:
 8010828:	b510      	push	{r4, lr}
 801082a:	460c      	mov	r4, r1
 801082c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010830:	f000 f896 	bl	8010960 <_read_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	bfab      	itete	ge
 8010838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801083a:	89a3      	ldrhlt	r3, [r4, #12]
 801083c:	181b      	addge	r3, r3, r0
 801083e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010842:	bfac      	ite	ge
 8010844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010846:	81a3      	strhlt	r3, [r4, #12]
 8010848:	bd10      	pop	{r4, pc}

0801084a <__swrite>:
 801084a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801084e:	461f      	mov	r7, r3
 8010850:	898b      	ldrh	r3, [r1, #12]
 8010852:	05db      	lsls	r3, r3, #23
 8010854:	4605      	mov	r5, r0
 8010856:	460c      	mov	r4, r1
 8010858:	4616      	mov	r6, r2
 801085a:	d505      	bpl.n	8010868 <__swrite+0x1e>
 801085c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010860:	2302      	movs	r3, #2
 8010862:	2200      	movs	r2, #0
 8010864:	f000 f86a 	bl	801093c <_lseek_r>
 8010868:	89a3      	ldrh	r3, [r4, #12]
 801086a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801086e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010872:	81a3      	strh	r3, [r4, #12]
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	4628      	mov	r0, r5
 801087a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801087e:	f000 b881 	b.w	8010984 <_write_r>

08010882 <__sseek>:
 8010882:	b510      	push	{r4, lr}
 8010884:	460c      	mov	r4, r1
 8010886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801088a:	f000 f857 	bl	801093c <_lseek_r>
 801088e:	1c43      	adds	r3, r0, #1
 8010890:	89a3      	ldrh	r3, [r4, #12]
 8010892:	bf15      	itete	ne
 8010894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801089a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801089e:	81a3      	strheq	r3, [r4, #12]
 80108a0:	bf18      	it	ne
 80108a2:	81a3      	strhne	r3, [r4, #12]
 80108a4:	bd10      	pop	{r4, pc}

080108a6 <__sclose>:
 80108a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108aa:	f000 b837 	b.w	801091c <_close_r>

080108ae <memcmp>:
 80108ae:	b510      	push	{r4, lr}
 80108b0:	3901      	subs	r1, #1
 80108b2:	4402      	add	r2, r0
 80108b4:	4290      	cmp	r0, r2
 80108b6:	d101      	bne.n	80108bc <memcmp+0xe>
 80108b8:	2000      	movs	r0, #0
 80108ba:	e005      	b.n	80108c8 <memcmp+0x1a>
 80108bc:	7803      	ldrb	r3, [r0, #0]
 80108be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80108c2:	42a3      	cmp	r3, r4
 80108c4:	d001      	beq.n	80108ca <memcmp+0x1c>
 80108c6:	1b18      	subs	r0, r3, r4
 80108c8:	bd10      	pop	{r4, pc}
 80108ca:	3001      	adds	r0, #1
 80108cc:	e7f2      	b.n	80108b4 <memcmp+0x6>

080108ce <memset>:
 80108ce:	4402      	add	r2, r0
 80108d0:	4603      	mov	r3, r0
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d100      	bne.n	80108d8 <memset+0xa>
 80108d6:	4770      	bx	lr
 80108d8:	f803 1b01 	strb.w	r1, [r3], #1
 80108dc:	e7f9      	b.n	80108d2 <memset+0x4>

080108de <strchr>:
 80108de:	b2c9      	uxtb	r1, r1
 80108e0:	4603      	mov	r3, r0
 80108e2:	4618      	mov	r0, r3
 80108e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108e8:	b112      	cbz	r2, 80108f0 <strchr+0x12>
 80108ea:	428a      	cmp	r2, r1
 80108ec:	d1f9      	bne.n	80108e2 <strchr+0x4>
 80108ee:	4770      	bx	lr
 80108f0:	2900      	cmp	r1, #0
 80108f2:	bf18      	it	ne
 80108f4:	2000      	movne	r0, #0
 80108f6:	4770      	bx	lr

080108f8 <strncmp>:
 80108f8:	b510      	push	{r4, lr}
 80108fa:	b16a      	cbz	r2, 8010918 <strncmp+0x20>
 80108fc:	3901      	subs	r1, #1
 80108fe:	1884      	adds	r4, r0, r2
 8010900:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010904:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010908:	429a      	cmp	r2, r3
 801090a:	d103      	bne.n	8010914 <strncmp+0x1c>
 801090c:	42a0      	cmp	r0, r4
 801090e:	d001      	beq.n	8010914 <strncmp+0x1c>
 8010910:	2a00      	cmp	r2, #0
 8010912:	d1f5      	bne.n	8010900 <strncmp+0x8>
 8010914:	1ad0      	subs	r0, r2, r3
 8010916:	bd10      	pop	{r4, pc}
 8010918:	4610      	mov	r0, r2
 801091a:	e7fc      	b.n	8010916 <strncmp+0x1e>

0801091c <_close_r>:
 801091c:	b538      	push	{r3, r4, r5, lr}
 801091e:	4d06      	ldr	r5, [pc, #24]	@ (8010938 <_close_r+0x1c>)
 8010920:	2300      	movs	r3, #0
 8010922:	4604      	mov	r4, r0
 8010924:	4608      	mov	r0, r1
 8010926:	602b      	str	r3, [r5, #0]
 8010928:	f7f0 f886 	bl	8000a38 <_close>
 801092c:	1c43      	adds	r3, r0, #1
 801092e:	d102      	bne.n	8010936 <_close_r+0x1a>
 8010930:	682b      	ldr	r3, [r5, #0]
 8010932:	b103      	cbz	r3, 8010936 <_close_r+0x1a>
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	bd38      	pop	{r3, r4, r5, pc}
 8010938:	2000834c 	.word	0x2000834c

0801093c <_lseek_r>:
 801093c:	b538      	push	{r3, r4, r5, lr}
 801093e:	4d07      	ldr	r5, [pc, #28]	@ (801095c <_lseek_r+0x20>)
 8010940:	4604      	mov	r4, r0
 8010942:	4608      	mov	r0, r1
 8010944:	4611      	mov	r1, r2
 8010946:	2200      	movs	r2, #0
 8010948:	602a      	str	r2, [r5, #0]
 801094a:	461a      	mov	r2, r3
 801094c:	f7f0 f89b 	bl	8000a86 <_lseek>
 8010950:	1c43      	adds	r3, r0, #1
 8010952:	d102      	bne.n	801095a <_lseek_r+0x1e>
 8010954:	682b      	ldr	r3, [r5, #0]
 8010956:	b103      	cbz	r3, 801095a <_lseek_r+0x1e>
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	bd38      	pop	{r3, r4, r5, pc}
 801095c:	2000834c 	.word	0x2000834c

08010960 <_read_r>:
 8010960:	b538      	push	{r3, r4, r5, lr}
 8010962:	4d07      	ldr	r5, [pc, #28]	@ (8010980 <_read_r+0x20>)
 8010964:	4604      	mov	r4, r0
 8010966:	4608      	mov	r0, r1
 8010968:	4611      	mov	r1, r2
 801096a:	2200      	movs	r2, #0
 801096c:	602a      	str	r2, [r5, #0]
 801096e:	461a      	mov	r2, r3
 8010970:	f7f0 f829 	bl	80009c6 <_read>
 8010974:	1c43      	adds	r3, r0, #1
 8010976:	d102      	bne.n	801097e <_read_r+0x1e>
 8010978:	682b      	ldr	r3, [r5, #0]
 801097a:	b103      	cbz	r3, 801097e <_read_r+0x1e>
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	2000834c 	.word	0x2000834c

08010984 <_write_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d07      	ldr	r5, [pc, #28]	@ (80109a4 <_write_r+0x20>)
 8010988:	4604      	mov	r4, r0
 801098a:	4608      	mov	r0, r1
 801098c:	4611      	mov	r1, r2
 801098e:	2200      	movs	r2, #0
 8010990:	602a      	str	r2, [r5, #0]
 8010992:	461a      	mov	r2, r3
 8010994:	f7f0 f834 	bl	8000a00 <_write>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d102      	bne.n	80109a2 <_write_r+0x1e>
 801099c:	682b      	ldr	r3, [r5, #0]
 801099e:	b103      	cbz	r3, 80109a2 <_write_r+0x1e>
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	bd38      	pop	{r3, r4, r5, pc}
 80109a4:	2000834c 	.word	0x2000834c

080109a8 <__libc_init_array>:
 80109a8:	b570      	push	{r4, r5, r6, lr}
 80109aa:	4d0d      	ldr	r5, [pc, #52]	@ (80109e0 <__libc_init_array+0x38>)
 80109ac:	4c0d      	ldr	r4, [pc, #52]	@ (80109e4 <__libc_init_array+0x3c>)
 80109ae:	1b64      	subs	r4, r4, r5
 80109b0:	10a4      	asrs	r4, r4, #2
 80109b2:	2600      	movs	r6, #0
 80109b4:	42a6      	cmp	r6, r4
 80109b6:	d109      	bne.n	80109cc <__libc_init_array+0x24>
 80109b8:	4d0b      	ldr	r5, [pc, #44]	@ (80109e8 <__libc_init_array+0x40>)
 80109ba:	4c0c      	ldr	r4, [pc, #48]	@ (80109ec <__libc_init_array+0x44>)
 80109bc:	f000 fe4a 	bl	8011654 <_init>
 80109c0:	1b64      	subs	r4, r4, r5
 80109c2:	10a4      	asrs	r4, r4, #2
 80109c4:	2600      	movs	r6, #0
 80109c6:	42a6      	cmp	r6, r4
 80109c8:	d105      	bne.n	80109d6 <__libc_init_array+0x2e>
 80109ca:	bd70      	pop	{r4, r5, r6, pc}
 80109cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80109d0:	4798      	blx	r3
 80109d2:	3601      	adds	r6, #1
 80109d4:	e7ee      	b.n	80109b4 <__libc_init_array+0xc>
 80109d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80109da:	4798      	blx	r3
 80109dc:	3601      	adds	r6, #1
 80109de:	e7f2      	b.n	80109c6 <__libc_init_array+0x1e>
 80109e0:	0801525c 	.word	0x0801525c
 80109e4:	0801525c 	.word	0x0801525c
 80109e8:	0801525c 	.word	0x0801525c
 80109ec:	08015260 	.word	0x08015260

080109f0 <__retarget_lock_init_recursive>:
 80109f0:	4770      	bx	lr

080109f2 <__retarget_lock_acquire_recursive>:
 80109f2:	4770      	bx	lr

080109f4 <__retarget_lock_release_recursive>:
 80109f4:	4770      	bx	lr

080109f6 <memcpy>:
 80109f6:	440a      	add	r2, r1
 80109f8:	4291      	cmp	r1, r2
 80109fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80109fe:	d100      	bne.n	8010a02 <memcpy+0xc>
 8010a00:	4770      	bx	lr
 8010a02:	b510      	push	{r4, lr}
 8010a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a0c:	4291      	cmp	r1, r2
 8010a0e:	d1f9      	bne.n	8010a04 <memcpy+0xe>
 8010a10:	bd10      	pop	{r4, pc}
	...

08010a14 <__assert_func>:
 8010a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a16:	4614      	mov	r4, r2
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4b09      	ldr	r3, [pc, #36]	@ (8010a40 <__assert_func+0x2c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	4605      	mov	r5, r0
 8010a20:	68d8      	ldr	r0, [r3, #12]
 8010a22:	b954      	cbnz	r4, 8010a3a <__assert_func+0x26>
 8010a24:	4b07      	ldr	r3, [pc, #28]	@ (8010a44 <__assert_func+0x30>)
 8010a26:	461c      	mov	r4, r3
 8010a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a2c:	9100      	str	r1, [sp, #0]
 8010a2e:	462b      	mov	r3, r5
 8010a30:	4905      	ldr	r1, [pc, #20]	@ (8010a48 <__assert_func+0x34>)
 8010a32:	f000 fc89 	bl	8011348 <fiprintf>
 8010a36:	f000 fd3d 	bl	80114b4 <abort>
 8010a3a:	4b04      	ldr	r3, [pc, #16]	@ (8010a4c <__assert_func+0x38>)
 8010a3c:	e7f4      	b.n	8010a28 <__assert_func+0x14>
 8010a3e:	bf00      	nop
 8010a40:	20000038 	.word	0x20000038
 8010a44:	08015220 	.word	0x08015220
 8010a48:	080151f2 	.word	0x080151f2
 8010a4c:	080151e5 	.word	0x080151e5

08010a50 <_free_r>:
 8010a50:	b538      	push	{r3, r4, r5, lr}
 8010a52:	4605      	mov	r5, r0
 8010a54:	2900      	cmp	r1, #0
 8010a56:	d041      	beq.n	8010adc <_free_r+0x8c>
 8010a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a5c:	1f0c      	subs	r4, r1, #4
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	bfb8      	it	lt
 8010a62:	18e4      	addlt	r4, r4, r3
 8010a64:	f000 f8e8 	bl	8010c38 <__malloc_lock>
 8010a68:	4a1d      	ldr	r2, [pc, #116]	@ (8010ae0 <_free_r+0x90>)
 8010a6a:	6813      	ldr	r3, [r2, #0]
 8010a6c:	b933      	cbnz	r3, 8010a7c <_free_r+0x2c>
 8010a6e:	6063      	str	r3, [r4, #4]
 8010a70:	6014      	str	r4, [r2, #0]
 8010a72:	4628      	mov	r0, r5
 8010a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a78:	f000 b8e4 	b.w	8010c44 <__malloc_unlock>
 8010a7c:	42a3      	cmp	r3, r4
 8010a7e:	d908      	bls.n	8010a92 <_free_r+0x42>
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	1821      	adds	r1, r4, r0
 8010a84:	428b      	cmp	r3, r1
 8010a86:	bf01      	itttt	eq
 8010a88:	6819      	ldreq	r1, [r3, #0]
 8010a8a:	685b      	ldreq	r3, [r3, #4]
 8010a8c:	1809      	addeq	r1, r1, r0
 8010a8e:	6021      	streq	r1, [r4, #0]
 8010a90:	e7ed      	b.n	8010a6e <_free_r+0x1e>
 8010a92:	461a      	mov	r2, r3
 8010a94:	685b      	ldr	r3, [r3, #4]
 8010a96:	b10b      	cbz	r3, 8010a9c <_free_r+0x4c>
 8010a98:	42a3      	cmp	r3, r4
 8010a9a:	d9fa      	bls.n	8010a92 <_free_r+0x42>
 8010a9c:	6811      	ldr	r1, [r2, #0]
 8010a9e:	1850      	adds	r0, r2, r1
 8010aa0:	42a0      	cmp	r0, r4
 8010aa2:	d10b      	bne.n	8010abc <_free_r+0x6c>
 8010aa4:	6820      	ldr	r0, [r4, #0]
 8010aa6:	4401      	add	r1, r0
 8010aa8:	1850      	adds	r0, r2, r1
 8010aaa:	4283      	cmp	r3, r0
 8010aac:	6011      	str	r1, [r2, #0]
 8010aae:	d1e0      	bne.n	8010a72 <_free_r+0x22>
 8010ab0:	6818      	ldr	r0, [r3, #0]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	6053      	str	r3, [r2, #4]
 8010ab6:	4408      	add	r0, r1
 8010ab8:	6010      	str	r0, [r2, #0]
 8010aba:	e7da      	b.n	8010a72 <_free_r+0x22>
 8010abc:	d902      	bls.n	8010ac4 <_free_r+0x74>
 8010abe:	230c      	movs	r3, #12
 8010ac0:	602b      	str	r3, [r5, #0]
 8010ac2:	e7d6      	b.n	8010a72 <_free_r+0x22>
 8010ac4:	6820      	ldr	r0, [r4, #0]
 8010ac6:	1821      	adds	r1, r4, r0
 8010ac8:	428b      	cmp	r3, r1
 8010aca:	bf04      	itt	eq
 8010acc:	6819      	ldreq	r1, [r3, #0]
 8010ace:	685b      	ldreq	r3, [r3, #4]
 8010ad0:	6063      	str	r3, [r4, #4]
 8010ad2:	bf04      	itt	eq
 8010ad4:	1809      	addeq	r1, r1, r0
 8010ad6:	6021      	streq	r1, [r4, #0]
 8010ad8:	6054      	str	r4, [r2, #4]
 8010ada:	e7ca      	b.n	8010a72 <_free_r+0x22>
 8010adc:	bd38      	pop	{r3, r4, r5, pc}
 8010ade:	bf00      	nop
 8010ae0:	20008358 	.word	0x20008358

08010ae4 <malloc>:
 8010ae4:	4b02      	ldr	r3, [pc, #8]	@ (8010af0 <malloc+0xc>)
 8010ae6:	4601      	mov	r1, r0
 8010ae8:	6818      	ldr	r0, [r3, #0]
 8010aea:	f000 b825 	b.w	8010b38 <_malloc_r>
 8010aee:	bf00      	nop
 8010af0:	20000038 	.word	0x20000038

08010af4 <sbrk_aligned>:
 8010af4:	b570      	push	{r4, r5, r6, lr}
 8010af6:	4e0f      	ldr	r6, [pc, #60]	@ (8010b34 <sbrk_aligned+0x40>)
 8010af8:	460c      	mov	r4, r1
 8010afa:	6831      	ldr	r1, [r6, #0]
 8010afc:	4605      	mov	r5, r0
 8010afe:	b911      	cbnz	r1, 8010b06 <sbrk_aligned+0x12>
 8010b00:	f000 fcc8 	bl	8011494 <_sbrk_r>
 8010b04:	6030      	str	r0, [r6, #0]
 8010b06:	4621      	mov	r1, r4
 8010b08:	4628      	mov	r0, r5
 8010b0a:	f000 fcc3 	bl	8011494 <_sbrk_r>
 8010b0e:	1c43      	adds	r3, r0, #1
 8010b10:	d103      	bne.n	8010b1a <sbrk_aligned+0x26>
 8010b12:	f04f 34ff 	mov.w	r4, #4294967295
 8010b16:	4620      	mov	r0, r4
 8010b18:	bd70      	pop	{r4, r5, r6, pc}
 8010b1a:	1cc4      	adds	r4, r0, #3
 8010b1c:	f024 0403 	bic.w	r4, r4, #3
 8010b20:	42a0      	cmp	r0, r4
 8010b22:	d0f8      	beq.n	8010b16 <sbrk_aligned+0x22>
 8010b24:	1a21      	subs	r1, r4, r0
 8010b26:	4628      	mov	r0, r5
 8010b28:	f000 fcb4 	bl	8011494 <_sbrk_r>
 8010b2c:	3001      	adds	r0, #1
 8010b2e:	d1f2      	bne.n	8010b16 <sbrk_aligned+0x22>
 8010b30:	e7ef      	b.n	8010b12 <sbrk_aligned+0x1e>
 8010b32:	bf00      	nop
 8010b34:	20008354 	.word	0x20008354

08010b38 <_malloc_r>:
 8010b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b3c:	1ccd      	adds	r5, r1, #3
 8010b3e:	f025 0503 	bic.w	r5, r5, #3
 8010b42:	3508      	adds	r5, #8
 8010b44:	2d0c      	cmp	r5, #12
 8010b46:	bf38      	it	cc
 8010b48:	250c      	movcc	r5, #12
 8010b4a:	2d00      	cmp	r5, #0
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	db01      	blt.n	8010b54 <_malloc_r+0x1c>
 8010b50:	42a9      	cmp	r1, r5
 8010b52:	d904      	bls.n	8010b5e <_malloc_r+0x26>
 8010b54:	230c      	movs	r3, #12
 8010b56:	6033      	str	r3, [r6, #0]
 8010b58:	2000      	movs	r0, #0
 8010b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010c34 <_malloc_r+0xfc>
 8010b62:	f000 f869 	bl	8010c38 <__malloc_lock>
 8010b66:	f8d8 3000 	ldr.w	r3, [r8]
 8010b6a:	461c      	mov	r4, r3
 8010b6c:	bb44      	cbnz	r4, 8010bc0 <_malloc_r+0x88>
 8010b6e:	4629      	mov	r1, r5
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7ff ffbf 	bl	8010af4 <sbrk_aligned>
 8010b76:	1c43      	adds	r3, r0, #1
 8010b78:	4604      	mov	r4, r0
 8010b7a:	d158      	bne.n	8010c2e <_malloc_r+0xf6>
 8010b7c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b80:	4627      	mov	r7, r4
 8010b82:	2f00      	cmp	r7, #0
 8010b84:	d143      	bne.n	8010c0e <_malloc_r+0xd6>
 8010b86:	2c00      	cmp	r4, #0
 8010b88:	d04b      	beq.n	8010c22 <_malloc_r+0xea>
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	4639      	mov	r1, r7
 8010b8e:	4630      	mov	r0, r6
 8010b90:	eb04 0903 	add.w	r9, r4, r3
 8010b94:	f000 fc7e 	bl	8011494 <_sbrk_r>
 8010b98:	4581      	cmp	r9, r0
 8010b9a:	d142      	bne.n	8010c22 <_malloc_r+0xea>
 8010b9c:	6821      	ldr	r1, [r4, #0]
 8010b9e:	1a6d      	subs	r5, r5, r1
 8010ba0:	4629      	mov	r1, r5
 8010ba2:	4630      	mov	r0, r6
 8010ba4:	f7ff ffa6 	bl	8010af4 <sbrk_aligned>
 8010ba8:	3001      	adds	r0, #1
 8010baa:	d03a      	beq.n	8010c22 <_malloc_r+0xea>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	442b      	add	r3, r5
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8010bb6:	685a      	ldr	r2, [r3, #4]
 8010bb8:	bb62      	cbnz	r2, 8010c14 <_malloc_r+0xdc>
 8010bba:	f8c8 7000 	str.w	r7, [r8]
 8010bbe:	e00f      	b.n	8010be0 <_malloc_r+0xa8>
 8010bc0:	6822      	ldr	r2, [r4, #0]
 8010bc2:	1b52      	subs	r2, r2, r5
 8010bc4:	d420      	bmi.n	8010c08 <_malloc_r+0xd0>
 8010bc6:	2a0b      	cmp	r2, #11
 8010bc8:	d917      	bls.n	8010bfa <_malloc_r+0xc2>
 8010bca:	1961      	adds	r1, r4, r5
 8010bcc:	42a3      	cmp	r3, r4
 8010bce:	6025      	str	r5, [r4, #0]
 8010bd0:	bf18      	it	ne
 8010bd2:	6059      	strne	r1, [r3, #4]
 8010bd4:	6863      	ldr	r3, [r4, #4]
 8010bd6:	bf08      	it	eq
 8010bd8:	f8c8 1000 	streq.w	r1, [r8]
 8010bdc:	5162      	str	r2, [r4, r5]
 8010bde:	604b      	str	r3, [r1, #4]
 8010be0:	4630      	mov	r0, r6
 8010be2:	f000 f82f 	bl	8010c44 <__malloc_unlock>
 8010be6:	f104 000b 	add.w	r0, r4, #11
 8010bea:	1d23      	adds	r3, r4, #4
 8010bec:	f020 0007 	bic.w	r0, r0, #7
 8010bf0:	1ac2      	subs	r2, r0, r3
 8010bf2:	bf1c      	itt	ne
 8010bf4:	1a1b      	subne	r3, r3, r0
 8010bf6:	50a3      	strne	r3, [r4, r2]
 8010bf8:	e7af      	b.n	8010b5a <_malloc_r+0x22>
 8010bfa:	6862      	ldr	r2, [r4, #4]
 8010bfc:	42a3      	cmp	r3, r4
 8010bfe:	bf0c      	ite	eq
 8010c00:	f8c8 2000 	streq.w	r2, [r8]
 8010c04:	605a      	strne	r2, [r3, #4]
 8010c06:	e7eb      	b.n	8010be0 <_malloc_r+0xa8>
 8010c08:	4623      	mov	r3, r4
 8010c0a:	6864      	ldr	r4, [r4, #4]
 8010c0c:	e7ae      	b.n	8010b6c <_malloc_r+0x34>
 8010c0e:	463c      	mov	r4, r7
 8010c10:	687f      	ldr	r7, [r7, #4]
 8010c12:	e7b6      	b.n	8010b82 <_malloc_r+0x4a>
 8010c14:	461a      	mov	r2, r3
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	42a3      	cmp	r3, r4
 8010c1a:	d1fb      	bne.n	8010c14 <_malloc_r+0xdc>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	6053      	str	r3, [r2, #4]
 8010c20:	e7de      	b.n	8010be0 <_malloc_r+0xa8>
 8010c22:	230c      	movs	r3, #12
 8010c24:	6033      	str	r3, [r6, #0]
 8010c26:	4630      	mov	r0, r6
 8010c28:	f000 f80c 	bl	8010c44 <__malloc_unlock>
 8010c2c:	e794      	b.n	8010b58 <_malloc_r+0x20>
 8010c2e:	6005      	str	r5, [r0, #0]
 8010c30:	e7d6      	b.n	8010be0 <_malloc_r+0xa8>
 8010c32:	bf00      	nop
 8010c34:	20008358 	.word	0x20008358

08010c38 <__malloc_lock>:
 8010c38:	4801      	ldr	r0, [pc, #4]	@ (8010c40 <__malloc_lock+0x8>)
 8010c3a:	f7ff beda 	b.w	80109f2 <__retarget_lock_acquire_recursive>
 8010c3e:	bf00      	nop
 8010c40:	20008350 	.word	0x20008350

08010c44 <__malloc_unlock>:
 8010c44:	4801      	ldr	r0, [pc, #4]	@ (8010c4c <__malloc_unlock+0x8>)
 8010c46:	f7ff bed5 	b.w	80109f4 <__retarget_lock_release_recursive>
 8010c4a:	bf00      	nop
 8010c4c:	20008350 	.word	0x20008350

08010c50 <__sfputc_r>:
 8010c50:	6893      	ldr	r3, [r2, #8]
 8010c52:	3b01      	subs	r3, #1
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	b410      	push	{r4}
 8010c58:	6093      	str	r3, [r2, #8]
 8010c5a:	da08      	bge.n	8010c6e <__sfputc_r+0x1e>
 8010c5c:	6994      	ldr	r4, [r2, #24]
 8010c5e:	42a3      	cmp	r3, r4
 8010c60:	db01      	blt.n	8010c66 <__sfputc_r+0x16>
 8010c62:	290a      	cmp	r1, #10
 8010c64:	d103      	bne.n	8010c6e <__sfputc_r+0x1e>
 8010c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c6a:	f000 bb7f 	b.w	801136c <__swbuf_r>
 8010c6e:	6813      	ldr	r3, [r2, #0]
 8010c70:	1c58      	adds	r0, r3, #1
 8010c72:	6010      	str	r0, [r2, #0]
 8010c74:	7019      	strb	r1, [r3, #0]
 8010c76:	4608      	mov	r0, r1
 8010c78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <__sfputs_r>:
 8010c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c80:	4606      	mov	r6, r0
 8010c82:	460f      	mov	r7, r1
 8010c84:	4614      	mov	r4, r2
 8010c86:	18d5      	adds	r5, r2, r3
 8010c88:	42ac      	cmp	r4, r5
 8010c8a:	d101      	bne.n	8010c90 <__sfputs_r+0x12>
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	e007      	b.n	8010ca0 <__sfputs_r+0x22>
 8010c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c94:	463a      	mov	r2, r7
 8010c96:	4630      	mov	r0, r6
 8010c98:	f7ff ffda 	bl	8010c50 <__sfputc_r>
 8010c9c:	1c43      	adds	r3, r0, #1
 8010c9e:	d1f3      	bne.n	8010c88 <__sfputs_r+0xa>
 8010ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ca4 <_vfiprintf_r>:
 8010ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ca8:	460d      	mov	r5, r1
 8010caa:	b09d      	sub	sp, #116	@ 0x74
 8010cac:	4614      	mov	r4, r2
 8010cae:	4698      	mov	r8, r3
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	b118      	cbz	r0, 8010cbc <_vfiprintf_r+0x18>
 8010cb4:	6a03      	ldr	r3, [r0, #32]
 8010cb6:	b90b      	cbnz	r3, 8010cbc <_vfiprintf_r+0x18>
 8010cb8:	f7ff fd6e 	bl	8010798 <__sinit>
 8010cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cbe:	07d9      	lsls	r1, r3, #31
 8010cc0:	d405      	bmi.n	8010cce <_vfiprintf_r+0x2a>
 8010cc2:	89ab      	ldrh	r3, [r5, #12]
 8010cc4:	059a      	lsls	r2, r3, #22
 8010cc6:	d402      	bmi.n	8010cce <_vfiprintf_r+0x2a>
 8010cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cca:	f7ff fe92 	bl	80109f2 <__retarget_lock_acquire_recursive>
 8010cce:	89ab      	ldrh	r3, [r5, #12]
 8010cd0:	071b      	lsls	r3, r3, #28
 8010cd2:	d501      	bpl.n	8010cd8 <_vfiprintf_r+0x34>
 8010cd4:	692b      	ldr	r3, [r5, #16]
 8010cd6:	b99b      	cbnz	r3, 8010d00 <_vfiprintf_r+0x5c>
 8010cd8:	4629      	mov	r1, r5
 8010cda:	4630      	mov	r0, r6
 8010cdc:	f000 fb84 	bl	80113e8 <__swsetup_r>
 8010ce0:	b170      	cbz	r0, 8010d00 <_vfiprintf_r+0x5c>
 8010ce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ce4:	07dc      	lsls	r4, r3, #31
 8010ce6:	d504      	bpl.n	8010cf2 <_vfiprintf_r+0x4e>
 8010ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cec:	b01d      	add	sp, #116	@ 0x74
 8010cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cf2:	89ab      	ldrh	r3, [r5, #12]
 8010cf4:	0598      	lsls	r0, r3, #22
 8010cf6:	d4f7      	bmi.n	8010ce8 <_vfiprintf_r+0x44>
 8010cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cfa:	f7ff fe7b 	bl	80109f4 <__retarget_lock_release_recursive>
 8010cfe:	e7f3      	b.n	8010ce8 <_vfiprintf_r+0x44>
 8010d00:	2300      	movs	r3, #0
 8010d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d04:	2320      	movs	r3, #32
 8010d06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d0e:	2330      	movs	r3, #48	@ 0x30
 8010d10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ec0 <_vfiprintf_r+0x21c>
 8010d14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d18:	f04f 0901 	mov.w	r9, #1
 8010d1c:	4623      	mov	r3, r4
 8010d1e:	469a      	mov	sl, r3
 8010d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d24:	b10a      	cbz	r2, 8010d2a <_vfiprintf_r+0x86>
 8010d26:	2a25      	cmp	r2, #37	@ 0x25
 8010d28:	d1f9      	bne.n	8010d1e <_vfiprintf_r+0x7a>
 8010d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8010d2e:	d00b      	beq.n	8010d48 <_vfiprintf_r+0xa4>
 8010d30:	465b      	mov	r3, fp
 8010d32:	4622      	mov	r2, r4
 8010d34:	4629      	mov	r1, r5
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7ff ffa1 	bl	8010c7e <__sfputs_r>
 8010d3c:	3001      	adds	r0, #1
 8010d3e:	f000 80a7 	beq.w	8010e90 <_vfiprintf_r+0x1ec>
 8010d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d44:	445a      	add	r2, fp
 8010d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d48:	f89a 3000 	ldrb.w	r3, [sl]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	f000 809f 	beq.w	8010e90 <_vfiprintf_r+0x1ec>
 8010d52:	2300      	movs	r3, #0
 8010d54:	f04f 32ff 	mov.w	r2, #4294967295
 8010d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d5c:	f10a 0a01 	add.w	sl, sl, #1
 8010d60:	9304      	str	r3, [sp, #16]
 8010d62:	9307      	str	r3, [sp, #28]
 8010d64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d68:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d6a:	4654      	mov	r4, sl
 8010d6c:	2205      	movs	r2, #5
 8010d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d72:	4853      	ldr	r0, [pc, #332]	@ (8010ec0 <_vfiprintf_r+0x21c>)
 8010d74:	f7ef fa7c 	bl	8000270 <memchr>
 8010d78:	9a04      	ldr	r2, [sp, #16]
 8010d7a:	b9d8      	cbnz	r0, 8010db4 <_vfiprintf_r+0x110>
 8010d7c:	06d1      	lsls	r1, r2, #27
 8010d7e:	bf44      	itt	mi
 8010d80:	2320      	movmi	r3, #32
 8010d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d86:	0713      	lsls	r3, r2, #28
 8010d88:	bf44      	itt	mi
 8010d8a:	232b      	movmi	r3, #43	@ 0x2b
 8010d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d90:	f89a 3000 	ldrb.w	r3, [sl]
 8010d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d96:	d015      	beq.n	8010dc4 <_vfiprintf_r+0x120>
 8010d98:	9a07      	ldr	r2, [sp, #28]
 8010d9a:	4654      	mov	r4, sl
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f04f 0c0a 	mov.w	ip, #10
 8010da2:	4621      	mov	r1, r4
 8010da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010da8:	3b30      	subs	r3, #48	@ 0x30
 8010daa:	2b09      	cmp	r3, #9
 8010dac:	d94b      	bls.n	8010e46 <_vfiprintf_r+0x1a2>
 8010dae:	b1b0      	cbz	r0, 8010dde <_vfiprintf_r+0x13a>
 8010db0:	9207      	str	r2, [sp, #28]
 8010db2:	e014      	b.n	8010dde <_vfiprintf_r+0x13a>
 8010db4:	eba0 0308 	sub.w	r3, r0, r8
 8010db8:	fa09 f303 	lsl.w	r3, r9, r3
 8010dbc:	4313      	orrs	r3, r2
 8010dbe:	9304      	str	r3, [sp, #16]
 8010dc0:	46a2      	mov	sl, r4
 8010dc2:	e7d2      	b.n	8010d6a <_vfiprintf_r+0xc6>
 8010dc4:	9b03      	ldr	r3, [sp, #12]
 8010dc6:	1d19      	adds	r1, r3, #4
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	9103      	str	r1, [sp, #12]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	bfbb      	ittet	lt
 8010dd0:	425b      	neglt	r3, r3
 8010dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8010dd6:	9307      	strge	r3, [sp, #28]
 8010dd8:	9307      	strlt	r3, [sp, #28]
 8010dda:	bfb8      	it	lt
 8010ddc:	9204      	strlt	r2, [sp, #16]
 8010dde:	7823      	ldrb	r3, [r4, #0]
 8010de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010de2:	d10a      	bne.n	8010dfa <_vfiprintf_r+0x156>
 8010de4:	7863      	ldrb	r3, [r4, #1]
 8010de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010de8:	d132      	bne.n	8010e50 <_vfiprintf_r+0x1ac>
 8010dea:	9b03      	ldr	r3, [sp, #12]
 8010dec:	1d1a      	adds	r2, r3, #4
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	9203      	str	r2, [sp, #12]
 8010df2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010df6:	3402      	adds	r4, #2
 8010df8:	9305      	str	r3, [sp, #20]
 8010dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010ed0 <_vfiprintf_r+0x22c>
 8010dfe:	7821      	ldrb	r1, [r4, #0]
 8010e00:	2203      	movs	r2, #3
 8010e02:	4650      	mov	r0, sl
 8010e04:	f7ef fa34 	bl	8000270 <memchr>
 8010e08:	b138      	cbz	r0, 8010e1a <_vfiprintf_r+0x176>
 8010e0a:	9b04      	ldr	r3, [sp, #16]
 8010e0c:	eba0 000a 	sub.w	r0, r0, sl
 8010e10:	2240      	movs	r2, #64	@ 0x40
 8010e12:	4082      	lsls	r2, r0
 8010e14:	4313      	orrs	r3, r2
 8010e16:	3401      	adds	r4, #1
 8010e18:	9304      	str	r3, [sp, #16]
 8010e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e1e:	4829      	ldr	r0, [pc, #164]	@ (8010ec4 <_vfiprintf_r+0x220>)
 8010e20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e24:	2206      	movs	r2, #6
 8010e26:	f7ef fa23 	bl	8000270 <memchr>
 8010e2a:	2800      	cmp	r0, #0
 8010e2c:	d03f      	beq.n	8010eae <_vfiprintf_r+0x20a>
 8010e2e:	4b26      	ldr	r3, [pc, #152]	@ (8010ec8 <_vfiprintf_r+0x224>)
 8010e30:	bb1b      	cbnz	r3, 8010e7a <_vfiprintf_r+0x1d6>
 8010e32:	9b03      	ldr	r3, [sp, #12]
 8010e34:	3307      	adds	r3, #7
 8010e36:	f023 0307 	bic.w	r3, r3, #7
 8010e3a:	3308      	adds	r3, #8
 8010e3c:	9303      	str	r3, [sp, #12]
 8010e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e40:	443b      	add	r3, r7
 8010e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e44:	e76a      	b.n	8010d1c <_vfiprintf_r+0x78>
 8010e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e4a:	460c      	mov	r4, r1
 8010e4c:	2001      	movs	r0, #1
 8010e4e:	e7a8      	b.n	8010da2 <_vfiprintf_r+0xfe>
 8010e50:	2300      	movs	r3, #0
 8010e52:	3401      	adds	r4, #1
 8010e54:	9305      	str	r3, [sp, #20]
 8010e56:	4619      	mov	r1, r3
 8010e58:	f04f 0c0a 	mov.w	ip, #10
 8010e5c:	4620      	mov	r0, r4
 8010e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e62:	3a30      	subs	r2, #48	@ 0x30
 8010e64:	2a09      	cmp	r2, #9
 8010e66:	d903      	bls.n	8010e70 <_vfiprintf_r+0x1cc>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d0c6      	beq.n	8010dfa <_vfiprintf_r+0x156>
 8010e6c:	9105      	str	r1, [sp, #20]
 8010e6e:	e7c4      	b.n	8010dfa <_vfiprintf_r+0x156>
 8010e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e74:	4604      	mov	r4, r0
 8010e76:	2301      	movs	r3, #1
 8010e78:	e7f0      	b.n	8010e5c <_vfiprintf_r+0x1b8>
 8010e7a:	ab03      	add	r3, sp, #12
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	462a      	mov	r2, r5
 8010e80:	4b12      	ldr	r3, [pc, #72]	@ (8010ecc <_vfiprintf_r+0x228>)
 8010e82:	a904      	add	r1, sp, #16
 8010e84:	4630      	mov	r0, r6
 8010e86:	f3af 8000 	nop.w
 8010e8a:	4607      	mov	r7, r0
 8010e8c:	1c78      	adds	r0, r7, #1
 8010e8e:	d1d6      	bne.n	8010e3e <_vfiprintf_r+0x19a>
 8010e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e92:	07d9      	lsls	r1, r3, #31
 8010e94:	d405      	bmi.n	8010ea2 <_vfiprintf_r+0x1fe>
 8010e96:	89ab      	ldrh	r3, [r5, #12]
 8010e98:	059a      	lsls	r2, r3, #22
 8010e9a:	d402      	bmi.n	8010ea2 <_vfiprintf_r+0x1fe>
 8010e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e9e:	f7ff fda9 	bl	80109f4 <__retarget_lock_release_recursive>
 8010ea2:	89ab      	ldrh	r3, [r5, #12]
 8010ea4:	065b      	lsls	r3, r3, #25
 8010ea6:	f53f af1f 	bmi.w	8010ce8 <_vfiprintf_r+0x44>
 8010eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010eac:	e71e      	b.n	8010cec <_vfiprintf_r+0x48>
 8010eae:	ab03      	add	r3, sp, #12
 8010eb0:	9300      	str	r3, [sp, #0]
 8010eb2:	462a      	mov	r2, r5
 8010eb4:	4b05      	ldr	r3, [pc, #20]	@ (8010ecc <_vfiprintf_r+0x228>)
 8010eb6:	a904      	add	r1, sp, #16
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f000 f879 	bl	8010fb0 <_printf_i>
 8010ebe:	e7e4      	b.n	8010e8a <_vfiprintf_r+0x1e6>
 8010ec0:	08015221 	.word	0x08015221
 8010ec4:	0801522b 	.word	0x0801522b
 8010ec8:	00000000 	.word	0x00000000
 8010ecc:	08010c7f 	.word	0x08010c7f
 8010ed0:	08015227 	.word	0x08015227

08010ed4 <_printf_common>:
 8010ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed8:	4616      	mov	r6, r2
 8010eda:	4698      	mov	r8, r3
 8010edc:	688a      	ldr	r2, [r1, #8]
 8010ede:	690b      	ldr	r3, [r1, #16]
 8010ee0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	bfb8      	it	lt
 8010ee8:	4613      	movlt	r3, r2
 8010eea:	6033      	str	r3, [r6, #0]
 8010eec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	b10a      	cbz	r2, 8010efa <_printf_common+0x26>
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	6033      	str	r3, [r6, #0]
 8010efa:	6823      	ldr	r3, [r4, #0]
 8010efc:	0699      	lsls	r1, r3, #26
 8010efe:	bf42      	ittt	mi
 8010f00:	6833      	ldrmi	r3, [r6, #0]
 8010f02:	3302      	addmi	r3, #2
 8010f04:	6033      	strmi	r3, [r6, #0]
 8010f06:	6825      	ldr	r5, [r4, #0]
 8010f08:	f015 0506 	ands.w	r5, r5, #6
 8010f0c:	d106      	bne.n	8010f1c <_printf_common+0x48>
 8010f0e:	f104 0a19 	add.w	sl, r4, #25
 8010f12:	68e3      	ldr	r3, [r4, #12]
 8010f14:	6832      	ldr	r2, [r6, #0]
 8010f16:	1a9b      	subs	r3, r3, r2
 8010f18:	42ab      	cmp	r3, r5
 8010f1a:	dc26      	bgt.n	8010f6a <_printf_common+0x96>
 8010f1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f20:	6822      	ldr	r2, [r4, #0]
 8010f22:	3b00      	subs	r3, #0
 8010f24:	bf18      	it	ne
 8010f26:	2301      	movne	r3, #1
 8010f28:	0692      	lsls	r2, r2, #26
 8010f2a:	d42b      	bmi.n	8010f84 <_printf_common+0xb0>
 8010f2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f30:	4641      	mov	r1, r8
 8010f32:	4638      	mov	r0, r7
 8010f34:	47c8      	blx	r9
 8010f36:	3001      	adds	r0, #1
 8010f38:	d01e      	beq.n	8010f78 <_printf_common+0xa4>
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	6922      	ldr	r2, [r4, #16]
 8010f3e:	f003 0306 	and.w	r3, r3, #6
 8010f42:	2b04      	cmp	r3, #4
 8010f44:	bf02      	ittt	eq
 8010f46:	68e5      	ldreq	r5, [r4, #12]
 8010f48:	6833      	ldreq	r3, [r6, #0]
 8010f4a:	1aed      	subeq	r5, r5, r3
 8010f4c:	68a3      	ldr	r3, [r4, #8]
 8010f4e:	bf0c      	ite	eq
 8010f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f54:	2500      	movne	r5, #0
 8010f56:	4293      	cmp	r3, r2
 8010f58:	bfc4      	itt	gt
 8010f5a:	1a9b      	subgt	r3, r3, r2
 8010f5c:	18ed      	addgt	r5, r5, r3
 8010f5e:	2600      	movs	r6, #0
 8010f60:	341a      	adds	r4, #26
 8010f62:	42b5      	cmp	r5, r6
 8010f64:	d11a      	bne.n	8010f9c <_printf_common+0xc8>
 8010f66:	2000      	movs	r0, #0
 8010f68:	e008      	b.n	8010f7c <_printf_common+0xa8>
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	4652      	mov	r2, sl
 8010f6e:	4641      	mov	r1, r8
 8010f70:	4638      	mov	r0, r7
 8010f72:	47c8      	blx	r9
 8010f74:	3001      	adds	r0, #1
 8010f76:	d103      	bne.n	8010f80 <_printf_common+0xac>
 8010f78:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f80:	3501      	adds	r5, #1
 8010f82:	e7c6      	b.n	8010f12 <_printf_common+0x3e>
 8010f84:	18e1      	adds	r1, r4, r3
 8010f86:	1c5a      	adds	r2, r3, #1
 8010f88:	2030      	movs	r0, #48	@ 0x30
 8010f8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010f8e:	4422      	add	r2, r4
 8010f90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010f94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010f98:	3302      	adds	r3, #2
 8010f9a:	e7c7      	b.n	8010f2c <_printf_common+0x58>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	4622      	mov	r2, r4
 8010fa0:	4641      	mov	r1, r8
 8010fa2:	4638      	mov	r0, r7
 8010fa4:	47c8      	blx	r9
 8010fa6:	3001      	adds	r0, #1
 8010fa8:	d0e6      	beq.n	8010f78 <_printf_common+0xa4>
 8010faa:	3601      	adds	r6, #1
 8010fac:	e7d9      	b.n	8010f62 <_printf_common+0x8e>
	...

08010fb0 <_printf_i>:
 8010fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb4:	7e0f      	ldrb	r7, [r1, #24]
 8010fb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010fb8:	2f78      	cmp	r7, #120	@ 0x78
 8010fba:	4691      	mov	r9, r2
 8010fbc:	4680      	mov	r8, r0
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	469a      	mov	sl, r3
 8010fc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010fc6:	d807      	bhi.n	8010fd8 <_printf_i+0x28>
 8010fc8:	2f62      	cmp	r7, #98	@ 0x62
 8010fca:	d80a      	bhi.n	8010fe2 <_printf_i+0x32>
 8010fcc:	2f00      	cmp	r7, #0
 8010fce:	f000 80d2 	beq.w	8011176 <_printf_i+0x1c6>
 8010fd2:	2f58      	cmp	r7, #88	@ 0x58
 8010fd4:	f000 80b9 	beq.w	801114a <_printf_i+0x19a>
 8010fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010fdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010fe0:	e03a      	b.n	8011058 <_printf_i+0xa8>
 8010fe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010fe6:	2b15      	cmp	r3, #21
 8010fe8:	d8f6      	bhi.n	8010fd8 <_printf_i+0x28>
 8010fea:	a101      	add	r1, pc, #4	@ (adr r1, 8010ff0 <_printf_i+0x40>)
 8010fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010ff0:	08011049 	.word	0x08011049
 8010ff4:	0801105d 	.word	0x0801105d
 8010ff8:	08010fd9 	.word	0x08010fd9
 8010ffc:	08010fd9 	.word	0x08010fd9
 8011000:	08010fd9 	.word	0x08010fd9
 8011004:	08010fd9 	.word	0x08010fd9
 8011008:	0801105d 	.word	0x0801105d
 801100c:	08010fd9 	.word	0x08010fd9
 8011010:	08010fd9 	.word	0x08010fd9
 8011014:	08010fd9 	.word	0x08010fd9
 8011018:	08010fd9 	.word	0x08010fd9
 801101c:	0801115d 	.word	0x0801115d
 8011020:	08011087 	.word	0x08011087
 8011024:	08011117 	.word	0x08011117
 8011028:	08010fd9 	.word	0x08010fd9
 801102c:	08010fd9 	.word	0x08010fd9
 8011030:	0801117f 	.word	0x0801117f
 8011034:	08010fd9 	.word	0x08010fd9
 8011038:	08011087 	.word	0x08011087
 801103c:	08010fd9 	.word	0x08010fd9
 8011040:	08010fd9 	.word	0x08010fd9
 8011044:	0801111f 	.word	0x0801111f
 8011048:	6833      	ldr	r3, [r6, #0]
 801104a:	1d1a      	adds	r2, r3, #4
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	6032      	str	r2, [r6, #0]
 8011050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011058:	2301      	movs	r3, #1
 801105a:	e09d      	b.n	8011198 <_printf_i+0x1e8>
 801105c:	6833      	ldr	r3, [r6, #0]
 801105e:	6820      	ldr	r0, [r4, #0]
 8011060:	1d19      	adds	r1, r3, #4
 8011062:	6031      	str	r1, [r6, #0]
 8011064:	0606      	lsls	r6, r0, #24
 8011066:	d501      	bpl.n	801106c <_printf_i+0xbc>
 8011068:	681d      	ldr	r5, [r3, #0]
 801106a:	e003      	b.n	8011074 <_printf_i+0xc4>
 801106c:	0645      	lsls	r5, r0, #25
 801106e:	d5fb      	bpl.n	8011068 <_printf_i+0xb8>
 8011070:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011074:	2d00      	cmp	r5, #0
 8011076:	da03      	bge.n	8011080 <_printf_i+0xd0>
 8011078:	232d      	movs	r3, #45	@ 0x2d
 801107a:	426d      	negs	r5, r5
 801107c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011080:	4859      	ldr	r0, [pc, #356]	@ (80111e8 <_printf_i+0x238>)
 8011082:	230a      	movs	r3, #10
 8011084:	e011      	b.n	80110aa <_printf_i+0xfa>
 8011086:	6821      	ldr	r1, [r4, #0]
 8011088:	6833      	ldr	r3, [r6, #0]
 801108a:	0608      	lsls	r0, r1, #24
 801108c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011090:	d402      	bmi.n	8011098 <_printf_i+0xe8>
 8011092:	0649      	lsls	r1, r1, #25
 8011094:	bf48      	it	mi
 8011096:	b2ad      	uxthmi	r5, r5
 8011098:	2f6f      	cmp	r7, #111	@ 0x6f
 801109a:	4853      	ldr	r0, [pc, #332]	@ (80111e8 <_printf_i+0x238>)
 801109c:	6033      	str	r3, [r6, #0]
 801109e:	bf14      	ite	ne
 80110a0:	230a      	movne	r3, #10
 80110a2:	2308      	moveq	r3, #8
 80110a4:	2100      	movs	r1, #0
 80110a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110aa:	6866      	ldr	r6, [r4, #4]
 80110ac:	60a6      	str	r6, [r4, #8]
 80110ae:	2e00      	cmp	r6, #0
 80110b0:	bfa2      	ittt	ge
 80110b2:	6821      	ldrge	r1, [r4, #0]
 80110b4:	f021 0104 	bicge.w	r1, r1, #4
 80110b8:	6021      	strge	r1, [r4, #0]
 80110ba:	b90d      	cbnz	r5, 80110c0 <_printf_i+0x110>
 80110bc:	2e00      	cmp	r6, #0
 80110be:	d04b      	beq.n	8011158 <_printf_i+0x1a8>
 80110c0:	4616      	mov	r6, r2
 80110c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80110c6:	fb03 5711 	mls	r7, r3, r1, r5
 80110ca:	5dc7      	ldrb	r7, [r0, r7]
 80110cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80110d0:	462f      	mov	r7, r5
 80110d2:	42bb      	cmp	r3, r7
 80110d4:	460d      	mov	r5, r1
 80110d6:	d9f4      	bls.n	80110c2 <_printf_i+0x112>
 80110d8:	2b08      	cmp	r3, #8
 80110da:	d10b      	bne.n	80110f4 <_printf_i+0x144>
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	07df      	lsls	r7, r3, #31
 80110e0:	d508      	bpl.n	80110f4 <_printf_i+0x144>
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	6861      	ldr	r1, [r4, #4]
 80110e6:	4299      	cmp	r1, r3
 80110e8:	bfde      	ittt	le
 80110ea:	2330      	movle	r3, #48	@ 0x30
 80110ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80110f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80110f4:	1b92      	subs	r2, r2, r6
 80110f6:	6122      	str	r2, [r4, #16]
 80110f8:	f8cd a000 	str.w	sl, [sp]
 80110fc:	464b      	mov	r3, r9
 80110fe:	aa03      	add	r2, sp, #12
 8011100:	4621      	mov	r1, r4
 8011102:	4640      	mov	r0, r8
 8011104:	f7ff fee6 	bl	8010ed4 <_printf_common>
 8011108:	3001      	adds	r0, #1
 801110a:	d14a      	bne.n	80111a2 <_printf_i+0x1f2>
 801110c:	f04f 30ff 	mov.w	r0, #4294967295
 8011110:	b004      	add	sp, #16
 8011112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	f043 0320 	orr.w	r3, r3, #32
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	4833      	ldr	r0, [pc, #204]	@ (80111ec <_printf_i+0x23c>)
 8011120:	2778      	movs	r7, #120	@ 0x78
 8011122:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	6831      	ldr	r1, [r6, #0]
 801112a:	061f      	lsls	r7, r3, #24
 801112c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011130:	d402      	bmi.n	8011138 <_printf_i+0x188>
 8011132:	065f      	lsls	r7, r3, #25
 8011134:	bf48      	it	mi
 8011136:	b2ad      	uxthmi	r5, r5
 8011138:	6031      	str	r1, [r6, #0]
 801113a:	07d9      	lsls	r1, r3, #31
 801113c:	bf44      	itt	mi
 801113e:	f043 0320 	orrmi.w	r3, r3, #32
 8011142:	6023      	strmi	r3, [r4, #0]
 8011144:	b11d      	cbz	r5, 801114e <_printf_i+0x19e>
 8011146:	2310      	movs	r3, #16
 8011148:	e7ac      	b.n	80110a4 <_printf_i+0xf4>
 801114a:	4827      	ldr	r0, [pc, #156]	@ (80111e8 <_printf_i+0x238>)
 801114c:	e7e9      	b.n	8011122 <_printf_i+0x172>
 801114e:	6823      	ldr	r3, [r4, #0]
 8011150:	f023 0320 	bic.w	r3, r3, #32
 8011154:	6023      	str	r3, [r4, #0]
 8011156:	e7f6      	b.n	8011146 <_printf_i+0x196>
 8011158:	4616      	mov	r6, r2
 801115a:	e7bd      	b.n	80110d8 <_printf_i+0x128>
 801115c:	6833      	ldr	r3, [r6, #0]
 801115e:	6825      	ldr	r5, [r4, #0]
 8011160:	6961      	ldr	r1, [r4, #20]
 8011162:	1d18      	adds	r0, r3, #4
 8011164:	6030      	str	r0, [r6, #0]
 8011166:	062e      	lsls	r6, r5, #24
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	d501      	bpl.n	8011170 <_printf_i+0x1c0>
 801116c:	6019      	str	r1, [r3, #0]
 801116e:	e002      	b.n	8011176 <_printf_i+0x1c6>
 8011170:	0668      	lsls	r0, r5, #25
 8011172:	d5fb      	bpl.n	801116c <_printf_i+0x1bc>
 8011174:	8019      	strh	r1, [r3, #0]
 8011176:	2300      	movs	r3, #0
 8011178:	6123      	str	r3, [r4, #16]
 801117a:	4616      	mov	r6, r2
 801117c:	e7bc      	b.n	80110f8 <_printf_i+0x148>
 801117e:	6833      	ldr	r3, [r6, #0]
 8011180:	1d1a      	adds	r2, r3, #4
 8011182:	6032      	str	r2, [r6, #0]
 8011184:	681e      	ldr	r6, [r3, #0]
 8011186:	6862      	ldr	r2, [r4, #4]
 8011188:	2100      	movs	r1, #0
 801118a:	4630      	mov	r0, r6
 801118c:	f7ef f870 	bl	8000270 <memchr>
 8011190:	b108      	cbz	r0, 8011196 <_printf_i+0x1e6>
 8011192:	1b80      	subs	r0, r0, r6
 8011194:	6060      	str	r0, [r4, #4]
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	6123      	str	r3, [r4, #16]
 801119a:	2300      	movs	r3, #0
 801119c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111a0:	e7aa      	b.n	80110f8 <_printf_i+0x148>
 80111a2:	6923      	ldr	r3, [r4, #16]
 80111a4:	4632      	mov	r2, r6
 80111a6:	4649      	mov	r1, r9
 80111a8:	4640      	mov	r0, r8
 80111aa:	47d0      	blx	sl
 80111ac:	3001      	adds	r0, #1
 80111ae:	d0ad      	beq.n	801110c <_printf_i+0x15c>
 80111b0:	6823      	ldr	r3, [r4, #0]
 80111b2:	079b      	lsls	r3, r3, #30
 80111b4:	d413      	bmi.n	80111de <_printf_i+0x22e>
 80111b6:	68e0      	ldr	r0, [r4, #12]
 80111b8:	9b03      	ldr	r3, [sp, #12]
 80111ba:	4298      	cmp	r0, r3
 80111bc:	bfb8      	it	lt
 80111be:	4618      	movlt	r0, r3
 80111c0:	e7a6      	b.n	8011110 <_printf_i+0x160>
 80111c2:	2301      	movs	r3, #1
 80111c4:	4632      	mov	r2, r6
 80111c6:	4649      	mov	r1, r9
 80111c8:	4640      	mov	r0, r8
 80111ca:	47d0      	blx	sl
 80111cc:	3001      	adds	r0, #1
 80111ce:	d09d      	beq.n	801110c <_printf_i+0x15c>
 80111d0:	3501      	adds	r5, #1
 80111d2:	68e3      	ldr	r3, [r4, #12]
 80111d4:	9903      	ldr	r1, [sp, #12]
 80111d6:	1a5b      	subs	r3, r3, r1
 80111d8:	42ab      	cmp	r3, r5
 80111da:	dcf2      	bgt.n	80111c2 <_printf_i+0x212>
 80111dc:	e7eb      	b.n	80111b6 <_printf_i+0x206>
 80111de:	2500      	movs	r5, #0
 80111e0:	f104 0619 	add.w	r6, r4, #25
 80111e4:	e7f5      	b.n	80111d2 <_printf_i+0x222>
 80111e6:	bf00      	nop
 80111e8:	08015232 	.word	0x08015232
 80111ec:	08015243 	.word	0x08015243

080111f0 <__sflush_r>:
 80111f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80111f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	0716      	lsls	r6, r2, #28
 80111fa:	4605      	mov	r5, r0
 80111fc:	460c      	mov	r4, r1
 80111fe:	d454      	bmi.n	80112aa <__sflush_r+0xba>
 8011200:	684b      	ldr	r3, [r1, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	dc02      	bgt.n	801120c <__sflush_r+0x1c>
 8011206:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011208:	2b00      	cmp	r3, #0
 801120a:	dd48      	ble.n	801129e <__sflush_r+0xae>
 801120c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801120e:	2e00      	cmp	r6, #0
 8011210:	d045      	beq.n	801129e <__sflush_r+0xae>
 8011212:	2300      	movs	r3, #0
 8011214:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011218:	682f      	ldr	r7, [r5, #0]
 801121a:	6a21      	ldr	r1, [r4, #32]
 801121c:	602b      	str	r3, [r5, #0]
 801121e:	d030      	beq.n	8011282 <__sflush_r+0x92>
 8011220:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	0759      	lsls	r1, r3, #29
 8011226:	d505      	bpl.n	8011234 <__sflush_r+0x44>
 8011228:	6863      	ldr	r3, [r4, #4]
 801122a:	1ad2      	subs	r2, r2, r3
 801122c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801122e:	b10b      	cbz	r3, 8011234 <__sflush_r+0x44>
 8011230:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011232:	1ad2      	subs	r2, r2, r3
 8011234:	2300      	movs	r3, #0
 8011236:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011238:	6a21      	ldr	r1, [r4, #32]
 801123a:	4628      	mov	r0, r5
 801123c:	47b0      	blx	r6
 801123e:	1c43      	adds	r3, r0, #1
 8011240:	89a3      	ldrh	r3, [r4, #12]
 8011242:	d106      	bne.n	8011252 <__sflush_r+0x62>
 8011244:	6829      	ldr	r1, [r5, #0]
 8011246:	291d      	cmp	r1, #29
 8011248:	d82b      	bhi.n	80112a2 <__sflush_r+0xb2>
 801124a:	4a2a      	ldr	r2, [pc, #168]	@ (80112f4 <__sflush_r+0x104>)
 801124c:	410a      	asrs	r2, r1
 801124e:	07d6      	lsls	r6, r2, #31
 8011250:	d427      	bmi.n	80112a2 <__sflush_r+0xb2>
 8011252:	2200      	movs	r2, #0
 8011254:	6062      	str	r2, [r4, #4]
 8011256:	04d9      	lsls	r1, r3, #19
 8011258:	6922      	ldr	r2, [r4, #16]
 801125a:	6022      	str	r2, [r4, #0]
 801125c:	d504      	bpl.n	8011268 <__sflush_r+0x78>
 801125e:	1c42      	adds	r2, r0, #1
 8011260:	d101      	bne.n	8011266 <__sflush_r+0x76>
 8011262:	682b      	ldr	r3, [r5, #0]
 8011264:	b903      	cbnz	r3, 8011268 <__sflush_r+0x78>
 8011266:	6560      	str	r0, [r4, #84]	@ 0x54
 8011268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801126a:	602f      	str	r7, [r5, #0]
 801126c:	b1b9      	cbz	r1, 801129e <__sflush_r+0xae>
 801126e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011272:	4299      	cmp	r1, r3
 8011274:	d002      	beq.n	801127c <__sflush_r+0x8c>
 8011276:	4628      	mov	r0, r5
 8011278:	f7ff fbea 	bl	8010a50 <_free_r>
 801127c:	2300      	movs	r3, #0
 801127e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011280:	e00d      	b.n	801129e <__sflush_r+0xae>
 8011282:	2301      	movs	r3, #1
 8011284:	4628      	mov	r0, r5
 8011286:	47b0      	blx	r6
 8011288:	4602      	mov	r2, r0
 801128a:	1c50      	adds	r0, r2, #1
 801128c:	d1c9      	bne.n	8011222 <__sflush_r+0x32>
 801128e:	682b      	ldr	r3, [r5, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d0c6      	beq.n	8011222 <__sflush_r+0x32>
 8011294:	2b1d      	cmp	r3, #29
 8011296:	d001      	beq.n	801129c <__sflush_r+0xac>
 8011298:	2b16      	cmp	r3, #22
 801129a:	d11e      	bne.n	80112da <__sflush_r+0xea>
 801129c:	602f      	str	r7, [r5, #0]
 801129e:	2000      	movs	r0, #0
 80112a0:	e022      	b.n	80112e8 <__sflush_r+0xf8>
 80112a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112a6:	b21b      	sxth	r3, r3
 80112a8:	e01b      	b.n	80112e2 <__sflush_r+0xf2>
 80112aa:	690f      	ldr	r7, [r1, #16]
 80112ac:	2f00      	cmp	r7, #0
 80112ae:	d0f6      	beq.n	801129e <__sflush_r+0xae>
 80112b0:	0793      	lsls	r3, r2, #30
 80112b2:	680e      	ldr	r6, [r1, #0]
 80112b4:	bf08      	it	eq
 80112b6:	694b      	ldreq	r3, [r1, #20]
 80112b8:	600f      	str	r7, [r1, #0]
 80112ba:	bf18      	it	ne
 80112bc:	2300      	movne	r3, #0
 80112be:	eba6 0807 	sub.w	r8, r6, r7
 80112c2:	608b      	str	r3, [r1, #8]
 80112c4:	f1b8 0f00 	cmp.w	r8, #0
 80112c8:	dde9      	ble.n	801129e <__sflush_r+0xae>
 80112ca:	6a21      	ldr	r1, [r4, #32]
 80112cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80112ce:	4643      	mov	r3, r8
 80112d0:	463a      	mov	r2, r7
 80112d2:	4628      	mov	r0, r5
 80112d4:	47b0      	blx	r6
 80112d6:	2800      	cmp	r0, #0
 80112d8:	dc08      	bgt.n	80112ec <__sflush_r+0xfc>
 80112da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112e2:	81a3      	strh	r3, [r4, #12]
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ec:	4407      	add	r7, r0
 80112ee:	eba8 0800 	sub.w	r8, r8, r0
 80112f2:	e7e7      	b.n	80112c4 <__sflush_r+0xd4>
 80112f4:	dfbffffe 	.word	0xdfbffffe

080112f8 <_fflush_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	690b      	ldr	r3, [r1, #16]
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	b913      	cbnz	r3, 8011308 <_fflush_r+0x10>
 8011302:	2500      	movs	r5, #0
 8011304:	4628      	mov	r0, r5
 8011306:	bd38      	pop	{r3, r4, r5, pc}
 8011308:	b118      	cbz	r0, 8011312 <_fflush_r+0x1a>
 801130a:	6a03      	ldr	r3, [r0, #32]
 801130c:	b90b      	cbnz	r3, 8011312 <_fflush_r+0x1a>
 801130e:	f7ff fa43 	bl	8010798 <__sinit>
 8011312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0f3      	beq.n	8011302 <_fflush_r+0xa>
 801131a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801131c:	07d0      	lsls	r0, r2, #31
 801131e:	d404      	bmi.n	801132a <_fflush_r+0x32>
 8011320:	0599      	lsls	r1, r3, #22
 8011322:	d402      	bmi.n	801132a <_fflush_r+0x32>
 8011324:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011326:	f7ff fb64 	bl	80109f2 <__retarget_lock_acquire_recursive>
 801132a:	4628      	mov	r0, r5
 801132c:	4621      	mov	r1, r4
 801132e:	f7ff ff5f 	bl	80111f0 <__sflush_r>
 8011332:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011334:	07da      	lsls	r2, r3, #31
 8011336:	4605      	mov	r5, r0
 8011338:	d4e4      	bmi.n	8011304 <_fflush_r+0xc>
 801133a:	89a3      	ldrh	r3, [r4, #12]
 801133c:	059b      	lsls	r3, r3, #22
 801133e:	d4e1      	bmi.n	8011304 <_fflush_r+0xc>
 8011340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011342:	f7ff fb57 	bl	80109f4 <__retarget_lock_release_recursive>
 8011346:	e7dd      	b.n	8011304 <_fflush_r+0xc>

08011348 <fiprintf>:
 8011348:	b40e      	push	{r1, r2, r3}
 801134a:	b503      	push	{r0, r1, lr}
 801134c:	4601      	mov	r1, r0
 801134e:	ab03      	add	r3, sp, #12
 8011350:	4805      	ldr	r0, [pc, #20]	@ (8011368 <fiprintf+0x20>)
 8011352:	f853 2b04 	ldr.w	r2, [r3], #4
 8011356:	6800      	ldr	r0, [r0, #0]
 8011358:	9301      	str	r3, [sp, #4]
 801135a:	f7ff fca3 	bl	8010ca4 <_vfiprintf_r>
 801135e:	b002      	add	sp, #8
 8011360:	f85d eb04 	ldr.w	lr, [sp], #4
 8011364:	b003      	add	sp, #12
 8011366:	4770      	bx	lr
 8011368:	20000038 	.word	0x20000038

0801136c <__swbuf_r>:
 801136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801136e:	460e      	mov	r6, r1
 8011370:	4614      	mov	r4, r2
 8011372:	4605      	mov	r5, r0
 8011374:	b118      	cbz	r0, 801137e <__swbuf_r+0x12>
 8011376:	6a03      	ldr	r3, [r0, #32]
 8011378:	b90b      	cbnz	r3, 801137e <__swbuf_r+0x12>
 801137a:	f7ff fa0d 	bl	8010798 <__sinit>
 801137e:	69a3      	ldr	r3, [r4, #24]
 8011380:	60a3      	str	r3, [r4, #8]
 8011382:	89a3      	ldrh	r3, [r4, #12]
 8011384:	071a      	lsls	r2, r3, #28
 8011386:	d501      	bpl.n	801138c <__swbuf_r+0x20>
 8011388:	6923      	ldr	r3, [r4, #16]
 801138a:	b943      	cbnz	r3, 801139e <__swbuf_r+0x32>
 801138c:	4621      	mov	r1, r4
 801138e:	4628      	mov	r0, r5
 8011390:	f000 f82a 	bl	80113e8 <__swsetup_r>
 8011394:	b118      	cbz	r0, 801139e <__swbuf_r+0x32>
 8011396:	f04f 37ff 	mov.w	r7, #4294967295
 801139a:	4638      	mov	r0, r7
 801139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	6922      	ldr	r2, [r4, #16]
 80113a2:	1a98      	subs	r0, r3, r2
 80113a4:	6963      	ldr	r3, [r4, #20]
 80113a6:	b2f6      	uxtb	r6, r6
 80113a8:	4283      	cmp	r3, r0
 80113aa:	4637      	mov	r7, r6
 80113ac:	dc05      	bgt.n	80113ba <__swbuf_r+0x4e>
 80113ae:	4621      	mov	r1, r4
 80113b0:	4628      	mov	r0, r5
 80113b2:	f7ff ffa1 	bl	80112f8 <_fflush_r>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d1ed      	bne.n	8011396 <__swbuf_r+0x2a>
 80113ba:	68a3      	ldr	r3, [r4, #8]
 80113bc:	3b01      	subs	r3, #1
 80113be:	60a3      	str	r3, [r4, #8]
 80113c0:	6823      	ldr	r3, [r4, #0]
 80113c2:	1c5a      	adds	r2, r3, #1
 80113c4:	6022      	str	r2, [r4, #0]
 80113c6:	701e      	strb	r6, [r3, #0]
 80113c8:	6962      	ldr	r2, [r4, #20]
 80113ca:	1c43      	adds	r3, r0, #1
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d004      	beq.n	80113da <__swbuf_r+0x6e>
 80113d0:	89a3      	ldrh	r3, [r4, #12]
 80113d2:	07db      	lsls	r3, r3, #31
 80113d4:	d5e1      	bpl.n	801139a <__swbuf_r+0x2e>
 80113d6:	2e0a      	cmp	r6, #10
 80113d8:	d1df      	bne.n	801139a <__swbuf_r+0x2e>
 80113da:	4621      	mov	r1, r4
 80113dc:	4628      	mov	r0, r5
 80113de:	f7ff ff8b 	bl	80112f8 <_fflush_r>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d0d9      	beq.n	801139a <__swbuf_r+0x2e>
 80113e6:	e7d6      	b.n	8011396 <__swbuf_r+0x2a>

080113e8 <__swsetup_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4b29      	ldr	r3, [pc, #164]	@ (8011490 <__swsetup_r+0xa8>)
 80113ec:	4605      	mov	r5, r0
 80113ee:	6818      	ldr	r0, [r3, #0]
 80113f0:	460c      	mov	r4, r1
 80113f2:	b118      	cbz	r0, 80113fc <__swsetup_r+0x14>
 80113f4:	6a03      	ldr	r3, [r0, #32]
 80113f6:	b90b      	cbnz	r3, 80113fc <__swsetup_r+0x14>
 80113f8:	f7ff f9ce 	bl	8010798 <__sinit>
 80113fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011400:	0719      	lsls	r1, r3, #28
 8011402:	d422      	bmi.n	801144a <__swsetup_r+0x62>
 8011404:	06da      	lsls	r2, r3, #27
 8011406:	d407      	bmi.n	8011418 <__swsetup_r+0x30>
 8011408:	2209      	movs	r2, #9
 801140a:	602a      	str	r2, [r5, #0]
 801140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011410:	81a3      	strh	r3, [r4, #12]
 8011412:	f04f 30ff 	mov.w	r0, #4294967295
 8011416:	e033      	b.n	8011480 <__swsetup_r+0x98>
 8011418:	0758      	lsls	r0, r3, #29
 801141a:	d512      	bpl.n	8011442 <__swsetup_r+0x5a>
 801141c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801141e:	b141      	cbz	r1, 8011432 <__swsetup_r+0x4a>
 8011420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011424:	4299      	cmp	r1, r3
 8011426:	d002      	beq.n	801142e <__swsetup_r+0x46>
 8011428:	4628      	mov	r0, r5
 801142a:	f7ff fb11 	bl	8010a50 <_free_r>
 801142e:	2300      	movs	r3, #0
 8011430:	6363      	str	r3, [r4, #52]	@ 0x34
 8011432:	89a3      	ldrh	r3, [r4, #12]
 8011434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011438:	81a3      	strh	r3, [r4, #12]
 801143a:	2300      	movs	r3, #0
 801143c:	6063      	str	r3, [r4, #4]
 801143e:	6923      	ldr	r3, [r4, #16]
 8011440:	6023      	str	r3, [r4, #0]
 8011442:	89a3      	ldrh	r3, [r4, #12]
 8011444:	f043 0308 	orr.w	r3, r3, #8
 8011448:	81a3      	strh	r3, [r4, #12]
 801144a:	6923      	ldr	r3, [r4, #16]
 801144c:	b94b      	cbnz	r3, 8011462 <__swsetup_r+0x7a>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011458:	d003      	beq.n	8011462 <__swsetup_r+0x7a>
 801145a:	4621      	mov	r1, r4
 801145c:	4628      	mov	r0, r5
 801145e:	f000 f856 	bl	801150e <__smakebuf_r>
 8011462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011466:	f013 0201 	ands.w	r2, r3, #1
 801146a:	d00a      	beq.n	8011482 <__swsetup_r+0x9a>
 801146c:	2200      	movs	r2, #0
 801146e:	60a2      	str	r2, [r4, #8]
 8011470:	6962      	ldr	r2, [r4, #20]
 8011472:	4252      	negs	r2, r2
 8011474:	61a2      	str	r2, [r4, #24]
 8011476:	6922      	ldr	r2, [r4, #16]
 8011478:	b942      	cbnz	r2, 801148c <__swsetup_r+0xa4>
 801147a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801147e:	d1c5      	bne.n	801140c <__swsetup_r+0x24>
 8011480:	bd38      	pop	{r3, r4, r5, pc}
 8011482:	0799      	lsls	r1, r3, #30
 8011484:	bf58      	it	pl
 8011486:	6962      	ldrpl	r2, [r4, #20]
 8011488:	60a2      	str	r2, [r4, #8]
 801148a:	e7f4      	b.n	8011476 <__swsetup_r+0x8e>
 801148c:	2000      	movs	r0, #0
 801148e:	e7f7      	b.n	8011480 <__swsetup_r+0x98>
 8011490:	20000038 	.word	0x20000038

08011494 <_sbrk_r>:
 8011494:	b538      	push	{r3, r4, r5, lr}
 8011496:	4d06      	ldr	r5, [pc, #24]	@ (80114b0 <_sbrk_r+0x1c>)
 8011498:	2300      	movs	r3, #0
 801149a:	4604      	mov	r4, r0
 801149c:	4608      	mov	r0, r1
 801149e:	602b      	str	r3, [r5, #0]
 80114a0:	f7ef fafe 	bl	8000aa0 <_sbrk>
 80114a4:	1c43      	adds	r3, r0, #1
 80114a6:	d102      	bne.n	80114ae <_sbrk_r+0x1a>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	b103      	cbz	r3, 80114ae <_sbrk_r+0x1a>
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	2000834c 	.word	0x2000834c

080114b4 <abort>:
 80114b4:	b508      	push	{r3, lr}
 80114b6:	2006      	movs	r0, #6
 80114b8:	f000 f88e 	bl	80115d8 <raise>
 80114bc:	2001      	movs	r0, #1
 80114be:	f7ef fa77 	bl	80009b0 <_exit>

080114c2 <__swhatbuf_r>:
 80114c2:	b570      	push	{r4, r5, r6, lr}
 80114c4:	460c      	mov	r4, r1
 80114c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114ca:	2900      	cmp	r1, #0
 80114cc:	b096      	sub	sp, #88	@ 0x58
 80114ce:	4615      	mov	r5, r2
 80114d0:	461e      	mov	r6, r3
 80114d2:	da0d      	bge.n	80114f0 <__swhatbuf_r+0x2e>
 80114d4:	89a3      	ldrh	r3, [r4, #12]
 80114d6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80114da:	f04f 0100 	mov.w	r1, #0
 80114de:	bf14      	ite	ne
 80114e0:	2340      	movne	r3, #64	@ 0x40
 80114e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80114e6:	2000      	movs	r0, #0
 80114e8:	6031      	str	r1, [r6, #0]
 80114ea:	602b      	str	r3, [r5, #0]
 80114ec:	b016      	add	sp, #88	@ 0x58
 80114ee:	bd70      	pop	{r4, r5, r6, pc}
 80114f0:	466a      	mov	r2, sp
 80114f2:	f000 f879 	bl	80115e8 <_fstat_r>
 80114f6:	2800      	cmp	r0, #0
 80114f8:	dbec      	blt.n	80114d4 <__swhatbuf_r+0x12>
 80114fa:	9901      	ldr	r1, [sp, #4]
 80114fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011500:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011504:	4259      	negs	r1, r3
 8011506:	4159      	adcs	r1, r3
 8011508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801150c:	e7eb      	b.n	80114e6 <__swhatbuf_r+0x24>

0801150e <__smakebuf_r>:
 801150e:	898b      	ldrh	r3, [r1, #12]
 8011510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011512:	079d      	lsls	r5, r3, #30
 8011514:	4606      	mov	r6, r0
 8011516:	460c      	mov	r4, r1
 8011518:	d507      	bpl.n	801152a <__smakebuf_r+0x1c>
 801151a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801151e:	6023      	str	r3, [r4, #0]
 8011520:	6123      	str	r3, [r4, #16]
 8011522:	2301      	movs	r3, #1
 8011524:	6163      	str	r3, [r4, #20]
 8011526:	b003      	add	sp, #12
 8011528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801152a:	ab01      	add	r3, sp, #4
 801152c:	466a      	mov	r2, sp
 801152e:	f7ff ffc8 	bl	80114c2 <__swhatbuf_r>
 8011532:	9f00      	ldr	r7, [sp, #0]
 8011534:	4605      	mov	r5, r0
 8011536:	4639      	mov	r1, r7
 8011538:	4630      	mov	r0, r6
 801153a:	f7ff fafd 	bl	8010b38 <_malloc_r>
 801153e:	b948      	cbnz	r0, 8011554 <__smakebuf_r+0x46>
 8011540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011544:	059a      	lsls	r2, r3, #22
 8011546:	d4ee      	bmi.n	8011526 <__smakebuf_r+0x18>
 8011548:	f023 0303 	bic.w	r3, r3, #3
 801154c:	f043 0302 	orr.w	r3, r3, #2
 8011550:	81a3      	strh	r3, [r4, #12]
 8011552:	e7e2      	b.n	801151a <__smakebuf_r+0xc>
 8011554:	89a3      	ldrh	r3, [r4, #12]
 8011556:	6020      	str	r0, [r4, #0]
 8011558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801155c:	81a3      	strh	r3, [r4, #12]
 801155e:	9b01      	ldr	r3, [sp, #4]
 8011560:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011564:	b15b      	cbz	r3, 801157e <__smakebuf_r+0x70>
 8011566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801156a:	4630      	mov	r0, r6
 801156c:	f000 f84e 	bl	801160c <_isatty_r>
 8011570:	b128      	cbz	r0, 801157e <__smakebuf_r+0x70>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	f023 0303 	bic.w	r3, r3, #3
 8011578:	f043 0301 	orr.w	r3, r3, #1
 801157c:	81a3      	strh	r3, [r4, #12]
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	431d      	orrs	r5, r3
 8011582:	81a5      	strh	r5, [r4, #12]
 8011584:	e7cf      	b.n	8011526 <__smakebuf_r+0x18>

08011586 <_raise_r>:
 8011586:	291f      	cmp	r1, #31
 8011588:	b538      	push	{r3, r4, r5, lr}
 801158a:	4605      	mov	r5, r0
 801158c:	460c      	mov	r4, r1
 801158e:	d904      	bls.n	801159a <_raise_r+0x14>
 8011590:	2316      	movs	r3, #22
 8011592:	6003      	str	r3, [r0, #0]
 8011594:	f04f 30ff 	mov.w	r0, #4294967295
 8011598:	bd38      	pop	{r3, r4, r5, pc}
 801159a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801159c:	b112      	cbz	r2, 80115a4 <_raise_r+0x1e>
 801159e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115a2:	b94b      	cbnz	r3, 80115b8 <_raise_r+0x32>
 80115a4:	4628      	mov	r0, r5
 80115a6:	f000 f853 	bl	8011650 <_getpid_r>
 80115aa:	4622      	mov	r2, r4
 80115ac:	4601      	mov	r1, r0
 80115ae:	4628      	mov	r0, r5
 80115b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115b4:	f000 b83a 	b.w	801162c <_kill_r>
 80115b8:	2b01      	cmp	r3, #1
 80115ba:	d00a      	beq.n	80115d2 <_raise_r+0x4c>
 80115bc:	1c59      	adds	r1, r3, #1
 80115be:	d103      	bne.n	80115c8 <_raise_r+0x42>
 80115c0:	2316      	movs	r3, #22
 80115c2:	6003      	str	r3, [r0, #0]
 80115c4:	2001      	movs	r0, #1
 80115c6:	e7e7      	b.n	8011598 <_raise_r+0x12>
 80115c8:	2100      	movs	r1, #0
 80115ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80115ce:	4620      	mov	r0, r4
 80115d0:	4798      	blx	r3
 80115d2:	2000      	movs	r0, #0
 80115d4:	e7e0      	b.n	8011598 <_raise_r+0x12>
	...

080115d8 <raise>:
 80115d8:	4b02      	ldr	r3, [pc, #8]	@ (80115e4 <raise+0xc>)
 80115da:	4601      	mov	r1, r0
 80115dc:	6818      	ldr	r0, [r3, #0]
 80115de:	f7ff bfd2 	b.w	8011586 <_raise_r>
 80115e2:	bf00      	nop
 80115e4:	20000038 	.word	0x20000038

080115e8 <_fstat_r>:
 80115e8:	b538      	push	{r3, r4, r5, lr}
 80115ea:	4d07      	ldr	r5, [pc, #28]	@ (8011608 <_fstat_r+0x20>)
 80115ec:	2300      	movs	r3, #0
 80115ee:	4604      	mov	r4, r0
 80115f0:	4608      	mov	r0, r1
 80115f2:	4611      	mov	r1, r2
 80115f4:	602b      	str	r3, [r5, #0]
 80115f6:	f7ef fa2b 	bl	8000a50 <_fstat>
 80115fa:	1c43      	adds	r3, r0, #1
 80115fc:	d102      	bne.n	8011604 <_fstat_r+0x1c>
 80115fe:	682b      	ldr	r3, [r5, #0]
 8011600:	b103      	cbz	r3, 8011604 <_fstat_r+0x1c>
 8011602:	6023      	str	r3, [r4, #0]
 8011604:	bd38      	pop	{r3, r4, r5, pc}
 8011606:	bf00      	nop
 8011608:	2000834c 	.word	0x2000834c

0801160c <_isatty_r>:
 801160c:	b538      	push	{r3, r4, r5, lr}
 801160e:	4d06      	ldr	r5, [pc, #24]	@ (8011628 <_isatty_r+0x1c>)
 8011610:	2300      	movs	r3, #0
 8011612:	4604      	mov	r4, r0
 8011614:	4608      	mov	r0, r1
 8011616:	602b      	str	r3, [r5, #0]
 8011618:	f7ef fa2a 	bl	8000a70 <_isatty>
 801161c:	1c43      	adds	r3, r0, #1
 801161e:	d102      	bne.n	8011626 <_isatty_r+0x1a>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	b103      	cbz	r3, 8011626 <_isatty_r+0x1a>
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	bd38      	pop	{r3, r4, r5, pc}
 8011628:	2000834c 	.word	0x2000834c

0801162c <_kill_r>:
 801162c:	b538      	push	{r3, r4, r5, lr}
 801162e:	4d07      	ldr	r5, [pc, #28]	@ (801164c <_kill_r+0x20>)
 8011630:	2300      	movs	r3, #0
 8011632:	4604      	mov	r4, r0
 8011634:	4608      	mov	r0, r1
 8011636:	4611      	mov	r1, r2
 8011638:	602b      	str	r3, [r5, #0]
 801163a:	f7ef f9a7 	bl	800098c <_kill>
 801163e:	1c43      	adds	r3, r0, #1
 8011640:	d102      	bne.n	8011648 <_kill_r+0x1c>
 8011642:	682b      	ldr	r3, [r5, #0]
 8011644:	b103      	cbz	r3, 8011648 <_kill_r+0x1c>
 8011646:	6023      	str	r3, [r4, #0]
 8011648:	bd38      	pop	{r3, r4, r5, pc}
 801164a:	bf00      	nop
 801164c:	2000834c 	.word	0x2000834c

08011650 <_getpid_r>:
 8011650:	f7ef b994 	b.w	800097c <_getpid>

08011654 <_init>:
 8011654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011656:	bf00      	nop
 8011658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165a:	bc08      	pop	{r3}
 801165c:	469e      	mov	lr, r3
 801165e:	4770      	bx	lr

08011660 <_fini>:
 8011660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011662:	bf00      	nop
 8011664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011666:	bc08      	pop	{r3}
 8011668:	469e      	mov	lr, r3
 801166a:	4770      	bx	lr
