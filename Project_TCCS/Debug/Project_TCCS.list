
Project_TCCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005538  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005794  08005794  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005794  08005794  00006794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800579c  0800579c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080057a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000068  0800580c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800580c  0000745c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a414  00000000  00000000  00007096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039f1  00000000  00000000  000214aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00024ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef0  00000000  00000000  00026200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004daa  00000000  00000000  000270f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019292  00000000  00000000  0002be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cf20  00000000  00000000  0004512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015204c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005454  00000000  00000000  00152090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  001574e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	08005720 	.word	0x08005720

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	08005720 	.word	0x08005720

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b56      	ldr	r3, [pc, #344]	@ (8000750 <MX_GPIO_Init+0x170>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a55      	ldr	r2, [pc, #340]	@ (8000750 <MX_GPIO_Init+0x170>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b53      	ldr	r3, [pc, #332]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	4b50      	ldr	r3, [pc, #320]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a4f      	ldr	r2, [pc, #316]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b4d      	ldr	r3, [pc, #308]	@ (8000750 <MX_GPIO_Init+0x170>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	617b      	str	r3, [r7, #20]
 8000624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b4a      	ldr	r3, [pc, #296]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a49      	ldr	r2, [pc, #292]	@ (8000750 <MX_GPIO_Init+0x170>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b47      	ldr	r3, [pc, #284]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b44      	ldr	r3, [pc, #272]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a43      	ldr	r2, [pc, #268]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b41      	ldr	r3, [pc, #260]	@ (8000750 <MX_GPIO_Init+0x170>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0302 	and.w	r3, r3, #2
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000656:	4b3e      	ldr	r3, [pc, #248]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a3d      	ldr	r2, [pc, #244]	@ (8000750 <MX_GPIO_Init+0x170>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0308 	and.w	r3, r3, #8
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800066e:	4b38      	ldr	r3, [pc, #224]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a37      	ldr	r2, [pc, #220]	@ (8000750 <MX_GPIO_Init+0x170>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b35      	ldr	r3, [pc, #212]	@ (8000750 <MX_GPIO_Init+0x170>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f244 0181 	movw	r1, #16513	@ 0x4081
 800068c:	4831      	ldr	r0, [pc, #196]	@ (8000754 <MX_GPIO_Init+0x174>)
 800068e:	f001 f837 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	@ 0x40
 8000696:	4830      	ldr	r0, [pc, #192]	@ (8000758 <MX_GPIO_Init+0x178>)
 8000698:	f001 f832 	bl	8001700 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	482a      	ldr	r0, [pc, #168]	@ (800075c <MX_GPIO_Init+0x17c>)
 80006b4:	f000 fe78 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006b8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	4820      	ldr	r0, [pc, #128]	@ (8000754 <MX_GPIO_Init+0x174>)
 80006d2:	f000 fe69 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	481a      	ldr	r0, [pc, #104]	@ (8000758 <MX_GPIO_Init+0x178>)
 80006ee:	f000 fe5b 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006f2:	2380      	movs	r3, #128	@ 0x80
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4814      	ldr	r0, [pc, #80]	@ (8000758 <MX_GPIO_Init+0x178>)
 8000706:	f000 fe4f 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800070a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800071c:	230a      	movs	r3, #10
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	480e      	ldr	r0, [pc, #56]	@ (8000760 <MX_GPIO_Init+0x180>)
 8000728:	f000 fe3e 	bl	80013a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800072c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4807      	ldr	r0, [pc, #28]	@ (8000760 <MX_GPIO_Init+0x180>)
 8000742:	f000 fe31 	bl	80013a8 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	@ 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400
 8000758:	40021800 	.word	0x40021800
 800075c:	40020800 	.word	0x40020800
 8000760:	40020000 	.word	0x40020000

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	f000 ffc8 	bl	8001734 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fa5d 	bl	8000c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007b2:	f001 fb8d 	bl	8001ed0 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fa54 	bl	8000c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007c4:	f001 fbcf 	bl	8001f66 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fa4b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40005400 	.word	0x40005400
 80007e0:	20404768 	.word	0x20404768

080007e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ae      	sub	sp, #184	@ 0xb8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2290      	movs	r2, #144	@ 0x90
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f004 fb2b 	bl	8004e60 <memset>
  if(i2cHandle->Instance==I2C1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <HAL_I2C_MspInit+0xb4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d13c      	bne.n	800088e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000814:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000818:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800081a:	2300      	movs	r3, #0
 800081c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f93a 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f000 fa1b 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800084a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800084e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000852:	2312      	movs	r3, #18
 8000854:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	2303      	movs	r3, #3
 8000860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000864:	2304      	movs	r3, #4
 8000866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000872:	f000 fd99 	bl	80013a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 800087c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_I2C_MspInit+0xb8>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800088e:	bf00      	nop
 8000890:	37b8      	adds	r7, #184	@ 0xb8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40005400 	.word	0x40005400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char *text = "Tchorzewski";
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <main+0xb8>)
 80008ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fb40 	bl	8000f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f85d 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f7ff fe93 	bl	80005e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ba:	f000 fa81 	bl	8000dc0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80008be:	f7ff ff51 	bl	8000764 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80008c2:	f000 f946 	bl	8000b52 <lcd_init>
  lcd_backlight(1); // Turn on backlight
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 f9b6 	bl	8000c38 <lcd_backlight>
	  static int position = 0; // Starting position of the text
	      static int direction = 1; // Direction of scrolling: 1 = right, -1 = left
	      static int count = 0; // Counter for the second row

	      char int_to_str[10]; // Buffer to store the counter value as a string
	      sprintf(int_to_str, "%d", count); // Convert counter to string
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <main+0xbc>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	463b      	mov	r3, r7
 80008d2:	4924      	ldr	r1, [pc, #144]	@ (8000964 <main+0xc0>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f004 fa89 	bl	8004dec <siprintf>

	      lcd_clear(); // Clear the LCD
 80008da:	f000 f9a3 	bl	8000c24 <lcd_clear>

	      // Display scrolling text on the first row
	      lcd_set_cursor(0, position); // Set cursor position for row 0
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <main+0xc4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f977 	bl	8000bda <lcd_set_cursor>
	      lcd_write_string(text); // Write scrolling text
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f000 f95f 	bl	8000bb0 <lcd_write_string>

	      // Display the counter on the second row
	      lcd_set_cursor(1, 0); // Set cursor to the start of the second row
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 f970 	bl	8000bda <lcd_set_cursor>
	      lcd_write_string(int_to_str); // Write the counter
 80008fa:	463b      	mov	r3, r7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 f957 	bl	8000bb0 <lcd_write_string>

	      // Update position for scrolling text
	      position += direction;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <main+0xc4>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <main+0xc8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4413      	add	r3, r2
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <main+0xc4>)
 800090e:	6013      	str	r3, [r2, #0]

	      // Check boundaries and reverse direction if needed
	      if (position + strlen(text) > LCD_COLS) {
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff fc95 	bl	8000240 <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <main+0xc4>)
 800091a:	6812      	ldr	r2, [r2, #0]
 800091c:	4413      	add	r3, r2
 800091e:	2b10      	cmp	r3, #16
 8000920:	d904      	bls.n	800092c <main+0x88>
	          direction = -1; // Change direction to left
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <main+0xc8>)
 8000924:	f04f 32ff 	mov.w	r2, #4294967295
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	e006      	b.n	800093a <main+0x96>
	      }
	      else if (position < 0) {
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <main+0xc4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da02      	bge.n	800093a <main+0x96>
	          direction = 1; // Change direction to right
 8000934:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <main+0xc8>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
	      }

	      count++; // Increment the counter
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <main+0xbc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <main+0xbc>)
 8000942:	6013      	str	r3, [r2, #0]
	      HAL_Delay(300); // Delay to control scrolling speed
 8000944:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000948:	f000 fb50 	bl	8000fec <HAL_Delay>
	      memset(int_to_str, 0, sizeof(int_to_str)); // Clear the string buffer
 800094c:	463b      	mov	r3, r7
 800094e:	220a      	movs	r2, #10
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa84 	bl	8004e60 <memset>
  {
 8000958:	e7b8      	b.n	80008cc <main+0x28>
 800095a:	bf00      	nop
 800095c:	08005738 	.word	0x08005738
 8000960:	200000d8 	.word	0x200000d8
 8000964:	08005744 	.word	0x08005744
 8000968:	200000dc 	.word	0x200000dc
 800096c:	20000004 	.word	0x20000004

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	@ 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2234      	movs	r2, #52	@ 0x34
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fa6e 	bl	8004e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000994:	f001 fb34 	bl	8002000 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <SystemClock_Config+0xdc>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a4c <SystemClock_Config+0xdc>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <SystemClock_Config+0xe0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b8:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <SystemClock_Config+0xe0>)
 80009ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80009e4:	2360      	movs	r3, #96	@ 0x60
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ec:	2304      	movs	r3, #4
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4618      	mov	r0, r3
 80009fa:	f001 fb61 	bl	80020c0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a04:	f000 f930 	bl	8000c68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a08:	f001 fb0a 	bl	8002020 <HAL_PWREx_EnableOverDrive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a12:	f000 f929 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	230f      	movs	r3, #15
 8000a18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2103      	movs	r1, #3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fdf2 	bl	800261c <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a3e:	f000 f913 	bl	8000c68 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	@ 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <lcd_write_nibble>:

/* USER CODE BEGIN 4 */

void lcd_write_nibble(uint8_t nibble, uint8_t rs) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 8000a6c:	7bfa      	ldrb	r2, [r7, #15]
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 8000a76:	4b16      	ldr	r3, [pc, #88]	@ (8000ad0 <lcd_write_nibble+0x7c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	b25a      	sxtb	r2, r3
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b25b      	sxtb	r3, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	73fb      	strb	r3, [r7, #15]
  data |= 1 << EN_BIT;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000a94:	f107 020f 	add.w	r2, r7, #15
 8000a98:	2364      	movs	r3, #100	@ 0x64
 8000a9a:	9300      	str	r3, [sp, #0]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	214e      	movs	r1, #78	@ 0x4e
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <lcd_write_nibble+0x80>)
 8000aa2:	f000 fee3 	bl	800186c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f000 faa0 	bl	8000fec <HAL_Delay>
  data &= ~(1 << EN_BIT);
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	f023 0304 	bic.w	r3, r3, #4
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDR << 1, &data, 1, 100);
 8000ab6:	f107 020f 	add.w	r2, r7, #15
 8000aba:	2364      	movs	r3, #100	@ 0x64
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2301      	movs	r3, #1
 8000ac0:	214e      	movs	r1, #78	@ 0x4e
 8000ac2:	4804      	ldr	r0, [pc, #16]	@ (8000ad4 <lcd_write_nibble+0x80>)
 8000ac4:	f000 fed2 	bl	800186c <HAL_I2C_Master_Transmit>
}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000084 	.word	0x20000084

08000ad8 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	091b      	lsrs	r3, r3, #4
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 0);
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ffad 	bl	8000a54 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 0);
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ffa8 	bl	8000a54 <lcd_write_nibble>
  if (cmd == 0x01 || cmd == 0x02) {
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d002      	beq.n	8000b10 <lcd_send_cmd+0x38>
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d102      	bne.n	8000b16 <lcd_send_cmd+0x3e>
    HAL_Delay(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f000 fa6b 	bl	8000fec <HAL_Delay>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b084      	sub	sp, #16
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	73bb      	strb	r3, [r7, #14]
  lcd_write_nibble(upper_nibble, 1);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff8a 	bl	8000a54 <lcd_write_nibble>
  lcd_write_nibble(lower_nibble, 1);
 8000b40:	7bbb      	ldrb	r3, [r7, #14]
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ff85 	bl	8000a54 <lcd_write_nibble>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <lcd_init>:

void lcd_init() {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000b56:	2032      	movs	r0, #50	@ 0x32
 8000b58:	f000 fa48 	bl	8000fec <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f7ff ff78 	bl	8000a54 <lcd_write_nibble>
  HAL_Delay(5);
 8000b64:	2005      	movs	r0, #5
 8000b66:	f000 fa41 	bl	8000fec <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f7ff ff71 	bl	8000a54 <lcd_write_nibble>
  HAL_Delay(1);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f000 fa3a 	bl	8000fec <HAL_Delay>
  lcd_write_nibble(0x03, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f7ff ff6a 	bl	8000a54 <lcd_write_nibble>
  HAL_Delay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 fa33 	bl	8000fec <HAL_Delay>
  lcd_write_nibble(0x02, 0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff ff63 	bl	8000a54 <lcd_write_nibble>
  lcd_send_cmd(0x28);
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f7ff ffa2 	bl	8000ad8 <lcd_send_cmd>
  lcd_send_cmd(0x0C);
 8000b94:	200c      	movs	r0, #12
 8000b96:	f7ff ff9f 	bl	8000ad8 <lcd_send_cmd>
  lcd_send_cmd(0x06);
 8000b9a:	2006      	movs	r0, #6
 8000b9c:	f7ff ff9c 	bl	8000ad8 <lcd_send_cmd>
  lcd_send_cmd(0x01);
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f7ff ff99 	bl	8000ad8 <lcd_send_cmd>
  HAL_Delay(2);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f000 fa20 	bl	8000fec <HAL_Delay>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <lcd_write_string>:

void lcd_write_string(char *str) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000bb8:	e006      	b.n	8000bc8 <lcd_write_string+0x18>
    lcd_send_data(*str++);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1c5a      	adds	r2, r3, #1
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffab 	bl	8000b1e <lcd_send_data>
  while (*str) {
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f4      	bne.n	8000bba <lcd_write_string+0xa>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <lcd_set_cursor>:

void lcd_set_cursor(uint8_t row, uint8_t column) {
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	460a      	mov	r2, r1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	4613      	mov	r3, r2
 8000be8:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d002      	beq.n	8000bf6 <lcd_set_cursor+0x1c>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d003      	beq.n	8000bfc <lcd_set_cursor+0x22>
 8000bf4:	e005      	b.n	8000c02 <lcd_set_cursor+0x28>
        case 0:
            address = 0x00;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
            break;
 8000bfa:	e004      	b.n	8000c06 <lcd_set_cursor+0x2c>
        case 1:
            address = 0x40;
 8000bfc:	2340      	movs	r3, #64	@ 0x40
 8000bfe:	73fb      	strb	r3, [r7, #15]
            break;
 8000c00:	e001      	b.n	8000c06 <lcd_set_cursor+0x2c>
        default:
            address = 0x00;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(0x80 | address);
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff5e 	bl	8000ad8 <lcd_send_cmd>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <lcd_clear>:

void lcd_clear(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff ff55 	bl	8000ad8 <lcd_send_cmd>
    HAL_Delay(2);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f000 f9dc 	bl	8000fec <HAL_Delay>
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <lcd_backlight>:

void lcd_backlight(uint8_t state) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if (state) {
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <lcd_backlight+0x18>
    backlight_state = 1;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <lcd_backlight+0x2c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 8000c4e:	e002      	b.n	8000c56 <lcd_backlight+0x1e>
    backlight_state = 0;
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <lcd_backlight+0x2c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000000 	.word	0x20000000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f000 fa7c 	bl	80011ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cc8:	f001 fecc 	bl	8002a64 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x8>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d02:	f000 f953 	bl	8000fac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d06:	f003 fe45 	bl	8004994 <xTaskGetSchedulerState>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d001      	beq.n	8000d14 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d10:	f004 f802 	bl	8004d18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d1c:	4802      	ldr	r0, [pc, #8]	@ (8000d28 <ETH_IRQHandler+0x10>)
 8000d1e:	f000 fa6f 	bl	8001200 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000178 	.word	0x20000178

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20080000 	.word	0x20080000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200000e0 	.word	0x200000e0
 8000d94:	20000460 	.word	0x20000460
 8000d98:	2000044c 	.word	0x2000044c

08000d9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	@ (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dc4:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dc6:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <MX_USART3_UART_Init+0x5c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_USART3_UART_Init+0x58>)
 8000e04:	f002 fa72 	bl	80032ec <HAL_UART_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e0e:	f7ff ff2b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000e4 	.word	0x200000e4
 8000e1c:	40004800 	.word	0x40004800

08000e20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0ae      	sub	sp, #184	@ 0xb8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2290      	movs	r2, #144	@ 0x90
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f004 f80d 	bl	8004e60 <memset>
  if(uartHandle->Instance==USART3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ed4 <HAL_UART_MspInit+0xb4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13c      	bne.n	8000eca <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e54:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fe1c 	bl	8002a9c <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6a:	f7ff fefd 	bl	8000c68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_UART_MspInit+0xb8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	@ (8000edc <HAL_UART_MspInit+0xbc>)
 8000ec6:	f000 fa6f 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	37b8      	adds	r7, #184	@ 0xb8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020c00 	.word	0x40020c00

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ee4:	f7ff ff5a 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f003 ffaf 	bl	8004e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fcc7 	bl	80008a4 <main>
  bx  lr    
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f24:	080057a4 	.word	0x080057a4
  ldr r2, =_sbss
 8000f28:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f2c:	2000045c 	.word	0x2000045c

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC_IRQHandler>

08000f32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f000 f92e 	bl	8001198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3c:	200f      	movs	r0, #15
 8000f3e:	f000 f805 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f42:	f7ff fe97 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x54>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_InitTick+0x58>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f93b 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e00e      	b.n	8000f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b0f      	cmp	r3, #15
 8000f7e:	d80a      	bhi.n	8000f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f80:	2200      	movs	r2, #0
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	f000 f911 	bl	80011ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f8c:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_InitTick+0x5c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000010 	.word	0x20000010
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_IncTick+0x20>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4413      	add	r3, r2
 8000fbc:	4a04      	ldr	r2, [pc, #16]	@ (8000fd0 <HAL_IncTick+0x24>)
 8000fbe:	6013      	str	r3, [r2, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	2000016c 	.word	0x2000016c

08000fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	@ (8000fe8 <HAL_GetTick+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2000016c 	.word	0x2000016c

08000fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff4:	f7ff ffee 	bl	8000fd4 <HAL_GetTick>
 8000ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001004:	d005      	beq.n	8001012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_Delay+0x44>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4413      	add	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001012:	bf00      	nop
 8001014:	f7ff ffde 	bl	8000fd4 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	d8f7      	bhi.n	8001014 <HAL_Delay+0x28>
  {
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000010 	.word	0x20000010

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <__NVIC_SetPriorityGrouping+0x40>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	4313      	orrs	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001062:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <__NVIC_SetPriorityGrouping+0x40>)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	60d3      	str	r3, [r2, #12]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	05fa0000 	.word	0x05fa0000

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001164:	d301      	bcc.n	800116a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001166:	2301      	movs	r3, #1
 8001168:	e00f      	b.n	800118a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <SysTick_Config+0x40>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001172:	210f      	movs	r1, #15
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f7ff ff8e 	bl	8001098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <SysTick_Config+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <SysTick_Config+0x40>)
 8001184:	2207      	movs	r2, #7
 8001186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	e000e010 	.word	0xe000e010

08001198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff47 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c0:	f7ff ff5c 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68b9      	ldr	r1, [r7, #8]
 80011ca:	6978      	ldr	r0, [r7, #20]
 80011cc:	f7ff ff8e 	bl	80010ec <NVIC_EncodePriority>
 80011d0:	4602      	mov	r2, r0
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff5d 	bl	8001098 <__NVIC_SetPriority>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffb0 	bl	8001154 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001228:	4b4b      	ldr	r3, [pc, #300]	@ (8001358 <HAL_ETH_IRQHandler+0x158>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00e      	beq.n	8001256 <HAL_ETH_IRQHandler+0x56>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800124a:	461a      	mov	r2, r3
 800124c:	4b43      	ldr	r3, [pc, #268]	@ (800135c <HAL_ETH_IRQHandler+0x15c>)
 800124e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f002 fd19 	bl	8003c88 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00f      	beq.n	8001280 <HAL_ETH_IRQHandler+0x80>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00a      	beq.n	8001280 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001272:	461a      	mov	r2, r3
 8001274:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001278:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f002 fd14 	bl	8003ca8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d042      	beq.n	8001310 <HAL_ETH_IRQHandler+0x110>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d03d      	beq.n	8001310 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	f043 0208 	orr.w	r2, r3, #8
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d01a      	beq.n	80012e4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012b6:	695a      	ldr	r2, [r3, #20]
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_ETH_IRQHandler+0x160>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80012d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012d8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	22e0      	movs	r2, #224	@ 0xe0
 80012de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80012e2:	e012      	b.n	800130a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	f248 6380 	movw	r3, #34432	@ 0x8680
 80012f2:	4013      	ands	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001302:	461a      	mov	r2, r3
 8001304:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001308:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f002 fcdc 	bl	8003cc8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00e      	beq.n	8001338 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001320:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f81a 	bl	8001364 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <HAL_ETH_IRQHandler+0x158>)
 8001344:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001348:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f814 	bl	8001378 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013c00 	.word	0x40013c00
 800135c:	00010040 	.word	0x00010040
 8001360:	007e2000 	.word	0x007e2000

08001364 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	@ 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	e175      	b.n	80016b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	f040 8164 	bne.w	80016ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d005      	beq.n	80013fe <HAL_GPIO_Init+0x56>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d130      	bne.n	8001460 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 0201 	and.w	r2, r3, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b03      	cmp	r3, #3
 800146a:	d017      	beq.n	800149c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d123      	bne.n	80014f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	08da      	lsrs	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3208      	adds	r2, #8
 80014ea:	69b9      	ldr	r1, [r7, #24]
 80014ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0203 	and.w	r2, r3, #3
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80be 	beq.w	80016ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b66      	ldr	r3, [pc, #408]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	4a65      	ldr	r2, [pc, #404]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153c:	6453      	str	r3, [r2, #68]	@ 0x44
 800153e:	4b63      	ldr	r3, [pc, #396]	@ (80016cc <HAL_GPIO_Init+0x324>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800154a:	4a61      	ldr	r2, [pc, #388]	@ (80016d0 <HAL_GPIO_Init+0x328>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a58      	ldr	r2, [pc, #352]	@ (80016d4 <HAL_GPIO_Init+0x32c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d037      	beq.n	80015e6 <HAL_GPIO_Init+0x23e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a57      	ldr	r2, [pc, #348]	@ (80016d8 <HAL_GPIO_Init+0x330>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d031      	beq.n	80015e2 <HAL_GPIO_Init+0x23a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a56      	ldr	r2, [pc, #344]	@ (80016dc <HAL_GPIO_Init+0x334>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x236>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a55      	ldr	r2, [pc, #340]	@ (80016e0 <HAL_GPIO_Init+0x338>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x232>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a54      	ldr	r2, [pc, #336]	@ (80016e4 <HAL_GPIO_Init+0x33c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x22e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a53      	ldr	r2, [pc, #332]	@ (80016e8 <HAL_GPIO_Init+0x340>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x22a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a52      	ldr	r2, [pc, #328]	@ (80016ec <HAL_GPIO_Init+0x344>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x226>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a51      	ldr	r2, [pc, #324]	@ (80016f0 <HAL_GPIO_Init+0x348>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x222>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <HAL_GPIO_Init+0x34c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x21e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4f      	ldr	r2, [pc, #316]	@ (80016f8 <HAL_GPIO_Init+0x350>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x21a>
 80015be:	2309      	movs	r3, #9
 80015c0:	e012      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015c2:	230a      	movs	r3, #10
 80015c4:	e010      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015c6:	2308      	movs	r3, #8
 80015c8:	e00e      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e00c      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015ce:	2306      	movs	r3, #6
 80015d0:	e00a      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015d2:	2305      	movs	r3, #5
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015d6:	2304      	movs	r3, #4
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x240>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	@ (80016d0 <HAL_GPIO_Init+0x328>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <HAL_GPIO_Init+0x354>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a34      	ldr	r2, [pc, #208]	@ (80016fc <HAL_GPIO_Init+0x354>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <HAL_GPIO_Init+0x354>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <HAL_GPIO_Init+0x354>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_GPIO_Init+0x354>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <HAL_GPIO_Init+0x354>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_GPIO_Init+0x354>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <HAL_GPIO_Init+0x354>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f ae86 	bls.w	80013c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40021400 	.word	0x40021400
 80016ec:	40021800 	.word	0x40021800
 80016f0:	40021c00 	.word	0x40021c00
 80016f4:	40022000 	.word	0x40022000
 80016f8:	40022400 	.word	0x40022400
 80016fc:	40013c00 	.word	0x40013c00

08001700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	4613      	mov	r3, r2
 800170e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800171e:	887b      	ldrh	r3, [r7, #2]
 8001720:	041a      	lsls	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e08b      	b.n	800185e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d106      	bne.n	8001760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff f842 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2224      	movs	r2, #36	@ 0x24
 8001764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e006      	b.n	80017bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d108      	bne.n	80017d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	e007      	b.n	80017e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001868 <HAL_I2C_Init+0x134>)
 80017f2:	430b      	orrs	r3, r1
 80017f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69d9      	ldr	r1, [r3, #28]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	02008000 	.word	0x02008000

0800186c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	4613      	mov	r3, r2
 800187e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	f040 80fd 	bne.w	8001a88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_I2C_Master_Transmit+0x30>
 8001898:	2302      	movs	r3, #2
 800189a:	e0f6      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018a4:	f7ff fb96 	bl	8000fd4 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2319      	movs	r3, #25
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f914 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0e1      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2221      	movs	r2, #33	@ 0x21
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2210      	movs	r2, #16
 80018d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	893a      	ldrh	r2, [r7, #8]
 80018e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2bff      	cmp	r3, #255	@ 0xff
 80018f6:	d906      	bls.n	8001906 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	22ff      	movs	r2, #255	@ 0xff
 80018fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80018fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e007      	b.n	8001916 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001910:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001914:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800191a:	2b00      	cmp	r3, #0
 800191c:	d024      	beq.n	8001968 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	781a      	ldrb	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001952:	b2db      	uxtb	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	8979      	ldrh	r1, [r7, #10]
 800195a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a94 <HAL_I2C_Master_Transmit+0x228>)
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fa83 	bl	8001e6c <I2C_TransferConfig>
 8001966:	e066      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	4b48      	ldr	r3, [pc, #288]	@ (8001a94 <HAL_I2C_Master_Transmit+0x228>)
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fa78 	bl	8001e6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800197c:	e05b      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f907 	bl	8001b96 <I2C_WaitOnTXISFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07b      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	1c5a      	adds	r2, r3, #1
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3b01      	subs	r3, #1
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d034      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0x1ca>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d130      	bne.n	8001a36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	2200      	movs	r2, #0
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f880 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e04d      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2bff      	cmp	r3, #255	@ 0xff
 80019f6:	d90e      	bls.n	8001a16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	22ff      	movs	r2, #255	@ 0xff
 80019fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	8979      	ldrh	r1, [r7, #10]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f000 fa2c 	bl	8001e6c <I2C_TransferConfig>
 8001a14:	e00f      	b.n	8001a36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	8979      	ldrh	r1, [r7, #10]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 fa1b 	bl	8001e6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d19e      	bne.n	800197e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	6a39      	ldr	r1, [r7, #32]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f8ed 	bl	8001c24 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e01a      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_I2C_Master_Transmit+0x22c>)
 8001a68:	400b      	ands	r3, r1
 8001a6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e000      	b.n	8001a8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001a88:	2302      	movs	r3, #2
  }
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	80002000 	.word	0x80002000
 8001a98:	fe00e800 	.word	0xfe00e800

08001a9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d103      	bne.n	8001aba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d007      	beq.n	8001ad8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699a      	ldr	r2, [r3, #24]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	619a      	str	r2, [r3, #24]
  }
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e03b      	b.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	6839      	ldr	r1, [r7, #0]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f8d6 	bl	8001cac <I2C_IsErrorOccurred>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e041      	b.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d02d      	beq.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fa5f 	bl	8000fd4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d122      	bne.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	4013      	ands	r3, r2
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	bf0c      	ite	eq
 8001b38:	2301      	moveq	r3, #1
 8001b3a:	2300      	movne	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d113      	bne.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f043 0220 	orr.w	r2, r3, #32
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2220      	movs	r2, #32
 8001b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e00f      	b.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	bf0c      	ite	eq
 8001b7e:	2301      	moveq	r3, #1
 8001b80:	2300      	movne	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d0b4      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ba2:	e033      	b.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f87f 	bl	8001cac <I2C_IsErrorOccurred>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e031      	b.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d025      	beq.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bc0:	f7ff fa08 	bl	8000fd4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d302      	bcc.n	8001bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d11a      	bne.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d013      	beq.n	8001c0c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f043 0220 	orr.w	r2, r3, #32
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e007      	b.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d1c4      	bne.n	8001ba4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c30:	e02f      	b.n	8001c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f838 	bl	8001cac <I2C_IsErrorOccurred>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e02d      	b.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c46:	f7ff f9c5 	bl	8000fd4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11a      	bne.n	8001c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d013      	beq.n	8001c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e007      	b.n	8001ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d1c8      	bne.n	8001c32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d068      	beq.n	8001daa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ce0:	e049      	b.n	8001d76 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d045      	beq.n	8001d76 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7ff f973 	bl	8000fd4 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_IsErrorOccurred+0x54>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d13a      	bne.n	8001d76 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d12:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d22:	d121      	bne.n	8001d68 <I2C_IsErrorOccurred+0xbc>
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d2a:	d01d      	beq.n	8001d68 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	d01a      	beq.n	8001d68 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d40:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d42:	f7ff f947 	bl	8000fd4 <HAL_GetTick>
 8001d46:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d48:	e00e      	b.n	8001d68 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d4a:	f7ff f943 	bl	8000fd4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b19      	cmp	r3, #25
 8001d56:	d907      	bls.n	8001d68 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001d66:	e006      	b.n	8001d76 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d1e9      	bne.n	8001d4a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d003      	beq.n	8001d8c <I2C_IsErrorOccurred+0xe0>
 8001d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0aa      	beq.n	8001ce2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01c      	beq.n	8001e5a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fe3b 	bl	8001a9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b0d      	ldr	r3, [pc, #52]	@ (8001e68 <I2C_IsErrorOccurred+0x1bc>)
 8001e32:	400b      	ands	r3, r1
 8001e34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	fe00e800 	.word	0xfe00e800

08001e6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	817b      	strh	r3, [r7, #10]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e84:	7a7b      	ldrb	r3, [r7, #9]
 8001e86:	041b      	lsls	r3, r3, #16
 8001e88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	0d5b      	lsrs	r3, r3, #21
 8001ea6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001eaa:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <I2C_TransferConfig+0x60>)
 8001eac:	430b      	orrs	r3, r1
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	ea02 0103 	and.w	r1, r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ebe:	bf00      	nop
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	03ff63ff 	.word	0x03ff63ff

08001ed0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d138      	bne.n	8001f58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e032      	b.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	@ 0x24
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6819      	ldr	r1, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e000      	b.n	8001f5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f58:	2302      	movs	r3, #2
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d139      	bne.n	8001ff0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e033      	b.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2224      	movs	r2, #36	@ 0x24
 8001f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0201 	bic.w	r2, r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001fb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	4a22      	ldr	r2, [pc, #136]	@ (80020b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	@ 0x40
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1d      	ldr	r2, [pc, #116]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800204e:	f7fe ffc1 	bl	8000fd4 <HAL_GetTick>
 8002052:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002054:	e009      	b.n	800206a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002056:	f7fe ffbd 	bl	8000fd4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002064:	d901      	bls.n	800206a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e022      	b.n	80020b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002076:	d1ee      	bne.n	8002056 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800207e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002082:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002084:	f7fe ffa6 	bl	8000fd4 <HAL_GetTick>
 8002088:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800208a:	e009      	b.n	80020a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800208c:	f7fe ffa2 	bl	8000fd4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800209a:	d901      	bls.n	80020a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e007      	b.n	80020b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020ac:	d1ee      	bne.n	800208c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e29b      	b.n	800260e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8087 	beq.w	80021f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e4:	4b96      	ldr	r3, [pc, #600]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d00c      	beq.n	800210a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f0:	4b93      	ldr	r3, [pc, #588]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d112      	bne.n	8002122 <HAL_RCC_OscConfig+0x62>
 80020fc:	4b90      	ldr	r3, [pc, #576]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002104:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	4b8d      	ldr	r3, [pc, #564]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d06c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x130>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d168      	bne.n	80021f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e275      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x7a>
 800212c:	4b84      	ldr	r3, [pc, #528]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a83      	ldr	r2, [pc, #524]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e02e      	b.n	8002198 <HAL_RCC_OscConfig+0xd8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x9c>
 8002142:	4b7f      	ldr	r3, [pc, #508]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7e      	ldr	r2, [pc, #504]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b7c      	ldr	r3, [pc, #496]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7b      	ldr	r2, [pc, #492]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xd8>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0xc0>
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b73      	ldr	r3, [pc, #460]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a72      	ldr	r2, [pc, #456]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xd8>
 8002180:	4b6f      	ldr	r3, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6e      	ldr	r2, [pc, #440]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b6c      	ldr	r3, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6b      	ldr	r2, [pc, #428]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff18 	bl	8000fd4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff14 	bl	8000fd4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	@ 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e229      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b61      	ldr	r3, [pc, #388]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe8>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff04 	bl	8000fd4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff00 	bl	8000fd4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e215      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b57      	ldr	r3, [pc, #348]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x110>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d069      	beq.n	80022d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fe:	4b50      	ldr	r3, [pc, #320]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b4d      	ldr	r3, [pc, #308]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x190>
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x17a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1e9      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	493d      	ldr	r1, [pc, #244]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e040      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b39      	ldr	r3, [pc, #228]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe feb6 	bl	8000fd4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe feb2 	bl	8000fd4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1c7      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b30      	ldr	r3, [pc, #192]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4929      	ldr	r1, [pc, #164]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
 800229e:	e018      	b.n	80022d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a0:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a26      	ldr	r2, [pc, #152]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe92 	bl	8000fd4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fe8e 	bl	8000fd4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e1a3      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d038      	beq.n	8002350 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80022e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022ea:	4a15      	ldr	r2, [pc, #84]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe6f 	bl	8000fd4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fa:	f7fe fe6b 	bl	8000fd4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e180      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800230e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x23a>
 8002318:	e01a      	b.n	8002350 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 800231c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231e:	4a08      	ldr	r2, [pc, #32]	@ (8002340 <HAL_RCC_OscConfig+0x280>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7fe fe55 	bl	8000fd4 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fe51 	bl	8000fd4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d903      	bls.n	8002344 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e166      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
 8002340:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002344:	4b92      	ldr	r3, [pc, #584]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1ee      	bne.n	800232e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80a4 	beq.w	80024a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b8c      	ldr	r3, [pc, #560]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b89      	ldr	r3, [pc, #548]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	4a88      	ldr	r2, [pc, #544]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	@ 0x40
 8002376:	4b86      	ldr	r3, [pc, #536]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002386:	4b83      	ldr	r3, [pc, #524]	@ (8002594 <HAL_RCC_OscConfig+0x4d4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d118      	bne.n	80023c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002392:	4b80      	ldr	r3, [pc, #512]	@ (8002594 <HAL_RCC_OscConfig+0x4d4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7f      	ldr	r2, [pc, #508]	@ (8002594 <HAL_RCC_OscConfig+0x4d4>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239e:	f7fe fe19 	bl	8000fd4 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a6:	f7fe fe15 	bl	8000fd4 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b64      	cmp	r3, #100	@ 0x64
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e12a      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	4b76      	ldr	r3, [pc, #472]	@ (8002594 <HAL_RCC_OscConfig+0x4d4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x31a>
 80023cc:	4b70      	ldr	r3, [pc, #448]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d0:	4a6f      	ldr	r2, [pc, #444]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d8:	e02d      	b.n	8002436 <HAL_RCC_OscConfig+0x376>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x33c>
 80023e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e6:	4a6a      	ldr	r2, [pc, #424]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	f023 0301 	bic.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ee:	4b68      	ldr	r3, [pc, #416]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f2:	4a67      	ldr	r2, [pc, #412]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fa:	e01c      	b.n	8002436 <HAL_RCC_OscConfig+0x376>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d10c      	bne.n	800241e <HAL_RCC_OscConfig+0x35e>
 8002404:	4b62      	ldr	r3, [pc, #392]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002408:	4a61      	ldr	r2, [pc, #388]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002410:	4b5f      	ldr	r3, [pc, #380]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	4a5e      	ldr	r2, [pc, #376]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	@ 0x70
 800241c:	e00b      	b.n	8002436 <HAL_RCC_OscConfig+0x376>
 800241e:	4b5c      	ldr	r3, [pc, #368]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002422:	4a5b      	ldr	r2, [pc, #364]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	@ 0x70
 800242a:	4b59      	ldr	r3, [pc, #356]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242e:	4a58      	ldr	r2, [pc, #352]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d015      	beq.n	800246a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fdc9 	bl	8000fd4 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7fe fdc5 	bl	8000fd4 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0d8      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	4b4c      	ldr	r3, [pc, #304]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ee      	beq.n	8002446 <HAL_RCC_OscConfig+0x386>
 8002468:	e014      	b.n	8002494 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7fe fdb3 	bl	8000fd4 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fdaf 	bl	8000fd4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0c2      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	4b41      	ldr	r3, [pc, #260]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1ee      	bne.n	8002472 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	4a3c      	ldr	r2, [pc, #240]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80ae 	beq.w	800260c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b0:	4b37      	ldr	r3, [pc, #220]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d06d      	beq.n	8002598 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d14b      	bne.n	800255c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c4:	4b32      	ldr	r3, [pc, #200]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a31      	ldr	r2, [pc, #196]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7fe fd80 	bl	8000fd4 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fd7c 	bl	8000fd4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e091      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	019b      	lsls	r3, r3, #6
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	3b01      	subs	r3, #1
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002520:	071b      	lsls	r3, r3, #28
 8002522:	491b      	ldr	r1, [pc, #108]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002528:	4b19      	ldr	r3, [pc, #100]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800252e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fd4e 	bl	8000fd4 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7fe fd4a 	bl	8000fd4 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e05f      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x47c>
 800255a:	e057      	b.n	800260c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255c:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0b      	ldr	r2, [pc, #44]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002566:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fd34 	bl	8000fd4 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe fd30 	bl	8000fd4 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e045      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x4b0>
 800258e:	e03d      	b.n	800260c <HAL_RCC_OscConfig+0x54c>
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002598:	4b1f      	ldr	r3, [pc, #124]	@ (8002618 <HAL_RCC_OscConfig+0x558>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d030      	beq.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d129      	bne.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d122      	bne.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025c8:	4013      	ands	r3, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d119      	bne.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	3b01      	subs	r3, #1
 80025e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d10f      	bne.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0d0      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b6a      	ldr	r3, [pc, #424]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b67      	ldr	r3, [pc, #412]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 020f 	bic.w	r2, r3, #15
 800264a:	4965      	ldr	r1, [pc, #404]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d040      	beq.n	8002740 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d115      	bne.n	80026fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026de:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e073      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e06b      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fe:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f023 0203 	bic.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	4936      	ldr	r1, [pc, #216]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fc60 	bl	8000fd4 <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	e00a      	b.n	800272e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002718:	f7fe fc5c 	bl	8000fd4 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e053      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	4b2d      	ldr	r3, [pc, #180]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 020c 	and.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	429a      	cmp	r2, r3
 800273e:	d1eb      	bne.n	8002718 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002740:	4b27      	ldr	r3, [pc, #156]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d210      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274e:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 020f 	bic.w	r2, r3, #15
 8002756:	4922      	ldr	r1, [pc, #136]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 f821 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	@ (80027e8 <HAL_RCC_ClockConfig+0x1cc>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_RCC_ClockConfig+0x1d0>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_ClockConfig+0x1d4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fbbc 	bl	8000f4c <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08005748 	.word	0x08005748
 80027ec:	20000008 	.word	0x20000008
 80027f0:	2000000c 	.word	0x2000000c

080027f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b094      	sub	sp, #80	@ 0x50
 80027fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002800:	2300      	movs	r3, #0
 8002802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002804:	2300      	movs	r3, #0
 8002806:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280c:	4b79      	ldr	r3, [pc, #484]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d00d      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x40>
 8002818:	2b08      	cmp	r3, #8
 800281a:	f200 80e1 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x34>
 8002822:	2b04      	cmp	r3, #4
 8002824:	d003      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x3a>
 8002826:	e0db      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002828:	4b73      	ldr	r3, [pc, #460]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800282a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800282c:	e0db      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282e:	4b72      	ldr	r3, [pc, #456]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002830:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002832:	e0d8      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002834:	4b6f      	ldr	r3, [pc, #444]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800283e:	4b6d      	ldr	r3, [pc, #436]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d063      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285c:	633b      	str	r3, [r7, #48]	@ 0x30
 800285e:	2300      	movs	r3, #0
 8002860:	637b      	str	r3, [r7, #52]	@ 0x34
 8002862:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002866:	4622      	mov	r2, r4
 8002868:	462b      	mov	r3, r5
 800286a:	f04f 0000 	mov.w	r0, #0
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	0159      	lsls	r1, r3, #5
 8002874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002878:	0150      	lsls	r0, r2, #5
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4621      	mov	r1, r4
 8002880:	1a51      	subs	r1, r2, r1
 8002882:	6139      	str	r1, [r7, #16]
 8002884:	4629      	mov	r1, r5
 8002886:	eb63 0301 	sbc.w	r3, r3, r1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002898:	4659      	mov	r1, fp
 800289a:	018b      	lsls	r3, r1, #6
 800289c:	4651      	mov	r1, sl
 800289e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028a2:	4651      	mov	r1, sl
 80028a4:	018a      	lsls	r2, r1, #6
 80028a6:	4651      	mov	r1, sl
 80028a8:	ebb2 0801 	subs.w	r8, r2, r1
 80028ac:	4659      	mov	r1, fp
 80028ae:	eb63 0901 	sbc.w	r9, r3, r1
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c6:	4690      	mov	r8, r2
 80028c8:	4699      	mov	r9, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	eb18 0303 	adds.w	r3, r8, r3
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	462b      	mov	r3, r5
 80028d4:	eb49 0303 	adc.w	r3, r9, r3
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028e6:	4629      	mov	r1, r5
 80028e8:	028b      	lsls	r3, r1, #10
 80028ea:	4621      	mov	r1, r4
 80028ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028f0:	4621      	mov	r1, r4
 80028f2:	028a      	lsls	r2, r1, #10
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028fa:	2200      	movs	r2, #0
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002904:	f7fd fcf4 	bl	80002f0 <__aeabi_uldivmod>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4613      	mov	r3, r2
 800290e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002910:	e058      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002912:	4b38      	ldr	r3, [pc, #224]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	2200      	movs	r2, #0
 800291a:	4618      	mov	r0, r3
 800291c:	4611      	mov	r1, r2
 800291e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
 8002928:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800292c:	4642      	mov	r2, r8
 800292e:	464b      	mov	r3, r9
 8002930:	f04f 0000 	mov.w	r0, #0
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	0159      	lsls	r1, r3, #5
 800293a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293e:	0150      	lsls	r0, r2, #5
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4641      	mov	r1, r8
 8002946:	ebb2 0a01 	subs.w	sl, r2, r1
 800294a:	4649      	mov	r1, r9
 800294c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800295c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002960:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002964:	ebb2 040a 	subs.w	r4, r2, sl
 8002968:	eb63 050b 	sbc.w	r5, r3, fp
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	00eb      	lsls	r3, r5, #3
 8002976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800297a:	00e2      	lsls	r2, r4, #3
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	4643      	mov	r3, r8
 8002982:	18e3      	adds	r3, r4, r3
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	464b      	mov	r3, r9
 8002988:	eb45 0303 	adc.w	r3, r5, r3
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800299a:	4629      	mov	r1, r5
 800299c:	028b      	lsls	r3, r1, #10
 800299e:	4621      	mov	r1, r4
 80029a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a4:	4621      	mov	r1, r4
 80029a6:	028a      	lsls	r2, r1, #10
 80029a8:	4610      	mov	r0, r2
 80029aa:	4619      	mov	r1, r3
 80029ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029ae:	2200      	movs	r2, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	61fa      	str	r2, [r7, #28]
 80029b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b8:	f7fd fc9a 	bl	80002f0 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	3301      	adds	r3, #1
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80029d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029de:	e002      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3750      	adds	r7, #80	@ 0x50
 80029ec:	46bd      	mov	sp, r7
 80029ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	00f42400 	.word	0x00f42400

080029fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a00:	4b03      	ldr	r3, [pc, #12]	@ (8002a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008

08002a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a18:	f7ff fff0 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	0a9b      	lsrs	r3, r3, #10
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	4903      	ldr	r1, [pc, #12]	@ (8002a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2a:	5ccb      	ldrb	r3, [r1, r3]
 8002a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	08005758 	.word	0x08005758

08002a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a40:	f7ff ffdc 	bl	80029fc <HAL_RCC_GetHCLKFreq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	0b5b      	lsrs	r3, r3, #13
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	4903      	ldr	r1, [pc, #12]	@ (8002a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a52:	5ccb      	ldrb	r3, [r1, r3]
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	08005758 	.word	0x08005758

08002a64 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b80      	cmp	r3, #128	@ 0x80
 8002a72:	d104      	bne.n	8002a7e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002a74:	f000 f80a 	bl	8002a8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002a7a:	2280      	movs	r2, #128	@ 0x80
 8002a7c:	701a      	strb	r2, [r3, #0]
  }
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	4002380e 	.word	0x4002380e

08002a8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d012      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac4:	4b69      	ldr	r3, [pc, #420]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a68      	ldr	r2, [pc, #416]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	4b66      	ldr	r3, [pc, #408]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	4964      	ldr	r1, [pc, #400]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002afc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	4959      	ldr	r1, [pc, #356]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b14:	d101      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d017      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b32:	4b4e      	ldr	r3, [pc, #312]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	494a      	ldr	r1, [pc, #296]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 808b 	beq.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b80:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	4a39      	ldr	r2, [pc, #228]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8c:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b98:	4b35      	ldr	r3, [pc, #212]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a34      	ldr	r2, [pc, #208]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba4:	f7fe fa16 	bl	8000fd4 <HAL_GetTick>
 8002ba8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe fa12 	bl	8000fd4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e38f      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bca:	4b28      	ldr	r3, [pc, #160]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d035      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d02e      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be8:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bf0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bfc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c02:	4a1a      	ldr	r2, [pc, #104]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c10:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d114      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f9da 	bl	8000fd4 <HAL_GetTick>
 8002c20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe f9d6 	bl	8000fd4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e351      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c52:	d111      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c62:	400b      	ands	r3, r1
 8002c64:	4901      	ldr	r1, [pc, #4]	@ (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40007000 	.word	0x40007000
 8002c74:	0ffffcff 	.word	0x0ffffcff
 8002c78:	4bac      	ldr	r3, [pc, #688]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	4aab      	ldr	r2, [pc, #684]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002c82:	6093      	str	r3, [r2, #8]
 8002c84:	4ba9      	ldr	r3, [pc, #676]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	49a6      	ldr	r1, [pc, #664]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0310 	and.w	r3, r3, #16
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ca2:	4ba2      	ldr	r3, [pc, #648]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ca8:	4aa0      	ldr	r2, [pc, #640]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cb2:	4b9e      	ldr	r3, [pc, #632]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbc:	499b      	ldr	r1, [pc, #620]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd0:	4b96      	ldr	r3, [pc, #600]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cde:	4993      	ldr	r1, [pc, #588]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf2:	4b8e      	ldr	r3, [pc, #568]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d00:	498a      	ldr	r1, [pc, #552]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d14:	4b85      	ldr	r3, [pc, #532]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d22:	4982      	ldr	r1, [pc, #520]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d36:	4b7d      	ldr	r3, [pc, #500]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4979      	ldr	r1, [pc, #484]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d58:	4b74      	ldr	r3, [pc, #464]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4971      	ldr	r1, [pc, #452]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d80:	f023 020c 	bic.w	r2, r3, #12
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d88:	4968      	ldr	r1, [pc, #416]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9c:	4b63      	ldr	r3, [pc, #396]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	4960      	ldr	r1, [pc, #384]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dcc:	4957      	ldr	r1, [pc, #348]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de0:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	494f      	ldr	r1, [pc, #316]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e02:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	4946      	ldr	r1, [pc, #280]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e24:	4b41      	ldr	r3, [pc, #260]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	493e      	ldr	r1, [pc, #248]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e54:	4935      	ldr	r1, [pc, #212]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e68:	4b30      	ldr	r3, [pc, #192]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e76:	492d      	ldr	r1, [pc, #180]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d011      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e8a:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e98:	4924      	ldr	r1, [pc, #144]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ea4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ea8:	d101      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	4b18      	ldr	r3, [pc, #96]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed8:	4914      	ldr	r1, [pc, #80]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002efc:	490b      	ldr	r1, [pc, #44]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00f      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f16:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f20:	4902      	ldr	r1, [pc, #8]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f28:	e002      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f42:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4c:	4986      	ldr	r1, [pc, #536]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f60:	4b81      	ldr	r3, [pc, #516]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f66:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f70:	497d      	ldr	r1, [pc, #500]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d006      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80d6 	beq.w	8003138 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f8c:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a75      	ldr	r2, [pc, #468]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe f81c 	bl	8000fd4 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa0:	f7fe f818 	bl	8000fd4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e195      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d021      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11d      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd2:	4b65      	ldr	r3, [pc, #404]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fe0:	4b61      	ldr	r3, [pc, #388]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe6:	0e1b      	lsrs	r3, r3, #24
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	019a      	lsls	r2, r3, #6
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	041b      	lsls	r3, r3, #16
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	4958      	ldr	r1, [pc, #352]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d004      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02e      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003038:	d129      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800303a:	4b4b      	ldr	r3, [pc, #300]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003048:	4b47      	ldr	r3, [pc, #284]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800304e:	0f1b      	lsrs	r3, r3, #28
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	493e      	ldr	r1, [pc, #248]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003076:	4b3c      	ldr	r3, [pc, #240]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800307c:	f023 021f 	bic.w	r2, r3, #31
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	3b01      	subs	r3, #1
 8003086:	4938      	ldr	r1, [pc, #224]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d01d      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800309a:	4b33      	ldr	r3, [pc, #204]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800309c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030a0:	0e1b      	lsrs	r3, r3, #24
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ae:	0f1b      	lsrs	r3, r3, #28
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	019a      	lsls	r2, r3, #6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	041b      	lsls	r3, r3, #16
 80030c2:	431a      	orrs	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	4926      	ldr	r1, [pc, #152]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d011      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	019a      	lsls	r2, r3, #6
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	491a      	ldr	r1, [pc, #104]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003106:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a17      	ldr	r2, [pc, #92]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003112:	f7fd ff5f 	bl	8000fd4 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800311a:	f7fd ff5b 	bl	8000fd4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b64      	cmp	r3, #100	@ 0x64
 8003126:	d901      	bls.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e0d8      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800312c:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b01      	cmp	r3, #1
 800313c:	f040 80ce 	bne.w	80032dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800314a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314c:	f7fd ff42 	bl	8000fd4 <HAL_GetTick>
 8003150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003152:	e00b      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003154:	f7fd ff3e 	bl	8000fd4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d904      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0bb      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800316c:	4b5e      	ldr	r3, [pc, #376]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003178:	d0ec      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d009      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02e      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d12a      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80031a2:	4b51      	ldr	r3, [pc, #324]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	f003 0303 	and.w	r3, r3, #3
 80031ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	0f1b      	lsrs	r3, r3, #28
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	019a      	lsls	r2, r3, #6
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	041b      	lsls	r3, r3, #16
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	061b      	lsls	r3, r3, #24
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	071b      	lsls	r3, r3, #28
 80031d6:	4944      	ldr	r1, [pc, #272]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031de:	4b42      	ldr	r3, [pc, #264]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	493d      	ldr	r1, [pc, #244]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d022      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800320c:	d11d      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320e:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003214:	0e1b      	lsrs	r3, r3, #24
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800321c:	4b32      	ldr	r3, [pc, #200]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	0f1b      	lsrs	r3, r3, #28
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	019a      	lsls	r2, r3, #6
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	041b      	lsls	r3, r3, #16
 8003236:	431a      	orrs	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	431a      	orrs	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	071b      	lsls	r3, r3, #28
 8003242:	4929      	ldr	r1, [pc, #164]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d028      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325c:	0e1b      	lsrs	r3, r3, #24
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003264:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326a:	0c1b      	lsrs	r3, r3, #16
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	019a      	lsls	r2, r3, #6
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	431a      	orrs	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	061b      	lsls	r3, r3, #24
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	4917      	ldr	r1, [pc, #92]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003292:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003298:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	4911      	ldr	r1, [pc, #68]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a0e      	ldr	r2, [pc, #56]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fd fe8e 	bl	8000fd4 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032bc:	f7fd fe8a 	bl	8000fd4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	@ 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e007      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032da:	d1ef      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800

080032ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e040      	b.n	8003380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fd86 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0201 	bic.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa8c 	bl	8003850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f825 	bl	8003388 <UART_SetConfig>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e01b      	b.n	8003380 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb0b 	bl	8003994 <UART_CheckIdleState>
 800337e:	4603      	mov	r3, r0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003390:	2300      	movs	r3, #0
 8003392:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4ba6      	ldr	r3, [pc, #664]	@ (800364c <UART_SetConfig+0x2c4>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	430b      	orrs	r3, r1
 80033be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a94      	ldr	r2, [pc, #592]	@ (8003650 <UART_SetConfig+0x2c8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d120      	bne.n	8003446 <UART_SetConfig+0xbe>
 8003404:	4b93      	ldr	r3, [pc, #588]	@ (8003654 <UART_SetConfig+0x2cc>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d816      	bhi.n	8003440 <UART_SetConfig+0xb8>
 8003412:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <UART_SetConfig+0x90>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003429 	.word	0x08003429
 800341c:	08003435 	.word	0x08003435
 8003420:	0800342f 	.word	0x0800342f
 8003424:	0800343b 	.word	0x0800343b
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	e150      	b.n	80036d0 <UART_SetConfig+0x348>
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
 8003432:	e14d      	b.n	80036d0 <UART_SetConfig+0x348>
 8003434:	2304      	movs	r3, #4
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e14a      	b.n	80036d0 <UART_SetConfig+0x348>
 800343a:	2308      	movs	r3, #8
 800343c:	77fb      	strb	r3, [r7, #31]
 800343e:	e147      	b.n	80036d0 <UART_SetConfig+0x348>
 8003440:	2310      	movs	r3, #16
 8003442:	77fb      	strb	r3, [r7, #31]
 8003444:	e144      	b.n	80036d0 <UART_SetConfig+0x348>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a83      	ldr	r2, [pc, #524]	@ (8003658 <UART_SetConfig+0x2d0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d132      	bne.n	80034b6 <UART_SetConfig+0x12e>
 8003450:	4b80      	ldr	r3, [pc, #512]	@ (8003654 <UART_SetConfig+0x2cc>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b0c      	cmp	r3, #12
 800345c:	d828      	bhi.n	80034b0 <UART_SetConfig+0x128>
 800345e:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <UART_SetConfig+0xdc>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003499 	.word	0x08003499
 8003468:	080034b1 	.word	0x080034b1
 800346c:	080034b1 	.word	0x080034b1
 8003470:	080034b1 	.word	0x080034b1
 8003474:	080034a5 	.word	0x080034a5
 8003478:	080034b1 	.word	0x080034b1
 800347c:	080034b1 	.word	0x080034b1
 8003480:	080034b1 	.word	0x080034b1
 8003484:	0800349f 	.word	0x0800349f
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b1 	.word	0x080034b1
 8003490:	080034b1 	.word	0x080034b1
 8003494:	080034ab 	.word	0x080034ab
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e118      	b.n	80036d0 <UART_SetConfig+0x348>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e115      	b.n	80036d0 <UART_SetConfig+0x348>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e112      	b.n	80036d0 <UART_SetConfig+0x348>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e10f      	b.n	80036d0 <UART_SetConfig+0x348>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e10c      	b.n	80036d0 <UART_SetConfig+0x348>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a68      	ldr	r2, [pc, #416]	@ (800365c <UART_SetConfig+0x2d4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d120      	bne.n	8003502 <UART_SetConfig+0x17a>
 80034c0:	4b64      	ldr	r3, [pc, #400]	@ (8003654 <UART_SetConfig+0x2cc>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034ca:	2b30      	cmp	r3, #48	@ 0x30
 80034cc:	d013      	beq.n	80034f6 <UART_SetConfig+0x16e>
 80034ce:	2b30      	cmp	r3, #48	@ 0x30
 80034d0:	d814      	bhi.n	80034fc <UART_SetConfig+0x174>
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d009      	beq.n	80034ea <UART_SetConfig+0x162>
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d810      	bhi.n	80034fc <UART_SetConfig+0x174>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <UART_SetConfig+0x15c>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d006      	beq.n	80034f0 <UART_SetConfig+0x168>
 80034e2:	e00b      	b.n	80034fc <UART_SetConfig+0x174>
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
 80034e8:	e0f2      	b.n	80036d0 <UART_SetConfig+0x348>
 80034ea:	2302      	movs	r3, #2
 80034ec:	77fb      	strb	r3, [r7, #31]
 80034ee:	e0ef      	b.n	80036d0 <UART_SetConfig+0x348>
 80034f0:	2304      	movs	r3, #4
 80034f2:	77fb      	strb	r3, [r7, #31]
 80034f4:	e0ec      	b.n	80036d0 <UART_SetConfig+0x348>
 80034f6:	2308      	movs	r3, #8
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e0e9      	b.n	80036d0 <UART_SetConfig+0x348>
 80034fc:	2310      	movs	r3, #16
 80034fe:	77fb      	strb	r3, [r7, #31]
 8003500:	e0e6      	b.n	80036d0 <UART_SetConfig+0x348>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a56      	ldr	r2, [pc, #344]	@ (8003660 <UART_SetConfig+0x2d8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d120      	bne.n	800354e <UART_SetConfig+0x1c6>
 800350c:	4b51      	ldr	r3, [pc, #324]	@ (8003654 <UART_SetConfig+0x2cc>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003512:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003516:	2bc0      	cmp	r3, #192	@ 0xc0
 8003518:	d013      	beq.n	8003542 <UART_SetConfig+0x1ba>
 800351a:	2bc0      	cmp	r3, #192	@ 0xc0
 800351c:	d814      	bhi.n	8003548 <UART_SetConfig+0x1c0>
 800351e:	2b80      	cmp	r3, #128	@ 0x80
 8003520:	d009      	beq.n	8003536 <UART_SetConfig+0x1ae>
 8003522:	2b80      	cmp	r3, #128	@ 0x80
 8003524:	d810      	bhi.n	8003548 <UART_SetConfig+0x1c0>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d002      	beq.n	8003530 <UART_SetConfig+0x1a8>
 800352a:	2b40      	cmp	r3, #64	@ 0x40
 800352c:	d006      	beq.n	800353c <UART_SetConfig+0x1b4>
 800352e:	e00b      	b.n	8003548 <UART_SetConfig+0x1c0>
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e0cc      	b.n	80036d0 <UART_SetConfig+0x348>
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e0c9      	b.n	80036d0 <UART_SetConfig+0x348>
 800353c:	2304      	movs	r3, #4
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e0c6      	b.n	80036d0 <UART_SetConfig+0x348>
 8003542:	2308      	movs	r3, #8
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e0c3      	b.n	80036d0 <UART_SetConfig+0x348>
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e0c0      	b.n	80036d0 <UART_SetConfig+0x348>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a44      	ldr	r2, [pc, #272]	@ (8003664 <UART_SetConfig+0x2dc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d125      	bne.n	80035a4 <UART_SetConfig+0x21c>
 8003558:	4b3e      	ldr	r3, [pc, #248]	@ (8003654 <UART_SetConfig+0x2cc>)
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003566:	d017      	beq.n	8003598 <UART_SetConfig+0x210>
 8003568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800356c:	d817      	bhi.n	800359e <UART_SetConfig+0x216>
 800356e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003572:	d00b      	beq.n	800358c <UART_SetConfig+0x204>
 8003574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003578:	d811      	bhi.n	800359e <UART_SetConfig+0x216>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <UART_SetConfig+0x1fe>
 800357e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003582:	d006      	beq.n	8003592 <UART_SetConfig+0x20a>
 8003584:	e00b      	b.n	800359e <UART_SetConfig+0x216>
 8003586:	2300      	movs	r3, #0
 8003588:	77fb      	strb	r3, [r7, #31]
 800358a:	e0a1      	b.n	80036d0 <UART_SetConfig+0x348>
 800358c:	2302      	movs	r3, #2
 800358e:	77fb      	strb	r3, [r7, #31]
 8003590:	e09e      	b.n	80036d0 <UART_SetConfig+0x348>
 8003592:	2304      	movs	r3, #4
 8003594:	77fb      	strb	r3, [r7, #31]
 8003596:	e09b      	b.n	80036d0 <UART_SetConfig+0x348>
 8003598:	2308      	movs	r3, #8
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e098      	b.n	80036d0 <UART_SetConfig+0x348>
 800359e:	2310      	movs	r3, #16
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e095      	b.n	80036d0 <UART_SetConfig+0x348>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003668 <UART_SetConfig+0x2e0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d125      	bne.n	80035fa <UART_SetConfig+0x272>
 80035ae:	4b29      	ldr	r3, [pc, #164]	@ (8003654 <UART_SetConfig+0x2cc>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035bc:	d017      	beq.n	80035ee <UART_SetConfig+0x266>
 80035be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035c2:	d817      	bhi.n	80035f4 <UART_SetConfig+0x26c>
 80035c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c8:	d00b      	beq.n	80035e2 <UART_SetConfig+0x25a>
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ce:	d811      	bhi.n	80035f4 <UART_SetConfig+0x26c>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <UART_SetConfig+0x254>
 80035d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035d8:	d006      	beq.n	80035e8 <UART_SetConfig+0x260>
 80035da:	e00b      	b.n	80035f4 <UART_SetConfig+0x26c>
 80035dc:	2301      	movs	r3, #1
 80035de:	77fb      	strb	r3, [r7, #31]
 80035e0:	e076      	b.n	80036d0 <UART_SetConfig+0x348>
 80035e2:	2302      	movs	r3, #2
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e073      	b.n	80036d0 <UART_SetConfig+0x348>
 80035e8:	2304      	movs	r3, #4
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e070      	b.n	80036d0 <UART_SetConfig+0x348>
 80035ee:	2308      	movs	r3, #8
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e06d      	b.n	80036d0 <UART_SetConfig+0x348>
 80035f4:	2310      	movs	r3, #16
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e06a      	b.n	80036d0 <UART_SetConfig+0x348>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <UART_SetConfig+0x2e4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d138      	bne.n	8003676 <UART_SetConfig+0x2ee>
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <UART_SetConfig+0x2cc>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800360a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800360e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003612:	d017      	beq.n	8003644 <UART_SetConfig+0x2bc>
 8003614:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003618:	d82a      	bhi.n	8003670 <UART_SetConfig+0x2e8>
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361e:	d00b      	beq.n	8003638 <UART_SetConfig+0x2b0>
 8003620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003624:	d824      	bhi.n	8003670 <UART_SetConfig+0x2e8>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <UART_SetConfig+0x2aa>
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800362e:	d006      	beq.n	800363e <UART_SetConfig+0x2b6>
 8003630:	e01e      	b.n	8003670 <UART_SetConfig+0x2e8>
 8003632:	2300      	movs	r3, #0
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e04b      	b.n	80036d0 <UART_SetConfig+0x348>
 8003638:	2302      	movs	r3, #2
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e048      	b.n	80036d0 <UART_SetConfig+0x348>
 800363e:	2304      	movs	r3, #4
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e045      	b.n	80036d0 <UART_SetConfig+0x348>
 8003644:	2308      	movs	r3, #8
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e042      	b.n	80036d0 <UART_SetConfig+0x348>
 800364a:	bf00      	nop
 800364c:	efff69f3 	.word	0xefff69f3
 8003650:	40011000 	.word	0x40011000
 8003654:	40023800 	.word	0x40023800
 8003658:	40004400 	.word	0x40004400
 800365c:	40004800 	.word	0x40004800
 8003660:	40004c00 	.word	0x40004c00
 8003664:	40005000 	.word	0x40005000
 8003668:	40011400 	.word	0x40011400
 800366c:	40007800 	.word	0x40007800
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	e02c      	b.n	80036d0 <UART_SetConfig+0x348>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	@ (8003844 <UART_SetConfig+0x4bc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d125      	bne.n	80036cc <UART_SetConfig+0x344>
 8003680:	4b71      	ldr	r3, [pc, #452]	@ (8003848 <UART_SetConfig+0x4c0>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800368a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800368e:	d017      	beq.n	80036c0 <UART_SetConfig+0x338>
 8003690:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003694:	d817      	bhi.n	80036c6 <UART_SetConfig+0x33e>
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800369a:	d00b      	beq.n	80036b4 <UART_SetConfig+0x32c>
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a0:	d811      	bhi.n	80036c6 <UART_SetConfig+0x33e>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <UART_SetConfig+0x326>
 80036a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036aa:	d006      	beq.n	80036ba <UART_SetConfig+0x332>
 80036ac:	e00b      	b.n	80036c6 <UART_SetConfig+0x33e>
 80036ae:	2300      	movs	r3, #0
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e00d      	b.n	80036d0 <UART_SetConfig+0x348>
 80036b4:	2302      	movs	r3, #2
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e00a      	b.n	80036d0 <UART_SetConfig+0x348>
 80036ba:	2304      	movs	r3, #4
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e007      	b.n	80036d0 <UART_SetConfig+0x348>
 80036c0:	2308      	movs	r3, #8
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e004      	b.n	80036d0 <UART_SetConfig+0x348>
 80036c6:	2310      	movs	r3, #16
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e001      	b.n	80036d0 <UART_SetConfig+0x348>
 80036cc:	2310      	movs	r3, #16
 80036ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036d8:	d15b      	bne.n	8003792 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80036da:	7ffb      	ldrb	r3, [r7, #31]
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d828      	bhi.n	8003732 <UART_SetConfig+0x3aa>
 80036e0:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <UART_SetConfig+0x360>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800370d 	.word	0x0800370d
 80036ec:	08003715 	.word	0x08003715
 80036f0:	0800371d 	.word	0x0800371d
 80036f4:	08003733 	.word	0x08003733
 80036f8:	08003723 	.word	0x08003723
 80036fc:	08003733 	.word	0x08003733
 8003700:	08003733 	.word	0x08003733
 8003704:	08003733 	.word	0x08003733
 8003708:	0800372b 	.word	0x0800372b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff f982 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 8003710:	61b8      	str	r0, [r7, #24]
        break;
 8003712:	e013      	b.n	800373c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003714:	f7ff f992 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 8003718:	61b8      	str	r0, [r7, #24]
        break;
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371c:	4b4b      	ldr	r3, [pc, #300]	@ (800384c <UART_SetConfig+0x4c4>)
 800371e:	61bb      	str	r3, [r7, #24]
        break;
 8003720:	e00c      	b.n	800373c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7ff f867 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 8003726:	61b8      	str	r0, [r7, #24]
        break;
 8003728:	e008      	b.n	800373c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e004      	b.n	800373c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	77bb      	strb	r3, [r7, #30]
        break;
 800373a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d074      	beq.n	800382c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	005a      	lsls	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	441a      	add	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	2b0f      	cmp	r3, #15
 800375c:	d916      	bls.n	800378c <UART_SetConfig+0x404>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003764:	d212      	bcs.n	800378c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f023 030f 	bic.w	r3, r3, #15
 800376e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	085b      	lsrs	r3, r3, #1
 8003774:	b29b      	uxth	r3, r3
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	b29a      	uxth	r2, r3
 800377c:	89fb      	ldrh	r3, [r7, #14]
 800377e:	4313      	orrs	r3, r2
 8003780:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	89fa      	ldrh	r2, [r7, #14]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	e04f      	b.n	800382c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	77bb      	strb	r3, [r7, #30]
 8003790:	e04c      	b.n	800382c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003792:	7ffb      	ldrb	r3, [r7, #31]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d828      	bhi.n	80037ea <UART_SetConfig+0x462>
 8003798:	a201      	add	r2, pc, #4	@ (adr r2, 80037a0 <UART_SetConfig+0x418>)
 800379a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379e:	bf00      	nop
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7ff f926 	bl	8002a14 <HAL_RCC_GetPCLK1Freq>
 80037c8:	61b8      	str	r0, [r7, #24]
        break;
 80037ca:	e013      	b.n	80037f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7ff f936 	bl	8002a3c <HAL_RCC_GetPCLK2Freq>
 80037d0:	61b8      	str	r0, [r7, #24]
        break;
 80037d2:	e00f      	b.n	80037f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	@ (800384c <UART_SetConfig+0x4c4>)
 80037d6:	61bb      	str	r3, [r7, #24]
        break;
 80037d8:	e00c      	b.n	80037f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7ff f80b 	bl	80027f4 <HAL_RCC_GetSysClockFreq>
 80037de:	61b8      	str	r0, [r7, #24]
        break;
 80037e0:	e008      	b.n	80037f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e6:	61bb      	str	r3, [r7, #24]
        break;
 80037e8:	e004      	b.n	80037f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77bb      	strb	r3, [r7, #30]
        break;
 80037f2:	bf00      	nop
    }

    if (pclk != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d018      	beq.n	800382c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085a      	lsrs	r2, r3, #1
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d909      	bls.n	8003828 <UART_SetConfig+0x4a0>
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381a:	d205      	bcs.n	8003828 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	b29a      	uxth	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e001      	b.n	800382c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003838:	7fbb      	ldrb	r3, [r7, #30]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40007c00 	.word	0x40007c00
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400

08003850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01a      	beq.n	8003966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394e:	d10a      	bne.n	8003966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b098      	sub	sp, #96	@ 0x60
 8003998:	af02      	add	r7, sp, #8
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a4:	f7fd fb16 	bl	8000fd4 <HAL_GetTick>
 80039a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d12e      	bne.n	8003a16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f88c 	bl	8003ae4 <UART_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d021      	beq.n	8003a16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e062      	b.n	8003adc <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d149      	bne.n	8003ab8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f856 	bl	8003ae4 <UART_WaitOnFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03c      	beq.n	8003ab8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	e853 3f00 	ldrex	r3, [r3]
 8003a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a64:	e841 2300 	strex	r3, r2, [r1]
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e6      	bne.n	8003a3e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a90:	61fa      	str	r2, [r7, #28]
 8003a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	69b9      	ldr	r1, [r7, #24]
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	e841 2300 	strex	r3, r2, [r1]
 8003a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e5      	bne.n	8003a70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e011      	b.n	8003adc <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3758      	adds	r7, #88	@ 0x58
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af4:	e04f      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d04b      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003afe:	f7fd fa69 	bl	8000fd4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d302      	bcc.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e04e      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d037      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b80      	cmp	r3, #128	@ 0x80
 8003b2a:	d034      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b40      	cmp	r3, #64	@ 0x40
 8003b30:	d031      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d110      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2208      	movs	r2, #8
 8003b46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f838 	bl	8003bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2208      	movs	r2, #8
 8003b52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e029      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b70:	d111      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f81e 	bl	8003bbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e00f      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	461a      	mov	r2, r3
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d0a0      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b095      	sub	sp, #84	@ 0x54
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003be6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e5      	bne.n	8003bf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d118      	bne.n	8003c66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f023 0310 	bic.w	r3, r3, #16
 8003c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6979      	ldr	r1, [r7, #20]
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e6      	bne.n	8003c34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c7a:	bf00      	nop
 8003c7c:	3754      	adds	r7, #84	@ 0x54
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f841 	bl	8003d1c <osSemaphoreRelease>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000170 	.word	0x20000170

08003ca8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003cb0:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <HAL_ETH_TxCpltCallback+0x1c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f831 	bl	8003d1c <osSemaphoreRelease>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000174 	.word	0x20000174

08003cc8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd fb5b 	bl	800138c <HAL_ETH_GetDMAError>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	2b80      	cmp	r3, #128	@ 0x80
 8003cde:	d104      	bne.n	8003cea <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <HAL_ETH_ErrorCallback+0x2c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 f819 	bl	8003d1c <osSemaphoreRelease>
  }
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000170 	.word	0x20000170

08003cf8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfe:	f3ef 8305 	mrs	r3, IPSR
 8003d02:	607b      	str	r3, [r7, #4]
  return(result);
 8003d04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	bf14      	ite	ne
 8003d0a:	2301      	movne	r3, #1
 8003d0c:	2300      	moveq	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003d2c:	f7ff ffe4 	bl	8003cf8 <inHandlerMode>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d016      	beq.n	8003d64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f9b5 	bl	80040ac <xQueueGiveFromISR>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d001      	beq.n	8003d4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003d48:	23ff      	movs	r3, #255	@ 0xff
 8003d4a:	e017      	b.n	8003d7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d013      	beq.n	8003d7a <osSemaphoreRelease+0x5e>
 8003d52:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <osSemaphoreRelease+0x68>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	e00a      	b.n	8003d7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003d64:	2300      	movs	r3, #0
 8003d66:	2200      	movs	r2, #0
 8003d68:	2100      	movs	r1, #0
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f894 	bl	8003e98 <xQueueGenericSend>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d001      	beq.n	8003d7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003d76:	23ff      	movs	r3, #255	@ 0xff
 8003d78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	601a      	str	r2, [r3, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d103      	bne.n	8003df0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e00c      	b.n	8003e0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3308      	adds	r3, #8
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e002      	b.n	8003dfe <vListInsert+0x2e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d2f6      	bcs.n	8003df8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6892      	ldr	r2, [r2, #8]
 8003e58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6852      	ldr	r2, [r2, #4]
 8003e62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d103      	bne.n	8003e76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	@ 0x38
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb8:	b672      	cpsid	i
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	b662      	cpsie	i
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <xQueueGenericSend+0x46>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <xQueueGenericSend+0x4a>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericSend+0x4c>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10d      	bne.n	8003f04 <xQueueGenericSend+0x6c>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	b672      	cpsid	i
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	b662      	cpsie	i
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d103      	bne.n	8003f12 <xQueueGenericSend+0x7a>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <xQueueGenericSend+0x7e>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueGenericSend+0x80>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <xQueueGenericSend+0xa0>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f20:	b672      	cpsid	i
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	b662      	cpsie	i
 8003f30:	623b      	str	r3, [r7, #32]
}
 8003f32:	bf00      	nop
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f38:	f000 fd2c 	bl	8004994 <xTaskGetSchedulerState>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <xQueueGenericSend+0xb0>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <xQueueGenericSend+0xb4>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <xQueueGenericSend+0xb6>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10d      	bne.n	8003f6e <xQueueGenericSend+0xd6>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f56:	b672      	cpsid	i
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	b662      	cpsie	i
 8003f66:	61fb      	str	r3, [r7, #28]
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f6e:	f000 fe3b 	bl	8004be8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <xQueueGenericSend+0xec>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d129      	bne.n	8003fd8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f8a:	f000 f927 	bl	80041dc <prvCopyDataToQueue>
 8003f8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d010      	beq.n	8003fba <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9a:	3324      	adds	r3, #36	@ 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fbe9 	bl	8004774 <xTaskRemoveFromEventList>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d013      	beq.n	8003fd0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80040a8 <xQueueGenericSend+0x210>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	e00a      	b.n	8003fd0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d007      	beq.n	8003fd0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fc0:	4b39      	ldr	r3, [pc, #228]	@ (80040a8 <xQueueGenericSend+0x210>)
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fd0:	f000 fe40 	bl	8004c54 <vPortExitCritical>
				return pdPASS;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e063      	b.n	80040a0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fde:	f000 fe39 	bl	8004c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e05c      	b.n	80040a0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fc25 	bl	8004840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ffa:	f000 fe2b 	bl	8004c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ffe:	f000 f9c1 	bl	8004384 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004002:	f000 fdf1 	bl	8004be8 <vPortEnterCritical>
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800400c:	b25b      	sxtb	r3, r3
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d103      	bne.n	800401c <xQueueGenericSend+0x184>
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004022:	b25b      	sxtb	r3, r3
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d103      	bne.n	8004032 <xQueueGenericSend+0x19a>
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	2200      	movs	r2, #0
 800402e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004032:	f000 fe0f 	bl	8004c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004036:	1d3a      	adds	r2, r7, #4
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fc14 	bl	800486c <xTaskCheckForTimeOut>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d124      	bne.n	8004094 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800404a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800404c:	f000 f982 	bl	8004354 <prvIsQueueFull>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d018      	beq.n	8004088 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	3310      	adds	r3, #16
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb60 	bl	8004724 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004066:	f000 f923 	bl	80042b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800406a:	f000 f999 	bl	80043a0 <xTaskResumeAll>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f af7c 	bne.w	8003f6e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8004076:	4b0c      	ldr	r3, [pc, #48]	@ (80040a8 <xQueueGenericSend+0x210>)
 8004078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	e772      	b.n	8003f6e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800408a:	f000 f911 	bl	80042b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800408e:	f000 f987 	bl	80043a0 <xTaskResumeAll>
 8004092:	e76c      	b.n	8003f6e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004096:	f000 f90b 	bl	80042b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800409a:	f000 f981 	bl	80043a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800409e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3738      	adds	r7, #56	@ 0x38
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08e      	sub	sp, #56	@ 0x38
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <xQueueGiveFromISR+0x30>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c4:	b672      	cpsid	i
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	b662      	cpsie	i
 80040d4:	623b      	str	r3, [r7, #32]
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <xQueueGiveFromISR+0x54>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e8:	b672      	cpsid	i
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	b662      	cpsie	i
 80040f8:	61fb      	str	r3, [r7, #28]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d103      	bne.n	8004110 <xQueueGiveFromISR+0x64>
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <xQueueGiveFromISR+0x68>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <xQueueGiveFromISR+0x6a>
 8004114:	2300      	movs	r3, #0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10d      	bne.n	8004136 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	b672      	cpsid	i
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	b662      	cpsie	i
 800412e:	61bb      	str	r3, [r7, #24]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004136:	f000 fe13 	bl	8004d60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800413a:	f3ef 8211 	mrs	r2, BASEPRI
 800413e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004142:	b672      	cpsid	i
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	b662      	cpsie	i
 8004152:	617a      	str	r2, [r7, #20]
 8004154:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004156:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004158:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004164:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004166:	429a      	cmp	r2, r3
 8004168:	d22b      	bcs.n	80041c2 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800416a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800417c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004184:	d112      	bne.n	80041ac <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d016      	beq.n	80041bc <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	3324      	adds	r3, #36	@ 0x24
 8004192:	4618      	mov	r0, r3
 8004194:	f000 faee 	bl	8004774 <xTaskRemoveFromEventList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	e007      	b.n	80041bc <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80041b0:	3301      	adds	r3, #1
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	b25a      	sxtb	r2, r3
 80041b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80041bc:	2301      	movs	r3, #1
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c0:	e001      	b.n	80041c6 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3738      	adds	r7, #56	@ 0x38
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10d      	bne.n	8004216 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d14d      	bne.n	800429e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fbe2 	bl	80049d0 <xTaskPriorityDisinherit>
 800420c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	e043      	b.n	800429e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d119      	bne.n	8004250 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6858      	ldr	r0, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	461a      	mov	r2, r3
 8004226:	68b9      	ldr	r1, [r7, #8]
 8004228:	f000 fe48 	bl	8004ebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	441a      	add	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	429a      	cmp	r2, r3
 8004244:	d32b      	bcc.n	800429e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	e026      	b.n	800429e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68d8      	ldr	r0, [r3, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004258:	461a      	mov	r2, r3
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	f000 fe2e 	bl	8004ebc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004268:	425b      	negs	r3, r3
 800426a:	441a      	add	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d207      	bcs.n	800428c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	425b      	negs	r3, r3
 8004286:	441a      	add	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d105      	bne.n	800429e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3b01      	subs	r3, #1
 800429c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80042a6:	697b      	ldr	r3, [r7, #20]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042b8:	f000 fc96 	bl	8004be8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042c4:	e011      	b.n	80042ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d012      	beq.n	80042f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa4e 	bl	8004774 <xTaskRemoveFromEventList>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042de:	f000 fb2d 	bl	800493c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	dce9      	bgt.n	80042c6 <prvUnlockQueue+0x16>
 80042f2:	e000      	b.n	80042f6 <prvUnlockQueue+0x46>
					break;
 80042f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	22ff      	movs	r2, #255	@ 0xff
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042fe:	f000 fca9 	bl	8004c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004302:	f000 fc71 	bl	8004be8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800430c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800430e:	e011      	b.n	8004334 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3310      	adds	r3, #16
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa29 	bl	8004774 <xTaskRemoveFromEventList>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004328:	f000 fb08 	bl	800493c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800432c:	7bbb      	ldrb	r3, [r7, #14]
 800432e:	3b01      	subs	r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004338:	2b00      	cmp	r3, #0
 800433a:	dce9      	bgt.n	8004310 <prvUnlockQueue+0x60>
 800433c:	e000      	b.n	8004340 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800433e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	22ff      	movs	r2, #255	@ 0xff
 8004344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004348:	f000 fc84 	bl	8004c54 <vPortExitCritical>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800435c:	f000 fc44 	bl	8004be8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	429a      	cmp	r2, r3
 800436a:	d102      	bne.n	8004372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800436c:	2301      	movs	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e001      	b.n	8004376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004376:	f000 fc6d 	bl	8004c54 <vPortExitCritical>

	return xReturn;
 800437a:	68fb      	ldr	r3, [r7, #12]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <vTaskSuspendAll+0x18>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	4a03      	ldr	r2, [pc, #12]	@ (800439c <vTaskSuspendAll+0x18>)
 8004390:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	20000308 	.word	0x20000308

080043a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <xTaskResumeAll+0x11c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <xTaskResumeAll+0x32>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	b672      	cpsid	i
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	b662      	cpsie	i
 80043ca:	603b      	str	r3, [r7, #0]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80043d2:	f000 fc09 	bl	8004be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <xTaskResumeAll+0x11c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3b01      	subs	r3, #1
 80043dc:	4a37      	ldr	r2, [pc, #220]	@ (80044bc <xTaskResumeAll+0x11c>)
 80043de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043e0:	4b36      	ldr	r3, [pc, #216]	@ (80044bc <xTaskResumeAll+0x11c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d161      	bne.n	80044ac <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043e8:	4b35      	ldr	r3, [pc, #212]	@ (80044c0 <xTaskResumeAll+0x120>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05d      	beq.n	80044ac <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043f0:	e02e      	b.n	8004450 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f2:	4b34      	ldr	r3, [pc, #208]	@ (80044c4 <xTaskResumeAll+0x124>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3318      	adds	r3, #24
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fd1f 	bl	8003e42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3304      	adds	r3, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fd1a 	bl	8003e42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	2201      	movs	r2, #1
 8004414:	409a      	lsls	r2, r3
 8004416:	4b2c      	ldr	r3, [pc, #176]	@ (80044c8 <xTaskResumeAll+0x128>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4313      	orrs	r3, r2
 800441c:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <xTaskResumeAll+0x128>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4a27      	ldr	r2, [pc, #156]	@ (80044cc <xTaskResumeAll+0x12c>)
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f7ff fca6 	bl	8003d88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004440:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <xTaskResumeAll+0x130>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800444a:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <xTaskResumeAll+0x134>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004450:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <xTaskResumeAll+0x124>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1cc      	bne.n	80043f2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800445e:	f000 fa79 	bl	8004954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <xTaskResumeAll+0x138>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800446e:	f000 f837 	bl	80044e0 <xTaskIncrementTick>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004478:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <xTaskResumeAll+0x134>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3b01      	subs	r3, #1
 8004482:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f1      	bne.n	800446e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800448a:	4b13      	ldr	r3, [pc, #76]	@ (80044d8 <xTaskResumeAll+0x138>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004490:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <xTaskResumeAll+0x134>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004498:	2301      	movs	r3, #1
 800449a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800449c:	4b0f      	ldr	r3, [pc, #60]	@ (80044dc <xTaskResumeAll+0x13c>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044ac:	f000 fbd2 	bl	8004c54 <vPortExitCritical>

	return xAlreadyYielded;
 80044b0:	68bb      	ldr	r3, [r7, #8]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000308 	.word	0x20000308
 80044c0:	200002e8 	.word	0x200002e8
 80044c4:	200002c0 	.word	0x200002c0
 80044c8:	200002f0 	.word	0x200002f0
 80044cc:	2000022c 	.word	0x2000022c
 80044d0:	20000228 	.word	0x20000228
 80044d4:	200002fc 	.word	0x200002fc
 80044d8:	200002f8 	.word	0x200002f8
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ea:	4b50      	ldr	r3, [pc, #320]	@ (800462c <xTaskIncrementTick+0x14c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f040 808b 	bne.w	800460a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044f4:	4b4e      	ldr	r3, [pc, #312]	@ (8004630 <xTaskIncrementTick+0x150>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044fc:	4a4c      	ldr	r2, [pc, #304]	@ (8004630 <xTaskIncrementTick+0x150>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d123      	bne.n	8004550 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004508:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <xTaskIncrementTick+0x154>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00d      	beq.n	800452e <xTaskIncrementTick+0x4e>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	b672      	cpsid	i
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	b662      	cpsie	i
 8004526:	603b      	str	r3, [r7, #0]
}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	e7fd      	b.n	800452a <xTaskIncrementTick+0x4a>
 800452e:	4b41      	ldr	r3, [pc, #260]	@ (8004634 <xTaskIncrementTick+0x154>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	4b40      	ldr	r3, [pc, #256]	@ (8004638 <xTaskIncrementTick+0x158>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <xTaskIncrementTick+0x154>)
 800453a:	6013      	str	r3, [r2, #0]
 800453c:	4a3e      	ldr	r2, [pc, #248]	@ (8004638 <xTaskIncrementTick+0x158>)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b3e      	ldr	r3, [pc, #248]	@ (800463c <xTaskIncrementTick+0x15c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a3c      	ldr	r2, [pc, #240]	@ (800463c <xTaskIncrementTick+0x15c>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	f000 fa02 	bl	8004954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004550:	4b3b      	ldr	r3, [pc, #236]	@ (8004640 <xTaskIncrementTick+0x160>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	429a      	cmp	r2, r3
 8004558:	d348      	bcc.n	80045ec <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800455a:	4b36      	ldr	r3, [pc, #216]	@ (8004634 <xTaskIncrementTick+0x154>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004564:	4b36      	ldr	r3, [pc, #216]	@ (8004640 <xTaskIncrementTick+0x160>)
 8004566:	f04f 32ff 	mov.w	r2, #4294967295
 800456a:	601a      	str	r2, [r3, #0]
					break;
 800456c:	e03e      	b.n	80045ec <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800456e:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <xTaskIncrementTick+0x154>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d203      	bcs.n	800458e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004586:	4a2e      	ldr	r2, [pc, #184]	@ (8004640 <xTaskIncrementTick+0x160>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800458c:	e02e      	b.n	80045ec <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3304      	adds	r3, #4
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fc55 	bl	8003e42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	3318      	adds	r3, #24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fc4c 	bl	8003e42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	2201      	movs	r2, #1
 80045b0:	409a      	lsls	r2, r3
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <xTaskIncrementTick+0x164>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	4a22      	ldr	r2, [pc, #136]	@ (8004644 <xTaskIncrementTick+0x164>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004648 <xTaskIncrementTick+0x168>)
 80045ca:	441a      	add	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7ff fbd8 	bl	8003d88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <xTaskIncrementTick+0x16c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d3b9      	bcc.n	800455a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80045e6:	2301      	movs	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ea:	e7b6      	b.n	800455a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045ec:	4b17      	ldr	r3, [pc, #92]	@ (800464c <xTaskIncrementTick+0x16c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f2:	4915      	ldr	r1, [pc, #84]	@ (8004648 <xTaskIncrementTick+0x168>)
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d907      	bls.n	8004614 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e004      	b.n	8004614 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800460a:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <xTaskIncrementTick+0x170>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	4a0f      	ldr	r2, [pc, #60]	@ (8004650 <xTaskIncrementTick+0x170>)
 8004612:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <xTaskIncrementTick+0x174>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004620:	697b      	ldr	r3, [r7, #20]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000308 	.word	0x20000308
 8004630:	200002ec 	.word	0x200002ec
 8004634:	200002b8 	.word	0x200002b8
 8004638:	200002bc 	.word	0x200002bc
 800463c:	20000300 	.word	0x20000300
 8004640:	20000304 	.word	0x20000304
 8004644:	200002f0 	.word	0x200002f0
 8004648:	2000022c 	.word	0x2000022c
 800464c:	20000228 	.word	0x20000228
 8004650:	200002f8 	.word	0x200002f8
 8004654:	200002fc 	.word	0x200002fc

08004658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800465e:	4b2b      	ldr	r3, [pc, #172]	@ (800470c <vTaskSwitchContext+0xb4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004666:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <vTaskSwitchContext+0xb8>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800466c:	e047      	b.n	80046fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800466e:	4b28      	ldr	r3, [pc, #160]	@ (8004710 <vTaskSwitchContext+0xb8>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004674:	4b27      	ldr	r3, [pc, #156]	@ (8004714 <vTaskSwitchContext+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	fab3 f383 	clz	r3, r3
 8004680:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004682:	7afb      	ldrb	r3, [r7, #11]
 8004684:	f1c3 031f 	rsb	r3, r3, #31
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	4923      	ldr	r1, [pc, #140]	@ (8004718 <vTaskSwitchContext+0xc0>)
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10d      	bne.n	80046ba <vTaskSwitchContext+0x62>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	b672      	cpsid	i
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	b662      	cpsie	i
 80046b2:	607b      	str	r3, [r7, #4]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vTaskSwitchContext+0x5e>
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4a14      	ldr	r2, [pc, #80]	@ (8004718 <vTaskSwitchContext+0xc0>)
 80046c6:	4413      	add	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3308      	adds	r3, #8
 80046dc:	429a      	cmp	r2, r3
 80046de:	d104      	bne.n	80046ea <vTaskSwitchContext+0x92>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4a0a      	ldr	r2, [pc, #40]	@ (800471c <vTaskSwitchContext+0xc4>)
 80046f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046f4:	4b09      	ldr	r3, [pc, #36]	@ (800471c <vTaskSwitchContext+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	334c      	adds	r3, #76	@ 0x4c
 80046fa:	4a09      	ldr	r2, [pc, #36]	@ (8004720 <vTaskSwitchContext+0xc8>)
 80046fc:	6013      	str	r3, [r2, #0]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000308 	.word	0x20000308
 8004710:	200002fc 	.word	0x200002fc
 8004714:	200002f0 	.word	0x200002f0
 8004718:	2000022c 	.word	0x2000022c
 800471c:	20000228 	.word	0x20000228
 8004720:	20000018 	.word	0x20000018

08004724 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	b672      	cpsid	i
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	b662      	cpsie	i
 8004748:	60fb      	str	r3, [r7, #12]
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	e7fd      	b.n	800474c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <vTaskPlaceOnEventList+0x4c>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3318      	adds	r3, #24
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fb39 	bl	8003dd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800475e:	2101      	movs	r1, #1
 8004760:	6838      	ldr	r0, [r7, #0]
 8004762:	f000 f9c1 	bl	8004ae8 <prvAddCurrentTaskToDelayedList>
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000228 	.word	0x20000228

08004774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478e:	b672      	cpsid	i
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	b662      	cpsie	i
 800479e:	60fb      	str	r3, [r7, #12]
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	e7fd      	b.n	80047a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3318      	adds	r3, #24
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fb49 	bl	8003e42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <xTaskRemoveFromEventList+0xb4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11c      	bne.n	80047f2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fb40 	bl	8003e42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	2201      	movs	r2, #1
 80047c8:	409a      	lsls	r2, r3
 80047ca:	4b18      	ldr	r3, [pc, #96]	@ (800482c <xTaskRemoveFromEventList+0xb8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	4a16      	ldr	r2, [pc, #88]	@ (800482c <xTaskRemoveFromEventList+0xb8>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <xTaskRemoveFromEventList+0xbc>)
 80047e2:	441a      	add	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7ff facc 	bl	8003d88 <vListInsertEnd>
 80047f0:	e005      	b.n	80047fe <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4619      	mov	r1, r3
 80047f8:	480e      	ldr	r0, [pc, #56]	@ (8004834 <xTaskRemoveFromEventList+0xc0>)
 80047fa:	f7ff fac5 	bl	8003d88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004802:	4b0d      	ldr	r3, [pc, #52]	@ (8004838 <xTaskRemoveFromEventList+0xc4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	429a      	cmp	r2, r3
 800480a:	d905      	bls.n	8004818 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004810:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <xTaskRemoveFromEventList+0xc8>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e001      	b.n	800481c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800481c:	697b      	ldr	r3, [r7, #20]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000308 	.word	0x20000308
 800482c:	200002f0 	.word	0x200002f0
 8004830:	2000022c 	.word	0x2000022c
 8004834:	200002c0 	.word	0x200002c0
 8004838:	20000228 	.word	0x20000228
 800483c:	200002fc 	.word	0x200002fc

08004840 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004848:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <vTaskInternalSetTimeOutState+0x24>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <vTaskInternalSetTimeOutState+0x28>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	605a      	str	r2, [r3, #4]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	20000300 	.word	0x20000300
 8004868:	200002ec 	.word	0x200002ec

0800486c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	b672      	cpsid	i
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	b662      	cpsie	i
 8004890:	613b      	str	r3, [r7, #16]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	b672      	cpsid	i
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	b662      	cpsie	i
 80048b2:	60fb      	str	r3, [r7, #12]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80048ba:	f000 f995 	bl	8004be8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048be:	4b1d      	ldr	r3, [pc, #116]	@ (8004934 <xTaskCheckForTimeOut+0xc8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d102      	bne.n	80048de <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	e023      	b.n	8004926 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b15      	ldr	r3, [pc, #84]	@ (8004938 <xTaskCheckForTimeOut+0xcc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d007      	beq.n	80048fa <xTaskCheckForTimeOut+0x8e>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048f4:	2301      	movs	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e015      	b.n	8004926 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	429a      	cmp	r2, r3
 8004902:	d20b      	bcs.n	800491c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff ff95 	bl	8004840 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e004      	b.n	8004926 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004926:	f000 f995 	bl	8004c54 <vPortExitCritical>

	return xReturn;
 800492a:	69fb      	ldr	r3, [r7, #28]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	200002ec 	.word	0x200002ec
 8004938:	20000300 	.word	0x20000300

0800493c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800493c:	b480      	push	{r7}
 800493e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004940:	4b03      	ldr	r3, [pc, #12]	@ (8004950 <vTaskMissedYield+0x14>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	200002fc 	.word	0x200002fc

08004954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800495a:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <prvResetNextTaskUnblockTime+0x38>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d104      	bne.n	800496e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004964:	4b0a      	ldr	r3, [pc, #40]	@ (8004990 <prvResetNextTaskUnblockTime+0x3c>)
 8004966:	f04f 32ff 	mov.w	r2, #4294967295
 800496a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800496c:	e008      	b.n	8004980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496e:	4b07      	ldr	r3, [pc, #28]	@ (800498c <prvResetNextTaskUnblockTime+0x38>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a04      	ldr	r2, [pc, #16]	@ (8004990 <prvResetNextTaskUnblockTime+0x3c>)
 800497e:	6013      	str	r3, [r2, #0]
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	200002b8 	.word	0x200002b8
 8004990:	20000304 	.word	0x20000304

08004994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800499a:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <xTaskGetSchedulerState+0x34>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d102      	bne.n	80049a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80049a2:	2301      	movs	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	e008      	b.n	80049ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049a8:	4b08      	ldr	r3, [pc, #32]	@ (80049cc <xTaskGetSchedulerState+0x38>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80049b0:	2302      	movs	r3, #2
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	e001      	b.n	80049ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80049ba:	687b      	ldr	r3, [r7, #4]
	}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	200002f4 	.word	0x200002f4
 80049cc:	20000308 	.word	0x20000308

080049d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d074      	beq.n	8004ad0 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80049e6:	4b3d      	ldr	r3, [pc, #244]	@ (8004adc <xTaskPriorityDisinherit+0x10c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d00d      	beq.n	8004a0c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f4:	b672      	cpsid	i
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	b662      	cpsie	i
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10d      	bne.n	8004a30 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	b672      	cpsid	i
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	b662      	cpsie	i
 8004a28:	60bb      	str	r3, [r7, #8]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d044      	beq.n	8004ad0 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d140      	bne.n	8004ad0 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff f9f5 	bl	8003e42 <uxListRemove>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	491f      	ldr	r1, [pc, #124]	@ (8004ae0 <xTaskPriorityDisinherit+0x110>)
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xTaskPriorityDisinherit+0xba>
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	2201      	movs	r2, #1
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43da      	mvns	r2, r3
 8004a80:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <xTaskPriorityDisinherit+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4013      	ands	r3, r2
 8004a86:	4a17      	ldr	r2, [pc, #92]	@ (8004ae4 <xTaskPriorityDisinherit+0x114>)
 8004a88:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	f1c3 0207 	rsb	r2, r3, #7
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <xTaskPriorityDisinherit+0x114>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae4 <xTaskPriorityDisinherit+0x114>)
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4a08      	ldr	r2, [pc, #32]	@ (8004ae0 <xTaskPriorityDisinherit+0x110>)
 8004abe:	441a      	add	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f7ff f95e 	bl	8003d88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ad0:	697b      	ldr	r3, [r7, #20]
	}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3718      	adds	r7, #24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000228 	.word	0x20000228
 8004ae0:	2000022c 	.word	0x2000022c
 8004ae4:	200002f0 	.word	0x200002f0

08004ae8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004af2:	4b29      	ldr	r3, [pc, #164]	@ (8004b98 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004af8:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3304      	adds	r3, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f99f 	bl	8003e42 <uxListRemove>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b0a:	4b24      	ldr	r3, [pc, #144]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	2201      	movs	r2, #1
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b20:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d10a      	bne.n	8004b40 <prvAddCurrentTaskToDelayedList+0x58>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d007      	beq.n	8004b40 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b30:	4b1a      	ldr	r3, [pc, #104]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	481a      	ldr	r0, [pc, #104]	@ (8004ba4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b3a:	f7ff f925 	bl	8003d88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b3e:	e026      	b.n	8004b8e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b48:	4b14      	ldr	r3, [pc, #80]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d209      	bcs.n	8004b6c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b58:	4b13      	ldr	r3, [pc, #76]	@ (8004ba8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7ff f933 	bl	8003dd0 <vListInsert>
}
 8004b6a:	e010      	b.n	8004b8e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <prvAddCurrentTaskToDelayedList+0xc4>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7ff f929 	bl	8003dd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d202      	bcs.n	8004b8e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004b88:	4a09      	ldr	r2, [pc, #36]	@ (8004bb0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6013      	str	r3, [r2, #0]
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200002ec 	.word	0x200002ec
 8004b9c:	20000228 	.word	0x20000228
 8004ba0:	200002f0 	.word	0x200002f0
 8004ba4:	200002d4 	.word	0x200002d4
 8004ba8:	200002bc 	.word	0x200002bc
 8004bac:	200002b8 	.word	0x200002b8
 8004bb0:	20000304 	.word	0x20000304
	...

08004bc0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	4770      	bx	lr
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst2>:
 8004be0:	20000228 	.word	0x20000228
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	b672      	cpsid	i
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	b662      	cpsie	i
 8004c02:	607b      	str	r3, [r7, #4]
}
 8004c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <vPortEnterCritical+0x64>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c4c <vPortEnterCritical+0x64>)
 8004c0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c10:	4b0e      	ldr	r3, [pc, #56]	@ (8004c4c <vPortEnterCritical+0x64>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d112      	bne.n	8004c3e <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c18:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <vPortEnterCritical+0x68>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00d      	beq.n	8004c3e <vPortEnterCritical+0x56>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	b672      	cpsid	i
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	b662      	cpsie	i
 8004c36:	603b      	str	r3, [r7, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	bf00      	nop
 8004c3c:	e7fd      	b.n	8004c3a <vPortEnterCritical+0x52>
	}
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000014 	.word	0x20000014
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <vPortExitCritical+0x54>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <vPortExitCritical+0x2a>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c66:	b672      	cpsid	i
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	b662      	cpsie	i
 8004c76:	607b      	str	r3, [r7, #4]
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	e7fd      	b.n	8004c7a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8004c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <vPortExitCritical+0x54>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	4a08      	ldr	r2, [pc, #32]	@ (8004ca8 <vPortExitCritical+0x54>)
 8004c86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <vPortExitCritical+0x54>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <vPortExitCritical+0x48>
 8004c90:	2300      	movs	r3, #0
 8004c92:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f383 8811 	msr	BASEPRI, r3
}
 8004c9a:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	20000014 	.word	0x20000014
 8004cac:	00000000 	.word	0x00000000

08004cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cb0:	f3ef 8009 	mrs	r0, PSP
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <pxCurrentTCBConst>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	f01e 0f10 	tst.w	lr, #16
 8004cc0:	bf08      	it	eq
 8004cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cca:	6010      	str	r0, [r2, #0]
 8004ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004cd4:	b672      	cpsid	i
 8004cd6:	f380 8811 	msr	BASEPRI, r0
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	b662      	cpsie	i
 8004ce4:	f7ff fcb8 	bl	8004658 <vTaskSwitchContext>
 8004ce8:	f04f 0000 	mov.w	r0, #0
 8004cec:	f380 8811 	msr	BASEPRI, r0
 8004cf0:	bc09      	pop	{r0, r3}
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfa:	f01e 0f10 	tst.w	lr, #16
 8004cfe:	bf08      	it	eq
 8004d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d04:	f380 8809 	msr	PSP, r0
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <pxCurrentTCBConst>:
 8004d10:	20000228 	.word	0x20000228
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d14:	bf00      	nop
 8004d16:	bf00      	nop

08004d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	b672      	cpsid	i
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	b662      	cpsie	i
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d36:	f7ff fbd3 	bl	80044e0 <xTaskIncrementTick>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <xPortSysTickHandler+0x44>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f383 8811 	msr	BASEPRI, r3
}
 8004d52:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d66:	f3ef 8305 	mrs	r3, IPSR
 8004d6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b0f      	cmp	r3, #15
 8004d70:	d917      	bls.n	8004da2 <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d72:	4a1a      	ldr	r2, [pc, #104]	@ (8004ddc <vPortValidateInterruptPriority+0x7c>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d7c:	4b18      	ldr	r3, [pc, #96]	@ (8004de0 <vPortValidateInterruptPriority+0x80>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	7afa      	ldrb	r2, [r7, #11]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d20d      	bcs.n	8004da2 <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8a:	b672      	cpsid	i
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	b662      	cpsie	i
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004da2:	4b10      	ldr	r3, [pc, #64]	@ (8004de4 <vPortValidateInterruptPriority+0x84>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004daa:	4b0f      	ldr	r3, [pc, #60]	@ (8004de8 <vPortValidateInterruptPriority+0x88>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d90d      	bls.n	8004dce <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db6:	b672      	cpsid	i
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	b662      	cpsie	i
 8004dc6:	603b      	str	r3, [r7, #0]
}
 8004dc8:	bf00      	nop
 8004dca:	bf00      	nop
 8004dcc:	e7fd      	b.n	8004dca <vPortValidateInterruptPriority+0x6a>
	}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e3f0 	.word	0xe000e3f0
 8004de0:	2000030c 	.word	0x2000030c
 8004de4:	e000ed0c 	.word	0xe000ed0c
 8004de8:	20000310 	.word	0x20000310

08004dec <siprintf>:
 8004dec:	b40e      	push	{r1, r2, r3}
 8004dee:	b500      	push	{lr}
 8004df0:	b09c      	sub	sp, #112	@ 0x70
 8004df2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004df4:	9002      	str	r0, [sp, #8]
 8004df6:	9006      	str	r0, [sp, #24]
 8004df8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004dfc:	4809      	ldr	r0, [pc, #36]	@ (8004e24 <siprintf+0x38>)
 8004dfe:	9107      	str	r1, [sp, #28]
 8004e00:	9104      	str	r1, [sp, #16]
 8004e02:	4909      	ldr	r1, [pc, #36]	@ (8004e28 <siprintf+0x3c>)
 8004e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e08:	9105      	str	r1, [sp, #20]
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	a902      	add	r1, sp, #8
 8004e10:	f000 f9b6 	bl	8005180 <_svfiprintf_r>
 8004e14:	9b02      	ldr	r3, [sp, #8]
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	b01c      	add	sp, #112	@ 0x70
 8004e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e20:	b003      	add	sp, #12
 8004e22:	4770      	bx	lr
 8004e24:	20000018 	.word	0x20000018
 8004e28:	ffff0208 	.word	0xffff0208

08004e2c <memmove>:
 8004e2c:	4288      	cmp	r0, r1
 8004e2e:	b510      	push	{r4, lr}
 8004e30:	eb01 0402 	add.w	r4, r1, r2
 8004e34:	d902      	bls.n	8004e3c <memmove+0x10>
 8004e36:	4284      	cmp	r4, r0
 8004e38:	4623      	mov	r3, r4
 8004e3a:	d807      	bhi.n	8004e4c <memmove+0x20>
 8004e3c:	1e43      	subs	r3, r0, #1
 8004e3e:	42a1      	cmp	r1, r4
 8004e40:	d008      	beq.n	8004e54 <memmove+0x28>
 8004e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e4a:	e7f8      	b.n	8004e3e <memmove+0x12>
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4601      	mov	r1, r0
 8004e50:	428a      	cmp	r2, r1
 8004e52:	d100      	bne.n	8004e56 <memmove+0x2a>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e5e:	e7f7      	b.n	8004e50 <memmove+0x24>

08004e60 <memset>:
 8004e60:	4402      	add	r2, r0
 8004e62:	4603      	mov	r3, r0
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d100      	bne.n	8004e6a <memset+0xa>
 8004e68:	4770      	bx	lr
 8004e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e6e:	e7f9      	b.n	8004e64 <memset+0x4>

08004e70 <__libc_init_array>:
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	4d0d      	ldr	r5, [pc, #52]	@ (8004ea8 <__libc_init_array+0x38>)
 8004e74:	4c0d      	ldr	r4, [pc, #52]	@ (8004eac <__libc_init_array+0x3c>)
 8004e76:	1b64      	subs	r4, r4, r5
 8004e78:	10a4      	asrs	r4, r4, #2
 8004e7a:	2600      	movs	r6, #0
 8004e7c:	42a6      	cmp	r6, r4
 8004e7e:	d109      	bne.n	8004e94 <__libc_init_array+0x24>
 8004e80:	4d0b      	ldr	r5, [pc, #44]	@ (8004eb0 <__libc_init_array+0x40>)
 8004e82:	4c0c      	ldr	r4, [pc, #48]	@ (8004eb4 <__libc_init_array+0x44>)
 8004e84:	f000 fc4c 	bl	8005720 <_init>
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	42a6      	cmp	r6, r4
 8004e90:	d105      	bne.n	8004e9e <__libc_init_array+0x2e>
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e98:	4798      	blx	r3
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7ee      	b.n	8004e7c <__libc_init_array+0xc>
 8004e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea2:	4798      	blx	r3
 8004ea4:	3601      	adds	r6, #1
 8004ea6:	e7f2      	b.n	8004e8e <__libc_init_array+0x1e>
 8004ea8:	0800579c 	.word	0x0800579c
 8004eac:	0800579c 	.word	0x0800579c
 8004eb0:	0800579c 	.word	0x0800579c
 8004eb4:	080057a0 	.word	0x080057a0

08004eb8 <__retarget_lock_acquire_recursive>:
 8004eb8:	4770      	bx	lr

08004eba <__retarget_lock_release_recursive>:
 8004eba:	4770      	bx	lr

08004ebc <memcpy>:
 8004ebc:	440a      	add	r2, r1
 8004ebe:	4291      	cmp	r1, r2
 8004ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec4:	d100      	bne.n	8004ec8 <memcpy+0xc>
 8004ec6:	4770      	bx	lr
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	d1f9      	bne.n	8004eca <memcpy+0xe>
 8004ed6:	bd10      	pop	{r4, pc}

08004ed8 <_free_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	4605      	mov	r5, r0
 8004edc:	2900      	cmp	r1, #0
 8004ede:	d041      	beq.n	8004f64 <_free_r+0x8c>
 8004ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee4:	1f0c      	subs	r4, r1, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bfb8      	it	lt
 8004eea:	18e4      	addlt	r4, r4, r3
 8004eec:	f000 f8e0 	bl	80050b0 <__malloc_lock>
 8004ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f68 <_free_r+0x90>)
 8004ef2:	6813      	ldr	r3, [r2, #0]
 8004ef4:	b933      	cbnz	r3, 8004f04 <_free_r+0x2c>
 8004ef6:	6063      	str	r3, [r4, #4]
 8004ef8:	6014      	str	r4, [r2, #0]
 8004efa:	4628      	mov	r0, r5
 8004efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f00:	f000 b8dc 	b.w	80050bc <__malloc_unlock>
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	d908      	bls.n	8004f1a <_free_r+0x42>
 8004f08:	6820      	ldr	r0, [r4, #0]
 8004f0a:	1821      	adds	r1, r4, r0
 8004f0c:	428b      	cmp	r3, r1
 8004f0e:	bf01      	itttt	eq
 8004f10:	6819      	ldreq	r1, [r3, #0]
 8004f12:	685b      	ldreq	r3, [r3, #4]
 8004f14:	1809      	addeq	r1, r1, r0
 8004f16:	6021      	streq	r1, [r4, #0]
 8004f18:	e7ed      	b.n	8004ef6 <_free_r+0x1e>
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	b10b      	cbz	r3, 8004f24 <_free_r+0x4c>
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d9fa      	bls.n	8004f1a <_free_r+0x42>
 8004f24:	6811      	ldr	r1, [r2, #0]
 8004f26:	1850      	adds	r0, r2, r1
 8004f28:	42a0      	cmp	r0, r4
 8004f2a:	d10b      	bne.n	8004f44 <_free_r+0x6c>
 8004f2c:	6820      	ldr	r0, [r4, #0]
 8004f2e:	4401      	add	r1, r0
 8004f30:	1850      	adds	r0, r2, r1
 8004f32:	4283      	cmp	r3, r0
 8004f34:	6011      	str	r1, [r2, #0]
 8004f36:	d1e0      	bne.n	8004efa <_free_r+0x22>
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	6053      	str	r3, [r2, #4]
 8004f3e:	4408      	add	r0, r1
 8004f40:	6010      	str	r0, [r2, #0]
 8004f42:	e7da      	b.n	8004efa <_free_r+0x22>
 8004f44:	d902      	bls.n	8004f4c <_free_r+0x74>
 8004f46:	230c      	movs	r3, #12
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	e7d6      	b.n	8004efa <_free_r+0x22>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	1821      	adds	r1, r4, r0
 8004f50:	428b      	cmp	r3, r1
 8004f52:	bf04      	itt	eq
 8004f54:	6819      	ldreq	r1, [r3, #0]
 8004f56:	685b      	ldreq	r3, [r3, #4]
 8004f58:	6063      	str	r3, [r4, #4]
 8004f5a:	bf04      	itt	eq
 8004f5c:	1809      	addeq	r1, r1, r0
 8004f5e:	6021      	streq	r1, [r4, #0]
 8004f60:	6054      	str	r4, [r2, #4]
 8004f62:	e7ca      	b.n	8004efa <_free_r+0x22>
 8004f64:	bd38      	pop	{r3, r4, r5, pc}
 8004f66:	bf00      	nop
 8004f68:	20000458 	.word	0x20000458

08004f6c <sbrk_aligned>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8004fac <sbrk_aligned+0x40>)
 8004f70:	460c      	mov	r4, r1
 8004f72:	6831      	ldr	r1, [r6, #0]
 8004f74:	4605      	mov	r5, r0
 8004f76:	b911      	cbnz	r1, 8004f7e <sbrk_aligned+0x12>
 8004f78:	f000 fb8c 	bl	8005694 <_sbrk_r>
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fb87 	bl	8005694 <_sbrk_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d103      	bne.n	8004f92 <sbrk_aligned+0x26>
 8004f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f8e:	4620      	mov	r0, r4
 8004f90:	bd70      	pop	{r4, r5, r6, pc}
 8004f92:	1cc4      	adds	r4, r0, #3
 8004f94:	f024 0403 	bic.w	r4, r4, #3
 8004f98:	42a0      	cmp	r0, r4
 8004f9a:	d0f8      	beq.n	8004f8e <sbrk_aligned+0x22>
 8004f9c:	1a21      	subs	r1, r4, r0
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 fb78 	bl	8005694 <_sbrk_r>
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d1f2      	bne.n	8004f8e <sbrk_aligned+0x22>
 8004fa8:	e7ef      	b.n	8004f8a <sbrk_aligned+0x1e>
 8004faa:	bf00      	nop
 8004fac:	20000454 	.word	0x20000454

08004fb0 <_malloc_r>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	1ccd      	adds	r5, r1, #3
 8004fb6:	f025 0503 	bic.w	r5, r5, #3
 8004fba:	3508      	adds	r5, #8
 8004fbc:	2d0c      	cmp	r5, #12
 8004fbe:	bf38      	it	cc
 8004fc0:	250c      	movcc	r5, #12
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	4606      	mov	r6, r0
 8004fc6:	db01      	blt.n	8004fcc <_malloc_r+0x1c>
 8004fc8:	42a9      	cmp	r1, r5
 8004fca:	d904      	bls.n	8004fd6 <_malloc_r+0x26>
 8004fcc:	230c      	movs	r3, #12
 8004fce:	6033      	str	r3, [r6, #0]
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80050ac <_malloc_r+0xfc>
 8004fda:	f000 f869 	bl	80050b0 <__malloc_lock>
 8004fde:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe2:	461c      	mov	r4, r3
 8004fe4:	bb44      	cbnz	r4, 8005038 <_malloc_r+0x88>
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7ff ffbf 	bl	8004f6c <sbrk_aligned>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	d158      	bne.n	80050a6 <_malloc_r+0xf6>
 8004ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ff8:	4627      	mov	r7, r4
 8004ffa:	2f00      	cmp	r7, #0
 8004ffc:	d143      	bne.n	8005086 <_malloc_r+0xd6>
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d04b      	beq.n	800509a <_malloc_r+0xea>
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	4639      	mov	r1, r7
 8005006:	4630      	mov	r0, r6
 8005008:	eb04 0903 	add.w	r9, r4, r3
 800500c:	f000 fb42 	bl	8005694 <_sbrk_r>
 8005010:	4581      	cmp	r9, r0
 8005012:	d142      	bne.n	800509a <_malloc_r+0xea>
 8005014:	6821      	ldr	r1, [r4, #0]
 8005016:	1a6d      	subs	r5, r5, r1
 8005018:	4629      	mov	r1, r5
 800501a:	4630      	mov	r0, r6
 800501c:	f7ff ffa6 	bl	8004f6c <sbrk_aligned>
 8005020:	3001      	adds	r0, #1
 8005022:	d03a      	beq.n	800509a <_malloc_r+0xea>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	442b      	add	r3, r5
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	f8d8 3000 	ldr.w	r3, [r8]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	bb62      	cbnz	r2, 800508c <_malloc_r+0xdc>
 8005032:	f8c8 7000 	str.w	r7, [r8]
 8005036:	e00f      	b.n	8005058 <_malloc_r+0xa8>
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	1b52      	subs	r2, r2, r5
 800503c:	d420      	bmi.n	8005080 <_malloc_r+0xd0>
 800503e:	2a0b      	cmp	r2, #11
 8005040:	d917      	bls.n	8005072 <_malloc_r+0xc2>
 8005042:	1961      	adds	r1, r4, r5
 8005044:	42a3      	cmp	r3, r4
 8005046:	6025      	str	r5, [r4, #0]
 8005048:	bf18      	it	ne
 800504a:	6059      	strne	r1, [r3, #4]
 800504c:	6863      	ldr	r3, [r4, #4]
 800504e:	bf08      	it	eq
 8005050:	f8c8 1000 	streq.w	r1, [r8]
 8005054:	5162      	str	r2, [r4, r5]
 8005056:	604b      	str	r3, [r1, #4]
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f82f 	bl	80050bc <__malloc_unlock>
 800505e:	f104 000b 	add.w	r0, r4, #11
 8005062:	1d23      	adds	r3, r4, #4
 8005064:	f020 0007 	bic.w	r0, r0, #7
 8005068:	1ac2      	subs	r2, r0, r3
 800506a:	bf1c      	itt	ne
 800506c:	1a1b      	subne	r3, r3, r0
 800506e:	50a3      	strne	r3, [r4, r2]
 8005070:	e7af      	b.n	8004fd2 <_malloc_r+0x22>
 8005072:	6862      	ldr	r2, [r4, #4]
 8005074:	42a3      	cmp	r3, r4
 8005076:	bf0c      	ite	eq
 8005078:	f8c8 2000 	streq.w	r2, [r8]
 800507c:	605a      	strne	r2, [r3, #4]
 800507e:	e7eb      	b.n	8005058 <_malloc_r+0xa8>
 8005080:	4623      	mov	r3, r4
 8005082:	6864      	ldr	r4, [r4, #4]
 8005084:	e7ae      	b.n	8004fe4 <_malloc_r+0x34>
 8005086:	463c      	mov	r4, r7
 8005088:	687f      	ldr	r7, [r7, #4]
 800508a:	e7b6      	b.n	8004ffa <_malloc_r+0x4a>
 800508c:	461a      	mov	r2, r3
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	42a3      	cmp	r3, r4
 8005092:	d1fb      	bne.n	800508c <_malloc_r+0xdc>
 8005094:	2300      	movs	r3, #0
 8005096:	6053      	str	r3, [r2, #4]
 8005098:	e7de      	b.n	8005058 <_malloc_r+0xa8>
 800509a:	230c      	movs	r3, #12
 800509c:	6033      	str	r3, [r6, #0]
 800509e:	4630      	mov	r0, r6
 80050a0:	f000 f80c 	bl	80050bc <__malloc_unlock>
 80050a4:	e794      	b.n	8004fd0 <_malloc_r+0x20>
 80050a6:	6005      	str	r5, [r0, #0]
 80050a8:	e7d6      	b.n	8005058 <_malloc_r+0xa8>
 80050aa:	bf00      	nop
 80050ac:	20000458 	.word	0x20000458

080050b0 <__malloc_lock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	@ (80050b8 <__malloc_lock+0x8>)
 80050b2:	f7ff bf01 	b.w	8004eb8 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000450 	.word	0x20000450

080050bc <__malloc_unlock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	@ (80050c4 <__malloc_unlock+0x8>)
 80050be:	f7ff befc 	b.w	8004eba <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000450 	.word	0x20000450

080050c8 <__ssputs_r>:
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	688e      	ldr	r6, [r1, #8]
 80050ce:	461f      	mov	r7, r3
 80050d0:	42be      	cmp	r6, r7
 80050d2:	680b      	ldr	r3, [r1, #0]
 80050d4:	4682      	mov	sl, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	4690      	mov	r8, r2
 80050da:	d82d      	bhi.n	8005138 <__ssputs_r+0x70>
 80050dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050e4:	d026      	beq.n	8005134 <__ssputs_r+0x6c>
 80050e6:	6965      	ldr	r5, [r4, #20]
 80050e8:	6909      	ldr	r1, [r1, #16]
 80050ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050ee:	eba3 0901 	sub.w	r9, r3, r1
 80050f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f6:	1c7b      	adds	r3, r7, #1
 80050f8:	444b      	add	r3, r9
 80050fa:	106d      	asrs	r5, r5, #1
 80050fc:	429d      	cmp	r5, r3
 80050fe:	bf38      	it	cc
 8005100:	461d      	movcc	r5, r3
 8005102:	0553      	lsls	r3, r2, #21
 8005104:	d527      	bpl.n	8005156 <__ssputs_r+0x8e>
 8005106:	4629      	mov	r1, r5
 8005108:	f7ff ff52 	bl	8004fb0 <_malloc_r>
 800510c:	4606      	mov	r6, r0
 800510e:	b360      	cbz	r0, 800516a <__ssputs_r+0xa2>
 8005110:	6921      	ldr	r1, [r4, #16]
 8005112:	464a      	mov	r2, r9
 8005114:	f7ff fed2 	bl	8004ebc <memcpy>
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800511e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005122:	81a3      	strh	r3, [r4, #12]
 8005124:	6126      	str	r6, [r4, #16]
 8005126:	6165      	str	r5, [r4, #20]
 8005128:	444e      	add	r6, r9
 800512a:	eba5 0509 	sub.w	r5, r5, r9
 800512e:	6026      	str	r6, [r4, #0]
 8005130:	60a5      	str	r5, [r4, #8]
 8005132:	463e      	mov	r6, r7
 8005134:	42be      	cmp	r6, r7
 8005136:	d900      	bls.n	800513a <__ssputs_r+0x72>
 8005138:	463e      	mov	r6, r7
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	4632      	mov	r2, r6
 800513e:	4641      	mov	r1, r8
 8005140:	f7ff fe74 	bl	8004e2c <memmove>
 8005144:	68a3      	ldr	r3, [r4, #8]
 8005146:	1b9b      	subs	r3, r3, r6
 8005148:	60a3      	str	r3, [r4, #8]
 800514a:	6823      	ldr	r3, [r4, #0]
 800514c:	4433      	add	r3, r6
 800514e:	6023      	str	r3, [r4, #0]
 8005150:	2000      	movs	r0, #0
 8005152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005156:	462a      	mov	r2, r5
 8005158:	f000 faac 	bl	80056b4 <_realloc_r>
 800515c:	4606      	mov	r6, r0
 800515e:	2800      	cmp	r0, #0
 8005160:	d1e0      	bne.n	8005124 <__ssputs_r+0x5c>
 8005162:	6921      	ldr	r1, [r4, #16]
 8005164:	4650      	mov	r0, sl
 8005166:	f7ff feb7 	bl	8004ed8 <_free_r>
 800516a:	230c      	movs	r3, #12
 800516c:	f8ca 3000 	str.w	r3, [sl]
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	e7e9      	b.n	8005152 <__ssputs_r+0x8a>
	...

08005180 <_svfiprintf_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	4698      	mov	r8, r3
 8005186:	898b      	ldrh	r3, [r1, #12]
 8005188:	061b      	lsls	r3, r3, #24
 800518a:	b09d      	sub	sp, #116	@ 0x74
 800518c:	4607      	mov	r7, r0
 800518e:	460d      	mov	r5, r1
 8005190:	4614      	mov	r4, r2
 8005192:	d510      	bpl.n	80051b6 <_svfiprintf_r+0x36>
 8005194:	690b      	ldr	r3, [r1, #16]
 8005196:	b973      	cbnz	r3, 80051b6 <_svfiprintf_r+0x36>
 8005198:	2140      	movs	r1, #64	@ 0x40
 800519a:	f7ff ff09 	bl	8004fb0 <_malloc_r>
 800519e:	6028      	str	r0, [r5, #0]
 80051a0:	6128      	str	r0, [r5, #16]
 80051a2:	b930      	cbnz	r0, 80051b2 <_svfiprintf_r+0x32>
 80051a4:	230c      	movs	r3, #12
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ac:	b01d      	add	sp, #116	@ 0x74
 80051ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b2:	2340      	movs	r3, #64	@ 0x40
 80051b4:	616b      	str	r3, [r5, #20]
 80051b6:	2300      	movs	r3, #0
 80051b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80051ba:	2320      	movs	r3, #32
 80051bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c4:	2330      	movs	r3, #48	@ 0x30
 80051c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005364 <_svfiprintf_r+0x1e4>
 80051ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80051ce:	f04f 0901 	mov.w	r9, #1
 80051d2:	4623      	mov	r3, r4
 80051d4:	469a      	mov	sl, r3
 80051d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051da:	b10a      	cbz	r2, 80051e0 <_svfiprintf_r+0x60>
 80051dc:	2a25      	cmp	r2, #37	@ 0x25
 80051de:	d1f9      	bne.n	80051d4 <_svfiprintf_r+0x54>
 80051e0:	ebba 0b04 	subs.w	fp, sl, r4
 80051e4:	d00b      	beq.n	80051fe <_svfiprintf_r+0x7e>
 80051e6:	465b      	mov	r3, fp
 80051e8:	4622      	mov	r2, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ff6b 	bl	80050c8 <__ssputs_r>
 80051f2:	3001      	adds	r0, #1
 80051f4:	f000 80a7 	beq.w	8005346 <_svfiprintf_r+0x1c6>
 80051f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051fa:	445a      	add	r2, fp
 80051fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80051fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 809f 	beq.w	8005346 <_svfiprintf_r+0x1c6>
 8005208:	2300      	movs	r3, #0
 800520a:	f04f 32ff 	mov.w	r2, #4294967295
 800520e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005212:	f10a 0a01 	add.w	sl, sl, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800521e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005220:	4654      	mov	r4, sl
 8005222:	2205      	movs	r2, #5
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	484e      	ldr	r0, [pc, #312]	@ (8005364 <_svfiprintf_r+0x1e4>)
 800522a:	f7fb f811 	bl	8000250 <memchr>
 800522e:	9a04      	ldr	r2, [sp, #16]
 8005230:	b9d8      	cbnz	r0, 800526a <_svfiprintf_r+0xea>
 8005232:	06d0      	lsls	r0, r2, #27
 8005234:	bf44      	itt	mi
 8005236:	2320      	movmi	r3, #32
 8005238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800523c:	0711      	lsls	r1, r2, #28
 800523e:	bf44      	itt	mi
 8005240:	232b      	movmi	r3, #43	@ 0x2b
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005246:	f89a 3000 	ldrb.w	r3, [sl]
 800524a:	2b2a      	cmp	r3, #42	@ 0x2a
 800524c:	d015      	beq.n	800527a <_svfiprintf_r+0xfa>
 800524e:	9a07      	ldr	r2, [sp, #28]
 8005250:	4654      	mov	r4, sl
 8005252:	2000      	movs	r0, #0
 8005254:	f04f 0c0a 	mov.w	ip, #10
 8005258:	4621      	mov	r1, r4
 800525a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800525e:	3b30      	subs	r3, #48	@ 0x30
 8005260:	2b09      	cmp	r3, #9
 8005262:	d94b      	bls.n	80052fc <_svfiprintf_r+0x17c>
 8005264:	b1b0      	cbz	r0, 8005294 <_svfiprintf_r+0x114>
 8005266:	9207      	str	r2, [sp, #28]
 8005268:	e014      	b.n	8005294 <_svfiprintf_r+0x114>
 800526a:	eba0 0308 	sub.w	r3, r0, r8
 800526e:	fa09 f303 	lsl.w	r3, r9, r3
 8005272:	4313      	orrs	r3, r2
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	46a2      	mov	sl, r4
 8005278:	e7d2      	b.n	8005220 <_svfiprintf_r+0xa0>
 800527a:	9b03      	ldr	r3, [sp, #12]
 800527c:	1d19      	adds	r1, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	9103      	str	r1, [sp, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bfbb      	ittet	lt
 8005286:	425b      	neglt	r3, r3
 8005288:	f042 0202 	orrlt.w	r2, r2, #2
 800528c:	9307      	strge	r3, [sp, #28]
 800528e:	9307      	strlt	r3, [sp, #28]
 8005290:	bfb8      	it	lt
 8005292:	9204      	strlt	r2, [sp, #16]
 8005294:	7823      	ldrb	r3, [r4, #0]
 8005296:	2b2e      	cmp	r3, #46	@ 0x2e
 8005298:	d10a      	bne.n	80052b0 <_svfiprintf_r+0x130>
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	2b2a      	cmp	r3, #42	@ 0x2a
 800529e:	d132      	bne.n	8005306 <_svfiprintf_r+0x186>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	1d1a      	adds	r2, r3, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	9203      	str	r2, [sp, #12]
 80052a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052ac:	3402      	adds	r4, #2
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005374 <_svfiprintf_r+0x1f4>
 80052b4:	7821      	ldrb	r1, [r4, #0]
 80052b6:	2203      	movs	r2, #3
 80052b8:	4650      	mov	r0, sl
 80052ba:	f7fa ffc9 	bl	8000250 <memchr>
 80052be:	b138      	cbz	r0, 80052d0 <_svfiprintf_r+0x150>
 80052c0:	9b04      	ldr	r3, [sp, #16]
 80052c2:	eba0 000a 	sub.w	r0, r0, sl
 80052c6:	2240      	movs	r2, #64	@ 0x40
 80052c8:	4082      	lsls	r2, r0
 80052ca:	4313      	orrs	r3, r2
 80052cc:	3401      	adds	r4, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052d4:	4824      	ldr	r0, [pc, #144]	@ (8005368 <_svfiprintf_r+0x1e8>)
 80052d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052da:	2206      	movs	r2, #6
 80052dc:	f7fa ffb8 	bl	8000250 <memchr>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	d036      	beq.n	8005352 <_svfiprintf_r+0x1d2>
 80052e4:	4b21      	ldr	r3, [pc, #132]	@ (800536c <_svfiprintf_r+0x1ec>)
 80052e6:	bb1b      	cbnz	r3, 8005330 <_svfiprintf_r+0x1b0>
 80052e8:	9b03      	ldr	r3, [sp, #12]
 80052ea:	3307      	adds	r3, #7
 80052ec:	f023 0307 	bic.w	r3, r3, #7
 80052f0:	3308      	adds	r3, #8
 80052f2:	9303      	str	r3, [sp, #12]
 80052f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052f6:	4433      	add	r3, r6
 80052f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052fa:	e76a      	b.n	80051d2 <_svfiprintf_r+0x52>
 80052fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005300:	460c      	mov	r4, r1
 8005302:	2001      	movs	r0, #1
 8005304:	e7a8      	b.n	8005258 <_svfiprintf_r+0xd8>
 8005306:	2300      	movs	r3, #0
 8005308:	3401      	adds	r4, #1
 800530a:	9305      	str	r3, [sp, #20]
 800530c:	4619      	mov	r1, r3
 800530e:	f04f 0c0a 	mov.w	ip, #10
 8005312:	4620      	mov	r0, r4
 8005314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005318:	3a30      	subs	r2, #48	@ 0x30
 800531a:	2a09      	cmp	r2, #9
 800531c:	d903      	bls.n	8005326 <_svfiprintf_r+0x1a6>
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0c6      	beq.n	80052b0 <_svfiprintf_r+0x130>
 8005322:	9105      	str	r1, [sp, #20]
 8005324:	e7c4      	b.n	80052b0 <_svfiprintf_r+0x130>
 8005326:	fb0c 2101 	mla	r1, ip, r1, r2
 800532a:	4604      	mov	r4, r0
 800532c:	2301      	movs	r3, #1
 800532e:	e7f0      	b.n	8005312 <_svfiprintf_r+0x192>
 8005330:	ab03      	add	r3, sp, #12
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	462a      	mov	r2, r5
 8005336:	4b0e      	ldr	r3, [pc, #56]	@ (8005370 <_svfiprintf_r+0x1f0>)
 8005338:	a904      	add	r1, sp, #16
 800533a:	4638      	mov	r0, r7
 800533c:	f3af 8000 	nop.w
 8005340:	1c42      	adds	r2, r0, #1
 8005342:	4606      	mov	r6, r0
 8005344:	d1d6      	bne.n	80052f4 <_svfiprintf_r+0x174>
 8005346:	89ab      	ldrh	r3, [r5, #12]
 8005348:	065b      	lsls	r3, r3, #25
 800534a:	f53f af2d 	bmi.w	80051a8 <_svfiprintf_r+0x28>
 800534e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005350:	e72c      	b.n	80051ac <_svfiprintf_r+0x2c>
 8005352:	ab03      	add	r3, sp, #12
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	462a      	mov	r2, r5
 8005358:	4b05      	ldr	r3, [pc, #20]	@ (8005370 <_svfiprintf_r+0x1f0>)
 800535a:	a904      	add	r1, sp, #16
 800535c:	4638      	mov	r0, r7
 800535e:	f000 f879 	bl	8005454 <_printf_i>
 8005362:	e7ed      	b.n	8005340 <_svfiprintf_r+0x1c0>
 8005364:	08005760 	.word	0x08005760
 8005368:	0800576a 	.word	0x0800576a
 800536c:	00000000 	.word	0x00000000
 8005370:	080050c9 	.word	0x080050c9
 8005374:	08005766 	.word	0x08005766

08005378 <_printf_common>:
 8005378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	4616      	mov	r6, r2
 800537e:	4698      	mov	r8, r3
 8005380:	688a      	ldr	r2, [r1, #8]
 8005382:	690b      	ldr	r3, [r1, #16]
 8005384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005388:	4293      	cmp	r3, r2
 800538a:	bfb8      	it	lt
 800538c:	4613      	movlt	r3, r2
 800538e:	6033      	str	r3, [r6, #0]
 8005390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005394:	4607      	mov	r7, r0
 8005396:	460c      	mov	r4, r1
 8005398:	b10a      	cbz	r2, 800539e <_printf_common+0x26>
 800539a:	3301      	adds	r3, #1
 800539c:	6033      	str	r3, [r6, #0]
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	0699      	lsls	r1, r3, #26
 80053a2:	bf42      	ittt	mi
 80053a4:	6833      	ldrmi	r3, [r6, #0]
 80053a6:	3302      	addmi	r3, #2
 80053a8:	6033      	strmi	r3, [r6, #0]
 80053aa:	6825      	ldr	r5, [r4, #0]
 80053ac:	f015 0506 	ands.w	r5, r5, #6
 80053b0:	d106      	bne.n	80053c0 <_printf_common+0x48>
 80053b2:	f104 0a19 	add.w	sl, r4, #25
 80053b6:	68e3      	ldr	r3, [r4, #12]
 80053b8:	6832      	ldr	r2, [r6, #0]
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	42ab      	cmp	r3, r5
 80053be:	dc26      	bgt.n	800540e <_printf_common+0x96>
 80053c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	3b00      	subs	r3, #0
 80053c8:	bf18      	it	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	0692      	lsls	r2, r2, #26
 80053ce:	d42b      	bmi.n	8005428 <_printf_common+0xb0>
 80053d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053d4:	4641      	mov	r1, r8
 80053d6:	4638      	mov	r0, r7
 80053d8:	47c8      	blx	r9
 80053da:	3001      	adds	r0, #1
 80053dc:	d01e      	beq.n	800541c <_printf_common+0xa4>
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	6922      	ldr	r2, [r4, #16]
 80053e2:	f003 0306 	and.w	r3, r3, #6
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	bf02      	ittt	eq
 80053ea:	68e5      	ldreq	r5, [r4, #12]
 80053ec:	6833      	ldreq	r3, [r6, #0]
 80053ee:	1aed      	subeq	r5, r5, r3
 80053f0:	68a3      	ldr	r3, [r4, #8]
 80053f2:	bf0c      	ite	eq
 80053f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f8:	2500      	movne	r5, #0
 80053fa:	4293      	cmp	r3, r2
 80053fc:	bfc4      	itt	gt
 80053fe:	1a9b      	subgt	r3, r3, r2
 8005400:	18ed      	addgt	r5, r5, r3
 8005402:	2600      	movs	r6, #0
 8005404:	341a      	adds	r4, #26
 8005406:	42b5      	cmp	r5, r6
 8005408:	d11a      	bne.n	8005440 <_printf_common+0xc8>
 800540a:	2000      	movs	r0, #0
 800540c:	e008      	b.n	8005420 <_printf_common+0xa8>
 800540e:	2301      	movs	r3, #1
 8005410:	4652      	mov	r2, sl
 8005412:	4641      	mov	r1, r8
 8005414:	4638      	mov	r0, r7
 8005416:	47c8      	blx	r9
 8005418:	3001      	adds	r0, #1
 800541a:	d103      	bne.n	8005424 <_printf_common+0xac>
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005424:	3501      	adds	r5, #1
 8005426:	e7c6      	b.n	80053b6 <_printf_common+0x3e>
 8005428:	18e1      	adds	r1, r4, r3
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	2030      	movs	r0, #48	@ 0x30
 800542e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005432:	4422      	add	r2, r4
 8005434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800543c:	3302      	adds	r3, #2
 800543e:	e7c7      	b.n	80053d0 <_printf_common+0x58>
 8005440:	2301      	movs	r3, #1
 8005442:	4622      	mov	r2, r4
 8005444:	4641      	mov	r1, r8
 8005446:	4638      	mov	r0, r7
 8005448:	47c8      	blx	r9
 800544a:	3001      	adds	r0, #1
 800544c:	d0e6      	beq.n	800541c <_printf_common+0xa4>
 800544e:	3601      	adds	r6, #1
 8005450:	e7d9      	b.n	8005406 <_printf_common+0x8e>
	...

08005454 <_printf_i>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	7e0f      	ldrb	r7, [r1, #24]
 800545a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800545c:	2f78      	cmp	r7, #120	@ 0x78
 800545e:	4691      	mov	r9, r2
 8005460:	4680      	mov	r8, r0
 8005462:	460c      	mov	r4, r1
 8005464:	469a      	mov	sl, r3
 8005466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800546a:	d807      	bhi.n	800547c <_printf_i+0x28>
 800546c:	2f62      	cmp	r7, #98	@ 0x62
 800546e:	d80a      	bhi.n	8005486 <_printf_i+0x32>
 8005470:	2f00      	cmp	r7, #0
 8005472:	f000 80d2 	beq.w	800561a <_printf_i+0x1c6>
 8005476:	2f58      	cmp	r7, #88	@ 0x58
 8005478:	f000 80b9 	beq.w	80055ee <_printf_i+0x19a>
 800547c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005484:	e03a      	b.n	80054fc <_printf_i+0xa8>
 8005486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800548a:	2b15      	cmp	r3, #21
 800548c:	d8f6      	bhi.n	800547c <_printf_i+0x28>
 800548e:	a101      	add	r1, pc, #4	@ (adr r1, 8005494 <_printf_i+0x40>)
 8005490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005494:	080054ed 	.word	0x080054ed
 8005498:	08005501 	.word	0x08005501
 800549c:	0800547d 	.word	0x0800547d
 80054a0:	0800547d 	.word	0x0800547d
 80054a4:	0800547d 	.word	0x0800547d
 80054a8:	0800547d 	.word	0x0800547d
 80054ac:	08005501 	.word	0x08005501
 80054b0:	0800547d 	.word	0x0800547d
 80054b4:	0800547d 	.word	0x0800547d
 80054b8:	0800547d 	.word	0x0800547d
 80054bc:	0800547d 	.word	0x0800547d
 80054c0:	08005601 	.word	0x08005601
 80054c4:	0800552b 	.word	0x0800552b
 80054c8:	080055bb 	.word	0x080055bb
 80054cc:	0800547d 	.word	0x0800547d
 80054d0:	0800547d 	.word	0x0800547d
 80054d4:	08005623 	.word	0x08005623
 80054d8:	0800547d 	.word	0x0800547d
 80054dc:	0800552b 	.word	0x0800552b
 80054e0:	0800547d 	.word	0x0800547d
 80054e4:	0800547d 	.word	0x0800547d
 80054e8:	080055c3 	.word	0x080055c3
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6032      	str	r2, [r6, #0]
 80054f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054fc:	2301      	movs	r3, #1
 80054fe:	e09d      	b.n	800563c <_printf_i+0x1e8>
 8005500:	6833      	ldr	r3, [r6, #0]
 8005502:	6820      	ldr	r0, [r4, #0]
 8005504:	1d19      	adds	r1, r3, #4
 8005506:	6031      	str	r1, [r6, #0]
 8005508:	0606      	lsls	r6, r0, #24
 800550a:	d501      	bpl.n	8005510 <_printf_i+0xbc>
 800550c:	681d      	ldr	r5, [r3, #0]
 800550e:	e003      	b.n	8005518 <_printf_i+0xc4>
 8005510:	0645      	lsls	r5, r0, #25
 8005512:	d5fb      	bpl.n	800550c <_printf_i+0xb8>
 8005514:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005518:	2d00      	cmp	r5, #0
 800551a:	da03      	bge.n	8005524 <_printf_i+0xd0>
 800551c:	232d      	movs	r3, #45	@ 0x2d
 800551e:	426d      	negs	r5, r5
 8005520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005524:	4859      	ldr	r0, [pc, #356]	@ (800568c <_printf_i+0x238>)
 8005526:	230a      	movs	r3, #10
 8005528:	e011      	b.n	800554e <_printf_i+0xfa>
 800552a:	6821      	ldr	r1, [r4, #0]
 800552c:	6833      	ldr	r3, [r6, #0]
 800552e:	0608      	lsls	r0, r1, #24
 8005530:	f853 5b04 	ldr.w	r5, [r3], #4
 8005534:	d402      	bmi.n	800553c <_printf_i+0xe8>
 8005536:	0649      	lsls	r1, r1, #25
 8005538:	bf48      	it	mi
 800553a:	b2ad      	uxthmi	r5, r5
 800553c:	2f6f      	cmp	r7, #111	@ 0x6f
 800553e:	4853      	ldr	r0, [pc, #332]	@ (800568c <_printf_i+0x238>)
 8005540:	6033      	str	r3, [r6, #0]
 8005542:	bf14      	ite	ne
 8005544:	230a      	movne	r3, #10
 8005546:	2308      	moveq	r3, #8
 8005548:	2100      	movs	r1, #0
 800554a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800554e:	6866      	ldr	r6, [r4, #4]
 8005550:	60a6      	str	r6, [r4, #8]
 8005552:	2e00      	cmp	r6, #0
 8005554:	bfa2      	ittt	ge
 8005556:	6821      	ldrge	r1, [r4, #0]
 8005558:	f021 0104 	bicge.w	r1, r1, #4
 800555c:	6021      	strge	r1, [r4, #0]
 800555e:	b90d      	cbnz	r5, 8005564 <_printf_i+0x110>
 8005560:	2e00      	cmp	r6, #0
 8005562:	d04b      	beq.n	80055fc <_printf_i+0x1a8>
 8005564:	4616      	mov	r6, r2
 8005566:	fbb5 f1f3 	udiv	r1, r5, r3
 800556a:	fb03 5711 	mls	r7, r3, r1, r5
 800556e:	5dc7      	ldrb	r7, [r0, r7]
 8005570:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005574:	462f      	mov	r7, r5
 8005576:	42bb      	cmp	r3, r7
 8005578:	460d      	mov	r5, r1
 800557a:	d9f4      	bls.n	8005566 <_printf_i+0x112>
 800557c:	2b08      	cmp	r3, #8
 800557e:	d10b      	bne.n	8005598 <_printf_i+0x144>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	07df      	lsls	r7, r3, #31
 8005584:	d508      	bpl.n	8005598 <_printf_i+0x144>
 8005586:	6923      	ldr	r3, [r4, #16]
 8005588:	6861      	ldr	r1, [r4, #4]
 800558a:	4299      	cmp	r1, r3
 800558c:	bfde      	ittt	le
 800558e:	2330      	movle	r3, #48	@ 0x30
 8005590:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005594:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005598:	1b92      	subs	r2, r2, r6
 800559a:	6122      	str	r2, [r4, #16]
 800559c:	f8cd a000 	str.w	sl, [sp]
 80055a0:	464b      	mov	r3, r9
 80055a2:	aa03      	add	r2, sp, #12
 80055a4:	4621      	mov	r1, r4
 80055a6:	4640      	mov	r0, r8
 80055a8:	f7ff fee6 	bl	8005378 <_printf_common>
 80055ac:	3001      	adds	r0, #1
 80055ae:	d14a      	bne.n	8005646 <_printf_i+0x1f2>
 80055b0:	f04f 30ff 	mov.w	r0, #4294967295
 80055b4:	b004      	add	sp, #16
 80055b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	f043 0320 	orr.w	r3, r3, #32
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	4833      	ldr	r0, [pc, #204]	@ (8005690 <_printf_i+0x23c>)
 80055c4:	2778      	movs	r7, #120	@ 0x78
 80055c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	6831      	ldr	r1, [r6, #0]
 80055ce:	061f      	lsls	r7, r3, #24
 80055d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80055d4:	d402      	bmi.n	80055dc <_printf_i+0x188>
 80055d6:	065f      	lsls	r7, r3, #25
 80055d8:	bf48      	it	mi
 80055da:	b2ad      	uxthmi	r5, r5
 80055dc:	6031      	str	r1, [r6, #0]
 80055de:	07d9      	lsls	r1, r3, #31
 80055e0:	bf44      	itt	mi
 80055e2:	f043 0320 	orrmi.w	r3, r3, #32
 80055e6:	6023      	strmi	r3, [r4, #0]
 80055e8:	b11d      	cbz	r5, 80055f2 <_printf_i+0x19e>
 80055ea:	2310      	movs	r3, #16
 80055ec:	e7ac      	b.n	8005548 <_printf_i+0xf4>
 80055ee:	4827      	ldr	r0, [pc, #156]	@ (800568c <_printf_i+0x238>)
 80055f0:	e7e9      	b.n	80055c6 <_printf_i+0x172>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	f023 0320 	bic.w	r3, r3, #32
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	e7f6      	b.n	80055ea <_printf_i+0x196>
 80055fc:	4616      	mov	r6, r2
 80055fe:	e7bd      	b.n	800557c <_printf_i+0x128>
 8005600:	6833      	ldr	r3, [r6, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	6961      	ldr	r1, [r4, #20]
 8005606:	1d18      	adds	r0, r3, #4
 8005608:	6030      	str	r0, [r6, #0]
 800560a:	062e      	lsls	r6, r5, #24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	d501      	bpl.n	8005614 <_printf_i+0x1c0>
 8005610:	6019      	str	r1, [r3, #0]
 8005612:	e002      	b.n	800561a <_printf_i+0x1c6>
 8005614:	0668      	lsls	r0, r5, #25
 8005616:	d5fb      	bpl.n	8005610 <_printf_i+0x1bc>
 8005618:	8019      	strh	r1, [r3, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	6123      	str	r3, [r4, #16]
 800561e:	4616      	mov	r6, r2
 8005620:	e7bc      	b.n	800559c <_printf_i+0x148>
 8005622:	6833      	ldr	r3, [r6, #0]
 8005624:	1d1a      	adds	r2, r3, #4
 8005626:	6032      	str	r2, [r6, #0]
 8005628:	681e      	ldr	r6, [r3, #0]
 800562a:	6862      	ldr	r2, [r4, #4]
 800562c:	2100      	movs	r1, #0
 800562e:	4630      	mov	r0, r6
 8005630:	f7fa fe0e 	bl	8000250 <memchr>
 8005634:	b108      	cbz	r0, 800563a <_printf_i+0x1e6>
 8005636:	1b80      	subs	r0, r0, r6
 8005638:	6060      	str	r0, [r4, #4]
 800563a:	6863      	ldr	r3, [r4, #4]
 800563c:	6123      	str	r3, [r4, #16]
 800563e:	2300      	movs	r3, #0
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005644:	e7aa      	b.n	800559c <_printf_i+0x148>
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	4632      	mov	r2, r6
 800564a:	4649      	mov	r1, r9
 800564c:	4640      	mov	r0, r8
 800564e:	47d0      	blx	sl
 8005650:	3001      	adds	r0, #1
 8005652:	d0ad      	beq.n	80055b0 <_printf_i+0x15c>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	079b      	lsls	r3, r3, #30
 8005658:	d413      	bmi.n	8005682 <_printf_i+0x22e>
 800565a:	68e0      	ldr	r0, [r4, #12]
 800565c:	9b03      	ldr	r3, [sp, #12]
 800565e:	4298      	cmp	r0, r3
 8005660:	bfb8      	it	lt
 8005662:	4618      	movlt	r0, r3
 8005664:	e7a6      	b.n	80055b4 <_printf_i+0x160>
 8005666:	2301      	movs	r3, #1
 8005668:	4632      	mov	r2, r6
 800566a:	4649      	mov	r1, r9
 800566c:	4640      	mov	r0, r8
 800566e:	47d0      	blx	sl
 8005670:	3001      	adds	r0, #1
 8005672:	d09d      	beq.n	80055b0 <_printf_i+0x15c>
 8005674:	3501      	adds	r5, #1
 8005676:	68e3      	ldr	r3, [r4, #12]
 8005678:	9903      	ldr	r1, [sp, #12]
 800567a:	1a5b      	subs	r3, r3, r1
 800567c:	42ab      	cmp	r3, r5
 800567e:	dcf2      	bgt.n	8005666 <_printf_i+0x212>
 8005680:	e7eb      	b.n	800565a <_printf_i+0x206>
 8005682:	2500      	movs	r5, #0
 8005684:	f104 0619 	add.w	r6, r4, #25
 8005688:	e7f5      	b.n	8005676 <_printf_i+0x222>
 800568a:	bf00      	nop
 800568c:	08005771 	.word	0x08005771
 8005690:	08005782 	.word	0x08005782

08005694 <_sbrk_r>:
 8005694:	b538      	push	{r3, r4, r5, lr}
 8005696:	4d06      	ldr	r5, [pc, #24]	@ (80056b0 <_sbrk_r+0x1c>)
 8005698:	2300      	movs	r3, #0
 800569a:	4604      	mov	r4, r0
 800569c:	4608      	mov	r0, r1
 800569e:	602b      	str	r3, [r5, #0]
 80056a0:	f7fb fb44 	bl	8000d2c <_sbrk>
 80056a4:	1c43      	adds	r3, r0, #1
 80056a6:	d102      	bne.n	80056ae <_sbrk_r+0x1a>
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	b103      	cbz	r3, 80056ae <_sbrk_r+0x1a>
 80056ac:	6023      	str	r3, [r4, #0]
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
 80056b0:	2000044c 	.word	0x2000044c

080056b4 <_realloc_r>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	4680      	mov	r8, r0
 80056ba:	4615      	mov	r5, r2
 80056bc:	460c      	mov	r4, r1
 80056be:	b921      	cbnz	r1, 80056ca <_realloc_r+0x16>
 80056c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	4611      	mov	r1, r2
 80056c6:	f7ff bc73 	b.w	8004fb0 <_malloc_r>
 80056ca:	b92a      	cbnz	r2, 80056d8 <_realloc_r+0x24>
 80056cc:	f7ff fc04 	bl	8004ed8 <_free_r>
 80056d0:	2400      	movs	r4, #0
 80056d2:	4620      	mov	r0, r4
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d8:	f000 f81a 	bl	8005710 <_malloc_usable_size_r>
 80056dc:	4285      	cmp	r5, r0
 80056de:	4606      	mov	r6, r0
 80056e0:	d802      	bhi.n	80056e8 <_realloc_r+0x34>
 80056e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056e6:	d8f4      	bhi.n	80056d2 <_realloc_r+0x1e>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fc60 	bl	8004fb0 <_malloc_r>
 80056f0:	4607      	mov	r7, r0
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0ec      	beq.n	80056d0 <_realloc_r+0x1c>
 80056f6:	42b5      	cmp	r5, r6
 80056f8:	462a      	mov	r2, r5
 80056fa:	4621      	mov	r1, r4
 80056fc:	bf28      	it	cs
 80056fe:	4632      	movcs	r2, r6
 8005700:	f7ff fbdc 	bl	8004ebc <memcpy>
 8005704:	4621      	mov	r1, r4
 8005706:	4640      	mov	r0, r8
 8005708:	f7ff fbe6 	bl	8004ed8 <_free_r>
 800570c:	463c      	mov	r4, r7
 800570e:	e7e0      	b.n	80056d2 <_realloc_r+0x1e>

08005710 <_malloc_usable_size_r>:
 8005710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005714:	1f18      	subs	r0, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfbc      	itt	lt
 800571a:	580b      	ldrlt	r3, [r1, r0]
 800571c:	18c0      	addlt	r0, r0, r3
 800571e:	4770      	bx	lr

08005720 <_init>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr

0800572c <_fini>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr
