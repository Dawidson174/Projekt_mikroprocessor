
Project_TCCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012478  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ff0  08012678  08012678  00013678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016668  08016668  000181cc  2**0
                  CONTENTS
  4 .ARM          00000008  08016668  08016668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016670  08016670  000181cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016670  08016670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016674  08016674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08016678  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08016704  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080167a4  0001812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008168  200001cc  08016844  000181cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20008334  08016844  00018334  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000181cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c1cb  00000000  00000000  000181fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000548c  00000000  00000000  000343c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00039858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001018  00000000  00000000  0003aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00034423  00000000  00000000  0003bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024e5e  00000000  00000000  000700db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010643b  00000000  00000000  00094f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0019b374  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059e0  00000000  00000000  0019b3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000090  00000000  00000000  001a0d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001cc 	.word	0x200001cc
 800021c:	00000000 	.word	0x00000000
 8000220:	08012660 	.word	0x08012660

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d0 	.word	0x200001d0
 800023c:	08012660 	.word	0x08012660

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fbff 	bl	8000e06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f812 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f87e 	bl	800070c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000610:	f002 fe9a 	bl	8003348 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8000614:	f004 f8e0 	bl	80047d8 <httpd_init>
  HAL_Delay(5000);       // Wait for DHCP to assign an IP (if using DHCP)
 8000618:	f241 3088 	movw	r0, #5000	@ 0x1388
 800061c:	f000 fc50 	bl	8000ec0 <HAL_Delay>
  print_ip_address();    // Print the IP address to the console
 8000620:	f000 f948 	bl	80008b4 <print_ip_address>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process(); //obsługa stosu lwIP
 8000624:	f002 fee2 	bl	80033ec <MX_LWIP_Process>
	  sys_check_timeouts();     // Process LWIP timeouts
 8000628:	f00c f88e 	bl	800c748 <sys_check_timeouts>
	  MX_LWIP_Process(); //obsługa stosu lwIP
 800062c:	bf00      	nop
 800062e:	e7f9      	b.n	8000624 <main+0x24>

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	@ 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	@ 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f011 f9de 	bl	8011a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <SystemClock_Config+0xd4>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <SystemClock_Config+0xd4>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <SystemClock_Config+0xd4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <SystemClock_Config+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <SystemClock_Config+0xd8>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <SystemClock_Config+0xd8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800069c:	23d8      	movs	r3, #216	@ 0xd8
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f99f 	bl	80029f4 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006bc:	f000 f934 	bl	8000928 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c0:	f002 f948 	bl	8002954 <HAL_PWREx_EnableOverDrive>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ca:	f000 f92d 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2107      	movs	r1, #7
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fc2f 	bl	8002f50 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006f8:	f000 f916 	bl	8000928 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	@ 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	@ 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b5e      	ldr	r3, [pc, #376]	@ (800089c <MX_GPIO_Init+0x190>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a5d      	ldr	r2, [pc, #372]	@ (800089c <MX_GPIO_Init+0x190>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b5b      	ldr	r3, [pc, #364]	@ (800089c <MX_GPIO_Init+0x190>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	61bb      	str	r3, [r7, #24]
 8000738:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b58      	ldr	r3, [pc, #352]	@ (800089c <MX_GPIO_Init+0x190>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a57      	ldr	r2, [pc, #348]	@ (800089c <MX_GPIO_Init+0x190>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b55      	ldr	r3, [pc, #340]	@ (800089c <MX_GPIO_Init+0x190>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b52      	ldr	r3, [pc, #328]	@ (800089c <MX_GPIO_Init+0x190>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a51      	ldr	r2, [pc, #324]	@ (800089c <MX_GPIO_Init+0x190>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b4f      	ldr	r3, [pc, #316]	@ (800089c <MX_GPIO_Init+0x190>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b4c      	ldr	r3, [pc, #304]	@ (800089c <MX_GPIO_Init+0x190>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a4b      	ldr	r2, [pc, #300]	@ (800089c <MX_GPIO_Init+0x190>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b49      	ldr	r3, [pc, #292]	@ (800089c <MX_GPIO_Init+0x190>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000782:	4b46      	ldr	r3, [pc, #280]	@ (800089c <MX_GPIO_Init+0x190>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a45      	ldr	r2, [pc, #276]	@ (800089c <MX_GPIO_Init+0x190>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b43      	ldr	r3, [pc, #268]	@ (800089c <MX_GPIO_Init+0x190>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	4b40      	ldr	r3, [pc, #256]	@ (800089c <MX_GPIO_Init+0x190>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a3f      	ldr	r2, [pc, #252]	@ (800089c <MX_GPIO_Init+0x190>)
 80007a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <MX_GPIO_Init+0x190>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007b8:	4839      	ldr	r0, [pc, #228]	@ (80008a0 <MX_GPIO_Init+0x194>)
 80007ba:	f002 f8b1 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2140      	movs	r1, #64	@ 0x40
 80007c2:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <MX_GPIO_Init+0x198>)
 80007c4:	f002 f8ac 	bl	8002920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	4832      	ldr	r0, [pc, #200]	@ (80008a8 <MX_GPIO_Init+0x19c>)
 80007e0:	f001 fef2 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e4:	f244 0381 	movw	r3, #16513	@ 0x4081
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4828      	ldr	r0, [pc, #160]	@ (80008a0 <MX_GPIO_Init+0x194>)
 80007fe:	f001 fee3 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000802:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000814:	2307      	movs	r3, #7
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4823      	ldr	r0, [pc, #140]	@ (80008ac <MX_GPIO_Init+0x1a0>)
 8000820:	f001 fed2 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000824:	2340      	movs	r3, #64	@ 0x40
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	481a      	ldr	r0, [pc, #104]	@ (80008a4 <MX_GPIO_Init+0x198>)
 800083c:	f001 fec4 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000840:	2380      	movs	r3, #128	@ 0x80
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <MX_GPIO_Init+0x198>)
 8000854:	f001 feb8 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000858:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086a:	230a      	movs	r3, #10
 800086c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_GPIO_Init+0x1a4>)
 8000876:	f001 fea7 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800087a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4808      	ldr	r0, [pc, #32]	@ (80008b0 <MX_GPIO_Init+0x1a4>)
 8000890:	f001 fe9a 	bl	80025c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3730      	adds	r7, #48	@ 0x30
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40021800 	.word	0x40021800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	40020000 	.word	0x40020000

080008b4 <print_ip_address>:
    {
        HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET); // Wyłącz LED
    }
}

void print_ip_address(void) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
    struct netif *netif = netif_default; // Get the default network interface
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <print_ip_address+0x60>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	607b      	str	r3, [r7, #4]
    if (netif != NULL) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d01e      	beq.n	8000904 <print_ip_address+0x50>
        printf("IP Address: %s\n", ip4addr_ntoa(netif_ip4_addr(netif)));
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3304      	adds	r3, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00f fe9c 	bl	8010608 <ip4addr_ntoa>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	@ (8000918 <print_ip_address+0x64>)
 80008d6:	f010 ff3b 	bl	8011750 <iprintf>
        printf("Netmask: %s\n", ip4addr_ntoa(netif_ip4_netmask(netif)));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3308      	adds	r3, #8
 80008de:	4618      	mov	r0, r3
 80008e0:	f00f fe92 	bl	8010608 <ip4addr_ntoa>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <print_ip_address+0x68>)
 80008ea:	f010 ff31 	bl	8011750 <iprintf>
        printf("Gateway: %s\n", ip4addr_ntoa(netif_ip4_gw(netif)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	330c      	adds	r3, #12
 80008f2:	4618      	mov	r0, r3
 80008f4:	f00f fe88 	bl	8010608 <ip4addr_ntoa>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <print_ip_address+0x6c>)
 80008fe:	f010 ff27 	bl	8011750 <iprintf>
    } else {
        printf("Network interface not initialized!\n");
    }
}
 8000902:	e002      	b.n	800090a <print_ip_address+0x56>
        printf("Network interface not initialized!\n");
 8000904:	4807      	ldr	r0, [pc, #28]	@ (8000924 <print_ip_address+0x70>)
 8000906:	f010 ff8b 	bl	8011820 <puts>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20008040 	.word	0x20008040
 8000918:	08012680 	.word	0x08012680
 800091c:	08012690 	.word	0x08012690
 8000920:	080126a0 	.word	0x080126a0
 8000924:	080126b0 	.word	0x080126b0

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_MspInit+0x44>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x44>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x44>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x44>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <MemManage_Handler+0x4>

08000994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d2:	f000 fa55 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009e0:	4802      	ldr	r0, [pc, #8]	@ (80009ec <ETH_IRQHandler+0x10>)
 80009e2:	f000 ff05 	bl	80017f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20004bc4 	.word	0x20004bc4

080009f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return 1;
 80009f4:	2301      	movs	r3, #1
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_kill>:

int _kill(int pid, int sig)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <_kill+0x20>)
 8000a0c:	2216      	movs	r2, #22
 8000a0e:	601a      	str	r2, [r3, #0]
  return -1;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	20008324 	.word	0x20008324

08000a24 <_exit>:

void _exit (int status)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff ffe5 	bl	8000a00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a36:	bf00      	nop
 8000a38:	e7fd      	b.n	8000a36 <_exit+0x12>

08000a3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e00a      	b.n	8000a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4c:	f3af 8000 	nop.w
 8000a50:	4601      	mov	r1, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbf0      	blt.n	8000a4c <_read+0x12>
  }

  return len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e009      	b.n	8000a9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	60ba      	str	r2, [r7, #8]
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697a      	ldr	r2, [r7, #20]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbf1      	blt.n	8000a86 <_write+0x12>
  }
  return len;
 8000aa2:	687b      	ldr	r3, [r7, #4]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_close>:

int _close(int file)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_isatty>:

int _isatty(int file)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aec:	2301      	movs	r3, #1
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	@ (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d205      	bcs.n	8000b50 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <_sbrk+0x6c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b08      	ldr	r3, [pc, #32]	@ (8000b78 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	371c      	adds	r7, #28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20080000 	.word	0x20080000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	200001e8 	.word	0x200001e8
 8000b7c:	20008338 	.word	0x20008338
 8000b80:	20008324 	.word	0x20008324

08000b84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000be0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bac:	f7ff ffea 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb8:	e002      	b.n	8000bc0 <LoopCopyDataInit>

08000bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bbe:	3304      	adds	r3, #4

08000bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc4:	d3f9      	bcc.n	8000bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bcc:	e001      	b.n	8000bd2 <LoopFillZerobss>

08000bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd0:	3204      	adds	r2, #4

08000bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd4:	d3fb      	bcc.n	8000bce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f010 ff81 	bl	8011adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fd11 	bl	8000600 <main>
  bx  lr    
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000bec:	08016678 	.word	0x08016678
  ldr r2, =_sbss
 8000bf0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000bf4:	20008334 	.word	0x20008334

08000bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>

08000bfa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00b      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d007      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <LAN8742_RegisterBusIO+0x28>
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	e014      	b.n	8000c52 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b086      	sub	sp, #24
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d139      	bne.n	8000cee <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e01c      	b.n	8000cce <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	2112      	movs	r1, #18
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	4798      	blx	r3
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da03      	bge.n	8000cb0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000ca8:	f06f 0304 	mvn.w	r3, #4
 8000cac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000cae:	e00b      	b.n	8000cc8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 031f 	and.w	r3, r3, #31
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d105      	bne.n	8000cc8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
         break;
 8000cc6:	e005      	b.n	8000cd4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2b1f      	cmp	r3, #31
 8000cd2:	d9df      	bls.n	8000c94 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b1f      	cmp	r3, #31
 8000cda:	d902      	bls.n	8000ce2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000cdc:	f06f 0302 	mvn.w	r3, #2
 8000ce0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000cee:	693b      	ldr	r3, [r7, #16]
 }
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	695b      	ldr	r3, [r3, #20]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6810      	ldr	r0, [r2, #0]
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	2101      	movs	r1, #1
 8000d12:	4798      	blx	r3
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	da02      	bge.n	8000d20 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d1a:	f06f 0304 	mvn.w	r3, #4
 8000d1e:	e06e      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6810      	ldr	r0, [r2, #0]
 8000d28:	f107 020c 	add.w	r2, r7, #12
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	4798      	blx	r3
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da02      	bge.n	8000d3c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d36:	f06f 0304 	mvn.w	r3, #4
 8000d3a:	e060      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e059      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6810      	ldr	r0, [r2, #0]
 8000d52:	f107 020c 	add.w	r2, r7, #12
 8000d56:	2100      	movs	r1, #0
 8000d58:	4798      	blx	r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da02      	bge.n	8000d66 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000d60:	f06f 0304 	mvn.w	r3, #4
 8000d64:	e04b      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d11b      	bne.n	8000da8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <LAN8742_GetLinkState+0x90>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000d84:	2302      	movs	r3, #2
 8000d86:	e03a      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e033      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000da0:	2304      	movs	r3, #4
 8000da2:	e02c      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000da4:	2305      	movs	r3, #5
 8000da6:	e02a      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6810      	ldr	r0, [r2, #0]
 8000db0:	f107 020c 	add.w	r2, r7, #12
 8000db4:	211f      	movs	r1, #31
 8000db6:	4798      	blx	r3
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da02      	bge.n	8000dc4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000dbe:	f06f 0304 	mvn.w	r3, #4
 8000dc2:	e01c      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	e015      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f003 031c 	and.w	r3, r3, #28
 8000dd8:	2b18      	cmp	r3, #24
 8000dda:	d101      	bne.n	8000de0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e00e      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 031c 	and.w	r3, r3, #28
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d101      	bne.n	8000dee <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e007      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f003 031c 	and.w	r3, r3, #28
 8000df4:	2b14      	cmp	r3, #20
 8000df6:	d101      	bne.n	8000dfc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	e000      	b.n	8000dfe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dfc:	2305      	movs	r3, #5
    }
  }
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f000 f94c 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f805 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e16:	f7ff fd8d 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f967 	bl	8001112 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f92f 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	200001ec 	.word	0x200001ec

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	200001ec 	.word	0x200001ec

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x40>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	05fa0000 	.word	0x05fa0000

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	@ (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	@ (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	@ 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	@ 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	@ (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e086      	b.n	800124c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001144:	2b00      	cmp	r3, #0
 8001146:	d106      	bne.n	8001156 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2223      	movs	r2, #35	@ 0x23
 800114c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f002 fb3b 	bl	80037cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <HAL_ETH_Init+0x128>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a3e      	ldr	r2, [pc, #248]	@ (8001254 <HAL_ETH_Init+0x128>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <HAL_ETH_Init+0x128>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800116e:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001174:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001178:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800117a:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <HAL_ETH_Init+0x12c>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4935      	ldr	r1, [pc, #212]	@ (8001258 <HAL_ETH_Init+0x12c>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001188:	4b33      	ldr	r3, [pc, #204]	@ (8001258 <HAL_ETH_Init+0x12c>)
 800118a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe80 	bl	8000ea8 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011aa:	e011      	b.n	80011d0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011ac:	f7ff fe7c 	bl	8000ea8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011ba:	d909      	bls.n	80011d0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2204      	movs	r2, #4
 80011c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	22e0      	movs	r2, #224	@ 0xe0
 80011c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e03d      	b.n	800124c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1e4      	bne.n	80011ac <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 ff34 	bl	8002050 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 ffdf 	bl	80021ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f001 f835 	bl	800225e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2100      	movs	r1, #0
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 ff9d 	bl	800213c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_ETH_Init+0x130>)
 8001220:	430b      	orrs	r3, r1
 8001222:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001236:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2210      	movs	r2, #16
 8001246:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	00020060 	.word	0x00020060

08001260 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800126e:	2b10      	cmp	r3, #16
 8001270:	d15f      	bne.n	8001332 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2223      	movs	r2, #35	@ 0x23
 8001276:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa2e 	bl	80016e8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001294:	2001      	movs	r0, #1
 8001296:	f7ff fe13 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012b8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012d0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 fd58 	bl	8001d88 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0208 	orr.w	r2, r2, #8
 80012e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fde5 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0204 	orr.w	r2, r2, #4
 800130c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001316:	69d9      	ldr	r1, [r3, #28]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_ETH_Start_IT+0xdc>)
 800131e:	430b      	orrs	r3, r1
 8001320:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001324:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2223      	movs	r2, #35	@ 0x23
 800132a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	0001a0c1 	.word	0x0001a0c1

08001340 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800134e:	2b23      	cmp	r3, #35	@ 0x23
 8001350:	d16e      	bne.n	8001430 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2223      	movs	r2, #35	@ 0x23
 8001356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001362:	69d9      	ldr	r1, [r3, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <HAL_ETH_Stop_IT+0xfc>)
 800136a:	400b      	ands	r3, r1
 800136c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001370:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001384:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001388:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f023 0302 	bic.w	r3, r3, #2
 800139c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013a0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0204 	bic.w	r2, r2, #4
 80013b0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f7ff fd80 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fcdd 	bl	8001d88 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0208 	bic.w	r2, r2, #8
 80013dc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fd6a 	bl	8000ec0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00e      	b.n	8001418 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	3212      	adds	r2, #18
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	3301      	adds	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d9ed      	bls.n	80013fa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2210      	movs	r2, #16
 8001428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	fffe5f3e 	.word	0xfffe5f3e

08001440 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001458:	f043 0201 	orr.w	r2, r3, #1
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e07c      	b.n	8001560 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800146c:	2b23      	cmp	r3, #35	@ 0x23
 800146e:	d176      	bne.n	800155e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001470:	2200      	movs	r2, #0
 8001472:	68b9      	ldr	r1, [r7, #8]
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 ff61 	bl	800233c <ETH_Prepare_Tx_Descriptors>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001486:	f043 0202 	orr.w	r2, r3, #2
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e065      	b.n	8001560 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001494:	f3bf 8f4f 	dsb	sy
}
 8001498:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3206      	adds	r2, #6
 80014a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d904      	bls.n	80014c4 <HAL_ETH_Transmit+0x84>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	1f1a      	subs	r2, r3, #4
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3106      	adds	r1, #6
 80014d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014d8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80014da:	f7ff fce5 	bl	8000ea8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80014e0:	e037      	b.n	8001552 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d011      	beq.n	8001518 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	f043 0208 	orr.w	r2, r3, #8
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e023      	b.n	8001560 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d018      	beq.n	8001552 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001520:	f7ff fcc2 	bl	8000ea8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	d302      	bcc.n	8001536 <HAL_ETH_Transmit+0xf6>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10d      	bne.n	8001552 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153c:	f043 0204 	orr.w	r2, r3, #4
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800154c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e006      	b.n	8001560 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dbc3      	blt.n	80014e2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
  }
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0a4      	b.n	80016de <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800159a:	2b23      	cmp	r3, #35	@ 0x23
 800159c:	d001      	beq.n	80015a2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e09d      	b.n	80016de <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	3212      	adds	r2, #18
 80015ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b8:	f1c3 0304 	rsb	r3, r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015be:	e066      	b.n	800168e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	699a      	ldr	r2, [r3, #24]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_ETH_ReadData+0x88>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03c      	beq.n	800166a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	0c1b      	lsrs	r3, r3, #16
 800160e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001612:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001644:	461a      	mov	r2, r3
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	b29b      	uxth	r3, r3
 800164a:	f002 fa89 	bl	8003b60 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	441a      	add	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d902      	bls.n	800167c <HAL_ETH_ReadData+0x114>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b04      	subs	r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	3212      	adds	r2, #18
 8001682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001686:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001692:	2b00      	cmp	r3, #0
 8001694:	db06      	blt.n	80016a4 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	429a      	cmp	r2, r3
 800169c:	d202      	bcs.n	80016a4 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800169e:	7cfb      	ldrb	r3, [r7, #19]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d08d      	beq.n	80015c0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	441a      	add	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f815 	bl	80016e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80016c4:	7cfb      	ldrb	r3, [r7, #19]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d108      	bne.n	80016dc <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80016f4:	2301      	movs	r3, #1
 80016f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	3212      	adds	r2, #18
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800170e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001710:	e042      	b.n	8001798 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d112      	bne.n	8001740 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f9ee 	bl	8003b00 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	74fb      	strb	r3, [r7, #19]
 800172e:	e007      	b.n	8001740 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	461a      	mov	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	461a      	mov	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001740:	7cfb      	ldrb	r3, [r7, #19]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d028      	beq.n	8001798 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	2b00      	cmp	r3, #0
 800174c:	d106      	bne.n	800175c <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	4b26      	ldr	r3, [pc, #152]	@ (80017ec <ETH_UpdateDescriptor+0x104>)
 8001754:	4313      	orrs	r3, r2
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	6053      	str	r3, [r2, #4]
 800175a:	e005      	b.n	8001768 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d902      	bls.n	8001786 <ETH_UpdateDescriptor+0x9e>
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	3b04      	subs	r3, #4
 8001784:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	3212      	adds	r2, #18
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	617b      	str	r3, [r7, #20]
      desccount--;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3b01      	subs	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <ETH_UpdateDescriptor+0xbc>
 800179e:	7cfb      	ldrb	r3, [r7, #19]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1b6      	bne.n	8001712 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d01a      	beq.n	80017e4 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	3301      	adds	r3, #1
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017b8:	f3bf 8f5f 	dmb	sy
}
 80017bc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	18ca      	adds	r2, r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d6:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80017e4:	bf00      	nop
 80017e6:	3720      	adds	r7, #32
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	80004000 	.word	0x80004000

080017f0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fe:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001818:	4b4b      	ldr	r3, [pc, #300]	@ (8001948 <HAL_ETH_IRQHandler+0x158>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <HAL_ETH_IRQHandler+0x56>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800183a:	461a      	mov	r2, r3
 800183c:	4b43      	ldr	r3, [pc, #268]	@ (800194c <HAL_ETH_IRQHandler+0x15c>)
 800183e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f891 	bl	8001968 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00f      	beq.n	8001870 <HAL_ETH_IRQHandler+0x80>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00a      	beq.n	8001870 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001862:	461a      	mov	r2, r3
 8001864:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001868:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f872 	bl	8001954 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d042      	beq.n	8001900 <HAL_ETH_IRQHandler+0x110>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d03d      	beq.n	8001900 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188a:	f043 0208 	orr.w	r2, r3, #8
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d01a      	beq.n	80018d4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a6:	695a      	ldr	r2, [r3, #20]
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <HAL_ETH_IRQHandler+0x160>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80018c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018c8:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	22e0      	movs	r2, #224	@ 0xe0
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80018d2:	e012      	b.n	80018fa <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	f248 6380 	movw	r3, #34432	@ 0x8680
 80018e2:	4013      	ands	r3, r2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f2:	461a      	mov	r2, r3
 80018f4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80018f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f83e 	bl	800197c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00e      	beq.n	8001928 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001910:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f838 	bl	8001990 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_ETH_IRQHandler+0x158>)
 8001934:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001938:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f832 	bl	80019a4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40013c00 	.word	0x40013c00
 800194c:	00010040 	.word	0x00010040
 8001950:	007e2000 	.word	0x007e2000

08001954 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
 80019c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 031c 	and.w	r3, r3, #28
 80019d4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	02db      	lsls	r3, r3, #11
 80019da:	b29b      	uxth	r3, r3
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	019b      	lsls	r3, r3, #6
 80019e6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f023 0302 	bic.w	r3, r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001a08:	f7ff fa4e 	bl	8000ea8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a0e:	e00d      	b.n	8001a2c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a10:	f7ff fa4a 	bl	8000ea8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a1e:	d301      	bcc.n	8001a24 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e010      	b.n	8001a46 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ec      	bne.n	8001a10 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 031c 	and.w	r3, r3, #28
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	02db      	lsls	r3, r3, #11
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	019b      	lsls	r3, r3, #6
 8001a7c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa8:	f7ff f9fe 	bl	8000ea8 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aae:	e00d      	b.n	8001acc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ab0:	f7ff f9fa 	bl	8000ea8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001abe:	d301      	bcc.n	8001ac4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e009      	b.n	8001ad8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ec      	bne.n	8001ab0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0e6      	b.n	8001cc2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bf0c      	ite	eq
 8001b2c:	2301      	moveq	r3, #1
 8001b2e:	2300      	movne	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf0c      	ite	eq
 8001b62:	2301      	moveq	r3, #1
 8001b64:	2300      	movne	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2301      	moveq	r3, #1
 8001bb4:	2300      	movne	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	bf14      	ite	ne
 8001c0e:	2301      	movne	r3, #1
 8001c10:	2300      	moveq	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2301      	moveq	r3, #1
 8001c60:	2300      	movne	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf14      	ite	ne
 8001cb2:	2301      	movne	r3, #1
 8001cb4:	2300      	moveq	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00b      	b.n	8001cfa <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d105      	bne.n	8001cf8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f870 	bl	8001dd4 <ETH_SetMACConfig>

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f023 031c 	bic.w	r3, r3, #28
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d1c:	f001 fb08 	bl	8003330 <HAL_RCC_GetHCLKFreq>
 8001d20:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d804      	bhi.n	8001d34 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e019      	b.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <HAL_ETH_SetMDIOClockRange+0x78>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d204      	bcs.n	8001d46 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f043 030c 	orr.w	r3, r3, #12
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e010      	b.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	@ (8001d80 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d90c      	bls.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4a0c      	ldr	r2, [pc, #48]	@ (8001d84 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d804      	bhi.n	8001d60 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e003      	b.n	8001d68 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f043 0310 	orr.w	r3, r3, #16
 8001d66:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
}
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	02160ebf 	.word	0x02160ebf
 8001d7c:	03938700 	.word	0x03938700
 8001d80:	05f5e0ff 	.word	0x05f5e0ff
 8001d84:	08f0d17f 	.word	0x08f0d17f

08001d88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001da6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001daa:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff f881 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001dc8:	6193      	str	r3, [r2, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <ETH_SetMACConfig+0x164>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7b9b      	ldrb	r3, [r3, #14]
 8001df2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	7c12      	ldrb	r2, [r2, #16]
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	d102      	bne.n	8001e02 <ETH_SetMACConfig+0x2e>
 8001dfc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e00:	e000      	b.n	8001e04 <ETH_SetMACConfig+0x30>
 8001e02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	7c52      	ldrb	r2, [r2, #17]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d102      	bne.n	8001e14 <ETH_SetMACConfig+0x40>
 8001e0e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e12:	e000      	b.n	8001e16 <ETH_SetMACConfig+0x42>
 8001e14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e16:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	7fdb      	ldrb	r3, [r3, #31]
 8001e22:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e24:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	7f92      	ldrb	r2, [r2, #30]
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d102      	bne.n	8001e3a <ETH_SetMACConfig+0x66>
 8001e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e38:	e000      	b.n	8001e3c <ETH_SetMACConfig+0x68>
 8001e3a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7f1b      	ldrb	r3, [r3, #28]
 8001e42:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e44:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d102      	bne.n	8001e64 <ETH_SetMACConfig+0x90>
 8001e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e62:	e000      	b.n	8001e66 <ETH_SetMACConfig+0x92>
 8001e64:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	7bdb      	ldrb	r3, [r3, #15]
 8001e6c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e6e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e7c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff f812 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d101      	bne.n	8001eca <ETH_SetMACConfig+0xf6>
 8001ec6:	2280      	movs	r2, #128	@ 0x80
 8001ec8:	e000      	b.n	8001ecc <ETH_SetMACConfig+0xf8>
 8001eca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ecc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ed2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001eda:	2a01      	cmp	r2, #1
 8001edc:	d101      	bne.n	8001ee2 <ETH_SetMACConfig+0x10e>
 8001ede:	2208      	movs	r2, #8
 8001ee0:	e000      	b.n	8001ee4 <ETH_SetMACConfig+0x110>
 8001ee2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ee4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001eec:	2a01      	cmp	r2, #1
 8001eee:	d101      	bne.n	8001ef4 <ETH_SetMACConfig+0x120>
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	e000      	b.n	8001ef6 <ETH_SetMACConfig+0x122>
 8001ef4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001efe:	2a01      	cmp	r2, #1
 8001f00:	d101      	bne.n	8001f06 <ETH_SetMACConfig+0x132>
 8001f02:	2202      	movs	r2, #2
 8001f04:	e000      	b.n	8001f08 <ETH_SetMACConfig+0x134>
 8001f06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7fe ffcd 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	619a      	str	r2, [r3, #24]
}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	fd20810f 	.word	0xfd20810f

08001f3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4b3d      	ldr	r3, [pc, #244]	@ (800204c <ETH_SetDMAConfig+0x110>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	7b1b      	ldrb	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <ETH_SetDMAConfig+0x2c>
 8001f62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f66:	e000      	b.n	8001f6a <ETH_SetDMAConfig+0x2e>
 8001f68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	7b5b      	ldrb	r3, [r3, #13]
 8001f6e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f70:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	7f52      	ldrb	r2, [r2, #29]
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d102      	bne.n	8001f80 <ETH_SetDMAConfig+0x44>
 8001f7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f7e:	e000      	b.n	8001f82 <ETH_SetDMAConfig+0x46>
 8001f80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7b9b      	ldrb	r3, [r3, #14]
 8001f88:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f8a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	7f1b      	ldrb	r3, [r3, #28]
 8001f96:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	7f9b      	ldrb	r3, [r3, #30]
 8001f9e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fa0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fa6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	f7fe ff74 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ff0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ff6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ffc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002004:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002006:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800200e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002014:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800201e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002022:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f7fe ff45 	bl	8000ec0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6013      	str	r3, [r2, #0]
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	f8de3f23 	.word	0xf8de3f23

08002050 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a6      	sub	sp, #152	@ 0x98
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002064:	2300      	movs	r3, #0
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800206e:	2301      	movs	r3, #1
 8002070:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800207a:	2301      	movs	r3, #1
 800207c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002080:	2301      	movs	r3, #1
 8002082:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002092:	2300      	movs	r3, #0
 8002094:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800209c:	2300      	movs	r3, #0
 800209e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fe7f 	bl	8001dd4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020d6:	2301      	movs	r3, #1
 80020d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020da:	2301      	movs	r3, #1
 80020dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002102:	2301      	movs	r3, #1
 8002104:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800210a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800210c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002110:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002116:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800211e:	2300      	movs	r3, #0
 8002120:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002126:	f107 0308 	add.w	r3, r7, #8
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff05 	bl	8001f3c <ETH_SetDMAConfig>
}
 8002132:	bf00      	nop
 8002134:	3798      	adds	r7, #152	@ 0x98
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3305      	adds	r3, #5
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	3204      	adds	r2, #4
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <ETH_MACAddressConfig+0x68>)
 800215e:	4413      	add	r3, r2
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3303      	adds	r3, #3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3302      	adds	r3, #2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	4313      	orrs	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <ETH_MACAddressConfig+0x6c>)
 800218e:	4413      	add	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40028040 	.word	0x40028040
 80021a8:	40028044 	.word	0x40028044

080021ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	e03e      	b.n	8002238 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68d9      	ldr	r1, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	3206      	adds	r2, #6
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d80c      	bhi.n	800221c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	440b      	add	r3, r1
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e004      	b.n	8002226 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3301      	adds	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b03      	cmp	r3, #3
 800223c:	d9bd      	bls.n	80021ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800225e:	b480      	push	{r7}
 8002260:	b085      	sub	sp, #20
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	e048      	b.n	80022fe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	440b      	add	r3, r1
 800227c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2200      	movs	r2, #0
 800229a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2200      	movs	r2, #0
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	3212      	adds	r2, #18
 80022ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d80c      	bhi.n	80022ee <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6919      	ldr	r1, [r3, #16]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	e004      	b.n	80022f8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d9b3      	bls.n	800226c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232e:	60da      	str	r2, [r3, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800233c:	b480      	push	{r7}
 800233e:	b091      	sub	sp, #68	@ 0x44
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3318      	adds	r3, #24
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002366:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800237a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800237e:	d007      	beq.n	8002390 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002384:	3304      	adds	r3, #4
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002390:	2302      	movs	r3, #2
 8002392:	e111      	b.n	80025b8 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002396:	3301      	adds	r3, #1
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80023a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	4b86      	ldr	r3, [pc, #536]	@ (80025c4 <ETH_Prepare_Tx_Descriptors+0x288>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ae:	6852      	ldr	r2, [r2, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80023c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d008      	beq.n	80023f2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002408:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002414:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002416:	e082      	b.n	800251e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002422:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e005      	b.n	8002444 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002442:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002446:	3301      	adds	r3, #1
 8002448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800244a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800244c:	2b03      	cmp	r3, #3
 800244e:	d902      	bls.n	8002456 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002452:	3b04      	subs	r3, #4
 8002454:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800246c:	d007      	beq.n	800247e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800246e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002472:	3304      	adds	r3, #4
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d029      	beq.n	80024d2 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002484:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800248c:	2300      	movs	r3, #0
 800248e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002490:	e019      	b.n	80024c6 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002492:	f3bf 8f5f 	dmb	sy
}
 8002496:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80024a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024a6:	3301      	adds	r3, #1
 80024a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d902      	bls.n	80024b6 <ETH_Prepare_Tx_Descriptors+0x17a>
 80024b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b2:	3b04      	subs	r3, #4
 80024b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80024c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024c2:	3301      	adds	r3, #1
 80024c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d3e1      	bcc.n	8002492 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80024ce:	2302      	movs	r3, #2
 80024d0:	e072      	b.n	80025b8 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80024de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e0:	3301      	adds	r3, #1
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80024e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <ETH_Prepare_Tx_Descriptors+0x288>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024fe:	6852      	ldr	r2, [r2, #4]
 8002500:	431a      	orrs	r2, r3
 8002502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002504:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	3301      	adds	r3, #1
 800250a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800250c:	f3bf 8f5f 	dmb	sy
}
 8002510:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800251e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f47f af78 	bne.w	8002418 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e005      	b.n	8002548 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800253c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800255e:	f3bf 8f5f 	dmb	sy
}
 8002562:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002574:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002578:	3304      	adds	r3, #4
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002584:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002586:	f3ef 8310 	mrs	r3, PRIMASK
 800258a:	613b      	str	r3, [r7, #16]
  return(result);
 800258c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	2301      	movs	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f383 8810 	msr	PRIMASK, r3
}
 800259a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	4413      	add	r3, r2
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f383 8810 	msr	PRIMASK, r3
}
 80025b4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3744      	adds	r7, #68	@ 0x44
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	ffffe000 	.word	0xffffe000

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e175      	b.n	80028d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025e8:	2201      	movs	r2, #1
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	429a      	cmp	r2, r3
 8002602:	f040 8164 	bne.w	80028ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d005      	beq.n	800261e <HAL_GPIO_Init+0x56>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d130      	bne.n	8002680 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 0303 	and.w	r3, r3, #3
 8002688:	2b03      	cmp	r3, #3
 800268a:	d017      	beq.n	80026bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	2203      	movs	r2, #3
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4013      	ands	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d123      	bne.n	8002710 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	08da      	lsrs	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3208      	adds	r2, #8
 80026d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	220f      	movs	r2, #15
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	08da      	lsrs	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3208      	adds	r2, #8
 800270a:	69b9      	ldr	r1, [r7, #24]
 800270c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2203      	movs	r2, #3
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0203 	and.w	r2, r3, #3
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 80be 	beq.w	80028ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002752:	4b66      	ldr	r3, [pc, #408]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800275c:	6453      	str	r3, [r2, #68]	@ 0x44
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <HAL_GPIO_Init+0x324>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800276a:	4a61      	ldr	r2, [pc, #388]	@ (80028f0 <HAL_GPIO_Init+0x328>)
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	089b      	lsrs	r3, r3, #2
 8002770:	3302      	adds	r3, #2
 8002772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	220f      	movs	r2, #15
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a58      	ldr	r2, [pc, #352]	@ (80028f4 <HAL_GPIO_Init+0x32c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d037      	beq.n	8002806 <HAL_GPIO_Init+0x23e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a57      	ldr	r2, [pc, #348]	@ (80028f8 <HAL_GPIO_Init+0x330>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_GPIO_Init+0x23a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a56      	ldr	r2, [pc, #344]	@ (80028fc <HAL_GPIO_Init+0x334>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d02b      	beq.n	80027fe <HAL_GPIO_Init+0x236>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a55      	ldr	r2, [pc, #340]	@ (8002900 <HAL_GPIO_Init+0x338>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d025      	beq.n	80027fa <HAL_GPIO_Init+0x232>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a54      	ldr	r2, [pc, #336]	@ (8002904 <HAL_GPIO_Init+0x33c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d01f      	beq.n	80027f6 <HAL_GPIO_Init+0x22e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a53      	ldr	r2, [pc, #332]	@ (8002908 <HAL_GPIO_Init+0x340>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x22a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a52      	ldr	r2, [pc, #328]	@ (800290c <HAL_GPIO_Init+0x344>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x226>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a51      	ldr	r2, [pc, #324]	@ (8002910 <HAL_GPIO_Init+0x348>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x222>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_GPIO_Init+0x34c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x21e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002918 <HAL_GPIO_Init+0x350>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x21a>
 80027de:	2309      	movs	r3, #9
 80027e0:	e012      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027e2:	230a      	movs	r3, #10
 80027e4:	e010      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027e6:	2308      	movs	r3, #8
 80027e8:	e00e      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027ea:	2307      	movs	r3, #7
 80027ec:	e00c      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027ee:	2306      	movs	r3, #6
 80027f0:	e00a      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027f2:	2305      	movs	r3, #5
 80027f4:	e008      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e006      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027fa:	2303      	movs	r3, #3
 80027fc:	e004      	b.n	8002808 <HAL_GPIO_Init+0x240>
 80027fe:	2302      	movs	r3, #2
 8002800:	e002      	b.n	8002808 <HAL_GPIO_Init+0x240>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x240>
 8002806:	2300      	movs	r3, #0
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	f002 0203 	and.w	r2, r2, #3
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	4093      	lsls	r3, r2
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002818:	4935      	ldr	r1, [pc, #212]	@ (80028f0 <HAL_GPIO_Init+0x328>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002826:	4b3d      	ldr	r3, [pc, #244]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284a:	4a34      	ldr	r2, [pc, #208]	@ (800291c <HAL_GPIO_Init+0x354>)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002850:	4b32      	ldr	r3, [pc, #200]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002874:	4a29      	ldr	r2, [pc, #164]	@ (800291c <HAL_GPIO_Init+0x354>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287a:	4b28      	ldr	r3, [pc, #160]	@ (800291c <HAL_GPIO_Init+0x354>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289e:	4a1f      	ldr	r2, [pc, #124]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a4:	4b1d      	ldr	r3, [pc, #116]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c8:	4a14      	ldr	r2, [pc, #80]	@ (800291c <HAL_GPIO_Init+0x354>)
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3301      	adds	r3, #1
 80028d2:	61fb      	str	r3, [r7, #28]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b0f      	cmp	r3, #15
 80028d8:	f67f ae86 	bls.w	80025e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028dc:	bf00      	nop
 80028de:	bf00      	nop
 80028e0:	3724      	adds	r7, #36	@ 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40020000 	.word	0x40020000
 80028f8:	40020400 	.word	0x40020400
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020c00 	.word	0x40020c00
 8002904:	40021000 	.word	0x40021000
 8002908:	40021400 	.word	0x40021400
 800290c:	40021800 	.word	0x40021800
 8002910:	40021c00 	.word	0x40021c00
 8002914:	40022000 	.word	0x40022000
 8002918:	40022400 	.word	0x40022400
 800291c:	40013c00 	.word	0x40013c00

08002920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]
 800292c:	4613      	mov	r3, r2
 800292e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002930:	787b      	ldrb	r3, [r7, #1]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800293c:	e003      	b.n	8002946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	041a      	lsls	r2, r3, #16
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	619a      	str	r2, [r3, #24]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a22      	ldr	r2, [pc, #136]	@ (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_PWREx_EnableOverDrive+0x98>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002976:	4b1e      	ldr	r3, [pc, #120]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1d      	ldr	r2, [pc, #116]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002980:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002982:	f7fe fa91 	bl	8000ea8 <HAL_GetTick>
 8002986:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002988:	e009      	b.n	800299e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800298a:	f7fe fa8d 	bl	8000ea8 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002998:	d901      	bls.n	800299e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e022      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029aa:	d1ee      	bne.n	800298a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029ac:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b8:	f7fe fa76 	bl	8000ea8 <HAL_GetTick>
 80029bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029be:	e009      	b.n	80029d4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c0:	f7fe fa72 	bl	8000ea8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029ce:	d901      	bls.n	80029d4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e007      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029d4:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029e0:	d1ee      	bne.n	80029c0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e29b      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a18:	4b96      	ldr	r3, [pc, #600]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a24:	4b93      	ldr	r3, [pc, #588]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d112      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62>
 8002a30:	4b90      	ldr	r3, [pc, #576]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x130>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d168      	bne.n	8002b24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e275      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x7a>
 8002a60:	4b84      	ldr	r3, [pc, #528]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a83      	ldr	r2, [pc, #524]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e02e      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x9c>
 8002a76:	4b7f      	ldr	r3, [pc, #508]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b7c      	ldr	r3, [pc, #496]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7b      	ldr	r2, [pc, #492]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a72      	ldr	r2, [pc, #456]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xd8>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe f9e8 	bl	8000ea8 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe f9e4 	bl	8000ea8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e229      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b61      	ldr	r3, [pc, #388]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe f9d4 	bl	8000ea8 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe f9d0 	bl	8000ea8 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e215      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b57      	ldr	r3, [pc, #348]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x110>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d069      	beq.n	8002c06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x190>
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1e9      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	493d      	ldr	r1, [pc, #244]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e040      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a38      	ldr	r2, [pc, #224]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe f986 	bl	8000ea8 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f982 	bl	8000ea8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1c7      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4929      	ldr	r1, [pc, #164]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	600b      	str	r3, [r1, #0]
 8002bd2:	e018      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd4:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a26      	ldr	r2, [pc, #152]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe f962 	bl	8000ea8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe f95e 	bl	8000ea8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1a3      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d038      	beq.n	8002c84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b16      	ldr	r3, [pc, #88]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1e:	4a15      	ldr	r2, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c26:	f7fe f93f 	bl	8000ea8 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2e:	f7fe f93b 	bl	8000ea8 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e180      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4b0c      	ldr	r3, [pc, #48]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x23a>
 8002c4c:	e01a      	b.n	8002c84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c52:	4a08      	ldr	r2, [pc, #32]	@ (8002c74 <HAL_RCC_OscConfig+0x280>)
 8002c54:	f023 0301 	bic.w	r3, r3, #1
 8002c58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5a:	f7fe f925 	bl	8000ea8 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe f921 	bl	8000ea8 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d903      	bls.n	8002c78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e166      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
 8002c74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c78:	4b92      	ldr	r3, [pc, #584]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ee      	bne.n	8002c62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80a4 	beq.w	8002dda <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b8c      	ldr	r3, [pc, #560]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b89      	ldr	r3, [pc, #548]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	4a88      	ldr	r2, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002caa:	4b86      	ldr	r3, [pc, #536]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cba:	4b83      	ldr	r3, [pc, #524]	@ (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cc6:	4b80      	ldr	r3, [pc, #512]	@ (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7f      	ldr	r2, [pc, #508]	@ (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe f8e9 	bl	8000ea8 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cda:	f7fe f8e5 	bl	8000ea8 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	@ 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e12a      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	4b76      	ldr	r3, [pc, #472]	@ (8002ec8 <HAL_RCC_OscConfig+0x4d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x31a>
 8002d00:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	4a6f      	ldr	r2, [pc, #444]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0c:	e02d      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x33c>
 8002d16:	4b6b      	ldr	r3, [pc, #428]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d22:	4b68      	ldr	r3, [pc, #416]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	4a67      	ldr	r2, [pc, #412]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2e:	e01c      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCC_OscConfig+0x35e>
 8002d38:	4b62      	ldr	r3, [pc, #392]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	4a61      	ldr	r2, [pc, #388]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d44:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d50:	e00b      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d52:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d56:	4a5b      	ldr	r2, [pc, #364]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5e:	4b59      	ldr	r3, [pc, #356]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d62:	4a58      	ldr	r2, [pc, #352]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	f023 0304 	bic.w	r3, r3, #4
 8002d68:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d72:	f7fe f899 	bl	8000ea8 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	e00a      	b.n	8002d90 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe f895 	bl	8000ea8 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e0d8      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0ee      	beq.n	8002d7a <HAL_RCC_OscConfig+0x386>
 8002d9c:	e014      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe f883 	bl	8000ea8 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe f87f 	bl	8000ea8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0c2      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ee      	bne.n	8002da6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d105      	bne.n	8002dda <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80ae 	beq.w	8002f40 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de4:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d06d      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d14b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	4b32      	ldr	r3, [pc, #200]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a31      	ldr	r2, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fe f850 	bl	8000ea8 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7fe f84c 	bl	8000ea8 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e091      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69da      	ldr	r2, [r3, #28]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	019b      	lsls	r3, r3, #6
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	3b01      	subs	r3, #1
 8002e44:	041b      	lsls	r3, r3, #16
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	491b      	ldr	r1, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b19      	ldr	r3, [pc, #100]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a18      	ldr	r2, [pc, #96]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe f81e 	bl	8000ea8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe f81a 	bl	8000ea8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e05f      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x47c>
 8002e8e:	e057      	b.n	8002f40 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e90:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002e96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe f804 	bl	8000ea8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fe f800 	bl	8000ea8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e045      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <HAL_RCC_OscConfig+0x4d0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4b0>
 8002ec2:	e03d      	b.n	8002f40 <HAL_RCC_OscConfig+0x54c>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <HAL_RCC_OscConfig+0x558>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d030      	beq.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d129      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d122      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d119      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d10f      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d0      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b6a      	ldr	r3, [pc, #424]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b67      	ldr	r3, [pc, #412]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4965      	ldr	r1, [pc, #404]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b8      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b59      	ldr	r3, [pc, #356]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a58      	ldr	r2, [pc, #352]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b53      	ldr	r3, [pc, #332]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a52      	ldr	r2, [pc, #328]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b50      	ldr	r3, [pc, #320]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494d      	ldr	r1, [pc, #308]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d040      	beq.n	8003074 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b47      	ldr	r3, [pc, #284]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07f      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003012:	4b41      	ldr	r3, [pc, #260]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e073      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b3d      	ldr	r3, [pc, #244]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e06b      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4936      	ldr	r1, [pc, #216]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fd ff30 	bl	8000ea8 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fd ff2c 	bl	8000ea8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e053      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d210      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f023 020f 	bic.w	r2, r3, #15
 800308a:	4922      	ldr	r1, [pc, #136]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b20      	ldr	r3, [pc, #128]	@ (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e032      	b.n	800310a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b19      	ldr	r3, [pc, #100]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4916      	ldr	r1, [pc, #88]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ce:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490e      	ldr	r1, [pc, #56]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f821 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 80030e6:	4602      	mov	r2, r0
 80030e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	490a      	ldr	r1, [pc, #40]	@ (800311c <HAL_RCC_ClockConfig+0x1cc>)
 80030f4:	5ccb      	ldrb	r3, [r1, r3]
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1d0>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fe:	4b09      	ldr	r3, [pc, #36]	@ (8003124 <HAL_RCC_ClockConfig+0x1d4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fe8c 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023c00 	.word	0x40023c00
 8003118:	40023800 	.word	0x40023800
 800311c:	08015674 	.word	0x08015674
 8003120:	20000000 	.word	0x20000000
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b094      	sub	sp, #80	@ 0x50
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003130:	2300      	movs	r3, #0
 8003132:	647b      	str	r3, [r7, #68]	@ 0x44
 8003134:	2300      	movs	r3, #0
 8003136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003138:	2300      	movs	r3, #0
 800313a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003140:	4b79      	ldr	r3, [pc, #484]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	2b08      	cmp	r3, #8
 800314a:	d00d      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x40>
 800314c:	2b08      	cmp	r3, #8
 800314e:	f200 80e1 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x34>
 8003156:	2b04      	cmp	r3, #4
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x3a>
 800315a:	e0db      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b73      	ldr	r3, [pc, #460]	@ (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 800315e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003160:	e0db      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003162:	4b72      	ldr	r3, [pc, #456]	@ (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 8003164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003166:	e0d8      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003168:	4b6f      	ldr	r3, [pc, #444]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003170:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003172:	4b6d      	ldr	r3, [pc, #436]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317e:	4b6a      	ldr	r3, [pc, #424]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	099b      	lsrs	r3, r3, #6
 8003184:	2200      	movs	r2, #0
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003188:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003190:	633b      	str	r3, [r7, #48]	@ 0x30
 8003192:	2300      	movs	r3, #0
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
 8003196:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	1a51      	subs	r1, r2, r1
 80031b6:	6139      	str	r1, [r7, #16]
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	018b      	lsls	r3, r1, #6
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d6:	4651      	mov	r1, sl
 80031d8:	018a      	lsls	r2, r1, #6
 80031da:	4651      	mov	r1, sl
 80031dc:	ebb2 0801 	subs.w	r8, r2, r1
 80031e0:	4659      	mov	r1, fp
 80031e2:	eb63 0901 	sbc.w	r9, r3, r1
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031fa:	4690      	mov	r8, r2
 80031fc:	4699      	mov	r9, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	eb18 0303 	adds.w	r3, r8, r3
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	462b      	mov	r3, r5
 8003208:	eb49 0303 	adc.w	r3, r9, r3
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800321a:	4629      	mov	r1, r5
 800321c:	028b      	lsls	r3, r1, #10
 800321e:	4621      	mov	r1, r4
 8003220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003224:	4621      	mov	r1, r4
 8003226:	028a      	lsls	r2, r1, #10
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322e:	2200      	movs	r2, #0
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003234:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003238:	f7fd f86a 	bl	8000310 <__aeabi_uldivmod>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4613      	mov	r3, r2
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003244:	e058      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003246:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	099b      	lsrs	r3, r3, #6
 800324c:	2200      	movs	r2, #0
 800324e:	4618      	mov	r0, r3
 8003250:	4611      	mov	r1, r2
 8003252:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
 800325c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003260:	4642      	mov	r2, r8
 8003262:	464b      	mov	r3, r9
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0159      	lsls	r1, r3, #5
 800326e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003272:	0150      	lsls	r0, r2, #5
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4641      	mov	r1, r8
 800327a:	ebb2 0a01 	subs.w	sl, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb63 0b01 	sbc.w	fp, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003290:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003294:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003298:	ebb2 040a 	subs.w	r4, r2, sl
 800329c:	eb63 050b 	sbc.w	r5, r3, fp
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	00eb      	lsls	r3, r5, #3
 80032aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ae:	00e2      	lsls	r2, r4, #3
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	18e3      	adds	r3, r4, r3
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	464b      	mov	r3, r9
 80032bc:	eb45 0303 	adc.w	r3, r5, r3
 80032c0:	607b      	str	r3, [r7, #4]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ce:	4629      	mov	r1, r5
 80032d0:	028b      	lsls	r3, r1, #10
 80032d2:	4621      	mov	r1, r4
 80032d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032d8:	4621      	mov	r1, r4
 80032da:	028a      	lsls	r2, r1, #10
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	61fa      	str	r2, [r7, #28]
 80032e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032ec:	f7fd f810 	bl	8000310 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003328 <HAL_RCC_GetSysClockFreq+0x200>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003312:	e002      	b.n	800331a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4b05      	ldr	r3, [pc, #20]	@ (800332c <HAL_RCC_GetSysClockFreq+0x204>)
 8003316:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800331a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800331c:	4618      	mov	r0, r3
 800331e:	3750      	adds	r7, #80	@ 0x50
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	00f42400 	.word	0x00f42400

08003330 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <HAL_RCC_GetHCLKFreq+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	20000000 	.word	0x20000000

08003348 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800334e:	f001 fac7 	bl	80048e0 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <MX_LWIP_Init+0x54>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <MX_LWIP_Init+0x58>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800335e:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <MX_LWIP_Init+0x5c>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003364:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <MX_LWIP_Init+0x60>)
 8003366:	9302      	str	r3, [sp, #8]
 8003368:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <MX_LWIP_Init+0x64>)
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2300      	movs	r3, #0
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <MX_LWIP_Init+0x5c>)
 8003372:	4a0b      	ldr	r2, [pc, #44]	@ (80033a0 <MX_LWIP_Init+0x58>)
 8003374:	4909      	ldr	r1, [pc, #36]	@ (800339c <MX_LWIP_Init+0x54>)
 8003376:	480e      	ldr	r0, [pc, #56]	@ (80033b0 <MX_LWIP_Init+0x68>)
 8003378:	f001 ff9a 	bl	80052b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800337c:	480c      	ldr	r0, [pc, #48]	@ (80033b0 <MX_LWIP_Init+0x68>)
 800337e:	f002 f951 	bl	8005624 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003382:	480b      	ldr	r0, [pc, #44]	@ (80033b0 <MX_LWIP_Init+0x68>)
 8003384:	f002 f95e 	bl	8005644 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003388:	490a      	ldr	r1, [pc, #40]	@ (80033b4 <MX_LWIP_Init+0x6c>)
 800338a:	4809      	ldr	r0, [pc, #36]	@ (80033b0 <MX_LWIP_Init+0x68>)
 800338c:	f002 fa60 	bl	8005850 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003390:	4807      	ldr	r0, [pc, #28]	@ (80033b0 <MX_LWIP_Init+0x68>)
 8003392:	f00a fa55 	bl	800d840 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	2000022c 	.word	0x2000022c
 80033a0:	20000230 	.word	0x20000230
 80033a4:	20000234 	.word	0x20000234
 80033a8:	080113a5 	.word	0x080113a5
 80033ac:	0800372d 	.word	0x0800372d
 80033b0:	200001f4 	.word	0x200001f4
 80033b4:	08003409 	.word	0x08003409

080033b8 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80033c0:	f7fd fd72 	bl	8000ea8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b08      	ldr	r3, [pc, #32]	@ (80033e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b63      	cmp	r3, #99	@ 0x63
 80033ce:	d907      	bls.n	80033e0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80033d0:	f7fd fd6a 	bl	8000ea8 <HAL_GetTick>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4a04      	ldr	r2, [pc, #16]	@ (80033e8 <Ethernet_Link_Periodic_Handle+0x30>)
 80033d8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb04 	bl	80039e8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200001f0 	.word	0x200001f0

080033ec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80033f0:	4804      	ldr	r0, [pc, #16]	@ (8003404 <MX_LWIP_Process+0x18>)
 80033f2:	f000 f97b 	bl	80036ec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80033f6:	f009 f9a7 	bl	800c748 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80033fa:	4802      	ldr	r0, [pc, #8]	@ (8003404 <MX_LWIP_Process+0x18>)
 80033fc:	f7ff ffdc 	bl	80033b8 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003400:	bf00      	nop
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200001f4 	.word	0x200001f4

08003408 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <SCB_InvalidateDCache_by_Addr>:
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800342e:	2320      	movs	r3, #32
 8003430:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003432:	f3bf 8f4f 	dsb	sy
}
 8003436:	bf00      	nop
    while (op_size > 0) {
 8003438:	e00b      	b.n	8003452 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800343a:	4a0d      	ldr	r2, [pc, #52]	@ (8003470 <SCB_InvalidateDCache_by_Addr+0x54>)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	dcf0      	bgt.n	800343a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003458:	f3bf 8f4f 	dsb	sy
}
 800345c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800345e:	f3bf 8f6f 	isb	sy
}
 8003462:	bf00      	nop
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003480:	4b44      	ldr	r3, [pc, #272]	@ (8003594 <low_level_init+0x120>)
 8003482:	4a45      	ldr	r2, [pc, #276]	@ (8003598 <low_level_init+0x124>)
 8003484:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800348e:	23e1      	movs	r3, #225	@ 0xe1
 8003490:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003492:	2300      	movs	r3, #0
 8003494:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003496:	2300      	movs	r3, #0
 8003498:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800349a:	2300      	movs	r3, #0
 800349c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800349e:	4a3d      	ldr	r2, [pc, #244]	@ (8003594 <low_level_init+0x120>)
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80034a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <low_level_init+0x120>)
 80034a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80034ac:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80034ae:	4b39      	ldr	r3, [pc, #228]	@ (8003594 <low_level_init+0x120>)
 80034b0:	4a3a      	ldr	r2, [pc, #232]	@ (800359c <low_level_init+0x128>)
 80034b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80034b4:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <low_level_init+0x120>)
 80034b6:	4a3a      	ldr	r2, [pc, #232]	@ (80035a0 <low_level_init+0x12c>)
 80034b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80034ba:	4b36      	ldr	r3, [pc, #216]	@ (8003594 <low_level_init+0x120>)
 80034bc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80034c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80034c2:	4834      	ldr	r0, [pc, #208]	@ (8003594 <low_level_init+0x120>)
 80034c4:	f7fd fe32 	bl	800112c <HAL_ETH_Init>
 80034c8:	4603      	mov	r3, r0
 80034ca:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80034cc:	2238      	movs	r2, #56	@ 0x38
 80034ce:	2100      	movs	r1, #0
 80034d0:	4834      	ldr	r0, [pc, #208]	@ (80035a4 <low_level_init+0x130>)
 80034d2:	f00e fa95 	bl	8011a00 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80034d6:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <low_level_init+0x130>)
 80034d8:	2221      	movs	r2, #33	@ 0x21
 80034da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80034dc:	4b31      	ldr	r3, [pc, #196]	@ (80035a4 <low_level_init+0x130>)
 80034de:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80034e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80034e4:	4b2f      	ldr	r3, [pc, #188]	@ (80035a4 <low_level_init+0x130>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80034ea:	482f      	ldr	r0, [pc, #188]	@ (80035a8 <low_level_init+0x134>)
 80034ec:	f001 fda8 	bl	8005040 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2206      	movs	r2, #6
 80034f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <low_level_init+0x120>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	781a      	ldrb	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <low_level_init+0x120>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	785a      	ldrb	r2, [r3, #1]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003510:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <low_level_init+0x120>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	789a      	ldrb	r2, [r3, #2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800351c:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <low_level_init+0x120>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	78da      	ldrb	r2, [r3, #3]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003528:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <low_level_init+0x120>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	791a      	ldrb	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <low_level_init+0x120>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	795a      	ldrb	r2, [r3, #5]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003546:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800354e:	f043 030a 	orr.w	r3, r3, #10
 8003552:	b2da      	uxtb	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800355a:	4914      	ldr	r1, [pc, #80]	@ (80035ac <low_level_init+0x138>)
 800355c:	4814      	ldr	r0, [pc, #80]	@ (80035b0 <low_level_init+0x13c>)
 800355e:	f7fd fb4c 	bl	8000bfa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003562:	4813      	ldr	r0, [pc, #76]	@ (80035b0 <low_level_init+0x13c>)
 8003564:	f7fd fb7b 	bl	8000c5e <LAN8742_Init>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f002 f93e 	bl	80057f0 <netif_set_link_down>
    netif_set_down(netif);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f002 f8d1 	bl	800571c <netif_set_down>
 800357a:	e008      	b.n	800358e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa30 	bl	80039e8 <ethernet_link_check_state>
 8003588:	e001      	b.n	800358e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800358a:	f7fd f9cd 	bl	8000928 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20004bc4 	.word	0x20004bc4
 8003598:	40028000 	.word	0x40028000
 800359c:	2000012c 	.word	0x2000012c
 80035a0:	2000008c 	.word	0x2000008c
 80035a4:	20004c74 	.word	0x20004c74
 80035a8:	08015684 	.word	0x08015684
 80035ac:	2000000c 	.word	0x2000000c
 80035b0:	20004cac 	.word	0x20004cac

080035b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b092      	sub	sp, #72	@ 0x48
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80035cc:	f107 030c 	add.w	r3, r7, #12
 80035d0:	2230      	movs	r2, #48	@ 0x30
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00e fa13 	bl	8011a00 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	2230      	movs	r2, #48	@ 0x30
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00e fa0c 	bl	8011a00 <memset>

  for(q = p; q != NULL; q = q->next)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ec:	e045      	b.n	800367a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80035ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d902      	bls.n	80035fa <low_level_output+0x46>
      return ERR_IF;
 80035f4:	f06f 030b 	mvn.w	r3, #11
 80035f8:	e055      	b.n	80036a6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3348      	adds	r3, #72	@ 0x48
 800360a:	443b      	add	r3, r7
 800360c:	3b3c      	subs	r3, #60	@ 0x3c
 800360e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003612:	895b      	ldrh	r3, [r3, #10]
 8003614:	4619      	mov	r1, r3
 8003616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3348      	adds	r3, #72	@ 0x48
 8003622:	443b      	add	r3, r7
 8003624:	3b38      	subs	r3, #56	@ 0x38
 8003626:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800362a:	2b00      	cmp	r3, #0
 800362c:	d011      	beq.n	8003652 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800362e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	f107 000c 	add.w	r0, r7, #12
 8003636:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003638:	460b      	mov	r3, r1
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	440b      	add	r3, r1
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	18c1      	adds	r1, r0, r3
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	3348      	adds	r3, #72	@ 0x48
 800364c:	443b      	add	r3, r7
 800364e:	3b34      	subs	r3, #52	@ 0x34
 8003650:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800365a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3348      	adds	r3, #72	@ 0x48
 8003666:	443b      	add	r3, r7
 8003668:	3b34      	subs	r3, #52	@ 0x34
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800366e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003670:	3301      	adds	r3, #1
 8003672:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003674:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	643b      	str	r3, [r7, #64]	@ 0x40
 800367a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1b6      	bne.n	80035ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	891b      	ldrh	r3, [r3, #8]
 8003684:	461a      	mov	r2, r3
 8003686:	4b0a      	ldr	r3, [pc, #40]	@ (80036b0 <low_level_output+0xfc>)
 8003688:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800368a:	4a09      	ldr	r2, [pc, #36]	@ (80036b0 <low_level_output+0xfc>)
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003692:	4a07      	ldr	r2, [pc, #28]	@ (80036b0 <low_level_output+0xfc>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003698:	2214      	movs	r2, #20
 800369a:	4905      	ldr	r1, [pc, #20]	@ (80036b0 <low_level_output+0xfc>)
 800369c:	4805      	ldr	r0, [pc, #20]	@ (80036b4 <low_level_output+0x100>)
 800369e:	f7fd fecf 	bl	8001440 <HAL_ETH_Transmit>

  return errval;
 80036a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3748      	adds	r7, #72	@ 0x48
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20004c74 	.word	0x20004c74
 80036b4:	20004bc4 	.word	0x20004bc4

080036b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80036c4:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <low_level_input+0x2c>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d105      	bne.n	80036d8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	4619      	mov	r1, r3
 80036d2:	4805      	ldr	r0, [pc, #20]	@ (80036e8 <low_level_input+0x30>)
 80036d4:	f7fd ff48 	bl	8001568 <HAL_ETH_ReadData>
  }

  return p;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20004bc0 	.word	0x20004bc0
 80036e8:	20004bc4 	.word	0x20004bc4

080036ec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ffdd 	bl	80036b8 <low_level_input>
 80036fe:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	4798      	blx	r3
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f002 fc1a 	bl	8005f50 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1ea      	bne.n	80036f8 <ethernetif_input+0xc>
}
 8003722:	bf00      	nop
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <ethernetif_init+0x1c>
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <ethernetif_init+0x48>)
 800373c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003740:	490d      	ldr	r1, [pc, #52]	@ (8003778 <ethernetif_init+0x4c>)
 8003742:	480e      	ldr	r0, [pc, #56]	@ (800377c <ethernetif_init+0x50>)
 8003744:	f00e f804 	bl	8011750 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2273      	movs	r2, #115	@ 0x73
 800374c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2274      	movs	r2, #116	@ 0x74
 8003754:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a09      	ldr	r2, [pc, #36]	@ (8003780 <ethernetif_init+0x54>)
 800375c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a08      	ldr	r2, [pc, #32]	@ (8003784 <ethernetif_init+0x58>)
 8003762:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff fe85 	bl	8003474 <low_level_init>

  return ERR_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	080126d4 	.word	0x080126d4
 8003778:	080126f0 	.word	0x080126f0
 800377c:	08012700 	.word	0x08012700
 8003780:	0800f701 	.word	0x0800f701
 8003784:	080035b5 	.word	0x080035b5

08003788 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4807      	ldr	r0, [pc, #28]	@ (80037b4 <pbuf_free_custom+0x2c>)
 8003798:	f001 fd34 	bl	8005204 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800379c:	4b06      	ldr	r3, [pc, #24]	@ (80037b8 <pbuf_free_custom+0x30>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <pbuf_free_custom+0x30>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
  }
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	08015684 	.word	0x08015684
 80037b8:	20004bc0 	.word	0x20004bc0

080037bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80037c0:	f7fd fb72 	bl	8000ea8 <HAL_GetTick>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08e      	sub	sp, #56	@ 0x38
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a52      	ldr	r2, [pc, #328]	@ (8003934 <HAL_ETH_MspInit+0x168>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	f040 809e 	bne.w	800392c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80037f0:	4b51      	ldr	r3, [pc, #324]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	4a50      	ldr	r2, [pc, #320]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 80037f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80037fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	4b4b      	ldr	r3, [pc, #300]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	4a4a      	ldr	r2, [pc, #296]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800380e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003812:	6313      	str	r3, [r2, #48]	@ 0x30
 8003814:	4b48      	ldr	r3, [pc, #288]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4b45      	ldr	r3, [pc, #276]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	4a44      	ldr	r2, [pc, #272]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003826:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800382a:	6313      	str	r3, [r2, #48]	@ 0x30
 800382c:	4b42      	ldr	r3, [pc, #264]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003838:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	4a3e      	ldr	r2, [pc, #248]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	6313      	str	r3, [r2, #48]	@ 0x30
 8003844:	4b3c      	ldr	r3, [pc, #240]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003850:	4b39      	ldr	r3, [pc, #228]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	4a38      	ldr	r2, [pc, #224]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6313      	str	r3, [r2, #48]	@ 0x30
 800385c:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003868:	4b33      	ldr	r3, [pc, #204]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	4a32      	ldr	r2, [pc, #200]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	6313      	str	r3, [r2, #48]	@ 0x30
 8003874:	4b30      	ldr	r3, [pc, #192]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 8003886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800388a:	6313      	str	r3, [r2, #48]	@ 0x30
 800388c:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <HAL_ETH_MspInit+0x16c>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003894:	60bb      	str	r3, [r7, #8]
 8003896:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003898:	2332      	movs	r3, #50	@ 0x32
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038a8:	230b      	movs	r3, #11
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b0:	4619      	mov	r1, r3
 80038b2:	4822      	ldr	r0, [pc, #136]	@ (800393c <HAL_ETH_MspInit+0x170>)
 80038b4:	f7fe fe88 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80038b8:	2386      	movs	r3, #134	@ 0x86
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2303      	movs	r3, #3
 80038c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038c8:	230b      	movs	r3, #11
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d0:	4619      	mov	r1, r3
 80038d2:	481b      	ldr	r0, [pc, #108]	@ (8003940 <HAL_ETH_MspInit+0x174>)
 80038d4:	f7fe fe78 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80038d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038ea:	230b      	movs	r3, #11
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80038ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038f2:	4619      	mov	r1, r3
 80038f4:	4813      	ldr	r0, [pc, #76]	@ (8003944 <HAL_ETH_MspInit+0x178>)
 80038f6:	f7fe fe67 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80038fa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800390c:	230b      	movs	r3, #11
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003914:	4619      	mov	r1, r3
 8003916:	480c      	ldr	r0, [pc, #48]	@ (8003948 <HAL_ETH_MspInit+0x17c>)
 8003918:	f7fe fe56 	bl	80025c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	203d      	movs	r0, #61	@ 0x3d
 8003922:	f7fd fbcc 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003926:	203d      	movs	r0, #61	@ 0x3d
 8003928:	f7fd fbe5 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800392c:	bf00      	nop
 800392e:	3738      	adds	r7, #56	@ 0x38
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40028000 	.word	0x40028000
 8003938:	40023800 	.word	0x40023800
 800393c:	40020800 	.word	0x40020800
 8003940:	40020000 	.word	0x40020000
 8003944:	40020400 	.word	0x40020400
 8003948:	40021800 	.word	0x40021800

0800394c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003950:	4802      	ldr	r0, [pc, #8]	@ (800395c <ETH_PHY_IO_Init+0x10>)
 8003952:	f7fe f9d7 	bl	8001d04 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20004bc4 	.word	0x20004bc4

08003960 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return 0;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	4807      	ldr	r0, [pc, #28]	@ (80039a0 <ETH_PHY_IO_ReadReg+0x30>)
 8003984:	f7fe f818 	bl	80019b8 <HAL_ETH_ReadPHYRegister>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	e000      	b.n	8003996 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20004bc4 	.word	0x20004bc4

080039a4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	4807      	ldr	r0, [pc, #28]	@ (80039d4 <ETH_PHY_IO_WriteReg+0x30>)
 80039b8:	f7fe f849 	bl	8001a4e <HAL_ETH_WritePHYRegister>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80039c2:	f04f 33ff 	mov.w	r3, #4294967295
 80039c6:	e000      	b.n	80039ca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20004bc4 	.word	0x20004bc4

080039d8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80039dc:	f7fd fa64 	bl	8000ea8 <HAL_GetTick>
 80039e0:	4603      	mov	r3, r0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0a0      	sub	sp, #128	@ 0x80
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80039f0:	f107 030c 	add.w	r3, r7, #12
 80039f4:	2264      	movs	r2, #100	@ 0x64
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f00e f801 	bl	8011a00 <memset>
  int32_t PHYLinkState = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a06:	2300      	movs	r3, #0
 8003a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003a0e:	483a      	ldr	r0, [pc, #232]	@ (8003af8 <ethernet_link_check_state+0x110>)
 8003a10:	f7fd f972 	bl	8000cf8 <LAN8742_GetLinkState>
 8003a14:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <ethernet_link_check_state+0x5a>
 8003a28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	dc09      	bgt.n	8003a42 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8003a2e:	4833      	ldr	r0, [pc, #204]	@ (8003afc <ethernet_link_check_state+0x114>)
 8003a30:	f7fd fc86 	bl	8001340 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f001 fe71 	bl	800571c <netif_set_down>
    netif_set_link_down(netif);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 fed8 	bl	80057f0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003a40:	e055      	b.n	8003aee <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d14e      	bne.n	8003aee <ethernet_link_check_state+0x106>
 8003a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	dd4b      	ble.n	8003aee <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003a56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a58:	3b02      	subs	r3, #2
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d82a      	bhi.n	8003ab4 <ethernet_link_check_state+0xcc>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <ethernet_link_check_state+0x7c>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003a87 	.word	0x08003a87
 8003a6c:	08003a97 	.word	0x08003a97
 8003a70:	08003aa7 	.word	0x08003aa7
      duplex = ETH_FULLDUPLEX_MODE;
 8003a74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a78:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003a7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a84:	e017      	b.n	8003ab6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8003a8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003a90:	2301      	movs	r3, #1
 8003a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003a94:	e00f      	b.n	8003ab6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003a96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003a9a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003aa4:	e007      	b.n	8003ab6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8003ab2:	e000      	b.n	8003ab6 <ethernet_link_check_state+0xce>
      break;
 8003ab4:	bf00      	nop
    if(linkchanged)
 8003ab6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480e      	ldr	r0, [pc, #56]	@ (8003afc <ethernet_link_check_state+0x114>)
 8003ac4:	f7fe f80c 	bl	8001ae0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003ac8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aca:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8003acc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ace:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4809      	ldr	r0, [pc, #36]	@ (8003afc <ethernet_link_check_state+0x114>)
 8003ad8:	f7fe f8f9 	bl	8001cce <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8003adc:	4807      	ldr	r0, [pc, #28]	@ (8003afc <ethernet_link_check_state+0x114>)
 8003ade:	f7fd fbbf 	bl	8001260 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f001 fdae 	bl	8005644 <netif_set_up>
      netif_set_link_up(netif);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f001 fe49 	bl	8005780 <netif_set_link_up>
}
 8003aee:	bf00      	nop
 8003af0:	3780      	adds	r7, #128	@ 0x80
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20004cac 	.word	0x20004cac
 8003afc:	20004bc4 	.word	0x20004bc4

08003b00 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003b08:	4812      	ldr	r0, [pc, #72]	@ (8003b54 <HAL_ETH_RxAllocateCallback+0x54>)
 8003b0a:	f001 fb0d 	bl	8005128 <memp_malloc_pool>
 8003b0e:	60f8      	str	r0, [r7, #12]
  if (p)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d014      	beq.n	8003b40 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f103 0220 	add.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <HAL_ETH_RxAllocateCallback+0x58>)
 8003b24:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8003b2e:	9201      	str	r2, [sp, #4]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2241      	movs	r2, #65	@ 0x41
 8003b36:	2100      	movs	r1, #0
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f002 f84f 	bl	8005bdc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003b3e:	e005      	b.n	8003b4c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_ETH_RxAllocateCallback+0x5c>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	08015684 	.word	0x08015684
 8003b58:	08003789 	.word	0x08003789
 8003b5c:	20004bc0 	.word	0x20004bc0

08003b60 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3b20      	subs	r3, #32
 8003b7e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e003      	b.n	8003baa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e009      	b.n	8003bcc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	891a      	ldrh	r2, [r3, #8]
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f2      	bne.n	8003bb8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fc20 	bl	800341c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003bdc:	bf00      	nop
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <fs_open+0x16>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <fs_open+0x1c>
    return ERR_ARG;
 8003bfa:	f06f 030f 	mvn.w	r3, #15
 8003bfe:	e028      	b.n	8003c52 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003c00:	4b16      	ldr	r3, [pc, #88]	@ (8003c5c <fs_open+0x78>)
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	e020      	b.n	8003c48 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6838      	ldr	r0, [r7, #0]
 8003c0e:	f7fc fb17 	bl	8000240 <strcmp>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d114      	bne.n	8003c42 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	7c1a      	ldrb	r2, [r3, #16]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e007      	b.n	8003c52 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1db      	bne.n	8003c06 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8003c4e:	f06f 0305 	mvn.w	r3, #5
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	08016458 	.word	0x08016458

08003c60 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	1ad3      	subs	r3, r2, r3
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8003c9a:	222c      	movs	r2, #44	@ 0x2c
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f00d feae 	bl	8011a00 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003ca4:	bf00      	nop
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003cb2:	202c      	movs	r0, #44	@ 0x2c
 8003cb4:	f001 f8ca 	bl	8004e4c <mem_malloc>
 8003cb8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ffe6 	bl	8003c92 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003cc6:	687b      	ldr	r3, [r7, #4]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff ffbb 	bl	8003c60 <fs_close>
    hs->handle = NULL;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 f927 	bl	8005f50 <pbuf_free>
    hs->req = NULL;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <http_state_free+0x1a>
    http_state_eof(hs);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffd6 	bl	8003cd0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 ff2b 	bl	8004b80 <mem_free>
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d106      	bne.n	8003d56 <http_write+0x22>
 8003d48:	4b2c      	ldr	r3, [pc, #176]	@ (8003dfc <http_write+0xc8>)
 8003d4a:	f240 2219 	movw	r2, #537	@ 0x219
 8003d4e:	492c      	ldr	r1, [pc, #176]	@ (8003e00 <http_write+0xcc>)
 8003d50:	482c      	ldr	r0, [pc, #176]	@ (8003e04 <http_write+0xd0>)
 8003d52:	f00d fcfd 	bl	8011750 <iprintf>
  len = *length;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8003d5c:	8afb      	ldrh	r3, [r7, #22]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <http_write+0x32>
    return ERR_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e045      	b.n	8003df2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003d6c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003d6e:	8aba      	ldrh	r2, [r7, #20]
 8003d70:	8afb      	ldrh	r3, [r7, #22]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d201      	bcs.n	8003d7a <http_write+0x46>
    len = max_len;
 8003d76:	8abb      	ldrh	r3, [r7, #20]
 8003d78:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8003d82:	8afa      	ldrh	r2, [r7, #22]
 8003d84:	8abb      	ldrh	r3, [r7, #20]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d901      	bls.n	8003d8e <http_write+0x5a>
    len = max_len;
 8003d8a:	8abb      	ldrh	r3, [r7, #20]
 8003d8c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	8afa      	ldrh	r2, [r7, #22]
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f006 fe6f 	bl	800aa78 <tcp_write>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da6:	d10f      	bne.n	8003dc8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d902      	bls.n	8003dc2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	82fb      	strh	r3, [r7, #22]
 8003dc0:	e002      	b.n	8003dc8 <http_write+0x94>
      } else {
        len /= 2;
 8003dc2:	8afb      	ldrh	r3, [r7, #22]
 8003dc4:	085b      	lsrs	r3, r3, #1
 8003dc6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003dc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d102      	bne.n	8003dd8 <http_write+0xa4>
 8003dd2:	8afb      	ldrh	r3, [r7, #22]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d8da      	bhi.n	8003d8e <http_write+0x5a>

  if (err == ERR_OK) {
 8003dd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	8afa      	ldrh	r2, [r7, #22]
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003dee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	08012768 	.word	0x08012768
 8003e00:	080127a0 	.word	0x080127a0
 8003e04:	080127b0 	.word	0x080127b0

08003e08 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8003e16:	2100      	movs	r1, #0
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f003 fef1 	bl	8007c00 <tcp_arg>
  altcp_recv(pcb, NULL);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f003 feff 	bl	8007c24 <tcp_recv>
  altcp_err(pcb, NULL);
 8003e26:	2100      	movs	r1, #0
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f003 ff3f 	bl	8007cac <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2100      	movs	r1, #0
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f003 ff74 	bl	8007d20 <tcp_poll>
  altcp_sent(pcb, NULL);
 8003e38:	2100      	movs	r1, #0
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f003 ff14 	bl	8007c68 <tcp_sent>
  if (hs != NULL) {
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f7ff ff62 	bl	8003d10 <http_state_free>
  }

  if (abort_conn) {
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d004      	beq.n	8003e5c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f002 fe14 	bl	8006a80 <tcp_abort>
    return ERR_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e00f      	b.n	8003e7c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f002 fd25 	bl	80068ac <tcp_close>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8003e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003e6e:	2204      	movs	r2, #4
 8003e70:	4904      	ldr	r1, [pc, #16]	@ (8003e84 <http_close_or_abort_conn+0x7c>)
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f003 ff54 	bl	8007d20 <tcp_poll>
  }
  return err;
 8003e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3718      	adds	r7, #24
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	0800454b 	.word	0x0800454b

08003e88 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	6839      	ldr	r1, [r7, #0]
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffb6 	bl	8003e08 <http_close_or_abort_conn>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffe8 	bl	8003e88 <http_close_conn>
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8003ed2:	6839      	ldr	r1, [r7, #0]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffe6 	bl	8003ea6 <http_eof>
    return 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e016      	b.n	8003f0c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fec6 	bl	8003c74 <fs_bytes_left>
 8003ee8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dc05      	bgt.n	8003efc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffd7 	bl	8003ea6 <http_eof>
    return 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e007      	b.n	8003f0c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <http_check_eof+0x54>)
 8003efe:	f240 429d 	movw	r2, #1181	@ 0x49d
 8003f02:	4905      	ldr	r1, [pc, #20]	@ (8003f18 <http_check_eof+0x58>)
 8003f04:	4805      	ldr	r0, [pc, #20]	@ (8003f1c <http_check_eof+0x5c>)
 8003f06:	f00d fc23 	bl	8011750 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	08012768 	.word	0x08012768
 8003f18:	080127d8 	.word	0x080127d8
 8003f1c:	080127b0 	.word	0x080127b0

08003f20 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d803      	bhi.n	8003f42 <http_send_data_nonssi+0x22>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	e001      	b.n	8003f46 <http_send_data_nonssi+0x26>
 8003f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f46:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6999      	ldr	r1, [r3, #24]
 8003f4c:	f107 020c 	add.w	r2, r7, #12
 8003f50:	2300      	movs	r3, #0
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff feee 	bl	8003d34 <http_write>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003f5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	89ba      	ldrh	r2, [r7, #12]
 8003f6e:	441a      	add	r2, r3
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	89ba      	ldrh	r2, [r7, #12]
 8003f7a:	1a9a      	subs	r2, r3, r2
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <http_send+0x18>
    return 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e025      	b.n	8003fee <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8003faa:	6839      	ldr	r1, [r7, #0]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f7ff ff87 	bl	8003ec0 <http_check_eof>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <http_send+0x32>
      return 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e018      	b.n	8003fee <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8003fbc:	6839      	ldr	r1, [r7, #0]
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffae 	bl	8003f20 <http_send_data_nonssi>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <http_send+0x62>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fe4d 	bl	8003c74 <fs_bytes_left>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dc05      	bgt.n	8003fec <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff5f 	bl	8003ea6 <http_eof>
    return 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	e000      	b.n	8003fee <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	4a1c      	ldr	r2, [pc, #112]	@ (8004078 <http_get_404_file+0x80>)
 8004006:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4619      	mov	r1, r3
 8004010:	4610      	mov	r0, r2
 8004012:	f7ff fde7 	bl	8003be4 <fs_open>
 8004016:	4603      	mov	r3, r0
 8004018:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d024      	beq.n	800406c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <http_get_404_file+0x84>)
 8004026:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7ff fdd7 	bl	8003be4 <fs_open>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800403a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	4a0e      	ldr	r2, [pc, #56]	@ (8004080 <http_get_404_file+0x88>)
 8004046:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f7ff fdc7 	bl	8003be4 <fs_open>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
        return NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800406c:	687b      	ldr	r3, [r7, #4]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08012810 	.word	0x08012810
 800407c:	0801281c 	.word	0x0801281c
 8004080:	08012828 	.word	0x08012828

08004084 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08e      	sub	sp, #56	@ 0x38
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <http_parse_request+0x24>
 800409a:	4b65      	ldr	r3, [pc, #404]	@ (8004230 <http_parse_request+0x1ac>)
 800409c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 80040a0:	4964      	ldr	r1, [pc, #400]	@ (8004234 <http_parse_request+0x1b0>)
 80040a2:	4865      	ldr	r0, [pc, #404]	@ (8004238 <http_parse_request+0x1b4>)
 80040a4:	f00d fb54 	bl	8011750 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d106      	bne.n	80040bc <http_parse_request+0x38>
 80040ae:	4b60      	ldr	r3, [pc, #384]	@ (8004230 <http_parse_request+0x1ac>)
 80040b0:	f240 72af 	movw	r2, #1967	@ 0x7af
 80040b4:	4961      	ldr	r1, [pc, #388]	@ (800423c <http_parse_request+0x1b8>)
 80040b6:	4860      	ldr	r0, [pc, #384]	@ (8004238 <http_parse_request+0x1b4>)
 80040b8:	f00d fb4a 	bl	8011750 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d103      	bne.n	80040cc <http_parse_request+0x48>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80040cc:	f06f 0307 	mvn.w	r3, #7
 80040d0:	e0a9      	b.n	8004226 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040de:	621a      	str	r2, [r3, #32]
 80040e0:	e005      	b.n	80040ee <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f001 fff3 	bl	80060d4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80040ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040f0:	f001 ffce 	bl	8006090 <pbuf_ref>

  if (hs->req->next != NULL) {
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d012      	beq.n	8004124 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	891b      	ldrh	r3, [r3, #8]
 8004104:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8004108:	4293      	cmp	r3, r2
 800410a:	bf28      	it	cs
 800410c:	4613      	movcs	r3, r2
 800410e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6a18      	ldr	r0, [r3, #32]
 8004114:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004116:	2300      	movs	r3, #0
 8004118:	4949      	ldr	r1, [pc, #292]	@ (8004240 <http_parse_request+0x1bc>)
 800411a:	f002 f913 	bl	8006344 <pbuf_copy_partial>
    data = httpd_req_buf;
 800411e:	4b48      	ldr	r3, [pc, #288]	@ (8004240 <http_parse_request+0x1bc>)
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
 8004122:	e005      	b.n	8004130 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	895b      	ldrh	r3, [r3, #10]
 800412e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004130:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004132:	2b06      	cmp	r3, #6
 8004134:	d962      	bls.n	80041fc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004136:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004138:	461a      	mov	r2, r3
 800413a:	4942      	ldr	r1, [pc, #264]	@ (8004244 <http_parse_request+0x1c0>)
 800413c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800413e:	f000 fb99 	bl	8004874 <lwip_strnstr>
 8004142:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d058      	beq.n	80041fc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800414e:	2204      	movs	r2, #4
 8004150:	493d      	ldr	r1, [pc, #244]	@ (8004248 <http_parse_request+0x1c4>)
 8004152:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004154:	f00d fc69 	bl	8011a2a <strncmp>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d116      	bne.n	800418c <http_parse_request+0x108>
        sp1 = data + 3;
 800415e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004160:	3303      	adds	r3, #3
 8004162:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	b29b      	uxth	r3, r3
 800416e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	8b7a      	ldrh	r2, [r7, #26]
 800417a:	4934      	ldr	r1, [pc, #208]	@ (800424c <http_parse_request+0x1c8>)
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb79 	bl	8004874 <lwip_strnstr>
 8004182:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d111      	bne.n	80041ae <http_parse_request+0x12a>
 800418a:	e006      	b.n	800419a <http_parse_request+0x116>
        data[4] = 0;
 800418c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418e:	3304      	adds	r3, #4
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8004194:	f06f 030f 	mvn.w	r3, #15
 8004198:	e045      	b.n	8004226 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	8b7a      	ldrh	r2, [r7, #26]
 80041a0:	4928      	ldr	r1, [pc, #160]	@ (8004244 <http_parse_request+0x1c0>)
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fb66 	bl	8004874 <lwip_strnstr>
 80041a8:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3301      	adds	r3, #1
 80041b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80041b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01e      	beq.n	80041fc <http_parse_request+0x178>
 80041be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d91a      	bls.n	80041fc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80041c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80041c8:	461a      	mov	r2, r3
 80041ca:	4921      	ldr	r1, [pc, #132]	@ (8004250 <http_parse_request+0x1cc>)
 80041cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041ce:	f000 fb51 	bl	8004874 <lwip_strnstr>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d011      	beq.n	80041fc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80041e4:	8b3b      	ldrh	r3, [r7, #24]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	4413      	add	r3, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80041ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	68b8      	ldr	r0, [r7, #8]
 80041f4:	f000 f82e 	bl	8004254 <http_find_file>
 80041f8:	4603      	mov	r3, r0
 80041fa:	e014      	b.n	8004226 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f001 ff2d 	bl	8006060 <pbuf_clen>
 8004206:	4603      	mov	r3, r0
 8004208:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	891b      	ldrh	r3, [r3, #8]
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004214:	d205      	bcs.n	8004222 <http_parse_request+0x19e>
 8004216:	8a7b      	ldrh	r3, [r7, #18]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d802      	bhi.n	8004222 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800421c:	f06f 0304 	mvn.w	r3, #4
 8004220:	e001      	b.n	8004226 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8004222:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3738      	adds	r7, #56	@ 0x38
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	08012768 	.word	0x08012768
 8004234:	08012834 	.word	0x08012834
 8004238:	080127b0 	.word	0x080127b0
 800423c:	08012840 	.word	0x08012840
 8004240:	20004ccc 	.word	0x20004ccc
 8004244:	0801284c 	.word	0x0801284c
 8004248:	08012850 	.word	0x08012850
 800424c:	08012858 	.word	0x08012858
 8004250:	0801285c 	.word	0x0801285c

08004254 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b092      	sub	sp, #72	@ 0x48
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8004260:	2300      	movs	r3, #0
 8004262:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8004264:	2300      	movs	r3, #0
 8004266:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fb ffef 	bl	8000254 <strlen>
 8004276:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427a:	2b00      	cmp	r3, #0
 800427c:	d06b      	beq.n	8004356 <http_find_file+0x102>
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b2f      	cmp	r3, #47	@ 0x2f
 800428a:	d164      	bne.n	8004356 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800428c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800428e:	4a53      	ldr	r2, [pc, #332]	@ (80043dc <http_find_file+0x188>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d102      	bne.n	800429a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	2b01      	cmp	r3, #1
 8004298:	d15d      	bne.n	8004356 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	2b3f      	cmp	r3, #63	@ 0x3f
 80042a0:	bf28      	it	cs
 80042a2:	233f      	movcs	r3, #63	@ 0x3f
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b0:	4619      	mov	r1, r3
 80042b2:	484a      	ldr	r0, [pc, #296]	@ (80043dc <http_find_file+0x188>)
 80042b4:	f00d fc39 	bl	8011b2a <memcpy>
      http_uri_buf[copy_len] = 0;
 80042b8:	4a48      	ldr	r2, [pc, #288]	@ (80043dc <http_find_file+0x188>)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	4413      	add	r3, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c6:	e043      	b.n	8004350 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d028      	beq.n	8004320 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80042d4:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01e      	beq.n	800431a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80042dc:	4a40      	ldr	r2, [pc, #256]	@ (80043e0 <http_find_file+0x18c>)
 80042de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fb ffb5 	bl	8000254 <strlen>
 80042ea:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf28      	it	cs
 80042f4:	4613      	movcs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80042f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fa:	4a38      	ldr	r2, [pc, #224]	@ (80043dc <http_find_file+0x188>)
 80042fc:	1898      	adds	r0, r3, r2
 80042fe:	4a38      	ldr	r2, [pc, #224]	@ (80043e0 <http_find_file+0x18c>)
 8004300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004302:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4619      	mov	r1, r3
 800430a:	f00d fc0e 	bl	8011b2a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800430e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	4413      	add	r3, r2
 8004314:	4a31      	ldr	r2, [pc, #196]	@ (80043dc <http_find_file+0x188>)
 8004316:	2100      	movs	r1, #0
 8004318:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800431a:	4b30      	ldr	r3, [pc, #192]	@ (80043dc <http_find_file+0x188>)
 800431c:	633b      	str	r3, [r7, #48]	@ 0x30
 800431e:	e004      	b.n	800432a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8004320:	4a2f      	ldr	r2, [pc, #188]	@ (80043e0 <http_find_file+0x18c>)
 8004322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff fc58 	bl	8003be4 <fs_open>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8004338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <http_find_file+0xf6>
        uri = file_name;
 8004340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004342:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8004348:	e005      	b.n	8004356 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800434a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434c:	3301      	adds	r3, #1
 800434e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004352:	2b04      	cmp	r3, #4
 8004354:	d9b8      	bls.n	80042c8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	2b00      	cmp	r3, #0
 800435a:	d124      	bne.n	80043a6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	213f      	movs	r1, #63	@ 0x3f
 8004360:	4618      	mov	r0, r3
 8004362:	f00d fb55 	bl	8011a10 <strchr>
 8004366:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8004368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800436e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
      params++;
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	3301      	adds	r3, #1
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	4611      	mov	r1, r2
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fc2f 	bl	8003be4 <fs_open>
 8004386:	4603      	mov	r3, r0
 8004388:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800438a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <http_find_file+0x144>
      file = &hs->file_handle;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004396:	e006      	b.n	80043a6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8004398:	f107 0308 	add.w	r3, r7, #8
 800439c:	4619      	mov	r1, r3
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fe2a 	bl	8003ff8 <http_get_404_file>
 80043a4:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80043a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d106      	bne.n	80043ba <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	4619      	mov	r1, r3
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff fe20 	bl	8003ff8 <http_get_404_file>
 80043b8:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	4613      	mov	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f809 	bl	80043e4 <http_init_file>
 80043d2:	4603      	mov	r3, r0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3740      	adds	r7, #64	@ 0x40
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	200050cc 	.word	0x200050cc
 80043e0:	0801646c 	.word	0x0801646c

080043e4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05c      	beq.n	80044b2 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <http_init_file+0x2a>
 8004400:	4b35      	ldr	r3, [pc, #212]	@ (80044d8 <http_init_file+0xf4>)
 8004402:	f640 120b 	movw	r2, #2315	@ 0x90b
 8004406:	4935      	ldr	r1, [pc, #212]	@ (80044dc <http_init_file+0xf8>)
 8004408:	4835      	ldr	r0, [pc, #212]	@ (80044e0 <http_init_file+0xfc>)
 800440a:	f00d f9a1 	bl	8011750 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	da06      	bge.n	8004432 <http_init_file+0x4e>
 8004424:	4b2c      	ldr	r3, [pc, #176]	@ (80044d8 <http_init_file+0xf4>)
 8004426:	f640 1234 	movw	r2, #2356	@ 0x934
 800442a:	492e      	ldr	r1, [pc, #184]	@ (80044e4 <http_init_file+0x100>)
 800442c:	482c      	ldr	r0, [pc, #176]	@ (80044e0 <http_init_file+0xfc>)
 800442e:	f00d f98f 	bl	8011750 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	7c1b      	ldrb	r3, [r3, #16]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <http_init_file+0x7c>
 8004452:	4b21      	ldr	r3, [pc, #132]	@ (80044d8 <http_init_file+0xf4>)
 8004454:	f640 1243 	movw	r2, #2371	@ 0x943
 8004458:	4923      	ldr	r1, [pc, #140]	@ (80044e8 <http_init_file+0x104>)
 800445a:	4821      	ldr	r0, [pc, #132]	@ (80044e0 <http_init_file+0xfc>)
 800445c:	f00d f978 	bl	8011750 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d032      	beq.n	80044cc <http_init_file+0xe8>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	7c1b      	ldrb	r3, [r3, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d02b      	beq.n	80044cc <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6998      	ldr	r0, [r3, #24]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	461a      	mov	r2, r3
 800447e:	491b      	ldr	r1, [pc, #108]	@ (80044ec <http_init_file+0x108>)
 8004480:	f000 f9f8 	bl	8004874 <lwip_strnstr>
 8004484:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d01f      	beq.n	80044cc <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	1d1a      	adds	r2, r3, #4
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	441a      	add	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80044b0:	e00c      	b.n	80044cc <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	08012768 	.word	0x08012768
 80044dc:	08012864 	.word	0x08012864
 80044e0:	080127b0 	.word	0x080127b0
 80044e4:	08012878 	.word	0x08012878
 80044e8:	08012898 	.word	0x08012898
 80044ec:	0801285c 	.word	0x0801285c

080044f0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <http_err+0x1c>
    http_state_free(hs);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fc02 	bl	8003d10 <http_state_free>
  }
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	4613      	mov	r3, r2
 8004520:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <http_sent+0x1c>
    return ERR_OK;
 800452c:	2300      	movs	r3, #0
 800452e:	e008      	b.n	8004542 <http_sent+0x2e>
  }

  hs->retries = 0;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f7ff fd25 	bl	8003f8a <http_send>

  return ERR_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3718      	adds	r7, #24
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800455e:	2100      	movs	r1, #0
 8004560:	6838      	ldr	r0, [r7, #0]
 8004562:	f7ff fc91 	bl	8003e88 <http_close_conn>
 8004566:	4603      	mov	r3, r0
 8004568:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e021      	b.n	80045b2 <http_poll+0x68>
  } else {
    hs->retries++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004574:	3301      	adds	r3, #1
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004584:	2b04      	cmp	r3, #4
 8004586:	d105      	bne.n	8004594 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004588:	68f9      	ldr	r1, [r7, #12]
 800458a:	6838      	ldr	r0, [r7, #0]
 800458c:	f7ff fc7c 	bl	8003e88 <http_close_conn>
      return ERR_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	e00e      	b.n	80045b2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800459c:	68f9      	ldr	r1, [r7, #12]
 800459e:	6838      	ldr	r0, [r7, #0]
 80045a0:	f7ff fcf3 	bl	8003f8a <http_send>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80045aa:	6838      	ldr	r0, [r7, #0]
 80045ac:	f007 f84e 	bl	800b64c <tcp_output>
      }
    }
  }

  return ERR_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80045ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d105      	bne.n	80045e2 <http_recv+0x26>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d002      	beq.n	80045e2 <http_recv+0x26>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d111      	bne.n	8004606 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	891b      	ldrh	r3, [r3, #8]
 80045ec:	4619      	mov	r1, r3
 80045ee:	68b8      	ldr	r0, [r7, #8]
 80045f0:	f002 fc20 	bl	8006e34 <tcp_recved>
      pbuf_free(p);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f001 fcab 	bl	8005f50 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80045fa:	6979      	ldr	r1, [r7, #20]
 80045fc:	68b8      	ldr	r0, [r7, #8]
 80045fe:	f7ff fc43 	bl	8003e88 <http_close_conn>
    return ERR_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e055      	b.n	80046b2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	891b      	ldrh	r3, [r3, #8]
 800460a:	4619      	mov	r1, r3
 800460c:	68b8      	ldr	r0, [r7, #8]
 800460e:	f002 fc11 	bl	8006e34 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d147      	bne.n	80046aa <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff fd30 	bl	8004084 <http_parse_request>
 8004624:	4603      	mov	r3, r0
 8004626:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004628:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <http_recv+0xa0>
 8004630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004634:	f113 0f05 	cmn.w	r3, #5
 8004638:	d010      	beq.n	800465c <http_recv+0xa0>
 800463a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800463e:	f113 0f10 	cmn.w	r3, #16
 8004642:	d00b      	beq.n	800465c <http_recv+0xa0>
 8004644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004648:	f113 0f08 	cmn.w	r3, #8
 800464c:	d006      	beq.n	800465c <http_recv+0xa0>
 800464e:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <http_recv+0x100>)
 8004650:	f640 2204 	movw	r2, #2564	@ 0xa04
 8004654:	491a      	ldr	r1, [pc, #104]	@ (80046c0 <http_recv+0x104>)
 8004656:	481b      	ldr	r0, [pc, #108]	@ (80046c4 <http_recv+0x108>)
 8004658:	f00d f87a 	bl	8011750 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800465c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004660:	f113 0f05 	cmn.w	r3, #5
 8004664:	d00b      	beq.n	800467e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d007      	beq.n	800467e <http_recv+0xc2>
          pbuf_free(hs->req);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fc6c 	bl	8005f50 <pbuf_free>
          hs->req = NULL;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fc66 	bl	8005f50 <pbuf_free>
      if (parsed == ERR_OK) {
 8004684:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d104      	bne.n	8004696 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800468c:	6979      	ldr	r1, [r7, #20]
 800468e:	68b8      	ldr	r0, [r7, #8]
 8004690:	f7ff fc7b 	bl	8003f8a <http_send>
 8004694:	e00c      	b.n	80046b0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004696:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800469a:	f113 0f10 	cmn.w	r3, #16
 800469e:	d107      	bne.n	80046b0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	68b8      	ldr	r0, [r7, #8]
 80046a4:	f7ff fbf0 	bl	8003e88 <http_close_conn>
 80046a8:	e002      	b.n	80046b0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f001 fc50 	bl	8005f50 <pbuf_free>
    }
  }
  return ERR_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	08012768 	.word	0x08012768
 80046c0:	080128c4 	.word	0x080128c4
 80046c4:	080127b0 	.word	0x080127b0

080046c8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <http_accept+0x1c>
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <http_accept+0x22>
    return ERR_VAL;
 80046e4:	f06f 0305 	mvn.w	r3, #5
 80046e8:	e025      	b.n	8004736 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80046ea:	2101      	movs	r1, #1
 80046ec:	68b8      	ldr	r0, [r7, #8]
 80046ee:	f003 f887 	bl	8007800 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80046f2:	f7ff fadb 	bl	8003cac <http_state_alloc>
 80046f6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	e018      	b.n	8004736 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800470a:	6979      	ldr	r1, [r7, #20]
 800470c:	68b8      	ldr	r0, [r7, #8]
 800470e:	f003 fa77 	bl	8007c00 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8004712:	490b      	ldr	r1, [pc, #44]	@ (8004740 <http_accept+0x78>)
 8004714:	68b8      	ldr	r0, [r7, #8]
 8004716:	f003 fa85 	bl	8007c24 <tcp_recv>
  altcp_err(pcb, http_err);
 800471a:	490a      	ldr	r1, [pc, #40]	@ (8004744 <http_accept+0x7c>)
 800471c:	68b8      	ldr	r0, [r7, #8]
 800471e:	f003 fac5 	bl	8007cac <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004722:	2204      	movs	r2, #4
 8004724:	4908      	ldr	r1, [pc, #32]	@ (8004748 <http_accept+0x80>)
 8004726:	68b8      	ldr	r0, [r7, #8]
 8004728:	f003 fafa 	bl	8007d20 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800472c:	4907      	ldr	r1, [pc, #28]	@ (800474c <http_accept+0x84>)
 800472e:	68b8      	ldr	r0, [r7, #8]
 8004730:	f003 fa9a 	bl	8007c68 <tcp_sent>

  return ERR_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	080045bd 	.word	0x080045bd
 8004744:	080044f1 	.word	0x080044f1
 8004748:	0800454b 	.word	0x0800454b
 800474c:	08004515 	.word	0x08004515

08004750 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d029      	beq.n	80047b6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8004762:	2101      	movs	r1, #1
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f003 f84b 	bl	8007800 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	461a      	mov	r2, r3
 800476e:	4914      	ldr	r1, [pc, #80]	@ (80047c0 <httpd_init_pcb+0x70>)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f002 f991 	bl	8006a98 <tcp_bind>
 8004776:	4603      	mov	r3, r0
 8004778:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800477a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <httpd_init_pcb+0x40>
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <httpd_init_pcb+0x74>)
 8004784:	f640 2257 	movw	r2, #2647	@ 0xa57
 8004788:	490f      	ldr	r1, [pc, #60]	@ (80047c8 <httpd_init_pcb+0x78>)
 800478a:	4810      	ldr	r0, [pc, #64]	@ (80047cc <httpd_init_pcb+0x7c>)
 800478c:	f00c ffe0 	bl	8011750 <iprintf>
    pcb = altcp_listen(pcb);
 8004790:	21ff      	movs	r1, #255	@ 0xff
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f002 fa38 	bl	8006c08 <tcp_listen_with_backlog>
 8004798:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d106      	bne.n	80047ae <httpd_init_pcb+0x5e>
 80047a0:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <httpd_init_pcb+0x74>)
 80047a2:	f640 2259 	movw	r2, #2649	@ 0xa59
 80047a6:	490a      	ldr	r1, [pc, #40]	@ (80047d0 <httpd_init_pcb+0x80>)
 80047a8:	4808      	ldr	r0, [pc, #32]	@ (80047cc <httpd_init_pcb+0x7c>)
 80047aa:	f00c ffd1 	bl	8011750 <iprintf>
    altcp_accept(pcb, http_accept);
 80047ae:	4909      	ldr	r1, [pc, #36]	@ (80047d4 <httpd_init_pcb+0x84>)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f003 fa9d 	bl	8007cf0 <tcp_accept>
  }
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	08016574 	.word	0x08016574
 80047c4:	08012768 	.word	0x08012768
 80047c8:	080128f0 	.word	0x080128f0
 80047cc:	080127b0 	.word	0x080127b0
 80047d0:	0801290c 	.word	0x0801290c
 80047d4:	080046c9 	.word	0x080046c9

080047d8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80047de:	202e      	movs	r0, #46	@ 0x2e
 80047e0:	f003 fa00 	bl	8007be4 <tcp_new_ip_type>
 80047e4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <httpd_init+0x22>
 80047ec:	4b07      	ldr	r3, [pc, #28]	@ (800480c <httpd_init+0x34>)
 80047ee:	f640 2272 	movw	r2, #2674	@ 0xa72
 80047f2:	4907      	ldr	r1, [pc, #28]	@ (8004810 <httpd_init+0x38>)
 80047f4:	4807      	ldr	r0, [pc, #28]	@ (8004814 <httpd_init+0x3c>)
 80047f6:	f00c ffab 	bl	8011750 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80047fa:	2150      	movs	r1, #80	@ 0x50
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ffa7 	bl	8004750 <httpd_init_pcb>
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	08012768 	.word	0x08012768
 8004810:	0801292c 	.word	0x0801292c
 8004814:	080127b0 	.word	0x080127b0

08004818 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	b21a      	sxth	r2, r3
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	b29b      	uxth	r3, r3
 800482e:	b21b      	sxth	r3, r3
 8004830:	4313      	orrs	r3, r2
 8004832:	b21b      	sxth	r3, r3
 8004834:	b29b      	uxth	r3, r3
}
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	061a      	lsls	r2, r3, #24
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0e1b      	lsrs	r3, r3, #24
 8004866:	4313      	orrs	r3, r2
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8004880:	68b8      	ldr	r0, [r7, #8]
 8004882:	f7fb fce7 	bl	8000254 <strlen>
 8004886:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	e022      	b.n	80048d8 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e012      	b.n	80048be <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	781a      	ldrb	r2, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d109      	bne.n	80048b8 <lwip_strnstr+0x44>
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	6978      	ldr	r0, [r7, #20]
 80048aa:	f00d f8be 	bl	8011a2a <strncmp>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	e00f      	b.n	80048d8 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3301      	adds	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <lwip_strnstr+0x62>
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	441a      	add	r2, r3
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	440b      	add	r3, r1
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d9e0      	bls.n	8004898 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80048ea:	f000 f8d5 	bl	8004a98 <mem_init>
  memp_init();
 80048ee:	f000 fbd7 	bl	80050a0 <memp_init>
  pbuf_init();
  netif_init();
 80048f2:	f000 fcd5 	bl	80052a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80048f6:	f007 ff69 	bl	800c7cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80048fa:	f001 fdc7 	bl	800648c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80048fe:	f007 fedb 	bl	800c6b8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004916:	4b05      	ldr	r3, [pc, #20]	@ (800492c <ptr_to_mem+0x20>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	4413      	add	r3, r2
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20005124 	.word	0x20005124

08004930 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <mem_to_ptr+0x20>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	b29b      	uxth	r3, r3
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20005124 	.word	0x20005124

08004954 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800495c:	4b45      	ldr	r3, [pc, #276]	@ (8004a74 <plug_holes+0x120>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d206      	bcs.n	8004974 <plug_holes+0x20>
 8004966:	4b44      	ldr	r3, [pc, #272]	@ (8004a78 <plug_holes+0x124>)
 8004968:	f240 12df 	movw	r2, #479	@ 0x1df
 800496c:	4943      	ldr	r1, [pc, #268]	@ (8004a7c <plug_holes+0x128>)
 800496e:	4844      	ldr	r0, [pc, #272]	@ (8004a80 <plug_holes+0x12c>)
 8004970:	f00c feee 	bl	8011750 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <plug_holes+0x130>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d306      	bcc.n	800498c <plug_holes+0x38>
 800497e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a78 <plug_holes+0x124>)
 8004980:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004984:	4940      	ldr	r1, [pc, #256]	@ (8004a88 <plug_holes+0x134>)
 8004986:	483e      	ldr	r0, [pc, #248]	@ (8004a80 <plug_holes+0x12c>)
 8004988:	f00c fee2 	bl	8011750 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	791b      	ldrb	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d006      	beq.n	80049a2 <plug_holes+0x4e>
 8004994:	4b38      	ldr	r3, [pc, #224]	@ (8004a78 <plug_holes+0x124>)
 8004996:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800499a:	493c      	ldr	r1, [pc, #240]	@ (8004a8c <plug_holes+0x138>)
 800499c:	4838      	ldr	r0, [pc, #224]	@ (8004a80 <plug_holes+0x12c>)
 800499e:	f00c fed7 	bl	8011750 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80049aa:	d906      	bls.n	80049ba <plug_holes+0x66>
 80049ac:	4b32      	ldr	r3, [pc, #200]	@ (8004a78 <plug_holes+0x124>)
 80049ae:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 80049b2:	4937      	ldr	r1, [pc, #220]	@ (8004a90 <plug_holes+0x13c>)
 80049b4:	4832      	ldr	r0, [pc, #200]	@ (8004a80 <plug_holes+0x12c>)
 80049b6:	f00c fecb 	bl	8011750 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff ffa4 	bl	800490c <ptr_to_mem>
 80049c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d024      	beq.n	8004a18 <plug_holes+0xc4>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	791b      	ldrb	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d120      	bne.n	8004a18 <plug_holes+0xc4>
 80049d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <plug_holes+0x130>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d01b      	beq.n	8004a18 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80049e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a94 <plug_holes+0x140>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d102      	bne.n	80049f0 <plug_holes+0x9c>
      lfree = mem;
 80049ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <plug_holes+0x140>)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a00:	d00a      	beq.n	8004a18 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff80 	bl	800490c <ptr_to_mem>
 8004a0c:	4604      	mov	r4, r0
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff8e 	bl	8004930 <mem_to_ptr>
 8004a14:	4603      	mov	r3, r0
 8004a16:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	885b      	ldrh	r3, [r3, #2]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff ff75 	bl	800490c <ptr_to_mem>
 8004a22:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d01f      	beq.n	8004a6c <plug_holes+0x118>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d11b      	bne.n	8004a6c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004a34:	4b17      	ldr	r3, [pc, #92]	@ (8004a94 <plug_holes+0x140>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d102      	bne.n	8004a44 <plug_holes+0xf0>
      lfree = pmem;
 8004a3e:	4a15      	ldr	r2, [pc, #84]	@ (8004a94 <plug_holes+0x140>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	881a      	ldrh	r2, [r3, #0]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004a54:	d00a      	beq.n	8004a6c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff ff56 	bl	800490c <ptr_to_mem>
 8004a60:	4604      	mov	r4, r0
 8004a62:	68b8      	ldr	r0, [r7, #8]
 8004a64:	f7ff ff64 	bl	8004930 <mem_to_ptr>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}
 8004a74:	20005124 	.word	0x20005124
 8004a78:	08012948 	.word	0x08012948
 8004a7c:	08012978 	.word	0x08012978
 8004a80:	08012990 	.word	0x08012990
 8004a84:	20005128 	.word	0x20005128
 8004a88:	080129b8 	.word	0x080129b8
 8004a8c:	080129d4 	.word	0x080129d4
 8004a90:	080129f0 	.word	0x080129f0
 8004a94:	2000512c 	.word	0x2000512c

08004a98 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004a9e:	4b16      	ldr	r3, [pc, #88]	@ (8004af8 <mem_init+0x60>)
 8004aa0:	4a16      	ldr	r2, [pc, #88]	@ (8004afc <mem_init+0x64>)
 8004aa2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004aa4:	4b14      	ldr	r3, [pc, #80]	@ (8004af8 <mem_init+0x60>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ab0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004abe:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8004ac2:	f7ff ff23 	bl	800490c <ptr_to_mem>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b00 <mem_init+0x68>)
 8004aca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <mem_init+0x68>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <mem_init+0x68>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004adc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <mem_init+0x68>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8004ae6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	@ (8004af8 <mem_init+0x60>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a05      	ldr	r2, [pc, #20]	@ (8004b04 <mem_init+0x6c>)
 8004aee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20005124 	.word	0x20005124
 8004afc:	30004000 	.word	0x30004000
 8004b00:	20005128 	.word	0x20005128
 8004b04:	2000512c 	.word	0x2000512c

08004b08 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff0d 	bl	8004930 <mem_to_ptr>
 8004b16:	4603      	mov	r3, r0
 8004b18:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fef4 	bl	800490c <ptr_to_mem>
 8004b24:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	885b      	ldrh	r3, [r3, #2]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff feee 	bl	800490c <ptr_to_mem>
 8004b30:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b3a:	d818      	bhi.n	8004b6e <mem_link_valid+0x66>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	885b      	ldrh	r3, [r3, #2]
 8004b40:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004b44:	d813      	bhi.n	8004b6e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004b4a:	8afa      	ldrh	r2, [r7, #22]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d004      	beq.n	8004b5a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	8afa      	ldrh	r2, [r7, #22]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d109      	bne.n	8004b6e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004b5a:	4b08      	ldr	r3, [pc, #32]	@ (8004b7c <mem_link_valid+0x74>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d006      	beq.n	8004b72 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	885b      	ldrh	r3, [r3, #2]
 8004b68:	8afa      	ldrh	r2, [r7, #22]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d001      	beq.n	8004b72 <mem_link_valid+0x6a>
    return 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e000      	b.n	8004b74 <mem_link_valid+0x6c>
  }
  return 1;
 8004b72:	2301      	movs	r3, #1
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20005128 	.word	0x20005128

08004b80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d04c      	beq.n	8004c28 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004b98:	4b25      	ldr	r3, [pc, #148]	@ (8004c30 <mem_free+0xb0>)
 8004b9a:	f240 2273 	movw	r2, #627	@ 0x273
 8004b9e:	4925      	ldr	r1, [pc, #148]	@ (8004c34 <mem_free+0xb4>)
 8004ba0:	4825      	ldr	r0, [pc, #148]	@ (8004c38 <mem_free+0xb8>)
 8004ba2:	f00c fdd5 	bl	8011750 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ba6:	e040      	b.n	8004c2a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b08      	subs	r3, #8
 8004bac:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004bae:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <mem_free+0xbc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d306      	bcc.n	8004bc6 <mem_free+0x46>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f103 020c 	add.w	r2, r3, #12
 8004bbe:	4b20      	ldr	r3, [pc, #128]	@ (8004c40 <mem_free+0xc0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d907      	bls.n	8004bd6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <mem_free+0xb0>)
 8004bc8:	f240 227f 	movw	r2, #639	@ 0x27f
 8004bcc:	491d      	ldr	r1, [pc, #116]	@ (8004c44 <mem_free+0xc4>)
 8004bce:	481a      	ldr	r0, [pc, #104]	@ (8004c38 <mem_free+0xb8>)
 8004bd0:	f00c fdbe 	bl	8011750 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004bd4:	e029      	b.n	8004c2a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d107      	bne.n	8004bee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004bde:	4b14      	ldr	r3, [pc, #80]	@ (8004c30 <mem_free+0xb0>)
 8004be0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004be4:	4918      	ldr	r1, [pc, #96]	@ (8004c48 <mem_free+0xc8>)
 8004be6:	4814      	ldr	r0, [pc, #80]	@ (8004c38 <mem_free+0xb8>)
 8004be8:	f00c fdb2 	bl	8011750 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004bec:	e01d      	b.n	8004c2a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff ff8a 	bl	8004b08 <mem_link_valid>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <mem_free+0xb0>)
 8004bfc:	f240 2295 	movw	r2, #661	@ 0x295
 8004c00:	4912      	ldr	r1, [pc, #72]	@ (8004c4c <mem_free+0xcc>)
 8004c02:	480d      	ldr	r0, [pc, #52]	@ (8004c38 <mem_free+0xb8>)
 8004c04:	f00c fda4 	bl	8011750 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c08:	e00f      	b.n	8004c2a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <mem_free+0xd0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d202      	bcs.n	8004c20 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004c50 <mem_free+0xd0>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff fe97 	bl	8004954 <plug_holes>
 8004c26:	e000      	b.n	8004c2a <mem_free+0xaa>
    return;
 8004c28:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004c2a:	3710      	adds	r7, #16
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	08012948 	.word	0x08012948
 8004c34:	08012a1c 	.word	0x08012a1c
 8004c38:	08012990 	.word	0x08012990
 8004c3c:	20005124 	.word	0x20005124
 8004c40:	20005128 	.word	0x20005128
 8004c44:	08012a40 	.word	0x08012a40
 8004c48:	08012a5c 	.word	0x08012a5c
 8004c4c:	08012a84 	.word	0x08012a84
 8004c50:	2000512c 	.word	0x2000512c

08004c54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	3303      	adds	r3, #3
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	f023 0303 	bic.w	r3, r3, #3
 8004c6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	2b0b      	cmp	r3, #11
 8004c70:	d801      	bhi.n	8004c76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004c72:	230c      	movs	r3, #12
 8004c74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004c76:	8bfb      	ldrh	r3, [r7, #30]
 8004c78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004c7c:	d803      	bhi.n	8004c86 <mem_trim+0x32>
 8004c7e:	8bfa      	ldrh	r2, [r7, #30]
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d201      	bcs.n	8004c8a <mem_trim+0x36>
    return NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e0cc      	b.n	8004e24 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004c8a:	4b68      	ldr	r3, [pc, #416]	@ (8004e2c <mem_trim+0x1d8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d304      	bcc.n	8004c9e <mem_trim+0x4a>
 8004c94:	4b66      	ldr	r3, [pc, #408]	@ (8004e30 <mem_trim+0x1dc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d306      	bcc.n	8004cac <mem_trim+0x58>
 8004c9e:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <mem_trim+0x1e0>)
 8004ca0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004ca4:	4964      	ldr	r1, [pc, #400]	@ (8004e38 <mem_trim+0x1e4>)
 8004ca6:	4865      	ldr	r0, [pc, #404]	@ (8004e3c <mem_trim+0x1e8>)
 8004ca8:	f00c fd52 	bl	8011750 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004cac:	4b5f      	ldr	r3, [pc, #380]	@ (8004e2c <mem_trim+0x1d8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d304      	bcc.n	8004cc0 <mem_trim+0x6c>
 8004cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8004e30 <mem_trim+0x1dc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d301      	bcc.n	8004cc4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	e0af      	b.n	8004e24 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3b08      	subs	r3, #8
 8004cc8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004cca:	69b8      	ldr	r0, [r7, #24]
 8004ccc:	f7ff fe30 	bl	8004930 <mem_to_ptr>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	8afb      	ldrh	r3, [r7, #22]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b08      	subs	r3, #8
 8004ce0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004ce2:	8bfa      	ldrh	r2, [r7, #30]
 8004ce4:	8abb      	ldrh	r3, [r7, #20]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d906      	bls.n	8004cf8 <mem_trim+0xa4>
 8004cea:	4b52      	ldr	r3, [pc, #328]	@ (8004e34 <mem_trim+0x1e0>)
 8004cec:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004cf0:	4953      	ldr	r1, [pc, #332]	@ (8004e40 <mem_trim+0x1ec>)
 8004cf2:	4852      	ldr	r0, [pc, #328]	@ (8004e3c <mem_trim+0x1e8>)
 8004cf4:	f00c fd2c 	bl	8011750 <iprintf>
  if (newsize > size) {
 8004cf8:	8bfa      	ldrh	r2, [r7, #30]
 8004cfa:	8abb      	ldrh	r3, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d901      	bls.n	8004d04 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e08f      	b.n	8004e24 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004d04:	8bfa      	ldrh	r2, [r7, #30]
 8004d06:	8abb      	ldrh	r3, [r7, #20]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d101      	bne.n	8004d10 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	e089      	b.n	8004e24 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fdf9 	bl	800490c <ptr_to_mem>
 8004d1a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	791b      	ldrb	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d13f      	bne.n	8004da4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d2c:	d106      	bne.n	8004d3c <mem_trim+0xe8>
 8004d2e:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <mem_trim+0x1e0>)
 8004d30:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004d34:	4943      	ldr	r1, [pc, #268]	@ (8004e44 <mem_trim+0x1f0>)
 8004d36:	4841      	ldr	r0, [pc, #260]	@ (8004e3c <mem_trim+0x1e8>)
 8004d38:	f00c fd0a 	bl	8011750 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004d42:	8afa      	ldrh	r2, [r7, #22]
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	4413      	add	r3, r2
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e48 <mem_trim+0x1f4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d106      	bne.n	8004d66 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004d58:	89fb      	ldrh	r3, [r7, #14]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fdd6 	bl	800490c <ptr_to_mem>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a39      	ldr	r2, [pc, #228]	@ (8004e48 <mem_trim+0x1f4>)
 8004d64:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fdcf 	bl	800490c <ptr_to_mem>
 8004d6e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2200      	movs	r2, #0
 8004d74:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	89ba      	ldrh	r2, [r7, #12]
 8004d7a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	8afa      	ldrh	r2, [r7, #22]
 8004d80:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	89fa      	ldrh	r2, [r7, #14]
 8004d86:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004d90:	d047      	beq.n	8004e22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fdb8 	bl	800490c <ptr_to_mem>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	89fb      	ldrh	r3, [r7, #14]
 8004da0:	8053      	strh	r3, [r2, #2]
 8004da2:	e03e      	b.n	8004e22 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004da4:	8bfb      	ldrh	r3, [r7, #30]
 8004da6:	f103 0214 	add.w	r2, r3, #20
 8004daa:	8abb      	ldrh	r3, [r7, #20]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d838      	bhi.n	8004e22 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004db0:	8afa      	ldrh	r2, [r7, #22]
 8004db2:	8bfb      	ldrh	r3, [r7, #30]
 8004db4:	4413      	add	r3, r2
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3308      	adds	r3, #8
 8004dba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004dc4:	d106      	bne.n	8004dd4 <mem_trim+0x180>
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e34 <mem_trim+0x1e0>)
 8004dc8:	f240 3216 	movw	r2, #790	@ 0x316
 8004dcc:	491d      	ldr	r1, [pc, #116]	@ (8004e44 <mem_trim+0x1f0>)
 8004dce:	481b      	ldr	r0, [pc, #108]	@ (8004e3c <mem_trim+0x1e8>)
 8004dd0:	f00c fcbe 	bl	8011750 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fd98 	bl	800490c <ptr_to_mem>
 8004ddc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004dde:	4b1a      	ldr	r3, [pc, #104]	@ (8004e48 <mem_trim+0x1f4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d202      	bcs.n	8004dee <mem_trim+0x19a>
      lfree = mem2;
 8004de8:	4a17      	ldr	r2, [pc, #92]	@ (8004e48 <mem_trim+0x1f4>)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2200      	movs	r2, #0
 8004df2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	881a      	ldrh	r2, [r3, #0]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	8afa      	ldrh	r2, [r7, #22]
 8004e00:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	89fa      	ldrh	r2, [r7, #14]
 8004e06:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e10:	d007      	beq.n	8004e22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fd78 	bl	800490c <ptr_to_mem>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	89fb      	ldrh	r3, [r7, #14]
 8004e20:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004e22:	687b      	ldr	r3, [r7, #4]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20005124 	.word	0x20005124
 8004e30:	20005128 	.word	0x20005128
 8004e34:	08012948 	.word	0x08012948
 8004e38:	08012ab8 	.word	0x08012ab8
 8004e3c:	08012990 	.word	0x08012990
 8004e40:	08012ad0 	.word	0x08012ad0
 8004e44:	08012af0 	.word	0x08012af0
 8004e48:	2000512c 	.word	0x2000512c

08004e4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004e56:	88fb      	ldrh	r3, [r7, #6]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <mem_malloc+0x14>
    return NULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e0d9      	b.n	8005014 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	3303      	adds	r3, #3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004e6c:	8bbb      	ldrh	r3, [r7, #28]
 8004e6e:	2b0b      	cmp	r3, #11
 8004e70:	d801      	bhi.n	8004e76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004e72:	230c      	movs	r3, #12
 8004e74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004e76:	8bbb      	ldrh	r3, [r7, #28]
 8004e78:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004e7c:	d803      	bhi.n	8004e86 <mem_malloc+0x3a>
 8004e7e:	8bba      	ldrh	r2, [r7, #28]
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d201      	bcs.n	8004e8a <mem_malloc+0x3e>
    return NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e0c4      	b.n	8005014 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004e8a:	4b64      	ldr	r3, [pc, #400]	@ (800501c <mem_malloc+0x1d0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd4e 	bl	8004930 <mem_to_ptr>
 8004e94:	4603      	mov	r3, r0
 8004e96:	83fb      	strh	r3, [r7, #30]
 8004e98:	e0b4      	b.n	8005004 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004e9a:	8bfb      	ldrh	r3, [r7, #30]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fd35 	bl	800490c <ptr_to_mem>
 8004ea2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	791b      	ldrb	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 80a4 	bne.w	8004ff6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	8bfb      	ldrh	r3, [r7, #30]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	f1a3 0208 	sub.w	r2, r3, #8
 8004ebc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f0c0 8099 	bcc.w	8004ff6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	8bfb      	ldrh	r3, [r7, #30]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f1a3 0208 	sub.w	r2, r3, #8
 8004ed2:	8bbb      	ldrh	r3, [r7, #28]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d333      	bcc.n	8004f42 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004eda:	8bfa      	ldrh	r2, [r7, #30]
 8004edc:	8bbb      	ldrh	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004ee6:	8a7b      	ldrh	r3, [r7, #18]
 8004ee8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004eec:	d106      	bne.n	8004efc <mem_malloc+0xb0>
 8004eee:	4b4c      	ldr	r3, [pc, #304]	@ (8005020 <mem_malloc+0x1d4>)
 8004ef0:	f240 3287 	movw	r2, #903	@ 0x387
 8004ef4:	494b      	ldr	r1, [pc, #300]	@ (8005024 <mem_malloc+0x1d8>)
 8004ef6:	484c      	ldr	r0, [pc, #304]	@ (8005028 <mem_malloc+0x1dc>)
 8004ef8:	f00c fc2a 	bl	8011750 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004efc:	8a7b      	ldrh	r3, [r7, #18]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fd04 	bl	800490c <ptr_to_mem>
 8004f04:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	881a      	ldrh	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8bfa      	ldrh	r2, [r7, #30]
 8004f18:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	8a7a      	ldrh	r2, [r7, #18]
 8004f1e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2201      	movs	r2, #1
 8004f24:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004f2e:	d00b      	beq.n	8004f48 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fce9 	bl	800490c <ptr_to_mem>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	8a7b      	ldrh	r3, [r7, #18]
 8004f3e:	8053      	strh	r3, [r2, #2]
 8004f40:	e002      	b.n	8004f48 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2201      	movs	r2, #1
 8004f46:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004f48:	4b34      	ldr	r3, [pc, #208]	@ (800501c <mem_malloc+0x1d0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d127      	bne.n	8004fa2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004f52:	4b32      	ldr	r3, [pc, #200]	@ (800501c <mem_malloc+0x1d0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004f58:	e005      	b.n	8004f66 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fcd4 	bl	800490c <ptr_to_mem>
 8004f64:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <mem_malloc+0x12c>
 8004f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800502c <mem_malloc+0x1e0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d1f0      	bne.n	8004f5a <mem_malloc+0x10e>
          }
          lfree = cur;
 8004f78:	4a28      	ldr	r2, [pc, #160]	@ (800501c <mem_malloc+0x1d0>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004f7e:	4b27      	ldr	r3, [pc, #156]	@ (800501c <mem_malloc+0x1d0>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <mem_malloc+0x1e0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d00b      	beq.n	8004fa2 <mem_malloc+0x156>
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <mem_malloc+0x1d0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <mem_malloc+0x156>
 8004f94:	4b22      	ldr	r3, [pc, #136]	@ (8005020 <mem_malloc+0x1d4>)
 8004f96:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004f9a:	4925      	ldr	r1, [pc, #148]	@ (8005030 <mem_malloc+0x1e4>)
 8004f9c:	4822      	ldr	r0, [pc, #136]	@ (8005028 <mem_malloc+0x1dc>)
 8004f9e:	f00c fbd7 	bl	8011750 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004fa2:	8bba      	ldrh	r2, [r7, #28]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3308      	adds	r3, #8
 8004faa:	4a20      	ldr	r2, [pc, #128]	@ (800502c <mem_malloc+0x1e0>)
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d906      	bls.n	8004fc0 <mem_malloc+0x174>
 8004fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005020 <mem_malloc+0x1d4>)
 8004fb4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004fb8:	491e      	ldr	r1, [pc, #120]	@ (8005034 <mem_malloc+0x1e8>)
 8004fba:	481b      	ldr	r0, [pc, #108]	@ (8005028 <mem_malloc+0x1dc>)
 8004fbc:	f00c fbc8 	bl	8011750 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d006      	beq.n	8004fd8 <mem_malloc+0x18c>
 8004fca:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <mem_malloc+0x1d4>)
 8004fcc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8004fd0:	4919      	ldr	r1, [pc, #100]	@ (8005038 <mem_malloc+0x1ec>)
 8004fd2:	4815      	ldr	r0, [pc, #84]	@ (8005028 <mem_malloc+0x1dc>)
 8004fd4:	f00c fbbc 	bl	8011750 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d006      	beq.n	8004ff0 <mem_malloc+0x1a4>
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <mem_malloc+0x1d4>)
 8004fe4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004fe8:	4914      	ldr	r1, [pc, #80]	@ (800503c <mem_malloc+0x1f0>)
 8004fea:	480f      	ldr	r0, [pc, #60]	@ (8005028 <mem_malloc+0x1dc>)
 8004fec:	f00c fbb0 	bl	8011750 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	e00e      	b.n	8005014 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004ff6:	8bfb      	ldrh	r3, [r7, #30]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fc87 	bl	800490c <ptr_to_mem>
 8004ffe:	4603      	mov	r3, r0
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005004:	8bfa      	ldrh	r2, [r7, #30]
 8005006:	8bbb      	ldrh	r3, [r7, #28]
 8005008:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800500c:	429a      	cmp	r2, r3
 800500e:	f4ff af44 	bcc.w	8004e9a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	2000512c 	.word	0x2000512c
 8005020:	08012948 	.word	0x08012948
 8005024:	08012af0 	.word	0x08012af0
 8005028:	08012990 	.word	0x08012990
 800502c:	20005128 	.word	0x20005128
 8005030:	08012b04 	.word	0x08012b04
 8005034:	08012b20 	.word	0x08012b20
 8005038:	08012b50 	.word	0x08012b50
 800503c:	08012b80 	.word	0x08012b80

08005040 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	3303      	adds	r3, #3
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e011      	b.n	8005086 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	461a      	mov	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3301      	adds	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	885b      	ldrh	r3, [r3, #2]
 800508a:	461a      	mov	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4293      	cmp	r3, r2
 8005090:	dbe7      	blt.n	8005062 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80050a6:	2300      	movs	r3, #0
 80050a8:	80fb      	strh	r3, [r7, #6]
 80050aa:	e009      	b.n	80050c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80050ac:	88fb      	ldrh	r3, [r7, #6]
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <memp_init+0x30>)
 80050b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff ffc3 	bl	8005040 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	3301      	adds	r3, #1
 80050be:	80fb      	strh	r3, [r7, #6]
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d9f2      	bls.n	80050ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	08016500 	.word	0x08016500

080050d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d012      	beq.n	8005110 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <do_memp_malloc_pool+0x38>
 80050fe:	4b07      	ldr	r3, [pc, #28]	@ (800511c <do_memp_malloc_pool+0x48>)
 8005100:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8005104:	4906      	ldr	r1, [pc, #24]	@ (8005120 <do_memp_malloc_pool+0x4c>)
 8005106:	4807      	ldr	r0, [pc, #28]	@ (8005124 <do_memp_malloc_pool+0x50>)
 8005108:	f00c fb22 	bl	8011750 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	e000      	b.n	8005112 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	08012ba4 	.word	0x08012ba4
 8005120:	08012bd4 	.word	0x08012bd4
 8005124:	08012bf8 	.word	0x08012bf8

08005128 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <memp_malloc_pool+0x1c>
 8005136:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <memp_malloc_pool+0x38>)
 8005138:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800513c:	4909      	ldr	r1, [pc, #36]	@ (8005164 <memp_malloc_pool+0x3c>)
 800513e:	480a      	ldr	r0, [pc, #40]	@ (8005168 <memp_malloc_pool+0x40>)
 8005140:	f00c fb06 	bl	8011750 <iprintf>
  if (desc == NULL) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <memp_malloc_pool+0x26>
    return NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	e003      	b.n	8005156 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ffc0 	bl	80050d4 <do_memp_malloc_pool>
 8005154:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	08012ba4 	.word	0x08012ba4
 8005164:	08012c20 	.word	0x08012c20
 8005168:	08012bf8 	.word	0x08012bf8

0800516c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d908      	bls.n	800518e <memp_malloc+0x22>
 800517c:	4b0a      	ldr	r3, [pc, #40]	@ (80051a8 <memp_malloc+0x3c>)
 800517e:	f240 1257 	movw	r2, #343	@ 0x157
 8005182:	490a      	ldr	r1, [pc, #40]	@ (80051ac <memp_malloc+0x40>)
 8005184:	480a      	ldr	r0, [pc, #40]	@ (80051b0 <memp_malloc+0x44>)
 8005186:	f00c fae3 	bl	8011750 <iprintf>
 800518a:	2300      	movs	r3, #0
 800518c:	e008      	b.n	80051a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4a08      	ldr	r2, [pc, #32]	@ (80051b4 <memp_malloc+0x48>)
 8005192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff9c 	bl	80050d4 <do_memp_malloc_pool>
 800519c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	08012ba4 	.word	0x08012ba4
 80051ac:	08012c34 	.word	0x08012c34
 80051b0:	08012bf8 	.word	0x08012bf8
 80051b4:	08016500 	.word	0x08016500

080051b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d006      	beq.n	80051da <do_memp_free_pool+0x22>
 80051cc:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <do_memp_free_pool+0x40>)
 80051ce:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80051d2:	490a      	ldr	r1, [pc, #40]	@ (80051fc <do_memp_free_pool+0x44>)
 80051d4:	480a      	ldr	r0, [pc, #40]	@ (8005200 <do_memp_free_pool+0x48>)
 80051d6:	f00c fabb 	bl	8011750 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08012ba4 	.word	0x08012ba4
 80051fc:	08012c54 	.word	0x08012c54
 8005200:	08012bf8 	.word	0x08012bf8

08005204 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d106      	bne.n	8005222 <memp_free_pool+0x1e>
 8005214:	4b0a      	ldr	r3, [pc, #40]	@ (8005240 <memp_free_pool+0x3c>)
 8005216:	f240 1295 	movw	r2, #405	@ 0x195
 800521a:	490a      	ldr	r1, [pc, #40]	@ (8005244 <memp_free_pool+0x40>)
 800521c:	480a      	ldr	r0, [pc, #40]	@ (8005248 <memp_free_pool+0x44>)
 800521e:	f00c fa97 	bl	8011750 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <memp_free_pool+0x34>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800522e:	6839      	ldr	r1, [r7, #0]
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ffc1 	bl	80051b8 <do_memp_free_pool>
 8005236:	e000      	b.n	800523a <memp_free_pool+0x36>
    return;
 8005238:	bf00      	nop
}
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08012ba4 	.word	0x08012ba4
 8005244:	08012c20 	.word	0x08012c20
 8005248:	08012bf8 	.word	0x08012bf8

0800524c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	6039      	str	r1, [r7, #0]
 8005256:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	2b08      	cmp	r3, #8
 800525c:	d907      	bls.n	800526e <memp_free+0x22>
 800525e:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <memp_free+0x44>)
 8005260:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8005264:	490b      	ldr	r1, [pc, #44]	@ (8005294 <memp_free+0x48>)
 8005266:	480c      	ldr	r0, [pc, #48]	@ (8005298 <memp_free+0x4c>)
 8005268:	f00c fa72 	bl	8011750 <iprintf>
 800526c:	e00c      	b.n	8005288 <memp_free+0x3c>

  if (mem == NULL) {
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	4a09      	ldr	r2, [pc, #36]	@ (800529c <memp_free+0x50>)
 8005278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527c:	6839      	ldr	r1, [r7, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ff9a 	bl	80051b8 <do_memp_free_pool>
 8005284:	e000      	b.n	8005288 <memp_free+0x3c>
    return;
 8005286:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	08012ba4 	.word	0x08012ba4
 8005294:	08012c74 	.word	0x08012c74
 8005298:	08012bf8 	.word	0x08012bf8
 800529c:	08016500 	.word	0x08016500

080052a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
 80052bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d108      	bne.n	80052d6 <netif_add+0x26>
 80052c4:	4b5b      	ldr	r3, [pc, #364]	@ (8005434 <netif_add+0x184>)
 80052c6:	f240 1227 	movw	r2, #295	@ 0x127
 80052ca:	495b      	ldr	r1, [pc, #364]	@ (8005438 <netif_add+0x188>)
 80052cc:	485b      	ldr	r0, [pc, #364]	@ (800543c <netif_add+0x18c>)
 80052ce:	f00c fa3f 	bl	8011750 <iprintf>
 80052d2:	2300      	movs	r3, #0
 80052d4:	e0a9      	b.n	800542a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d108      	bne.n	80052ee <netif_add+0x3e>
 80052dc:	4b55      	ldr	r3, [pc, #340]	@ (8005434 <netif_add+0x184>)
 80052de:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80052e2:	4957      	ldr	r1, [pc, #348]	@ (8005440 <netif_add+0x190>)
 80052e4:	4855      	ldr	r0, [pc, #340]	@ (800543c <netif_add+0x18c>)
 80052e6:	f00c fa33 	bl	8011750 <iprintf>
 80052ea:	2300      	movs	r3, #0
 80052ec:	e09d      	b.n	800542a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80052f4:	4b53      	ldr	r3, [pc, #332]	@ (8005444 <netif_add+0x194>)
 80052f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80052fe:	4b51      	ldr	r3, [pc, #324]	@ (8005444 <netif_add+0x194>)
 8005300:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005308:	4b4e      	ldr	r3, [pc, #312]	@ (8005444 <netif_add+0x194>)
 800530a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4a49      	ldr	r2, [pc, #292]	@ (8005448 <netif_add+0x198>)
 8005322:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3324      	adds	r3, #36	@ 0x24
 8005336:	2204      	movs	r2, #4
 8005338:	2100      	movs	r1, #0
 800533a:	4618      	mov	r0, r3
 800533c:	f00c fb60 	bl	8011a00 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a3a      	ldr	r2, [r7, #32]
 800534a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800534c:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <netif_add+0x19c>)
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f914 	bl	8005590 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	4798      	blx	r3
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <netif_add+0xc8>
    return NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	e058      	b.n	800542a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800537e:	2bff      	cmp	r3, #255	@ 0xff
 8005380:	d103      	bne.n	800538a <netif_add+0xda>
        netif->num = 0;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800538e:	4b30      	ldr	r3, [pc, #192]	@ (8005450 <netif_add+0x1a0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e02b      	b.n	80053ee <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	429a      	cmp	r2, r3
 800539c:	d106      	bne.n	80053ac <netif_add+0xfc>
 800539e:	4b25      	ldr	r3, [pc, #148]	@ (8005434 <netif_add+0x184>)
 80053a0:	f240 128b 	movw	r2, #395	@ 0x18b
 80053a4:	492b      	ldr	r1, [pc, #172]	@ (8005454 <netif_add+0x1a4>)
 80053a6:	4825      	ldr	r0, [pc, #148]	@ (800543c <netif_add+0x18c>)
 80053a8:	f00c f9d2 	bl	8011750 <iprintf>
        num_netifs++;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	3301      	adds	r3, #1
 80053b0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2bff      	cmp	r3, #255	@ 0xff
 80053b6:	dd06      	ble.n	80053c6 <netif_add+0x116>
 80053b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005434 <netif_add+0x184>)
 80053ba:	f240 128d 	movw	r2, #397	@ 0x18d
 80053be:	4926      	ldr	r1, [pc, #152]	@ (8005458 <netif_add+0x1a8>)
 80053c0:	481e      	ldr	r0, [pc, #120]	@ (800543c <netif_add+0x18c>)
 80053c2:	f00c f9c5 	bl	8011750 <iprintf>
        if (netif2->num == netif->num) {
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d108      	bne.n	80053e8 <netif_add+0x138>
          netif->num++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80053dc:	3301      	adds	r3, #1
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80053e6:	e005      	b.n	80053f4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1d0      	bne.n	8005396 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1be      	bne.n	8005378 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005400:	2bfe      	cmp	r3, #254	@ 0xfe
 8005402:	d103      	bne.n	800540c <netif_add+0x15c>
    netif_num = 0;
 8005404:	4b11      	ldr	r3, [pc, #68]	@ (800544c <netif_add+0x19c>)
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	e006      	b.n	800541a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005412:	3301      	adds	r3, #1
 8005414:	b2da      	uxtb	r2, r3
 8005416:	4b0d      	ldr	r3, [pc, #52]	@ (800544c <netif_add+0x19c>)
 8005418:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <netif_add+0x1a0>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005422:	4a0b      	ldr	r2, [pc, #44]	@ (8005450 <netif_add+0x1a0>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08012c90 	.word	0x08012c90
 8005438:	08012d24 	.word	0x08012d24
 800543c:	08012ce0 	.word	0x08012ce0
 8005440:	08012d40 	.word	0x08012d40
 8005444:	08016574 	.word	0x08016574
 8005448:	08005873 	.word	0x08005873
 800544c:	20008044 	.word	0x20008044
 8005450:	2000803c 	.word	0x2000803c
 8005454:	08012d64 	.word	0x08012d64
 8005458:	08012d78 	.word	0x08012d78

0800545c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 fdff 	bl	800806c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f007 fe37 	bl	800d0e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <netif_do_set_ipaddr+0x20>
 8005492:	4b1d      	ldr	r3, [pc, #116]	@ (8005508 <netif_do_set_ipaddr+0x88>)
 8005494:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8005498:	491c      	ldr	r1, [pc, #112]	@ (800550c <netif_do_set_ipaddr+0x8c>)
 800549a:	481d      	ldr	r0, [pc, #116]	@ (8005510 <netif_do_set_ipaddr+0x90>)
 800549c:	f00c f958 	bl	8011750 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <netif_do_set_ipaddr+0x34>
 80054a6:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <netif_do_set_ipaddr+0x88>)
 80054a8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80054ac:	4917      	ldr	r1, [pc, #92]	@ (800550c <netif_do_set_ipaddr+0x8c>)
 80054ae:	4818      	ldr	r0, [pc, #96]	@ (8005510 <netif_do_set_ipaddr+0x90>)
 80054b0:	f00c f94e 	bl	8011750 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3304      	adds	r3, #4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d01c      	beq.n	80054fc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3304      	adds	r3, #4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80054d2:	f107 0314 	add.w	r3, r7, #20
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ffbf 	bl	800545c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <netif_do_set_ipaddr+0x6a>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	e000      	b.n	80054ec <netif_do_set_ipaddr+0x6c>
 80054ea:	2300      	movs	r3, #0
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80054f0:	2101      	movs	r1, #1
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f8d2 	bl	800569c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	08012c90 	.word	0x08012c90
 800550c:	08012da8 	.word	0x08012da8
 8005510:	08012ce0 	.word	0x08012ce0

08005514 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3308      	adds	r3, #8
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d00a      	beq.n	8005544 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <netif_do_set_netmask+0x26>
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	e000      	b.n	800553c <netif_do_set_netmask+0x28>
 800553a:	2300      	movs	r3, #0
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	330c      	adds	r3, #12
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	429a      	cmp	r2, r3
 800556a:	d00a      	beq.n	8005582 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <netif_do_set_gw+0x26>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	e000      	b.n	800557a <netif_do_set_gw+0x28>
 8005578:	2300      	movs	r3, #0
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80055ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005620 <netif_set_addr+0x90>)
 80055ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80055b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005620 <netif_set_addr+0x90>)
 80055b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80055c0:	4b17      	ldr	r3, [pc, #92]	@ (8005620 <netif_set_addr+0x90>)
 80055c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <netif_set_addr+0x42>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <netif_set_addr+0x46>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <netif_set_addr+0x48>
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	461a      	mov	r2, r3
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff49 	bl	8005480 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f7ff ff8e 	bl	8005514 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f7ff ffa8 	bl	8005552 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	461a      	mov	r2, r3
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f7ff ff35 	bl	8005480 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005616:	bf00      	nop
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	08016574 	.word	0x08016574

08005624 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800562c:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <netif_set_default+0x1c>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20008040 	.word	0x20008040

08005644 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d107      	bne.n	8005662 <netif_set_up+0x1e>
 8005652:	4b0f      	ldr	r3, [pc, #60]	@ (8005690 <netif_set_up+0x4c>)
 8005654:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8005658:	490e      	ldr	r1, [pc, #56]	@ (8005694 <netif_set_up+0x50>)
 800565a:	480f      	ldr	r0, [pc, #60]	@ (8005698 <netif_set_up+0x54>)
 800565c:	f00c f878 	bl	8011750 <iprintf>
 8005660:	e013      	b.n	800568a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10c      	bne.n	800568a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005682:	2103      	movs	r1, #3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f809 	bl	800569c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	08012c90 	.word	0x08012c90
 8005694:	08012e18 	.word	0x08012e18
 8005698:	08012ce0 	.word	0x08012ce0

0800569c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <netif_issue_reports+0x20>
 80056ae:	4b18      	ldr	r3, [pc, #96]	@ (8005710 <netif_issue_reports+0x74>)
 80056b0:	f240 326d 	movw	r2, #877	@ 0x36d
 80056b4:	4917      	ldr	r1, [pc, #92]	@ (8005714 <netif_issue_reports+0x78>)
 80056b6:	4818      	ldr	r0, [pc, #96]	@ (8005718 <netif_issue_reports+0x7c>)
 80056b8:	f00c f84a 	bl	8011750 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01e      	beq.n	8005708 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d017      	beq.n	8005708 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3304      	adds	r3, #4
 80056e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	3304      	adds	r3, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f00a faeb 	bl	800fcdc <etharp_request>
 8005706:	e000      	b.n	800570a <netif_issue_reports+0x6e>
    return;
 8005708:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	08012c90 	.word	0x08012c90
 8005714:	08012e34 	.word	0x08012e34
 8005718:	08012ce0 	.word	0x08012ce0

0800571c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d107      	bne.n	800573a <netif_set_down+0x1e>
 800572a:	4b12      	ldr	r3, [pc, #72]	@ (8005774 <netif_set_down+0x58>)
 800572c:	f240 329b 	movw	r2, #923	@ 0x39b
 8005730:	4911      	ldr	r1, [pc, #68]	@ (8005778 <netif_set_down+0x5c>)
 8005732:	4812      	ldr	r0, [pc, #72]	@ (800577c <netif_set_down+0x60>)
 8005734:	f00c f80c 	bl	8011750 <iprintf>
 8005738:	e019      	b.n	800576e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d012      	beq.n	800576e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800574e:	f023 0301 	bic.w	r3, r3, #1
 8005752:	b2da      	uxtb	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f009 fe71 	bl	800f450 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	08012c90 	.word	0x08012c90
 8005778:	08012e58 	.word	0x08012e58
 800577c:	08012ce0 	.word	0x08012ce0

08005780 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <netif_set_link_up+0x1e>
 800578e:	4b15      	ldr	r3, [pc, #84]	@ (80057e4 <netif_set_link_up+0x64>)
 8005790:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8005794:	4914      	ldr	r1, [pc, #80]	@ (80057e8 <netif_set_link_up+0x68>)
 8005796:	4815      	ldr	r0, [pc, #84]	@ (80057ec <netif_set_link_up+0x6c>)
 8005798:	f00b ffda 	bl	8011750 <iprintf>
 800579c:	e01e      	b.n	80057dc <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d117      	bne.n	80057dc <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f008 f8bc 	bl	800d93c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057c4:	2103      	movs	r1, #3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff ff68 	bl	800569c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <netif_set_link_up+0x5c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	08012c90 	.word	0x08012c90
 80057e8:	08012e78 	.word	0x08012e78
 80057ec:	08012ce0 	.word	0x08012ce0

080057f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <netif_set_link_down+0x1e>
 80057fe:	4b11      	ldr	r3, [pc, #68]	@ (8005844 <netif_set_link_down+0x54>)
 8005800:	f240 4206 	movw	r2, #1030	@ 0x406
 8005804:	4910      	ldr	r1, [pc, #64]	@ (8005848 <netif_set_link_down+0x58>)
 8005806:	4811      	ldr	r0, [pc, #68]	@ (800584c <netif_set_link_down+0x5c>)
 8005808:	f00b ffa2 	bl	8011750 <iprintf>
 800580c:	e017      	b.n	800583e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d010      	beq.n	800583e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005822:	f023 0304 	bic.w	r3, r3, #4
 8005826:	b2da      	uxtb	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <netif_set_link_down+0x4e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	08012c90 	.word	0x08012c90
 8005848:	08012e9c 	.word	0x08012e9c
 800584c:	08012ce0 	.word	0x08012ce0

08005850 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	61da      	str	r2, [r3, #28]
  }
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800587e:	f06f 030b 	mvn.w	r3, #11
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800589a:	79fb      	ldrb	r3, [r7, #7]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80058a0:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <netif_get_by_index+0x48>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e00c      	b.n	80058c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d101      	bne.n	80058bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	e006      	b.n	80058ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1ef      	bne.n	80058a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	2000803c 	.word	0x2000803c

080058dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <pbuf_free_ooseq+0x38>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80058e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <pbuf_free_ooseq+0x3c>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	607b      	str	r3, [r7, #4]
 80058ee:	e00a      	b.n	8005906 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fbf5 	bl	80080e8 <tcp_free_ooseq>
      return;
 80058fe:	e005      	b.n	800590c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f1      	bne.n	80058f0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20008045 	.word	0x20008045
 8005918:	20008054 	.word	0x20008054

0800591c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005920:	4b03      	ldr	r3, [pc, #12]	@ (8005930 <pbuf_pool_is_empty+0x14>)
 8005922:	2201      	movs	r2, #1
 8005924:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20008045 	.word	0x20008045

08005934 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4611      	mov	r1, r2
 8005940:	461a      	mov	r2, r3
 8005942:	460b      	mov	r3, r1
 8005944:	80fb      	strh	r3, [r7, #6]
 8005946:	4613      	mov	r3, r2
 8005948:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88ba      	ldrh	r2, [r7, #4]
 8005960:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005962:	8b3b      	ldrh	r3, [r7, #24]
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	7f3a      	ldrb	r2, [r7, #28]
 800596e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	73da      	strb	r2, [r3, #15]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08c      	sub	sp, #48	@ 0x30
 800598c:	af02      	add	r7, sp, #8
 800598e:	4603      	mov	r3, r0
 8005990:	71fb      	strb	r3, [r7, #7]
 8005992:	460b      	mov	r3, r1
 8005994:	80bb      	strh	r3, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80059a4:	d07f      	beq.n	8005aa6 <pbuf_alloc+0x11e>
 80059a6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80059aa:	f300 80c8 	bgt.w	8005b3e <pbuf_alloc+0x1b6>
 80059ae:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80059b2:	d010      	beq.n	80059d6 <pbuf_alloc+0x4e>
 80059b4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80059b8:	f300 80c1 	bgt.w	8005b3e <pbuf_alloc+0x1b6>
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d002      	beq.n	80059c6 <pbuf_alloc+0x3e>
 80059c0:	2b41      	cmp	r3, #65	@ 0x41
 80059c2:	f040 80bc 	bne.w	8005b3e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	88bb      	ldrh	r3, [r7, #4]
 80059ca:	4619      	mov	r1, r3
 80059cc:	2000      	movs	r0, #0
 80059ce:	f000 f8d1 	bl	8005b74 <pbuf_alloc_reference>
 80059d2:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80059d4:	e0bd      	b.n	8005b52 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80059de:	88bb      	ldrh	r3, [r7, #4]
 80059e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80059e2:	2008      	movs	r0, #8
 80059e4:	f7ff fbc2 	bl	800516c <memp_malloc>
 80059e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d109      	bne.n	8005a04 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80059f0:	f7ff ff94 	bl	800591c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <pbuf_alloc+0x78>
            pbuf_free(p);
 80059fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059fc:	f000 faa8 	bl	8005f50 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e0a7      	b.n	8005b54 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a06:	3303      	adds	r3, #3
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f023 0303 	bic.w	r3, r3, #3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	8b7a      	ldrh	r2, [r7, #26]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bf28      	it	cs
 8005a1c:	4613      	movcs	r3, r2
 8005a1e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005a20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a22:	3310      	adds	r3, #16
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	3303      	adds	r3, #3
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
 8005a2e:	4618      	mov	r0, r3
 8005a30:	89f9      	ldrh	r1, [r7, #14]
 8005a32:	8b7a      	ldrh	r2, [r7, #26]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	887b      	ldrh	r3, [r7, #2]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4601      	mov	r1, r0
 8005a40:	6938      	ldr	r0, [r7, #16]
 8005a42:	f7ff ff77 	bl	8005934 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d006      	beq.n	8005a60 <pbuf_alloc+0xd8>
 8005a52:	4b42      	ldr	r3, [pc, #264]	@ (8005b5c <pbuf_alloc+0x1d4>)
 8005a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a58:	4941      	ldr	r1, [pc, #260]	@ (8005b60 <pbuf_alloc+0x1d8>)
 8005a5a:	4842      	ldr	r0, [pc, #264]	@ (8005b64 <pbuf_alloc+0x1dc>)
 8005a5c:	f00b fe78 	bl	8011750 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005a60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005a62:	3303      	adds	r3, #3
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8005a6c:	d106      	bne.n	8005a7c <pbuf_alloc+0xf4>
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005b5c <pbuf_alloc+0x1d4>)
 8005a70:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8005a74:	493c      	ldr	r1, [pc, #240]	@ (8005b68 <pbuf_alloc+0x1e0>)
 8005a76:	483b      	ldr	r0, [pc, #236]	@ (8005b64 <pbuf_alloc+0x1dc>)
 8005a78:	f00b fe6a 	bl	8011750 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d102      	bne.n	8005a88 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a86:	e002      	b.n	8005a8e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005a92:	8b7a      	ldrh	r2, [r7, #26]
 8005a94:	89fb      	ldrh	r3, [r7, #14]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8005a9e:	8b7b      	ldrh	r3, [r7, #26]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d19e      	bne.n	80059e2 <pbuf_alloc+0x5a>
      break;
 8005aa4:	e055      	b.n	8005b52 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005aa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005aa8:	3303      	adds	r3, #3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f023 0303 	bic.w	r3, r3, #3
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	88bb      	ldrh	r3, [r7, #4]
 8005ab4:	3303      	adds	r3, #3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4413      	add	r3, r2
 8005ac0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005ac2:	8b3b      	ldrh	r3, [r7, #24]
 8005ac4:	3310      	adds	r3, #16
 8005ac6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ac8:	8b3a      	ldrh	r2, [r7, #24]
 8005aca:	88bb      	ldrh	r3, [r7, #4]
 8005acc:	3303      	adds	r3, #3
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d306      	bcc.n	8005ae4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005ad6:	8afa      	ldrh	r2, [r7, #22]
 8005ad8:	88bb      	ldrh	r3, [r7, #4]
 8005ada:	3303      	adds	r3, #3
 8005adc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d201      	bcs.n	8005ae8 <pbuf_alloc+0x160>
        return NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	e035      	b.n	8005b54 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005ae8:	8afb      	ldrh	r3, [r7, #22]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff f9ae 	bl	8004e4c <mem_malloc>
 8005af0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <pbuf_alloc+0x174>
        return NULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	e02b      	b.n	8005b54 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005afc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005afe:	3310      	adds	r3, #16
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	4413      	add	r3, r2
 8005b04:	3303      	adds	r3, #3
 8005b06:	f023 0303 	bic.w	r3, r3, #3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	88b9      	ldrh	r1, [r7, #4]
 8005b0e:	88ba      	ldrh	r2, [r7, #4]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b1e:	f7ff ff09 	bl	8005934 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d010      	beq.n	8005b50 <pbuf_alloc+0x1c8>
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <pbuf_alloc+0x1d4>)
 8005b30:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005b34:	490d      	ldr	r1, [pc, #52]	@ (8005b6c <pbuf_alloc+0x1e4>)
 8005b36:	480b      	ldr	r0, [pc, #44]	@ (8005b64 <pbuf_alloc+0x1dc>)
 8005b38:	f00b fe0a 	bl	8011750 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005b3c:	e008      	b.n	8005b50 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005b3e:	4b07      	ldr	r3, [pc, #28]	@ (8005b5c <pbuf_alloc+0x1d4>)
 8005b40:	f240 1227 	movw	r2, #295	@ 0x127
 8005b44:	490a      	ldr	r1, [pc, #40]	@ (8005b70 <pbuf_alloc+0x1e8>)
 8005b46:	4807      	ldr	r0, [pc, #28]	@ (8005b64 <pbuf_alloc+0x1dc>)
 8005b48:	f00b fe02 	bl	8011750 <iprintf>
      return NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e001      	b.n	8005b54 <pbuf_alloc+0x1cc>
      break;
 8005b50:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	@ 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	08012ec0 	.word	0x08012ec0
 8005b60:	08012ef0 	.word	0x08012ef0
 8005b64:	08012f20 	.word	0x08012f20
 8005b68:	08012f48 	.word	0x08012f48
 8005b6c:	08012f7c 	.word	0x08012f7c
 8005b70:	08012fa8 	.word	0x08012fa8

08005b74 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
 8005b80:	4613      	mov	r3, r2
 8005b82:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005b84:	883b      	ldrh	r3, [r7, #0]
 8005b86:	2b41      	cmp	r3, #65	@ 0x41
 8005b88:	d009      	beq.n	8005b9e <pbuf_alloc_reference+0x2a>
 8005b8a:	883b      	ldrh	r3, [r7, #0]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d006      	beq.n	8005b9e <pbuf_alloc_reference+0x2a>
 8005b90:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <pbuf_alloc_reference+0x5c>)
 8005b92:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005b96:	490f      	ldr	r1, [pc, #60]	@ (8005bd4 <pbuf_alloc_reference+0x60>)
 8005b98:	480f      	ldr	r0, [pc, #60]	@ (8005bd8 <pbuf_alloc_reference+0x64>)
 8005b9a:	f00b fdd9 	bl	8011750 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005b9e:	2007      	movs	r0, #7
 8005ba0:	f7ff fae4 	bl	800516c <memp_malloc>
 8005ba4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e00b      	b.n	8005bc8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005bb0:	8879      	ldrh	r1, [r7, #2]
 8005bb2:	887a      	ldrh	r2, [r7, #2]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9301      	str	r3, [sp, #4]
 8005bb8:	883b      	ldrh	r3, [r7, #0]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff feb7 	bl	8005934 <pbuf_init_alloced_pbuf>
  return p;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	08012ec0 	.word	0x08012ec0
 8005bd4:	08012fc4 	.word	0x08012fc4
 8005bd8:	08012f20 	.word	0x08012f20

08005bdc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	460b      	mov	r3, r1
 8005bea:	81bb      	strh	r3, [r7, #12]
 8005bec:	4613      	mov	r3, r2
 8005bee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005bf4:	8a7b      	ldrh	r3, [r7, #18]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	f023 0203 	bic.w	r2, r3, #3
 8005bfc:	89bb      	ldrh	r3, [r7, #12]
 8005bfe:	441a      	add	r2, r3
 8005c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d901      	bls.n	8005c0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e018      	b.n	8005c3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005c10:	8a7b      	ldrh	r3, [r7, #18]
 8005c12:	3303      	adds	r3, #3
 8005c14:	f023 0303 	bic.w	r3, r3, #3
 8005c18:	6a3a      	ldr	r2, [r7, #32]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e001      	b.n	8005c24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	89b9      	ldrh	r1, [r7, #12]
 8005c28:	89ba      	ldrh	r2, [r7, #12]
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	897b      	ldrh	r3, [r7, #10]
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	460b      	mov	r3, r1
 8005c34:	6979      	ldr	r1, [r7, #20]
 8005c36:	f7ff fe7d 	bl	8005934 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005c3a:	687b      	ldr	r3, [r7, #4]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d106      	bne.n	8005c64 <pbuf_realloc+0x20>
 8005c56:	4b3a      	ldr	r3, [pc, #232]	@ (8005d40 <pbuf_realloc+0xfc>)
 8005c58:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005c5c:	4939      	ldr	r1, [pc, #228]	@ (8005d44 <pbuf_realloc+0x100>)
 8005c5e:	483a      	ldr	r0, [pc, #232]	@ (8005d48 <pbuf_realloc+0x104>)
 8005c60:	f00b fd76 	bl	8011750 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	891b      	ldrh	r3, [r3, #8]
 8005c68:	887a      	ldrh	r2, [r7, #2]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d263      	bcs.n	8005d36 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	891a      	ldrh	r2, [r3, #8]
 8005c72:	887b      	ldrh	r3, [r7, #2]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	817b      	strh	r3, [r7, #10]
  q = p;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005c80:	e018      	b.n	8005cb4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	895b      	ldrh	r3, [r3, #10]
 8005c86:	897a      	ldrh	r2, [r7, #10]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	891a      	ldrh	r2, [r3, #8]
 8005c90:	893b      	ldrh	r3, [r7, #8]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <pbuf_realloc+0x70>
 8005ca6:	4b26      	ldr	r3, [pc, #152]	@ (8005d40 <pbuf_realloc+0xfc>)
 8005ca8:	f240 12af 	movw	r2, #431	@ 0x1af
 8005cac:	4927      	ldr	r1, [pc, #156]	@ (8005d4c <pbuf_realloc+0x108>)
 8005cae:	4826      	ldr	r0, [pc, #152]	@ (8005d48 <pbuf_realloc+0x104>)
 8005cb0:	f00b fd4e 	bl	8011750 <iprintf>
  while (rem_len > q->len) {
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	895b      	ldrh	r3, [r3, #10]
 8005cb8:	897a      	ldrh	r2, [r7, #10]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d8e1      	bhi.n	8005c82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	7b1b      	ldrb	r3, [r3, #12]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d121      	bne.n	8005d0e <pbuf_realloc+0xca>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	895b      	ldrh	r3, [r3, #10]
 8005cce:	897a      	ldrh	r2, [r7, #10]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d01c      	beq.n	8005d0e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	7b5b      	ldrb	r3, [r3, #13]
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d116      	bne.n	8005d0e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	897b      	ldrh	r3, [r7, #10]
 8005cec:	4413      	add	r3, r2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7fe ffae 	bl	8004c54 <mem_trim>
 8005cf8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <pbuf_realloc+0xca>
 8005d00:	4b0f      	ldr	r3, [pc, #60]	@ (8005d40 <pbuf_realloc+0xfc>)
 8005d02:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005d06:	4912      	ldr	r1, [pc, #72]	@ (8005d50 <pbuf_realloc+0x10c>)
 8005d08:	480f      	ldr	r0, [pc, #60]	@ (8005d48 <pbuf_realloc+0x104>)
 8005d0a:	f00b fd21 	bl	8011750 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	897a      	ldrh	r2, [r7, #10]
 8005d12:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	895a      	ldrh	r2, [r3, #10]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f000 f911 	bl	8005f50 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e000      	b.n	8005d38 <pbuf_realloc+0xf4>
    return;
 8005d36:	bf00      	nop

}
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	08012ec0 	.word	0x08012ec0
 8005d44:	08012fd8 	.word	0x08012fd8
 8005d48:	08012f20 	.word	0x08012f20
 8005d4c:	08012ff0 	.word	0x08012ff0
 8005d50:	08013008 	.word	0x08013008

08005d54 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <pbuf_add_header_impl+0x22>
 8005d68:	4b2b      	ldr	r3, [pc, #172]	@ (8005e18 <pbuf_add_header_impl+0xc4>)
 8005d6a:	f240 12df 	movw	r2, #479	@ 0x1df
 8005d6e:	492b      	ldr	r1, [pc, #172]	@ (8005e1c <pbuf_add_header_impl+0xc8>)
 8005d70:	482b      	ldr	r0, [pc, #172]	@ (8005e20 <pbuf_add_header_impl+0xcc>)
 8005d72:	f00b fced 	bl	8011750 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <pbuf_add_header_impl+0x30>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d82:	d301      	bcc.n	8005d88 <pbuf_add_header_impl+0x34>
    return 1;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e043      	b.n	8005e10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <pbuf_add_header_impl+0x3e>
    return 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e03e      	b.n	8005e10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	891a      	ldrh	r2, [r3, #8]
 8005d9a:	8a7b      	ldrh	r3, [r7, #18]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8a7a      	ldrh	r2, [r7, #18]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d901      	bls.n	8005daa <pbuf_add_header_impl+0x56>
    return 1;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e032      	b.n	8005e10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	7b1b      	ldrb	r3, [r3, #12]
 8005dae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005db0:	8a3b      	ldrh	r3, [r7, #16]
 8005db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	425b      	negs	r3, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3310      	adds	r3, #16
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d20d      	bcs.n	8005dec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e01d      	b.n	8005e10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d006      	beq.n	8005de8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	425b      	negs	r3, r3
 8005de2:	4413      	add	r3, r2
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	e001      	b.n	8005dec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e011      	b.n	8005e10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	895a      	ldrh	r2, [r3, #10]
 8005df6:	8a7b      	ldrh	r3, [r7, #18]
 8005df8:	4413      	add	r3, r2
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	891a      	ldrh	r2, [r3, #8]
 8005e04:	8a7b      	ldrh	r3, [r7, #18]
 8005e06:	4413      	add	r3, r2
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	811a      	strh	r2, [r3, #8]


  return 0;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	08012ec0 	.word	0x08012ec0
 8005e1c:	08013024 	.word	0x08013024
 8005e20:	08012f20 	.word	0x08012f20

08005e24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005e2e:	2200      	movs	r2, #0
 8005e30:	6839      	ldr	r1, [r7, #0]
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff ff8e 	bl	8005d54 <pbuf_add_header_impl>
 8005e38:	4603      	mov	r3, r0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <pbuf_remove_header+0x1e>
 8005e54:	4b20      	ldr	r3, [pc, #128]	@ (8005ed8 <pbuf_remove_header+0x94>)
 8005e56:	f240 224b 	movw	r2, #587	@ 0x24b
 8005e5a:	4920      	ldr	r1, [pc, #128]	@ (8005edc <pbuf_remove_header+0x98>)
 8005e5c:	4820      	ldr	r0, [pc, #128]	@ (8005ee0 <pbuf_remove_header+0x9c>)
 8005e5e:	f00b fc77 	bl	8011750 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <pbuf_remove_header+0x2c>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e6e:	d301      	bcc.n	8005e74 <pbuf_remove_header+0x30>
    return 1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e02c      	b.n	8005ece <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <pbuf_remove_header+0x3a>
    return 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	e027      	b.n	8005ece <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	895b      	ldrh	r3, [r3, #10]
 8005e86:	89fa      	ldrh	r2, [r7, #14]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d908      	bls.n	8005e9e <pbuf_remove_header+0x5a>
 8005e8c:	4b12      	ldr	r3, [pc, #72]	@ (8005ed8 <pbuf_remove_header+0x94>)
 8005e8e:	f240 2255 	movw	r2, #597	@ 0x255
 8005e92:	4914      	ldr	r1, [pc, #80]	@ (8005ee4 <pbuf_remove_header+0xa0>)
 8005e94:	4812      	ldr	r0, [pc, #72]	@ (8005ee0 <pbuf_remove_header+0x9c>)
 8005e96:	f00b fc5b 	bl	8011750 <iprintf>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e017      	b.n	8005ece <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	441a      	add	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	895a      	ldrh	r2, [r3, #10]
 8005eb4:	89fb      	ldrh	r3, [r7, #14]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	891a      	ldrh	r2, [r3, #8]
 8005ec2:	89fb      	ldrh	r3, [r7, #14]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	08012ec0 	.word	0x08012ec0
 8005edc:	08013024 	.word	0x08013024
 8005ee0:	08012f20 	.word	0x08012f20
 8005ee4:	08013030 	.word	0x08013030

08005ee8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	807b      	strh	r3, [r7, #2]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da08      	bge.n	8005f12 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f04:	425b      	negs	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff9b 	bl	8005e44 <pbuf_remove_header>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	e007      	b.n	8005f22 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005f12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f16:	787a      	ldrb	r2, [r7, #1]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff1a 	bl	8005d54 <pbuf_add_header_impl>
 8005f20:	4603      	mov	r3, r0
  }
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005f36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffd2 	bl	8005ee8 <pbuf_header_impl>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d106      	bne.n	8005f72 <pbuf_free+0x22>
 8005f64:	4b38      	ldr	r3, [pc, #224]	@ (8006048 <pbuf_free+0xf8>)
 8005f66:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005f6a:	4938      	ldr	r1, [pc, #224]	@ (800604c <pbuf_free+0xfc>)
 8005f6c:	4838      	ldr	r0, [pc, #224]	@ (8006050 <pbuf_free+0x100>)
 8005f6e:	f00b fbef 	bl	8011750 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e063      	b.n	800603e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005f7a:	e05c      	b.n	8006036 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	7b9b      	ldrb	r3, [r3, #14]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <pbuf_free+0x42>
 8005f84:	4b30      	ldr	r3, [pc, #192]	@ (8006048 <pbuf_free+0xf8>)
 8005f86:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005f8a:	4932      	ldr	r1, [pc, #200]	@ (8006054 <pbuf_free+0x104>)
 8005f8c:	4830      	ldr	r0, [pc, #192]	@ (8006050 <pbuf_free+0x100>)
 8005f8e:	f00b fbdf 	bl	8011750 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7b9b      	ldrb	r3, [r3, #14]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	739a      	strb	r2, [r3, #14]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7b9b      	ldrb	r3, [r3, #14]
 8005fa2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005fa4:	7dbb      	ldrb	r3, [r7, #22]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d143      	bne.n	8006032 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	7b1b      	ldrb	r3, [r3, #12]
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	7b5b      	ldrb	r3, [r3, #13]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d011      	beq.n	8005fea <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <pbuf_free+0x90>
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <pbuf_free+0xf8>)
 8005fd4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005fd8:	491f      	ldr	r1, [pc, #124]	@ (8006058 <pbuf_free+0x108>)
 8005fda:	481d      	ldr	r0, [pc, #116]	@ (8006050 <pbuf_free+0x100>)
 8005fdc:	f00b fbb8 	bl	8011750 <iprintf>
        pc->custom_free_function(p);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e01d      	b.n	8006026 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d104      	bne.n	8005ffa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	2008      	movs	r0, #8
 8005ff4:	f7ff f92a 	bl	800524c <memp_free>
 8005ff8:	e015      	b.n	8006026 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d104      	bne.n	800600a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	2007      	movs	r0, #7
 8006004:	f7ff f922 	bl	800524c <memp_free>
 8006008:	e00d      	b.n	8006026 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d103      	bne.n	8006018 <pbuf_free+0xc8>
          mem_free(p);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fe fdb5 	bl	8004b80 <mem_free>
 8006016:	e006      	b.n	8006026 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006018:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <pbuf_free+0xf8>)
 800601a:	f240 320f 	movw	r2, #783	@ 0x30f
 800601e:	490f      	ldr	r1, [pc, #60]	@ (800605c <pbuf_free+0x10c>)
 8006020:	480b      	ldr	r0, [pc, #44]	@ (8006050 <pbuf_free+0x100>)
 8006022:	f00b fb95 	bl	8011750 <iprintf>
        }
      }
      count++;
 8006026:	7dfb      	ldrb	r3, [r7, #23]
 8006028:	3301      	adds	r3, #1
 800602a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	e001      	b.n	8006036 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d19f      	bne.n	8005f7c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	08012ec0 	.word	0x08012ec0
 800604c:	08013024 	.word	0x08013024
 8006050:	08012f20 	.word	0x08012f20
 8006054:	08013050 	.word	0x08013050
 8006058:	08013068 	.word	0x08013068
 800605c:	0801308c 	.word	0x0801308c

08006060 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800606c:	e005      	b.n	800607a <pbuf_clen+0x1a>
    ++len;
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	3301      	adds	r3, #1
 8006072:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f6      	bne.n	800606e <pbuf_clen+0xe>
  }
  return len;
 8006080:	89fb      	ldrh	r3, [r7, #14]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
	...

08006090 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	7b9b      	ldrb	r3, [r3, #14]
 80060a2:	3301      	adds	r3, #1
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	7b9b      	ldrb	r3, [r3, #14]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <pbuf_ref+0x30>
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <pbuf_ref+0x38>)
 80060b4:	f240 3242 	movw	r2, #834	@ 0x342
 80060b8:	4904      	ldr	r1, [pc, #16]	@ (80060cc <pbuf_ref+0x3c>)
 80060ba:	4805      	ldr	r0, [pc, #20]	@ (80060d0 <pbuf_ref+0x40>)
 80060bc:	f00b fb48 	bl	8011750 <iprintf>
  }
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	08012ec0 	.word	0x08012ec0
 80060cc:	080130a0 	.word	0x080130a0
 80060d0:	08012f20 	.word	0x08012f20

080060d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <pbuf_cat+0x16>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d107      	bne.n	80060fa <pbuf_cat+0x26>
 80060ea:	4b20      	ldr	r3, [pc, #128]	@ (800616c <pbuf_cat+0x98>)
 80060ec:	f240 3259 	movw	r2, #857	@ 0x359
 80060f0:	491f      	ldr	r1, [pc, #124]	@ (8006170 <pbuf_cat+0x9c>)
 80060f2:	4820      	ldr	r0, [pc, #128]	@ (8006174 <pbuf_cat+0xa0>)
 80060f4:	f00b fb2c 	bl	8011750 <iprintf>
 80060f8:	e034      	b.n	8006164 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	e00a      	b.n	8006116 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	891a      	ldrh	r2, [r3, #8]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	891b      	ldrh	r3, [r3, #8]
 8006108:	4413      	add	r3, r2
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	891a      	ldrh	r2, [r3, #8]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	895b      	ldrh	r3, [r3, #10]
 8006126:	429a      	cmp	r2, r3
 8006128:	d006      	beq.n	8006138 <pbuf_cat+0x64>
 800612a:	4b10      	ldr	r3, [pc, #64]	@ (800616c <pbuf_cat+0x98>)
 800612c:	f240 3262 	movw	r2, #866	@ 0x362
 8006130:	4911      	ldr	r1, [pc, #68]	@ (8006178 <pbuf_cat+0xa4>)
 8006132:	4810      	ldr	r0, [pc, #64]	@ (8006174 <pbuf_cat+0xa0>)
 8006134:	f00b fb0c 	bl	8011750 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d006      	beq.n	800614e <pbuf_cat+0x7a>
 8006140:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <pbuf_cat+0x98>)
 8006142:	f240 3263 	movw	r2, #867	@ 0x363
 8006146:	490d      	ldr	r1, [pc, #52]	@ (800617c <pbuf_cat+0xa8>)
 8006148:	480a      	ldr	r0, [pc, #40]	@ (8006174 <pbuf_cat+0xa0>)
 800614a:	f00b fb01 	bl	8011750 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	891a      	ldrh	r2, [r3, #8]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	891b      	ldrh	r3, [r3, #8]
 8006156:	4413      	add	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	08012ec0 	.word	0x08012ec0
 8006170:	080130b4 	.word	0x080130b4
 8006174:	08012f20 	.word	0x08012f20
 8006178:	080130ec 	.word	0x080130ec
 800617c:	0801311c 	.word	0x0801311c

08006180 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ffa1 	bl	80060d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006192:	6838      	ldr	r0, [r7, #0]
 8006194:	f7ff ff7c 	bl	8006090 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80061aa:	2300      	movs	r3, #0
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	2300      	movs	r3, #0
 80061b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <pbuf_copy+0x2a>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <pbuf_copy+0x2a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	891a      	ldrh	r2, [r3, #8]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	891b      	ldrh	r3, [r3, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d209      	bcs.n	80061de <pbuf_copy+0x3e>
 80061ca:	4b57      	ldr	r3, [pc, #348]	@ (8006328 <pbuf_copy+0x188>)
 80061cc:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80061d0:	4956      	ldr	r1, [pc, #344]	@ (800632c <pbuf_copy+0x18c>)
 80061d2:	4857      	ldr	r0, [pc, #348]	@ (8006330 <pbuf_copy+0x190>)
 80061d4:	f00b fabc 	bl	8011750 <iprintf>
 80061d8:	f06f 030f 	mvn.w	r3, #15
 80061dc:	e09f      	b.n	800631e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	895b      	ldrh	r3, [r3, #10]
 80061e2:	461a      	mov	r2, r3
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad2      	subs	r2, r2, r3
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	895b      	ldrh	r3, [r3, #10]
 80061ec:	4619      	mov	r1, r3
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	1acb      	subs	r3, r1, r3
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d306      	bcc.n	8006204 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	895b      	ldrh	r3, [r3, #10]
 80061fa:	461a      	mov	r2, r3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e005      	b.n	8006210 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	895b      	ldrh	r3, [r3, #10]
 8006208:	461a      	mov	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	18d0      	adds	r0, r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4413      	add	r3, r2
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4619      	mov	r1, r3
 8006224:	f00b fc81 	bl	8011b2a <memcpy>
    offset_to += len;
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	4413      	add	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	895b      	ldrh	r3, [r3, #10]
 800623c:	461a      	mov	r2, r3
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	4293      	cmp	r3, r2
 8006242:	d906      	bls.n	8006252 <pbuf_copy+0xb2>
 8006244:	4b38      	ldr	r3, [pc, #224]	@ (8006328 <pbuf_copy+0x188>)
 8006246:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800624a:	493a      	ldr	r1, [pc, #232]	@ (8006334 <pbuf_copy+0x194>)
 800624c:	4838      	ldr	r0, [pc, #224]	@ (8006330 <pbuf_copy+0x190>)
 800624e:	f00b fa7f 	bl	8011750 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	895b      	ldrh	r3, [r3, #10]
 8006256:	461a      	mov	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4293      	cmp	r3, r2
 800625c:	d906      	bls.n	800626c <pbuf_copy+0xcc>
 800625e:	4b32      	ldr	r3, [pc, #200]	@ (8006328 <pbuf_copy+0x188>)
 8006260:	f240 32da 	movw	r2, #986	@ 0x3da
 8006264:	4934      	ldr	r1, [pc, #208]	@ (8006338 <pbuf_copy+0x198>)
 8006266:	4832      	ldr	r0, [pc, #200]	@ (8006330 <pbuf_copy+0x190>)
 8006268:	f00b fa72 	bl	8011750 <iprintf>
    if (offset_from >= p_from->len) {
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	895b      	ldrh	r3, [r3, #10]
 8006270:	461a      	mov	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4293      	cmp	r3, r2
 8006276:	d304      	bcc.n	8006282 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	895b      	ldrh	r3, [r3, #10]
 8006286:	461a      	mov	r2, r3
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4293      	cmp	r3, r2
 800628c:	d114      	bne.n	80062b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10c      	bne.n	80062b8 <pbuf_copy+0x118>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <pbuf_copy+0x118>
 80062a4:	4b20      	ldr	r3, [pc, #128]	@ (8006328 <pbuf_copy+0x188>)
 80062a6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80062aa:	4924      	ldr	r1, [pc, #144]	@ (800633c <pbuf_copy+0x19c>)
 80062ac:	4820      	ldr	r0, [pc, #128]	@ (8006330 <pbuf_copy+0x190>)
 80062ae:	f00b fa4f 	bl	8011750 <iprintf>
 80062b2:	f06f 030f 	mvn.w	r3, #15
 80062b6:	e032      	b.n	800631e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <pbuf_copy+0x146>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	895a      	ldrh	r2, [r3, #10]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	891b      	ldrh	r3, [r3, #8]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d10d      	bne.n	80062e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <pbuf_copy+0x146>
 80062d2:	4b15      	ldr	r3, [pc, #84]	@ (8006328 <pbuf_copy+0x188>)
 80062d4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80062d8:	4919      	ldr	r1, [pc, #100]	@ (8006340 <pbuf_copy+0x1a0>)
 80062da:	4815      	ldr	r0, [pc, #84]	@ (8006330 <pbuf_copy+0x190>)
 80062dc:	f00b fa38 	bl	8011750 <iprintf>
 80062e0:	f06f 0305 	mvn.w	r3, #5
 80062e4:	e01b      	b.n	800631e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d013      	beq.n	8006314 <pbuf_copy+0x174>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	895a      	ldrh	r2, [r3, #10]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	891b      	ldrh	r3, [r3, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d10d      	bne.n	8006314 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <pbuf_copy+0x174>
 8006300:	4b09      	ldr	r3, [pc, #36]	@ (8006328 <pbuf_copy+0x188>)
 8006302:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006306:	490e      	ldr	r1, [pc, #56]	@ (8006340 <pbuf_copy+0x1a0>)
 8006308:	4809      	ldr	r0, [pc, #36]	@ (8006330 <pbuf_copy+0x190>)
 800630a:	f00b fa21 	bl	8011750 <iprintf>
 800630e:	f06f 0305 	mvn.w	r3, #5
 8006312:	e004      	b.n	800631e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f47f af61 	bne.w	80061de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	08012ec0 	.word	0x08012ec0
 800632c:	08013168 	.word	0x08013168
 8006330:	08012f20 	.word	0x08012f20
 8006334:	08013198 	.word	0x08013198
 8006338:	080131b0 	.word	0x080131b0
 800633c:	080131cc 	.word	0x080131cc
 8006340:	080131dc 	.word	0x080131dc

08006344 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	4611      	mov	r1, r2
 8006350:	461a      	mov	r2, r3
 8006352:	460b      	mov	r3, r1
 8006354:	80fb      	strh	r3, [r7, #6]
 8006356:	4613      	mov	r3, r2
 8006358:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <pbuf_copy_partial+0x36>
 8006368:	4b2b      	ldr	r3, [pc, #172]	@ (8006418 <pbuf_copy_partial+0xd4>)
 800636a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800636e:	492b      	ldr	r1, [pc, #172]	@ (800641c <pbuf_copy_partial+0xd8>)
 8006370:	482b      	ldr	r0, [pc, #172]	@ (8006420 <pbuf_copy_partial+0xdc>)
 8006372:	f00b f9ed 	bl	8011750 <iprintf>
 8006376:	2300      	movs	r3, #0
 8006378:	e04a      	b.n	8006410 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <pbuf_copy_partial+0x4e>
 8006380:	4b25      	ldr	r3, [pc, #148]	@ (8006418 <pbuf_copy_partial+0xd4>)
 8006382:	f240 420b 	movw	r2, #1035	@ 0x40b
 8006386:	4927      	ldr	r1, [pc, #156]	@ (8006424 <pbuf_copy_partial+0xe0>)
 8006388:	4825      	ldr	r0, [pc, #148]	@ (8006420 <pbuf_copy_partial+0xdc>)
 800638a:	f00b f9e1 	bl	8011750 <iprintf>
 800638e:	2300      	movs	r3, #0
 8006390:	e03e      	b.n	8006410 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e034      	b.n	8006402 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006398:	88bb      	ldrh	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <pbuf_copy_partial+0x70>
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	895b      	ldrh	r3, [r3, #10]
 80063a2:	88ba      	ldrh	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d305      	bcc.n	80063b4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	895b      	ldrh	r3, [r3, #10]
 80063ac:	88ba      	ldrh	r2, [r7, #4]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	80bb      	strh	r3, [r7, #4]
 80063b2:	e023      	b.n	80063fc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	895a      	ldrh	r2, [r3, #10]
 80063b8:	88bb      	ldrh	r3, [r7, #4]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80063be:	8b3a      	ldrh	r2, [r7, #24]
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d901      	bls.n	80063ca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80063ca:	8b7b      	ldrh	r3, [r7, #26]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	18d0      	adds	r0, r2, r3
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	88bb      	ldrh	r3, [r7, #4]
 80063d6:	4413      	add	r3, r2
 80063d8:	8b3a      	ldrh	r2, [r7, #24]
 80063da:	4619      	mov	r1, r3
 80063dc:	f00b fba5 	bl	8011b2a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80063e0:	8afa      	ldrh	r2, [r7, #22]
 80063e2:	8b3b      	ldrh	r3, [r7, #24]
 80063e4:	4413      	add	r3, r2
 80063e6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80063e8:	8b7a      	ldrh	r2, [r7, #26]
 80063ea:	8b3b      	ldrh	r3, [r7, #24]
 80063ec:	4413      	add	r3, r2
 80063ee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	8b3b      	ldrh	r3, [r7, #24]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <pbuf_copy_partial+0xca>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1c4      	bne.n	8006398 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800640e:	8afb      	ldrh	r3, [r7, #22]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	08012ec0 	.word	0x08012ec0
 800641c:	08013208 	.word	0x08013208
 8006420:	08012f20 	.word	0x08012f20
 8006424:	08013228 	.word	0x08013228

08006428 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	603a      	str	r2, [r7, #0]
 8006432:	71fb      	strb	r3, [r7, #7]
 8006434:	460b      	mov	r3, r1
 8006436:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	8919      	ldrh	r1, [r3, #8]
 800643c:	88ba      	ldrh	r2, [r7, #4]
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff faa1 	bl	8005988 <pbuf_alloc>
 8006446:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <pbuf_clone+0x2a>
    return NULL;
 800644e:	2300      	movs	r3, #0
 8006450:	e011      	b.n	8006476 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f7ff fea3 	bl	80061a0 <pbuf_copy>
 800645a:	4603      	mov	r3, r0
 800645c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800645e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d006      	beq.n	8006474 <pbuf_clone+0x4c>
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <pbuf_clone+0x58>)
 8006468:	f240 5224 	movw	r2, #1316	@ 0x524
 800646c:	4905      	ldr	r1, [pc, #20]	@ (8006484 <pbuf_clone+0x5c>)
 800646e:	4806      	ldr	r0, [pc, #24]	@ (8006488 <pbuf_clone+0x60>)
 8006470:	f00b f96e 	bl	8011750 <iprintf>
  return q;
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	08012ec0 	.word	0x08012ec0
 8006484:	08013334 	.word	0x08013334
 8006488:	08012f20 	.word	0x08012f20

0800648c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006490:	f00b f85e 	bl	8011550 <rand>
 8006494:	4603      	mov	r3, r0
 8006496:	b29b      	uxth	r3, r3
 8006498:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800649c:	b29b      	uxth	r3, r3
 800649e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	4b01      	ldr	r3, [pc, #4]	@ (80064ac <tcp_init+0x20>)
 80064a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80064a8:	bf00      	nop
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20000020 	.word	0x20000020

080064b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	7d1b      	ldrb	r3, [r3, #20]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d105      	bne.n	80064cc <tcp_free+0x1c>
 80064c0:	4b06      	ldr	r3, [pc, #24]	@ (80064dc <tcp_free+0x2c>)
 80064c2:	22d4      	movs	r2, #212	@ 0xd4
 80064c4:	4906      	ldr	r1, [pc, #24]	@ (80064e0 <tcp_free+0x30>)
 80064c6:	4807      	ldr	r0, [pc, #28]	@ (80064e4 <tcp_free+0x34>)
 80064c8:	f00b f942 	bl	8011750 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	2001      	movs	r0, #1
 80064d0:	f7fe febc 	bl	800524c <memp_free>
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	080133c0 	.word	0x080133c0
 80064e0:	080133f0 	.word	0x080133f0
 80064e4:	08013404 	.word	0x08013404

080064e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	7d1b      	ldrb	r3, [r3, #20]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d105      	bne.n	8006504 <tcp_free_listen+0x1c>
 80064f8:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <tcp_free_listen+0x2c>)
 80064fa:	22df      	movs	r2, #223	@ 0xdf
 80064fc:	4906      	ldr	r1, [pc, #24]	@ (8006518 <tcp_free_listen+0x30>)
 80064fe:	4807      	ldr	r0, [pc, #28]	@ (800651c <tcp_free_listen+0x34>)
 8006500:	f00b f926 	bl	8011750 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	2002      	movs	r0, #2
 8006508:	f7fe fea0 	bl	800524c <memp_free>
}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	080133c0 	.word	0x080133c0
 8006518:	0801342c 	.word	0x0801342c
 800651c:	08013404 	.word	0x08013404

08006520 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006524:	f001 f85e 	bl	80075e4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006528:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <tcp_tmr+0x28>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <tcp_tmr+0x28>)
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <tcp_tmr+0x28>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006540:	f000 fd0e 	bl	8006f60 <tcp_slowtmr>
  }
}
 8006544:	bf00      	nop
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000805d 	.word	0x2000805d

0800654c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d105      	bne.n	8006568 <tcp_remove_listener+0x1c>
 800655c:	4b0d      	ldr	r3, [pc, #52]	@ (8006594 <tcp_remove_listener+0x48>)
 800655e:	22ff      	movs	r2, #255	@ 0xff
 8006560:	490d      	ldr	r1, [pc, #52]	@ (8006598 <tcp_remove_listener+0x4c>)
 8006562:	480e      	ldr	r0, [pc, #56]	@ (800659c <tcp_remove_listener+0x50>)
 8006564:	f00b f8f4 	bl	8011750 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e00a      	b.n	8006584 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d102      	bne.n	800657e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1f1      	bne.n	800656e <tcp_remove_listener+0x22>
    }
  }
}
 800658a:	bf00      	nop
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	080133c0 	.word	0x080133c0
 8006598:	08013448 	.word	0x08013448
 800659c:	08013404 	.word	0x08013404

080065a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <tcp_listen_closed+0x1c>
 80065ae:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <tcp_listen_closed+0x60>)
 80065b0:	f240 1211 	movw	r2, #273	@ 0x111
 80065b4:	4913      	ldr	r1, [pc, #76]	@ (8006604 <tcp_listen_closed+0x64>)
 80065b6:	4814      	ldr	r0, [pc, #80]	@ (8006608 <tcp_listen_closed+0x68>)
 80065b8:	f00b f8ca 	bl	8011750 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	7d1b      	ldrb	r3, [r3, #20]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d006      	beq.n	80065d2 <tcp_listen_closed+0x32>
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <tcp_listen_closed+0x60>)
 80065c6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80065ca:	4910      	ldr	r1, [pc, #64]	@ (800660c <tcp_listen_closed+0x6c>)
 80065cc:	480e      	ldr	r0, [pc, #56]	@ (8006608 <tcp_listen_closed+0x68>)
 80065ce:	f00b f8bf 	bl	8011750 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80065d2:	2301      	movs	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e00b      	b.n	80065f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80065d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006610 <tcp_listen_closed+0x70>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff ffb1 	bl	800654c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d9f0      	bls.n	80065d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	080133c0 	.word	0x080133c0
 8006604:	08013470 	.word	0x08013470
 8006608:	08013404 	.word	0x08013404
 800660c:	0801347c 	.word	0x0801347c
 8006610:	0801653c 	.word	0x0801653c

08006614 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af04      	add	r7, sp, #16
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <tcp_close_shutdown+0x20>
 8006626:	4b63      	ldr	r3, [pc, #396]	@ (80067b4 <tcp_close_shutdown+0x1a0>)
 8006628:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800662c:	4962      	ldr	r1, [pc, #392]	@ (80067b8 <tcp_close_shutdown+0x1a4>)
 800662e:	4863      	ldr	r0, [pc, #396]	@ (80067bc <tcp_close_shutdown+0x1a8>)
 8006630:	f00b f88e 	bl	8011750 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d066      	beq.n	8006708 <tcp_close_shutdown+0xf4>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	7d1b      	ldrb	r3, [r3, #20]
 800663e:	2b04      	cmp	r3, #4
 8006640:	d003      	beq.n	800664a <tcp_close_shutdown+0x36>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	7d1b      	ldrb	r3, [r3, #20]
 8006646:	2b07      	cmp	r3, #7
 8006648:	d15e      	bne.n	8006708 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <tcp_close_shutdown+0x48>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006656:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800665a:	d055      	beq.n	8006708 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8b5b      	ldrh	r3, [r3, #26]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <tcp_close_shutdown+0x62>
 8006668:	4b52      	ldr	r3, [pc, #328]	@ (80067b4 <tcp_close_shutdown+0x1a0>)
 800666a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800666e:	4954      	ldr	r1, [pc, #336]	@ (80067c0 <tcp_close_shutdown+0x1ac>)
 8006670:	4852      	ldr	r0, [pc, #328]	@ (80067bc <tcp_close_shutdown+0x1a8>)
 8006672:	f00b f86d 	bl	8011750 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800667e:	687d      	ldr	r5, [r7, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	8ad2      	ldrh	r2, [r2, #22]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	8b09      	ldrh	r1, [r1, #24]
 800668c:	9102      	str	r1, [sp, #8]
 800668e:	9201      	str	r2, [sp, #4]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	462b      	mov	r3, r5
 8006694:	4622      	mov	r2, r4
 8006696:	4601      	mov	r1, r0
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f005 fd8b 	bl	800c1b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f001 fb6e 	bl	8007d80 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80066a4:	4b47      	ldr	r3, [pc, #284]	@ (80067c4 <tcp_close_shutdown+0x1b0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d105      	bne.n	80066ba <tcp_close_shutdown+0xa6>
 80066ae:	4b45      	ldr	r3, [pc, #276]	@ (80067c4 <tcp_close_shutdown+0x1b0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	4a43      	ldr	r2, [pc, #268]	@ (80067c4 <tcp_close_shutdown+0x1b0>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	e013      	b.n	80066e2 <tcp_close_shutdown+0xce>
 80066ba:	4b42      	ldr	r3, [pc, #264]	@ (80067c4 <tcp_close_shutdown+0x1b0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	e00c      	b.n	80066dc <tcp_close_shutdown+0xc8>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d104      	bne.n	80066d6 <tcp_close_shutdown+0xc2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	60da      	str	r2, [r3, #12]
 80066d4:	e005      	b.n	80066e2 <tcp_close_shutdown+0xce>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1ef      	bne.n	80066c2 <tcp_close_shutdown+0xae>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	60da      	str	r2, [r3, #12]
 80066e8:	4b37      	ldr	r3, [pc, #220]	@ (80067c8 <tcp_close_shutdown+0x1b4>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80066ee:	4b37      	ldr	r3, [pc, #220]	@ (80067cc <tcp_close_shutdown+0x1b8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d102      	bne.n	80066fe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80066f8:	f004 f802 	bl	800a700 <tcp_trigger_input_pcb_close>
 80066fc:	e002      	b.n	8006704 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fed6 	bl	80064b0 <tcp_free>
      }
      return ERR_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e050      	b.n	80067aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7d1b      	ldrb	r3, [r3, #20]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d03b      	beq.n	8006788 <tcp_close_shutdown+0x174>
 8006710:	2b02      	cmp	r3, #2
 8006712:	dc44      	bgt.n	800679e <tcp_close_shutdown+0x18a>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <tcp_close_shutdown+0x10a>
 8006718:	2b01      	cmp	r3, #1
 800671a:	d02a      	beq.n	8006772 <tcp_close_shutdown+0x15e>
 800671c:	e03f      	b.n	800679e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8adb      	ldrh	r3, [r3, #22]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d021      	beq.n	800676a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006726:	4b2a      	ldr	r3, [pc, #168]	@ (80067d0 <tcp_close_shutdown+0x1bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d105      	bne.n	800673c <tcp_close_shutdown+0x128>
 8006730:	4b27      	ldr	r3, [pc, #156]	@ (80067d0 <tcp_close_shutdown+0x1bc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4a26      	ldr	r2, [pc, #152]	@ (80067d0 <tcp_close_shutdown+0x1bc>)
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e013      	b.n	8006764 <tcp_close_shutdown+0x150>
 800673c:	4b24      	ldr	r3, [pc, #144]	@ (80067d0 <tcp_close_shutdown+0x1bc>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	e00c      	b.n	800675e <tcp_close_shutdown+0x14a>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d104      	bne.n	8006758 <tcp_close_shutdown+0x144>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	60da      	str	r2, [r3, #12]
 8006756:	e005      	b.n	8006764 <tcp_close_shutdown+0x150>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ef      	bne.n	8006744 <tcp_close_shutdown+0x130>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fea0 	bl	80064b0 <tcp_free>
      break;
 8006770:	e01a      	b.n	80067a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff14 	bl	80065a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4816      	ldr	r0, [pc, #88]	@ (80067d4 <tcp_close_shutdown+0x1c0>)
 800677c:	f001 fb50 	bl	8007e20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff feb1 	bl	80064e8 <tcp_free_listen>
      break;
 8006786:	e00f      	b.n	80067a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	480e      	ldr	r0, [pc, #56]	@ (80067c4 <tcp_close_shutdown+0x1b0>)
 800678c:	f001 fb48 	bl	8007e20 <tcp_pcb_remove>
 8006790:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <tcp_close_shutdown+0x1b4>)
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7ff fe8a 	bl	80064b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800679c:	e004      	b.n	80067a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f81a 	bl	80067d8 <tcp_close_shutdown_fin>
 80067a4:	4603      	mov	r3, r0
 80067a6:	e000      	b.n	80067aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bdb0      	pop	{r4, r5, r7, pc}
 80067b2:	bf00      	nop
 80067b4:	080133c0 	.word	0x080133c0
 80067b8:	08013494 	.word	0x08013494
 80067bc:	08013404 	.word	0x08013404
 80067c0:	080134b4 	.word	0x080134b4
 80067c4:	20008054 	.word	0x20008054
 80067c8:	2000805c 	.word	0x2000805c
 80067cc:	20008094 	.word	0x20008094
 80067d0:	2000804c 	.word	0x2000804c
 80067d4:	20008050 	.word	0x20008050

080067d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d106      	bne.n	80067f4 <tcp_close_shutdown_fin+0x1c>
 80067e6:	4b2e      	ldr	r3, [pc, #184]	@ (80068a0 <tcp_close_shutdown_fin+0xc8>)
 80067e8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80067ec:	492d      	ldr	r1, [pc, #180]	@ (80068a4 <tcp_close_shutdown_fin+0xcc>)
 80067ee:	482e      	ldr	r0, [pc, #184]	@ (80068a8 <tcp_close_shutdown_fin+0xd0>)
 80067f0:	f00a ffae 	bl	8011750 <iprintf>

  switch (pcb->state) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7d1b      	ldrb	r3, [r3, #20]
 80067f8:	2b07      	cmp	r3, #7
 80067fa:	d020      	beq.n	800683e <tcp_close_shutdown_fin+0x66>
 80067fc:	2b07      	cmp	r3, #7
 80067fe:	dc2b      	bgt.n	8006858 <tcp_close_shutdown_fin+0x80>
 8006800:	2b03      	cmp	r3, #3
 8006802:	d002      	beq.n	800680a <tcp_close_shutdown_fin+0x32>
 8006804:	2b04      	cmp	r3, #4
 8006806:	d00d      	beq.n	8006824 <tcp_close_shutdown_fin+0x4c>
 8006808:	e026      	b.n	8006858 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f004 fde0 	bl	800b3d0 <tcp_send_fin>
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d11f      	bne.n	800685c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2205      	movs	r2, #5
 8006820:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006822:	e01b      	b.n	800685c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f004 fdd3 	bl	800b3d0 <tcp_send_fin>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800682e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d114      	bne.n	8006860 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2205      	movs	r2, #5
 800683a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800683c:	e010      	b.n	8006860 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f004 fdc6 	bl	800b3d0 <tcp_send_fin>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2209      	movs	r2, #9
 8006854:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006856:	e005      	b.n	8006864 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	e01c      	b.n	8006896 <tcp_close_shutdown_fin+0xbe>
      break;
 800685c:	bf00      	nop
 800685e:	e002      	b.n	8006866 <tcp_close_shutdown_fin+0x8e>
      break;
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <tcp_close_shutdown_fin+0x8e>
      break;
 8006864:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f004 feec 	bl	800b64c <tcp_output>
 8006874:	e00d      	b.n	8006892 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d108      	bne.n	8006892 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8b5b      	ldrh	r3, [r3, #26]
 8006884:	f043 0308 	orr.w	r3, r3, #8
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e001      	b.n	8006896 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	080133c0 	.word	0x080133c0
 80068a4:	08013470 	.word	0x08013470
 80068a8:	08013404 	.word	0x08013404

080068ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <tcp_close+0x22>
 80068ba:	4b0f      	ldr	r3, [pc, #60]	@ (80068f8 <tcp_close+0x4c>)
 80068bc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80068c0:	490e      	ldr	r1, [pc, #56]	@ (80068fc <tcp_close+0x50>)
 80068c2:	480f      	ldr	r0, [pc, #60]	@ (8006900 <tcp_close+0x54>)
 80068c4:	f00a ff44 	bl	8011750 <iprintf>
 80068c8:	f06f 030f 	mvn.w	r3, #15
 80068cc:	e00f      	b.n	80068ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	7d1b      	ldrb	r3, [r3, #20]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d006      	beq.n	80068e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	8b5b      	ldrh	r3, [r3, #26]
 80068da:	f043 0310 	orr.w	r3, r3, #16
 80068de:	b29a      	uxth	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80068e4:	2101      	movs	r1, #1
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fe94 	bl	8006614 <tcp_close_shutdown>
 80068ec:	4603      	mov	r3, r0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	080133c0 	.word	0x080133c0
 80068fc:	080134d0 	.word	0x080134d0
 8006900:	08013404 	.word	0x08013404

08006904 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	@ 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d107      	bne.n	8006924 <tcp_abandon+0x20>
 8006914:	4b52      	ldr	r3, [pc, #328]	@ (8006a60 <tcp_abandon+0x15c>)
 8006916:	f240 223d 	movw	r2, #573	@ 0x23d
 800691a:	4952      	ldr	r1, [pc, #328]	@ (8006a64 <tcp_abandon+0x160>)
 800691c:	4852      	ldr	r0, [pc, #328]	@ (8006a68 <tcp_abandon+0x164>)
 800691e:	f00a ff17 	bl	8011750 <iprintf>
 8006922:	e099      	b.n	8006a58 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7d1b      	ldrb	r3, [r3, #20]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <tcp_abandon+0x36>
 800692c:	4b4c      	ldr	r3, [pc, #304]	@ (8006a60 <tcp_abandon+0x15c>)
 800692e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8006932:	494e      	ldr	r1, [pc, #312]	@ (8006a6c <tcp_abandon+0x168>)
 8006934:	484c      	ldr	r0, [pc, #304]	@ (8006a68 <tcp_abandon+0x164>)
 8006936:	f00a ff0b 	bl	8011750 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7d1b      	ldrb	r3, [r3, #20]
 800693e:	2b0a      	cmp	r3, #10
 8006940:	d107      	bne.n	8006952 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	484a      	ldr	r0, [pc, #296]	@ (8006a70 <tcp_abandon+0x16c>)
 8006946:	f001 fa6b 	bl	8007e20 <tcp_pcb_remove>
    tcp_free(pcb);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7ff fdb0 	bl	80064b0 <tcp_free>
 8006950:	e082      	b.n	8006a58 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800695e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800696c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d126      	bne.n	80069ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	8adb      	ldrh	r3, [r3, #22]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02e      	beq.n	80069e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006984:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <tcp_abandon+0x170>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	429a      	cmp	r2, r3
 800698c:	d105      	bne.n	800699a <tcp_abandon+0x96>
 800698e:	4b39      	ldr	r3, [pc, #228]	@ (8006a74 <tcp_abandon+0x170>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a37      	ldr	r2, [pc, #220]	@ (8006a74 <tcp_abandon+0x170>)
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e013      	b.n	80069c2 <tcp_abandon+0xbe>
 800699a:	4b36      	ldr	r3, [pc, #216]	@ (8006a74 <tcp_abandon+0x170>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e00c      	b.n	80069bc <tcp_abandon+0xb8>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d104      	bne.n	80069b6 <tcp_abandon+0xb2>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	60da      	str	r2, [r3, #12]
 80069b4:	e005      	b.n	80069c2 <tcp_abandon+0xbe>
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ef      	bne.n	80069a2 <tcp_abandon+0x9e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	60da      	str	r2, [r3, #12]
 80069c8:	e00b      	b.n	80069e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	8adb      	ldrh	r3, [r3, #22]
 80069d2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	4828      	ldr	r0, [pc, #160]	@ (8006a78 <tcp_abandon+0x174>)
 80069d8:	f001 fa22 	bl	8007e20 <tcp_pcb_remove>
 80069dc:	4b27      	ldr	r3, [pc, #156]	@ (8006a7c <tcp_abandon+0x178>)
 80069de:	2201      	movs	r2, #1
 80069e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d004      	beq.n	80069f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fed8 	bl	80077a4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fecf 	bl	80077a4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fec6 	bl	80077a4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	8b12      	ldrh	r2, [r2, #24]
 8006a28:	9202      	str	r2, [sp, #8]
 8006a2a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006a2c:	9201      	str	r2, [sp, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	460b      	mov	r3, r1
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	69b9      	ldr	r1, [r7, #24]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f005 fbbc 	bl	800c1b4 <tcp_rst>
    }
    last_state = pcb->state;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	7d1b      	ldrb	r3, [r3, #20]
 8006a40:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff fd34 	bl	80064b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d004      	beq.n	8006a58 <tcp_abandon+0x154>
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f06f 010c 	mvn.w	r1, #12
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	4798      	blx	r3
  }
}
 8006a58:	3728      	adds	r7, #40	@ 0x28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	080133c0 	.word	0x080133c0
 8006a64:	08013504 	.word	0x08013504
 8006a68:	08013404 	.word	0x08013404
 8006a6c:	08013520 	.word	0x08013520
 8006a70:	20008058 	.word	0x20008058
 8006a74:	2000804c 	.word	0x2000804c
 8006a78:	20008054 	.word	0x20008054
 8006a7c:	2000805c 	.word	0x2000805c

08006a80 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff ff3a 	bl	8006904 <tcp_abandon>
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8006bac <tcp_bind+0x114>)
 8006ab2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d109      	bne.n	8006ace <tcp_bind+0x36>
 8006aba:	4b3d      	ldr	r3, [pc, #244]	@ (8006bb0 <tcp_bind+0x118>)
 8006abc:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8006ac0:	493c      	ldr	r1, [pc, #240]	@ (8006bb4 <tcp_bind+0x11c>)
 8006ac2:	483d      	ldr	r0, [pc, #244]	@ (8006bb8 <tcp_bind+0x120>)
 8006ac4:	f00a fe44 	bl	8011750 <iprintf>
 8006ac8:	f06f 030f 	mvn.w	r3, #15
 8006acc:	e06a      	b.n	8006ba4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	7d1b      	ldrb	r3, [r3, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <tcp_bind+0x52>
 8006ad6:	4b36      	ldr	r3, [pc, #216]	@ (8006bb0 <tcp_bind+0x118>)
 8006ad8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8006adc:	4937      	ldr	r1, [pc, #220]	@ (8006bbc <tcp_bind+0x124>)
 8006ade:	4836      	ldr	r0, [pc, #216]	@ (8006bb8 <tcp_bind+0x120>)
 8006ae0:	f00a fe36 	bl	8011750 <iprintf>
 8006ae4:	f06f 0305 	mvn.w	r3, #5
 8006ae8:	e05c      	b.n	8006ba4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006aea:	88fb      	ldrh	r3, [r7, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d109      	bne.n	8006b04 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006af0:	f000 f9f0 	bl	8006ed4 <tcp_new_port>
 8006af4:	4603      	mov	r3, r0
 8006af6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d135      	bne.n	8006b6a <tcp_bind+0xd2>
      return ERR_BUF;
 8006afe:	f06f 0301 	mvn.w	r3, #1
 8006b02:	e04f      	b.n	8006ba4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e02b      	b.n	8006b62 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006bc0 <tcp_bind+0x128>)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	e01e      	b.n	8006b56 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	8adb      	ldrh	r3, [r3, #22]
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d116      	bne.n	8006b50 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006b22:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <tcp_bind+0xb2>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d005      	beq.n	8006b4a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d102      	bne.n	8006b50 <tcp_bind+0xb8>
              return ERR_USE;
 8006b4a:	f06f 0307 	mvn.w	r3, #7
 8006b4e:	e029      	b.n	8006ba4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1dd      	bne.n	8006b18 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	dbcf      	blt.n	8006b0a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00c      	beq.n	8006b8a <tcp_bind+0xf2>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d008      	beq.n	8006b8a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d002      	beq.n	8006b84 <tcp_bind+0xec>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	e000      	b.n	8006b86 <tcp_bind+0xee>
 8006b84:	2300      	movs	r3, #0
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	88fa      	ldrh	r2, [r7, #6]
 8006b8e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006b90:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <tcp_bind+0x12c>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	60da      	str	r2, [r3, #12]
 8006b98:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc4 <tcp_bind+0x12c>)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	f005 fccb 	bl	800c538 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	08016574 	.word	0x08016574
 8006bb0:	080133c0 	.word	0x080133c0
 8006bb4:	08013554 	.word	0x08013554
 8006bb8:	08013404 	.word	0x08013404
 8006bbc:	0801356c 	.word	0x0801356c
 8006bc0:	0801653c 	.word	0x0801653c
 8006bc4:	2000804c 	.word	0x2000804c

08006bc8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <tcp_accept_null+0x22>
 8006bdc:	4b07      	ldr	r3, [pc, #28]	@ (8006bfc <tcp_accept_null+0x34>)
 8006bde:	f240 320f 	movw	r2, #783	@ 0x30f
 8006be2:	4907      	ldr	r1, [pc, #28]	@ (8006c00 <tcp_accept_null+0x38>)
 8006be4:	4807      	ldr	r0, [pc, #28]	@ (8006c04 <tcp_accept_null+0x3c>)
 8006be6:	f00a fdb3 	bl	8011750 <iprintf>

  tcp_abort(pcb);
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f7ff ff48 	bl	8006a80 <tcp_abort>

  return ERR_ABRT;
 8006bf0:	f06f 030c 	mvn.w	r3, #12
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	080133c0 	.word	0x080133c0
 8006c00:	08013594 	.word	0x08013594
 8006c04:	08013404 	.word	0x08013404

08006c08 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2200      	movs	r2, #0
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f806 	bl	8006c2c <tcp_listen_with_backlog_and_err>
 8006c20:	4603      	mov	r3, r0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3708      	adds	r7, #8
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	460b      	mov	r3, r1
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <tcp_listen_with_backlog_and_err+0x2c>
 8006c44:	4b47      	ldr	r3, [pc, #284]	@ (8006d64 <tcp_listen_with_backlog_and_err+0x138>)
 8006c46:	f240 3259 	movw	r2, #857	@ 0x359
 8006c4a:	4947      	ldr	r1, [pc, #284]	@ (8006d68 <tcp_listen_with_backlog_and_err+0x13c>)
 8006c4c:	4847      	ldr	r0, [pc, #284]	@ (8006d6c <tcp_listen_with_backlog_and_err+0x140>)
 8006c4e:	f00a fd7f 	bl	8011750 <iprintf>
 8006c52:	23f0      	movs	r3, #240	@ 0xf0
 8006c54:	76fb      	strb	r3, [r7, #27]
 8006c56:	e079      	b.n	8006d4c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	7d1b      	ldrb	r3, [r3, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <tcp_listen_with_backlog_and_err+0x48>
 8006c60:	4b40      	ldr	r3, [pc, #256]	@ (8006d64 <tcp_listen_with_backlog_and_err+0x138>)
 8006c62:	f240 325a 	movw	r2, #858	@ 0x35a
 8006c66:	4942      	ldr	r1, [pc, #264]	@ (8006d70 <tcp_listen_with_backlog_and_err+0x144>)
 8006c68:	4840      	ldr	r0, [pc, #256]	@ (8006d6c <tcp_listen_with_backlog_and_err+0x140>)
 8006c6a:	f00a fd71 	bl	8011750 <iprintf>
 8006c6e:	23f1      	movs	r3, #241	@ 0xf1
 8006c70:	76fb      	strb	r3, [r7, #27]
 8006c72:	e06b      	b.n	8006d4c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	7d1b      	ldrb	r3, [r3, #20]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d104      	bne.n	8006c86 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006c80:	23f7      	movs	r3, #247	@ 0xf7
 8006c82:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006c84:	e062      	b.n	8006d4c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006c86:	2002      	movs	r0, #2
 8006c88:	f7fe fa70 	bl	800516c <memp_malloc>
 8006c8c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006c94:	23ff      	movs	r3, #255	@ 0xff
 8006c96:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006c98:	e058      	b.n	8006d4c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8ada      	ldrh	r2, [r3, #22]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2201      	movs	r2, #1
 8006cae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	7d5a      	ldrb	r2, [r3, #21]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	7a5a      	ldrb	r2, [r3, #9]
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	7ada      	ldrb	r2, [r3, #11]
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	7a9a      	ldrb	r2, [r3, #10]
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8adb      	ldrh	r3, [r3, #22]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d021      	beq.n	8006d2a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ce6:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <tcp_listen_with_backlog_and_err+0x148>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d105      	bne.n	8006cfc <tcp_listen_with_backlog_and_err+0xd0>
 8006cf0:	4b20      	ldr	r3, [pc, #128]	@ (8006d74 <tcp_listen_with_backlog_and_err+0x148>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d74 <tcp_listen_with_backlog_and_err+0x148>)
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e013      	b.n	8006d24 <tcp_listen_with_backlog_and_err+0xf8>
 8006cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d74 <tcp_listen_with_backlog_and_err+0x148>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e00c      	b.n	8006d1e <tcp_listen_with_backlog_and_err+0xf2>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d104      	bne.n	8006d18 <tcp_listen_with_backlog_and_err+0xec>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	60da      	str	r2, [r3, #12]
 8006d16:	e005      	b.n	8006d24 <tcp_listen_with_backlog_and_err+0xf8>
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ef      	bne.n	8006d04 <tcp_listen_with_backlog_and_err+0xd8>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fbc0 	bl	80064b0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	4a11      	ldr	r2, [pc, #68]	@ (8006d78 <tcp_listen_with_backlog_and_err+0x14c>)
 8006d34:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006d36:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <tcp_listen_with_backlog_and_err+0x150>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006d7c <tcp_listen_with_backlog_and_err+0x150>)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	f005 fbf8 	bl	800c538 <tcp_timer_needed>
  res = ERR_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7efa      	ldrb	r2, [r7, #27]
 8006d56:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006d58:	69fb      	ldr	r3, [r7, #28]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	080133c0 	.word	0x080133c0
 8006d68:	080135b4 	.word	0x080135b4
 8006d6c:	08013404 	.word	0x08013404
 8006d70:	080135e4 	.word	0x080135e4
 8006d74:	2000804c 	.word	0x2000804c
 8006d78:	08006bc9 	.word	0x08006bc9
 8006d7c:	20008050 	.word	0x20008050

08006d80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <tcp_update_rcv_ann_wnd+0x1c>
 8006d8e:	4b25      	ldr	r3, [pc, #148]	@ (8006e24 <tcp_update_rcv_ann_wnd+0xa4>)
 8006d90:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8006d94:	4924      	ldr	r1, [pc, #144]	@ (8006e28 <tcp_update_rcv_ann_wnd+0xa8>)
 8006d96:	4825      	ldr	r0, [pc, #148]	@ (8006e2c <tcp_update_rcv_ann_wnd+0xac>)
 8006d98:	f00a fcda 	bl	8011750 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006da4:	4413      	add	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8006db0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006db4:	bf28      	it	cs
 8006db6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006dba:	b292      	uxth	r2, r2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	db08      	blt.n	8006dd8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	e020      	b.n	8006e1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dd03      	ble.n	8006dee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dec:	e014      	b.n	8006e18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e00:	d306      	bcc.n	8006e10 <tcp_update_rcv_ann_wnd+0x90>
 8006e02:	4b08      	ldr	r3, [pc, #32]	@ (8006e24 <tcp_update_rcv_ann_wnd+0xa4>)
 8006e04:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8006e08:	4909      	ldr	r1, [pc, #36]	@ (8006e30 <tcp_update_rcv_ann_wnd+0xb0>)
 8006e0a:	4808      	ldr	r0, [pc, #32]	@ (8006e2c <tcp_update_rcv_ann_wnd+0xac>)
 8006e0c:	f00a fca0 	bl	8011750 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8006e18:	2300      	movs	r3, #0
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	080133c0 	.word	0x080133c0
 8006e28:	0801361c 	.word	0x0801361c
 8006e2c:	08013404 	.word	0x08013404
 8006e30:	08013640 	.word	0x08013640

08006e34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d107      	bne.n	8006e56 <tcp_recved+0x22>
 8006e46:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec4 <tcp_recved+0x90>)
 8006e48:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006e4c:	491e      	ldr	r1, [pc, #120]	@ (8006ec8 <tcp_recved+0x94>)
 8006e4e:	481f      	ldr	r0, [pc, #124]	@ (8006ecc <tcp_recved+0x98>)
 8006e50:	f00a fc7e 	bl	8011750 <iprintf>
 8006e54:	e032      	b.n	8006ebc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7d1b      	ldrb	r3, [r3, #20]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d106      	bne.n	8006e6c <tcp_recved+0x38>
 8006e5e:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <tcp_recved+0x90>)
 8006e60:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006e64:	491a      	ldr	r1, [pc, #104]	@ (8006ed0 <tcp_recved+0x9c>)
 8006e66:	4819      	ldr	r0, [pc, #100]	@ (8006ecc <tcp_recved+0x98>)
 8006e68:	f00a fc72 	bl	8011750 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006e70:	887b      	ldrh	r3, [r7, #2]
 8006e72:	4413      	add	r3, r2
 8006e74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006e76:	89fb      	ldrh	r3, [r7, #14]
 8006e78:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006e7c:	d804      	bhi.n	8006e88 <tcp_recved+0x54>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e82:	89fa      	ldrh	r2, [r7, #14]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d204      	bcs.n	8006e92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006e90:	e002      	b.n	8006e98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	89fa      	ldrh	r2, [r7, #14]
 8006e96:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff ff71 	bl	8006d80 <tcp_update_rcv_ann_wnd>
 8006e9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006ea6:	d309      	bcc.n	8006ebc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8b5b      	ldrh	r3, [r3, #26]
 8006eac:	f043 0302 	orr.w	r3, r3, #2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f004 fbc8 	bl	800b64c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	080133c0 	.word	0x080133c0
 8006ec8:	0801365c 	.word	0x0801365c
 8006ecc:	08013404 	.word	0x08013404
 8006ed0:	08013674 	.word	0x08013674

08006ed4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006ede:	4b1e      	ldr	r3, [pc, #120]	@ (8006f58 <tcp_new_port+0x84>)
 8006ee0:	881b      	ldrh	r3, [r3, #0]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8006f58 <tcp_new_port+0x84>)
 8006ee8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006eea:	4b1b      	ldr	r3, [pc, #108]	@ (8006f58 <tcp_new_port+0x84>)
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d103      	bne.n	8006efe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006ef6:	4b18      	ldr	r3, [pc, #96]	@ (8006f58 <tcp_new_port+0x84>)
 8006ef8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8006efc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006efe:	2300      	movs	r3, #0
 8006f00:	71fb      	strb	r3, [r7, #7]
 8006f02:	e01e      	b.n	8006f42 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	4a15      	ldr	r2, [pc, #84]	@ (8006f5c <tcp_new_port+0x88>)
 8006f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	e011      	b.n	8006f36 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	8ada      	ldrh	r2, [r3, #22]
 8006f16:	4b10      	ldr	r3, [pc, #64]	@ (8006f58 <tcp_new_port+0x84>)
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d108      	bne.n	8006f30 <tcp_new_port+0x5c>
        n++;
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	3301      	adds	r3, #1
 8006f22:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006f24:	88bb      	ldrh	r3, [r7, #4]
 8006f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f2a:	d3d8      	bcc.n	8006ede <tcp_new_port+0xa>
          return 0;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e00d      	b.n	8006f4c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1ea      	bne.n	8006f12 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d9dd      	bls.n	8006f04 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006f48:	4b03      	ldr	r3, [pc, #12]	@ (8006f58 <tcp_new_port+0x84>)
 8006f4a:	881b      	ldrh	r3, [r3, #0]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000020 	.word	0x20000020
 8006f5c:	0801653c 	.word	0x0801653c

08006f60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006f60:	b5b0      	push	{r4, r5, r7, lr}
 8006f62:	b090      	sub	sp, #64	@ 0x40
 8006f64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006f6c:	4b95      	ldr	r3, [pc, #596]	@ (80071c4 <tcp_slowtmr+0x264>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	4a94      	ldr	r2, [pc, #592]	@ (80071c4 <tcp_slowtmr+0x264>)
 8006f74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006f76:	4b94      	ldr	r3, [pc, #592]	@ (80071c8 <tcp_slowtmr+0x268>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	4b92      	ldr	r3, [pc, #584]	@ (80071c8 <tcp_slowtmr+0x268>)
 8006f80:	701a      	strb	r2, [r3, #0]
 8006f82:	e000      	b.n	8006f86 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006f84:	bf00      	nop
  prev = NULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006f8a:	4b90      	ldr	r3, [pc, #576]	@ (80071cc <tcp_slowtmr+0x26c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006f90:	e29d      	b.n	80074ce <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	7d1b      	ldrb	r3, [r3, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <tcp_slowtmr+0x48>
 8006f9a:	4b8d      	ldr	r3, [pc, #564]	@ (80071d0 <tcp_slowtmr+0x270>)
 8006f9c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006fa0:	498c      	ldr	r1, [pc, #560]	@ (80071d4 <tcp_slowtmr+0x274>)
 8006fa2:	488d      	ldr	r0, [pc, #564]	@ (80071d8 <tcp_slowtmr+0x278>)
 8006fa4:	f00a fbd4 	bl	8011750 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006faa:	7d1b      	ldrb	r3, [r3, #20]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d106      	bne.n	8006fbe <tcp_slowtmr+0x5e>
 8006fb0:	4b87      	ldr	r3, [pc, #540]	@ (80071d0 <tcp_slowtmr+0x270>)
 8006fb2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006fb6:	4989      	ldr	r1, [pc, #548]	@ (80071dc <tcp_slowtmr+0x27c>)
 8006fb8:	4887      	ldr	r0, [pc, #540]	@ (80071d8 <tcp_slowtmr+0x278>)
 8006fba:	f00a fbc9 	bl	8011750 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc0:	7d1b      	ldrb	r3, [r3, #20]
 8006fc2:	2b0a      	cmp	r3, #10
 8006fc4:	d106      	bne.n	8006fd4 <tcp_slowtmr+0x74>
 8006fc6:	4b82      	ldr	r3, [pc, #520]	@ (80071d0 <tcp_slowtmr+0x270>)
 8006fc8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006fcc:	4984      	ldr	r1, [pc, #528]	@ (80071e0 <tcp_slowtmr+0x280>)
 8006fce:	4882      	ldr	r0, [pc, #520]	@ (80071d8 <tcp_slowtmr+0x278>)
 8006fd0:	f00a fbbe 	bl	8011750 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	7f9a      	ldrb	r2, [r3, #30]
 8006fd8:	4b7b      	ldr	r3, [pc, #492]	@ (80071c8 <tcp_slowtmr+0x268>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d105      	bne.n	8006fec <tcp_slowtmr+0x8c>
      prev = pcb;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006fea:	e270      	b.n	80074ce <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8006fec:	4b76      	ldr	r3, [pc, #472]	@ (80071c8 <tcp_slowtmr+0x268>)
 8006fee:	781a      	ldrb	r2, [r3, #0]
 8006ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ff2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007002:	7d1b      	ldrb	r3, [r3, #20]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d10a      	bne.n	800701e <tcp_slowtmr+0xbe>
 8007008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800700e:	2b05      	cmp	r3, #5
 8007010:	d905      	bls.n	800701e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8007012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007016:	3301      	adds	r3, #1
 8007018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800701c:	e11e      	b.n	800725c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800701e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007020:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007024:	2b0b      	cmp	r3, #11
 8007026:	d905      	bls.n	8007034 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8007028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800702c:	3301      	adds	r3, #1
 800702e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007032:	e113      	b.n	800725c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8007034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007036:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800703a:	2b00      	cmp	r3, #0
 800703c:	d075      	beq.n	800712a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800703e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <tcp_slowtmr+0xf4>
 8007046:	4b62      	ldr	r3, [pc, #392]	@ (80071d0 <tcp_slowtmr+0x270>)
 8007048:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800704c:	4965      	ldr	r1, [pc, #404]	@ (80071e4 <tcp_slowtmr+0x284>)
 800704e:	4862      	ldr	r0, [pc, #392]	@ (80071d8 <tcp_slowtmr+0x278>)
 8007050:	f00a fb7e 	bl	8011750 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d106      	bne.n	800706a <tcp_slowtmr+0x10a>
 800705c:	4b5c      	ldr	r3, [pc, #368]	@ (80071d0 <tcp_slowtmr+0x270>)
 800705e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8007062:	4961      	ldr	r1, [pc, #388]	@ (80071e8 <tcp_slowtmr+0x288>)
 8007064:	485c      	ldr	r0, [pc, #368]	@ (80071d8 <tcp_slowtmr+0x278>)
 8007066:	f00a fb73 	bl	8011750 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8007070:	2b0b      	cmp	r3, #11
 8007072:	d905      	bls.n	8007080 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8007074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007078:	3301      	adds	r3, #1
 800707a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800707e:	e0ed      	b.n	800725c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007082:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007086:	3b01      	subs	r3, #1
 8007088:	4a58      	ldr	r2, [pc, #352]	@ (80071ec <tcp_slowtmr+0x28c>)
 800708a:	5cd3      	ldrb	r3, [r2, r3]
 800708c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800708e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007090:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007094:	7c7a      	ldrb	r2, [r7, #17]
 8007096:	429a      	cmp	r2, r3
 8007098:	d907      	bls.n	80070aa <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80070aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80070b0:	7c7a      	ldrb	r2, [r7, #17]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	f200 80d2 	bhi.w	800725c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80070b8:	2301      	movs	r3, #1
 80070ba:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80070bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d108      	bne.n	80070d8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80070c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070c8:	f005 f968 	bl	800c39c <tcp_zero_window_probe>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d014      	beq.n	80070fc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80070d2:	2300      	movs	r3, #0
 80070d4:	623b      	str	r3, [r7, #32]
 80070d6:	e011      	b.n	80070fc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80070d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070de:	4619      	mov	r1, r3
 80070e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070e2:	f004 f82d 	bl	800b140 <tcp_split_unsent_seg>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d107      	bne.n	80070fc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80070ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80070ee:	f004 faad 	bl	800b64c <tcp_output>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80ac 	beq.w	800725c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800710c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8007112:	2b06      	cmp	r3, #6
 8007114:	f200 80a2 	bhi.w	800725c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8007118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007124:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8007128:	e098      	b.n	800725c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800712a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800712c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007130:	2b00      	cmp	r3, #0
 8007132:	db0f      	blt.n	8007154 <tcp_slowtmr+0x1f4>
 8007134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007136:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800713a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800713e:	4293      	cmp	r3, r2
 8007140:	d008      	beq.n	8007154 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007148:	b29b      	uxth	r3, r3
 800714a:	3301      	adds	r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	b21a      	sxth	r2, r3
 8007150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007152:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800715a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007160:	429a      	cmp	r2, r3
 8007162:	db7b      	blt.n	800725c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007164:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007166:	f004 fd65 	bl	800bc34 <tcp_rexmit_rto_prepare>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <tcp_slowtmr+0x220>
 8007170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007174:	2b00      	cmp	r3, #0
 8007176:	d171      	bne.n	800725c <tcp_slowtmr+0x2fc>
 8007178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d06d      	beq.n	800725c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8007180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007182:	7d1b      	ldrb	r3, [r3, #20]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d03a      	beq.n	80071fe <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800718e:	2b0c      	cmp	r3, #12
 8007190:	bf28      	it	cs
 8007192:	230c      	movcs	r3, #12
 8007194:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007198:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800719c:	10db      	asrs	r3, r3, #3
 800719e:	b21b      	sxth	r3, r3
 80071a0:	461a      	mov	r2, r3
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80071a8:	4413      	add	r3, r2
 80071aa:	7efa      	ldrb	r2, [r7, #27]
 80071ac:	4910      	ldr	r1, [pc, #64]	@ (80071f0 <tcp_slowtmr+0x290>)
 80071ae:	5c8a      	ldrb	r2, [r1, r2]
 80071b0:	4093      	lsls	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80071ba:	4293      	cmp	r3, r2
 80071bc:	dc1a      	bgt.n	80071f4 <tcp_slowtmr+0x294>
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	b21a      	sxth	r2, r3
 80071c2:	e019      	b.n	80071f8 <tcp_slowtmr+0x298>
 80071c4:	20008048 	.word	0x20008048
 80071c8:	2000805e 	.word	0x2000805e
 80071cc:	20008054 	.word	0x20008054
 80071d0:	080133c0 	.word	0x080133c0
 80071d4:	08013704 	.word	0x08013704
 80071d8:	08013404 	.word	0x08013404
 80071dc:	08013730 	.word	0x08013730
 80071e0:	0801375c 	.word	0x0801375c
 80071e4:	0801378c 	.word	0x0801378c
 80071e8:	080137c0 	.word	0x080137c0
 80071ec:	08016534 	.word	0x08016534
 80071f0:	08016524 	.word	0x08016524
 80071f4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80071f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80071fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007200:	2200      	movs	r2, #0
 8007202:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800720a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800720c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8007210:	4293      	cmp	r3, r2
 8007212:	bf28      	it	cs
 8007214:	4613      	movcs	r3, r2
 8007216:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007218:	8a7b      	ldrh	r3, [r7, #18]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007220:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007226:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	b29b      	uxth	r3, r3
 8007232:	429a      	cmp	r2, r3
 8007234:	d206      	bcs.n	8007244 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	2200      	movs	r2, #0
 8007252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8007256:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007258:	f004 fd5c 	bl	800bd14 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	7d1b      	ldrb	r3, [r3, #20]
 8007260:	2b06      	cmp	r3, #6
 8007262:	d111      	bne.n	8007288 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8007264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007266:	8b5b      	ldrh	r3, [r3, #26]
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007270:	4b9c      	ldr	r3, [pc, #624]	@ (80074e4 <tcp_slowtmr+0x584>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b28      	cmp	r3, #40	@ 0x28
 800727c:	d904      	bls.n	8007288 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800727e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007282:	3301      	adds	r3, #1
 8007284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728a:	7a5b      	ldrb	r3, [r3, #9]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d04a      	beq.n	800732a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007298:	2b04      	cmp	r3, #4
 800729a:	d003      	beq.n	80072a4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800729c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80072a0:	2b07      	cmp	r3, #7
 80072a2:	d142      	bne.n	800732a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072a4:	4b8f      	ldr	r3, [pc, #572]	@ (80074e4 <tcp_slowtmr+0x584>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80072ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80072b4:	4b8c      	ldr	r3, [pc, #560]	@ (80074e8 <tcp_slowtmr+0x588>)
 80072b6:	440b      	add	r3, r1
 80072b8:	498c      	ldr	r1, [pc, #560]	@ (80074ec <tcp_slowtmr+0x58c>)
 80072ba:	fba1 1303 	umull	r1, r3, r1, r3
 80072be:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d90a      	bls.n	80072da <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80072c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072c8:	3301      	adds	r3, #1
 80072ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80072ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072d2:	3301      	adds	r3, #1
 80072d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80072d8:	e027      	b.n	800732a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80072da:	4b82      	ldr	r3, [pc, #520]	@ (80074e4 <tcp_slowtmr+0x584>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80072e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80072ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ec:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80072f0:	4618      	mov	r0, r3
 80072f2:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <tcp_slowtmr+0x590>)
 80072f4:	fb00 f303 	mul.w	r3, r0, r3
 80072f8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80072fa:	497c      	ldr	r1, [pc, #496]	@ (80074ec <tcp_slowtmr+0x58c>)
 80072fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007300:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007302:	429a      	cmp	r2, r3
 8007304:	d911      	bls.n	800732a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007306:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007308:	f005 f808 	bl	800c31c <tcp_keepalive>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8007312:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8007316:	2b00      	cmp	r3, #0
 8007318:	d107      	bne.n	800732a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8007320:	3301      	adds	r3, #1
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007326:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800732a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800732e:	2b00      	cmp	r3, #0
 8007330:	d011      	beq.n	8007356 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007332:	4b6c      	ldr	r3, [pc, #432]	@ (80074e4 <tcp_slowtmr+0x584>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	1ad2      	subs	r2, r2, r3
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8007342:	4619      	mov	r1, r3
 8007344:	460b      	mov	r3, r1
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	440b      	add	r3, r1
 800734a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800734c:	429a      	cmp	r2, r3
 800734e:	d302      	bcc.n	8007356 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8007350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007352:	f000 fec9 	bl	80080e8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	7d1b      	ldrb	r3, [r3, #20]
 800735a:	2b03      	cmp	r3, #3
 800735c:	d10b      	bne.n	8007376 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800735e:	4b61      	ldr	r3, [pc, #388]	@ (80074e4 <tcp_slowtmr+0x584>)
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b28      	cmp	r3, #40	@ 0x28
 800736a:	d904      	bls.n	8007376 <tcp_slowtmr+0x416>
        ++pcb_remove;
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007370:	3301      	adds	r3, #1
 8007372:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8007376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007378:	7d1b      	ldrb	r3, [r3, #20]
 800737a:	2b09      	cmp	r3, #9
 800737c:	d10b      	bne.n	8007396 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800737e:	4b59      	ldr	r3, [pc, #356]	@ (80074e4 <tcp_slowtmr+0x584>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2bf0      	cmp	r3, #240	@ 0xf0
 800738a:	d904      	bls.n	8007396 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800738c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007390:	3301      	adds	r3, #1
 8007392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8007396:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800739a:	2b00      	cmp	r3, #0
 800739c:	d060      	beq.n	8007460 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80073a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80073a8:	f000 fcea 	bl	8007d80 <tcp_pcb_purge>
      if (prev != NULL) {
 80073ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d010      	beq.n	80073d4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80073b2:	4b50      	ldr	r3, [pc, #320]	@ (80074f4 <tcp_slowtmr+0x594>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d106      	bne.n	80073ca <tcp_slowtmr+0x46a>
 80073bc:	4b4e      	ldr	r3, [pc, #312]	@ (80074f8 <tcp_slowtmr+0x598>)
 80073be:	f240 526d 	movw	r2, #1389	@ 0x56d
 80073c2:	494e      	ldr	r1, [pc, #312]	@ (80074fc <tcp_slowtmr+0x59c>)
 80073c4:	484e      	ldr	r0, [pc, #312]	@ (8007500 <tcp_slowtmr+0x5a0>)
 80073c6:	f00a f9c3 	bl	8011750 <iprintf>
        prev->next = pcb->next;
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d0:	60da      	str	r2, [r3, #12]
 80073d2:	e00f      	b.n	80073f4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80073d4:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <tcp_slowtmr+0x594>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073da:	429a      	cmp	r2, r3
 80073dc:	d006      	beq.n	80073ec <tcp_slowtmr+0x48c>
 80073de:	4b46      	ldr	r3, [pc, #280]	@ (80074f8 <tcp_slowtmr+0x598>)
 80073e0:	f240 5271 	movw	r2, #1393	@ 0x571
 80073e4:	4947      	ldr	r1, [pc, #284]	@ (8007504 <tcp_slowtmr+0x5a4>)
 80073e6:	4846      	ldr	r0, [pc, #280]	@ (8007500 <tcp_slowtmr+0x5a0>)
 80073e8:	f00a f9b2 	bl	8011750 <iprintf>
        tcp_active_pcbs = pcb->next;
 80073ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a40      	ldr	r2, [pc, #256]	@ (80074f4 <tcp_slowtmr+0x594>)
 80073f2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80073f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d013      	beq.n	8007424 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80073fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007404:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8007406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007408:	3304      	adds	r3, #4
 800740a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800740c:	8ad2      	ldrh	r2, [r2, #22]
 800740e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007410:	8b09      	ldrh	r1, [r1, #24]
 8007412:	9102      	str	r1, [sp, #8]
 8007414:	9201      	str	r2, [sp, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462b      	mov	r3, r5
 800741a:	4622      	mov	r2, r4
 800741c:	4601      	mov	r1, r0
 800741e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007420:	f004 fec8 	bl	800c1b4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	7d1b      	ldrb	r3, [r3, #20]
 800742e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800743a:	6838      	ldr	r0, [r7, #0]
 800743c:	f7ff f838 	bl	80064b0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8007440:	4b31      	ldr	r3, [pc, #196]	@ (8007508 <tcp_slowtmr+0x5a8>)
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <tcp_slowtmr+0x4f6>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f06f 010c 	mvn.w	r1, #12
 8007452:	68b8      	ldr	r0, [r7, #8]
 8007454:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007456:	4b2c      	ldr	r3, [pc, #176]	@ (8007508 <tcp_slowtmr+0x5a8>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d037      	beq.n	80074ce <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800745e:	e592      	b.n	8006f86 <tcp_slowtmr+0x26>
      prev = pcb;
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800746a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746c:	7f1b      	ldrb	r3, [r3, #28]
 800746e:	3301      	adds	r3, #1
 8007470:	b2da      	uxtb	r2, r3
 8007472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007474:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007478:	7f1a      	ldrb	r2, [r3, #28]
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	7f5b      	ldrb	r3, [r3, #29]
 800747e:	429a      	cmp	r2, r3
 8007480:	d325      	bcc.n	80074ce <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8007488:	4b1f      	ldr	r3, [pc, #124]	@ (8007508 <tcp_slowtmr+0x5a8>)
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800748e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <tcp_slowtmr+0x550>
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800749e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a0:	6912      	ldr	r2, [r2, #16]
 80074a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80074ae:	e002      	b.n	80074b6 <tcp_slowtmr+0x556>
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80074b6:	4b14      	ldr	r3, [pc, #80]	@ (8007508 <tcp_slowtmr+0x5a8>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f47f ad62 	bne.w	8006f84 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80074c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80074c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074ca:	f004 f8bf 	bl	800b64c <tcp_output>
  while (pcb != NULL) {
 80074ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f47f ad5e 	bne.w	8006f92 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80074da:	4b0c      	ldr	r3, [pc, #48]	@ (800750c <tcp_slowtmr+0x5ac>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80074e0:	e069      	b.n	80075b6 <tcp_slowtmr+0x656>
 80074e2:	bf00      	nop
 80074e4:	20008048 	.word	0x20008048
 80074e8:	000a4cb8 	.word	0x000a4cb8
 80074ec:	10624dd3 	.word	0x10624dd3
 80074f0:	000124f8 	.word	0x000124f8
 80074f4:	20008054 	.word	0x20008054
 80074f8:	080133c0 	.word	0x080133c0
 80074fc:	080137f8 	.word	0x080137f8
 8007500:	08013404 	.word	0x08013404
 8007504:	08013824 	.word	0x08013824
 8007508:	2000805c 	.word	0x2000805c
 800750c:	20008058 	.word	0x20008058
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	7d1b      	ldrb	r3, [r3, #20]
 8007514:	2b0a      	cmp	r3, #10
 8007516:	d006      	beq.n	8007526 <tcp_slowtmr+0x5c6>
 8007518:	4b2b      	ldr	r3, [pc, #172]	@ (80075c8 <tcp_slowtmr+0x668>)
 800751a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800751e:	492b      	ldr	r1, [pc, #172]	@ (80075cc <tcp_slowtmr+0x66c>)
 8007520:	482b      	ldr	r0, [pc, #172]	@ (80075d0 <tcp_slowtmr+0x670>)
 8007522:	f00a f915 	bl	8011750 <iprintf>
    pcb_remove = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800752c:	4b29      	ldr	r3, [pc, #164]	@ (80075d4 <tcp_slowtmr+0x674>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	2bf0      	cmp	r3, #240	@ 0xf0
 8007538:	d904      	bls.n	8007544 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800753a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800753e:	3301      	adds	r3, #1
 8007540:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007548:	2b00      	cmp	r3, #0
 800754a:	d02f      	beq.n	80075ac <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800754c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800754e:	f000 fc17 	bl	8007d80 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007558:	4b1f      	ldr	r3, [pc, #124]	@ (80075d8 <tcp_slowtmr+0x678>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800755e:	429a      	cmp	r2, r3
 8007560:	d106      	bne.n	8007570 <tcp_slowtmr+0x610>
 8007562:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <tcp_slowtmr+0x668>)
 8007564:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007568:	491c      	ldr	r1, [pc, #112]	@ (80075dc <tcp_slowtmr+0x67c>)
 800756a:	4819      	ldr	r0, [pc, #100]	@ (80075d0 <tcp_slowtmr+0x670>)
 800756c:	f00a f8f0 	bl	8011750 <iprintf>
        prev->next = pcb->next;
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	60da      	str	r2, [r3, #12]
 8007578:	e00f      	b.n	800759a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800757a:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <tcp_slowtmr+0x678>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d006      	beq.n	8007592 <tcp_slowtmr+0x632>
 8007584:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <tcp_slowtmr+0x668>)
 8007586:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800758a:	4915      	ldr	r1, [pc, #84]	@ (80075e0 <tcp_slowtmr+0x680>)
 800758c:	4810      	ldr	r0, [pc, #64]	@ (80075d0 <tcp_slowtmr+0x670>)
 800758e:	f00a f8df 	bl	8011750 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	4a10      	ldr	r2, [pc, #64]	@ (80075d8 <tcp_slowtmr+0x678>)
 8007598:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80075a4:	69f8      	ldr	r0, [r7, #28]
 80075a6:	f7fe ff83 	bl	80064b0 <tcp_free>
 80075aa:	e004      	b.n	80075b6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80075ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80075b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1a9      	bne.n	8007510 <tcp_slowtmr+0x5b0>
    }
  }
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	3730      	adds	r7, #48	@ 0x30
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bdb0      	pop	{r4, r5, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	080133c0 	.word	0x080133c0
 80075cc:	08013850 	.word	0x08013850
 80075d0:	08013404 	.word	0x08013404
 80075d4:	20008048 	.word	0x20008048
 80075d8:	20008058 	.word	0x20008058
 80075dc:	08013880 	.word	0x08013880
 80075e0:	080138a8 	.word	0x080138a8

080075e4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80075ea:	4b2d      	ldr	r3, [pc, #180]	@ (80076a0 <tcp_fasttmr+0xbc>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	3301      	adds	r3, #1
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	4b2b      	ldr	r3, [pc, #172]	@ (80076a0 <tcp_fasttmr+0xbc>)
 80075f4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80075f6:	4b2b      	ldr	r3, [pc, #172]	@ (80076a4 <tcp_fasttmr+0xc0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80075fc:	e048      	b.n	8007690 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7f9a      	ldrb	r2, [r3, #30]
 8007602:	4b27      	ldr	r3, [pc, #156]	@ (80076a0 <tcp_fasttmr+0xbc>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d03f      	beq.n	800768a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800760a:	4b25      	ldr	r3, [pc, #148]	@ (80076a0 <tcp_fasttmr+0xbc>)
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8b5b      	ldrh	r3, [r3, #26]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8b5b      	ldrh	r3, [r3, #26]
 8007622:	f043 0302 	orr.w	r3, r3, #2
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f004 f80d 	bl	800b64c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8b5b      	ldrh	r3, [r3, #26]
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	b29a      	uxth	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8b5b      	ldrh	r3, [r3, #26]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b00      	cmp	r3, #0
 800764a:	d009      	beq.n	8007660 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	8b5b      	ldrh	r3, [r3, #26]
 8007650:	f023 0308 	bic.w	r3, r3, #8
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff f8bc 	bl	80067d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800766e:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <tcp_fasttmr+0xc4>)
 8007670:	2200      	movs	r2, #0
 8007672:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f819 	bl	80076ac <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800767a:	4b0b      	ldr	r3, [pc, #44]	@ (80076a8 <tcp_fasttmr+0xc4>)
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d000      	beq.n	8007684 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007682:	e7b8      	b.n	80075f6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	e002      	b.n	8007690 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1b3      	bne.n	80075fe <tcp_fasttmr+0x1a>
    }
  }
}
 8007696:	bf00      	nop
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	2000805e 	.word	0x2000805e
 80076a4:	20008054 	.word	0x20008054
 80076a8:	2000805c 	.word	0x2000805c

080076ac <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <tcp_process_refused_data+0x22>
 80076ba:	4b37      	ldr	r3, [pc, #220]	@ (8007798 <tcp_process_refused_data+0xec>)
 80076bc:	f240 6209 	movw	r2, #1545	@ 0x609
 80076c0:	4936      	ldr	r1, [pc, #216]	@ (800779c <tcp_process_refused_data+0xf0>)
 80076c2:	4837      	ldr	r0, [pc, #220]	@ (80077a0 <tcp_process_refused_data+0xf4>)
 80076c4:	f00a f844 	bl	8011750 <iprintf>
 80076c8:	f06f 030f 	mvn.w	r3, #15
 80076cc:	e060      	b.n	8007790 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076d2:	7b5b      	ldrb	r3, [r3, #13]
 80076d4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076da:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <tcp_process_refused_data+0x58>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6918      	ldr	r0, [r3, #16]
 80076f6:	2300      	movs	r3, #0
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	47a0      	blx	r4
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
 8007702:	e007      	b.n	8007714 <tcp_process_refused_data+0x68>
 8007704:	2300      	movs	r3, #0
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	2000      	movs	r0, #0
 800770c:	f000 f8c2 	bl	8007894 <tcp_recv_null>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d12a      	bne.n	8007772 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d033      	beq.n	800778e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800772e:	d005      	beq.n	800773c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007734:	3301      	adds	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <tcp_process_refused_data+0xb2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6918      	ldr	r0, [r3, #16]
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	47a0      	blx	r4
 8007758:	4603      	mov	r3, r0
 800775a:	73fb      	strb	r3, [r7, #15]
 800775c:	e001      	b.n	8007762 <tcp_process_refused_data+0xb6>
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007766:	f113 0f0d 	cmn.w	r3, #13
 800776a:	d110      	bne.n	800778e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800776c:	f06f 030c 	mvn.w	r3, #12
 8007770:	e00e      	b.n	8007790 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007776:	f113 0f0d 	cmn.w	r3, #13
 800777a:	d102      	bne.n	8007782 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800777c:	f06f 030c 	mvn.w	r3, #12
 8007780:	e006      	b.n	8007790 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007788:	f06f 0304 	mvn.w	r3, #4
 800778c:	e000      	b.n	8007790 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bd90      	pop	{r4, r7, pc}
 8007798:	080133c0 	.word	0x080133c0
 800779c:	080138d0 	.word	0x080138d0
 80077a0:	08013404 	.word	0x08013404

080077a4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80077ac:	e007      	b.n	80077be <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f80a 	bl	80077ce <tcp_seg_free>
    seg = next;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f4      	bne.n	80077ae <tcp_segs_free+0xa>
  }
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00c      	beq.n	80077f6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d004      	beq.n	80077ee <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fe fbb1 	bl	8005f50 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	2003      	movs	r0, #3
 80077f2:	f7fd fd2b 	bl	800524c <memp_free>
  }
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d107      	bne.n	8007822 <tcp_setprio+0x22>
 8007812:	4b07      	ldr	r3, [pc, #28]	@ (8007830 <tcp_setprio+0x30>)
 8007814:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8007818:	4906      	ldr	r1, [pc, #24]	@ (8007834 <tcp_setprio+0x34>)
 800781a:	4807      	ldr	r0, [pc, #28]	@ (8007838 <tcp_setprio+0x38>)
 800781c:	f009 ff98 	bl	8011750 <iprintf>
 8007820:	e002      	b.n	8007828 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	755a      	strb	r2, [r3, #21]
}
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	080133c0 	.word	0x080133c0
 8007834:	080138f8 	.word	0x080138f8
 8007838:	08013404 	.word	0x08013404

0800783c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <tcp_seg_copy+0x1c>
 800784a:	4b0f      	ldr	r3, [pc, #60]	@ (8007888 <tcp_seg_copy+0x4c>)
 800784c:	f240 6282 	movw	r2, #1666	@ 0x682
 8007850:	490e      	ldr	r1, [pc, #56]	@ (800788c <tcp_seg_copy+0x50>)
 8007852:	480f      	ldr	r0, [pc, #60]	@ (8007890 <tcp_seg_copy+0x54>)
 8007854:	f009 ff7c 	bl	8011750 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007858:	2003      	movs	r0, #3
 800785a:	f7fd fc87 	bl	800516c <memp_malloc>
 800785e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <tcp_seg_copy+0x2e>
    return NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	e00a      	b.n	8007880 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800786a:	2210      	movs	r2, #16
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f00a f95b 	bl	8011b2a <memcpy>
  pbuf_ref(cseg->p);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fc09 	bl	8006090 <pbuf_ref>
  return cseg;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	080133c0 	.word	0x080133c0
 800788c:	08013914 	.word	0x08013914
 8007890:	08013404 	.word	0x08013404

08007894 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <tcp_recv_null+0x28>
 80078a8:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <tcp_recv_null+0x60>)
 80078aa:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80078ae:	4912      	ldr	r1, [pc, #72]	@ (80078f8 <tcp_recv_null+0x64>)
 80078b0:	4812      	ldr	r0, [pc, #72]	@ (80078fc <tcp_recv_null+0x68>)
 80078b2:	f009 ff4d 	bl	8011750 <iprintf>
 80078b6:	f06f 030f 	mvn.w	r3, #15
 80078ba:	e016      	b.n	80078ea <tcp_recv_null+0x56>

  if (p != NULL) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	891b      	ldrh	r3, [r3, #8]
 80078c6:	4619      	mov	r1, r3
 80078c8:	68b8      	ldr	r0, [r7, #8]
 80078ca:	f7ff fab3 	bl	8006e34 <tcp_recved>
    pbuf_free(p);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fe fb3e 	bl	8005f50 <pbuf_free>
 80078d4:	e008      	b.n	80078e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80078d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80078de:	68b8      	ldr	r0, [r7, #8]
 80078e0:	f7fe ffe4 	bl	80068ac <tcp_close>
 80078e4:	4603      	mov	r3, r0
 80078e6:	e000      	b.n	80078ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	080133c0 	.word	0x080133c0
 80078f8:	08013930 	.word	0x08013930
 80078fc:	08013404 	.word	0x08013404

08007900 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800790a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800790e:	2b00      	cmp	r3, #0
 8007910:	db01      	blt.n	8007916 <tcp_kill_prio+0x16>
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	e000      	b.n	8007918 <tcp_kill_prio+0x18>
 8007916:	237f      	movs	r3, #127	@ 0x7f
 8007918:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800791a:	7afb      	ldrb	r3, [r7, #11]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d034      	beq.n	800798a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	3b01      	subs	r3, #1
 8007924:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800792e:	4b19      	ldr	r3, [pc, #100]	@ (8007994 <tcp_kill_prio+0x94>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	e01f      	b.n	8007976 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	7d5b      	ldrb	r3, [r3, #21]
 800793a:	7afa      	ldrb	r2, [r7, #11]
 800793c:	429a      	cmp	r2, r3
 800793e:	d80c      	bhi.n	800795a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007944:	7afa      	ldrb	r2, [r7, #11]
 8007946:	429a      	cmp	r2, r3
 8007948:	d112      	bne.n	8007970 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800794a:	4b13      	ldr	r3, [pc, #76]	@ (8007998 <tcp_kill_prio+0x98>)
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	68fa      	ldr	r2, [r7, #12]
 8007956:	429a      	cmp	r2, r3
 8007958:	d80a      	bhi.n	8007970 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800795a:	4b0f      	ldr	r3, [pc, #60]	@ (8007998 <tcp_kill_prio+0x98>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	7d5b      	ldrb	r3, [r3, #21]
 800796e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1dc      	bne.n	8007936 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007982:	6938      	ldr	r0, [r7, #16]
 8007984:	f7ff f87c 	bl	8006a80 <tcp_abort>
 8007988:	e000      	b.n	800798c <tcp_kill_prio+0x8c>
    return;
 800798a:	bf00      	nop
  }
}
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20008054 	.word	0x20008054
 8007998:	20008048 	.word	0x20008048

0800799c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d009      	beq.n	80079c0 <tcp_kill_state+0x24>
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b09      	cmp	r3, #9
 80079b0:	d006      	beq.n	80079c0 <tcp_kill_state+0x24>
 80079b2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <tcp_kill_state+0x80>)
 80079b4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80079b8:	4919      	ldr	r1, [pc, #100]	@ (8007a20 <tcp_kill_state+0x84>)
 80079ba:	481a      	ldr	r0, [pc, #104]	@ (8007a24 <tcp_kill_state+0x88>)
 80079bc:	f009 fec8 	bl	8011750 <iprintf>

  inactivity = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079c8:	4b17      	ldr	r3, [pc, #92]	@ (8007a28 <tcp_kill_state+0x8c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	617b      	str	r3, [r7, #20]
 80079ce:	e017      	b.n	8007a00 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	7d1b      	ldrb	r3, [r3, #20]
 80079d4:	79fa      	ldrb	r2, [r7, #7]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d10f      	bne.n	80079fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80079da:	4b14      	ldr	r3, [pc, #80]	@ (8007a2c <tcp_kill_state+0x90>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d807      	bhi.n	80079fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80079ea:	4b10      	ldr	r3, [pc, #64]	@ (8007a2c <tcp_kill_state+0x90>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e4      	bne.n	80079d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	6938      	ldr	r0, [r7, #16]
 8007a10:	f7fe ff78 	bl	8006904 <tcp_abandon>
  }
}
 8007a14:	bf00      	nop
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	080133c0 	.word	0x080133c0
 8007a20:	0801394c 	.word	0x0801394c
 8007a24:	08013404 	.word	0x08013404
 8007a28:	20008054 	.word	0x20008054
 8007a2c:	20008048 	.word	0x20008048

08007a30 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a3e:	4b12      	ldr	r3, [pc, #72]	@ (8007a88 <tcp_kill_timewait+0x58>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e012      	b.n	8007a6c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007a46:	4b11      	ldr	r3, [pc, #68]	@ (8007a8c <tcp_kill_timewait+0x5c>)
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d807      	bhi.n	8007a66 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007a56:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <tcp_kill_timewait+0x5c>)
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e9      	bne.n	8007a46 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007a78:	68b8      	ldr	r0, [r7, #8]
 8007a7a:	f7ff f801 	bl	8006a80 <tcp_abort>
  }
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20008058 	.word	0x20008058
 8007a8c:	20008048 	.word	0x20008048

08007a90 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007a96:	4b10      	ldr	r3, [pc, #64]	@ (8007ad8 <tcp_handle_closepend+0x48>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007a9c:	e014      	b.n	8007ac8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8b5b      	ldrh	r3, [r3, #26]
 8007aa8:	f003 0308 	and.w	r3, r3, #8
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8b5b      	ldrh	r3, [r3, #26]
 8007ab4:	f023 0308 	bic.w	r3, r3, #8
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fe fe8a 	bl	80067d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e7      	bne.n	8007a9e <tcp_handle_closepend+0xe>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	bf00      	nop
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20008054 	.word	0x20008054

08007adc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007ae6:	2001      	movs	r0, #1
 8007ae8:	f7fd fb40 	bl	800516c <memp_malloc>
 8007aec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d126      	bne.n	8007b42 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007af4:	f7ff ffcc 	bl	8007a90 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007af8:	f7ff ff9a 	bl	8007a30 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007afc:	2001      	movs	r0, #1
 8007afe:	f7fd fb35 	bl	800516c <memp_malloc>
 8007b02:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d11b      	bne.n	8007b42 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007b0a:	2009      	movs	r0, #9
 8007b0c:	f7ff ff46 	bl	800799c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b10:	2001      	movs	r0, #1
 8007b12:	f7fd fb2b 	bl	800516c <memp_malloc>
 8007b16:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d111      	bne.n	8007b42 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007b1e:	2008      	movs	r0, #8
 8007b20:	f7ff ff3c 	bl	800799c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b24:	2001      	movs	r0, #1
 8007b26:	f7fd fb21 	bl	800516c <memp_malloc>
 8007b2a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d107      	bne.n	8007b42 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7ff fee3 	bl	8007900 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007b3a:	2001      	movs	r0, #1
 8007b3c:	f7fd fb16 	bl	800516c <memp_malloc>
 8007b40:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d03f      	beq.n	8007bc8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007b48:	229c      	movs	r2, #156	@ 0x9c
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f009 ff57 	bl	8011a00 <memset>
    pcb->prio = prio;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007b5e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8007b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	22ff      	movs	r2, #255	@ 0xff
 8007b76:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8007b7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2206      	movs	r2, #6
 8007b84:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007b94:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <tcp_alloc+0xf8>)
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd8 <tcp_alloc+0xfc>)
 8007ba8:	781a      	ldrb	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007bb4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4a08      	ldr	r2, [pc, #32]	@ (8007bdc <tcp_alloc+0x100>)
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a07      	ldr	r2, [pc, #28]	@ (8007be0 <tcp_alloc+0x104>)
 8007bc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20008048 	.word	0x20008048
 8007bd8:	2000805e 	.word	0x2000805e
 8007bdc:	08007895 	.word	0x08007895
 8007be0:	006ddd00 	.word	0x006ddd00

08007be4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007bee:	2040      	movs	r0, #64	@ 0x40
 8007bf0:	f7ff ff74 	bl	8007adc <tcp_alloc>
 8007bf4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	611a      	str	r2, [r3, #16]
  }
}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
	...

08007c24 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00e      	beq.n	8007c52 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	7d1b      	ldrb	r3, [r3, #20]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d106      	bne.n	8007c4a <tcp_recv+0x26>
 8007c3c:	4b07      	ldr	r3, [pc, #28]	@ (8007c5c <tcp_recv+0x38>)
 8007c3e:	f240 72df 	movw	r2, #2015	@ 0x7df
 8007c42:	4907      	ldr	r1, [pc, #28]	@ (8007c60 <tcp_recv+0x3c>)
 8007c44:	4807      	ldr	r0, [pc, #28]	@ (8007c64 <tcp_recv+0x40>)
 8007c46:	f009 fd83 	bl	8011750 <iprintf>
    pcb->recv = recv;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	080133c0 	.word	0x080133c0
 8007c60:	0801395c 	.word	0x0801395c
 8007c64:	08013404 	.word	0x08013404

08007c68 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7d1b      	ldrb	r3, [r3, #20]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d106      	bne.n	8007c8e <tcp_sent+0x26>
 8007c80:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <tcp_sent+0x38>)
 8007c82:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8007c86:	4907      	ldr	r1, [pc, #28]	@ (8007ca4 <tcp_sent+0x3c>)
 8007c88:	4807      	ldr	r0, [pc, #28]	@ (8007ca8 <tcp_sent+0x40>)
 8007c8a:	f009 fd61 	bl	8011750 <iprintf>
    pcb->sent = sent;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	080133c0 	.word	0x080133c0
 8007ca4:	08013984 	.word	0x08013984
 8007ca8:	08013404 	.word	0x08013404

08007cac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00e      	beq.n	8007cda <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	7d1b      	ldrb	r3, [r3, #20]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d106      	bne.n	8007cd2 <tcp_err+0x26>
 8007cc4:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <tcp_err+0x38>)
 8007cc6:	f640 020d 	movw	r2, #2061	@ 0x80d
 8007cca:	4907      	ldr	r1, [pc, #28]	@ (8007ce8 <tcp_err+0x3c>)
 8007ccc:	4807      	ldr	r0, [pc, #28]	@ (8007cec <tcp_err+0x40>)
 8007cce:	f009 fd3f 	bl	8011750 <iprintf>
    pcb->errf = err;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	080133c0 	.word	0x080133c0
 8007ce8:	080139ac 	.word	0x080139ac
 8007cec:	08013404 	.word	0x08013404

08007cf0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <tcp_accept+0x22>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	7d1b      	ldrb	r3, [r3, #20]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d104      	bne.n	8007d12 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	619a      	str	r2, [r3, #24]
  }
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d107      	bne.n	8007d44 <tcp_poll+0x24>
 8007d34:	4b0e      	ldr	r3, [pc, #56]	@ (8007d70 <tcp_poll+0x50>)
 8007d36:	f640 023d 	movw	r2, #2109	@ 0x83d
 8007d3a:	490e      	ldr	r1, [pc, #56]	@ (8007d74 <tcp_poll+0x54>)
 8007d3c:	480e      	ldr	r0, [pc, #56]	@ (8007d78 <tcp_poll+0x58>)
 8007d3e:	f009 fd07 	bl	8011750 <iprintf>
 8007d42:	e011      	b.n	8007d68 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	7d1b      	ldrb	r3, [r3, #20]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d106      	bne.n	8007d5a <tcp_poll+0x3a>
 8007d4c:	4b08      	ldr	r3, [pc, #32]	@ (8007d70 <tcp_poll+0x50>)
 8007d4e:	f640 023e 	movw	r2, #2110	@ 0x83e
 8007d52:	490a      	ldr	r1, [pc, #40]	@ (8007d7c <tcp_poll+0x5c>)
 8007d54:	4808      	ldr	r0, [pc, #32]	@ (8007d78 <tcp_poll+0x58>)
 8007d56:	f009 fcfb 	bl	8011750 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	79fa      	ldrb	r2, [r7, #7]
 8007d66:	775a      	strb	r2, [r3, #29]
}
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	080133c0 	.word	0x080133c0
 8007d74:	080139d4 	.word	0x080139d4
 8007d78:	08013404 	.word	0x08013404
 8007d7c:	080139ec 	.word	0x080139ec

08007d80 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d107      	bne.n	8007d9e <tcp_pcb_purge+0x1e>
 8007d8e:	4b21      	ldr	r3, [pc, #132]	@ (8007e14 <tcp_pcb_purge+0x94>)
 8007d90:	f640 0251 	movw	r2, #2129	@ 0x851
 8007d94:	4920      	ldr	r1, [pc, #128]	@ (8007e18 <tcp_pcb_purge+0x98>)
 8007d96:	4821      	ldr	r0, [pc, #132]	@ (8007e1c <tcp_pcb_purge+0x9c>)
 8007d98:	f009 fcda 	bl	8011750 <iprintf>
 8007d9c:	e037      	b.n	8007e0e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7d1b      	ldrb	r3, [r3, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d033      	beq.n	8007e0e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007daa:	2b0a      	cmp	r3, #10
 8007dac:	d02f      	beq.n	8007e0e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d02b      	beq.n	8007e0e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f8c4 	bl	8005f50 <pbuf_free>
      pcb->refused_data = NULL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f986 	bl	80080e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007de2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fcdb 	bl	80077a4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7ff fcd6 	bl	80077a4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	080133c0 	.word	0x080133c0
 8007e18:	08013a0c 	.word	0x08013a0c
 8007e1c:	08013404 	.word	0x08013404

08007e20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d106      	bne.n	8007e3e <tcp_pcb_remove+0x1e>
 8007e30:	4b3e      	ldr	r3, [pc, #248]	@ (8007f2c <tcp_pcb_remove+0x10c>)
 8007e32:	f640 0283 	movw	r2, #2179	@ 0x883
 8007e36:	493e      	ldr	r1, [pc, #248]	@ (8007f30 <tcp_pcb_remove+0x110>)
 8007e38:	483e      	ldr	r0, [pc, #248]	@ (8007f34 <tcp_pcb_remove+0x114>)
 8007e3a:	f009 fc89 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <tcp_pcb_remove+0x32>
 8007e44:	4b39      	ldr	r3, [pc, #228]	@ (8007f2c <tcp_pcb_remove+0x10c>)
 8007e46:	f640 0284 	movw	r2, #2180	@ 0x884
 8007e4a:	493b      	ldr	r1, [pc, #236]	@ (8007f38 <tcp_pcb_remove+0x118>)
 8007e4c:	4839      	ldr	r0, [pc, #228]	@ (8007f34 <tcp_pcb_remove+0x114>)
 8007e4e:	f009 fc7f 	bl	8011750 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d105      	bne.n	8007e68 <tcp_pcb_remove+0x48>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e013      	b.n	8007e90 <tcp_pcb_remove+0x70>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e00c      	b.n	8007e8a <tcp_pcb_remove+0x6a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d104      	bne.n	8007e84 <tcp_pcb_remove+0x64>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	e005      	b.n	8007e90 <tcp_pcb_remove+0x70>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1ef      	bne.n	8007e70 <tcp_pcb_remove+0x50>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007e96:	6838      	ldr	r0, [r7, #0]
 8007e98:	f7ff ff72 	bl	8007d80 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ea0:	2b0a      	cmp	r3, #10
 8007ea2:	d013      	beq.n	8007ecc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d00f      	beq.n	8007ecc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	8b5b      	ldrh	r3, [r3, #26]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	8b5b      	ldrh	r3, [r3, #26]
 8007ebc:	f043 0302 	orr.w	r3, r3, #2
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007ec6:	6838      	ldr	r0, [r7, #0]
 8007ec8:	f003 fbc0 	bl	800b64c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	7d1b      	ldrb	r3, [r3, #20]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d020      	beq.n	8007f16 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d006      	beq.n	8007eea <tcp_pcb_remove+0xca>
 8007edc:	4b13      	ldr	r3, [pc, #76]	@ (8007f2c <tcp_pcb_remove+0x10c>)
 8007ede:	f640 0293 	movw	r2, #2195	@ 0x893
 8007ee2:	4916      	ldr	r1, [pc, #88]	@ (8007f3c <tcp_pcb_remove+0x11c>)
 8007ee4:	4813      	ldr	r0, [pc, #76]	@ (8007f34 <tcp_pcb_remove+0x114>)
 8007ee6:	f009 fc33 	bl	8011750 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d006      	beq.n	8007f00 <tcp_pcb_remove+0xe0>
 8007ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f2c <tcp_pcb_remove+0x10c>)
 8007ef4:	f640 0294 	movw	r2, #2196	@ 0x894
 8007ef8:	4911      	ldr	r1, [pc, #68]	@ (8007f40 <tcp_pcb_remove+0x120>)
 8007efa:	480e      	ldr	r0, [pc, #56]	@ (8007f34 <tcp_pcb_remove+0x114>)
 8007efc:	f009 fc28 	bl	8011750 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <tcp_pcb_remove+0xf6>
 8007f08:	4b08      	ldr	r3, [pc, #32]	@ (8007f2c <tcp_pcb_remove+0x10c>)
 8007f0a:	f640 0296 	movw	r2, #2198	@ 0x896
 8007f0e:	490d      	ldr	r1, [pc, #52]	@ (8007f44 <tcp_pcb_remove+0x124>)
 8007f10:	4808      	ldr	r0, [pc, #32]	@ (8007f34 <tcp_pcb_remove+0x114>)
 8007f12:	f009 fc1d 	bl	8011750 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	080133c0 	.word	0x080133c0
 8007f30:	08013a28 	.word	0x08013a28
 8007f34:	08013404 	.word	0x08013404
 8007f38:	08013a44 	.word	0x08013a44
 8007f3c:	08013a64 	.word	0x08013a64
 8007f40:	08013a7c 	.word	0x08013a7c
 8007f44:	08013a98 	.word	0x08013a98

08007f48 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <tcp_next_iss+0x1c>
 8007f56:	4b0a      	ldr	r3, [pc, #40]	@ (8007f80 <tcp_next_iss+0x38>)
 8007f58:	f640 02af 	movw	r2, #2223	@ 0x8af
 8007f5c:	4909      	ldr	r1, [pc, #36]	@ (8007f84 <tcp_next_iss+0x3c>)
 8007f5e:	480a      	ldr	r0, [pc, #40]	@ (8007f88 <tcp_next_iss+0x40>)
 8007f60:	f009 fbf6 	bl	8011750 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007f64:	4b09      	ldr	r3, [pc, #36]	@ (8007f8c <tcp_next_iss+0x44>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	4b09      	ldr	r3, [pc, #36]	@ (8007f90 <tcp_next_iss+0x48>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	4a07      	ldr	r2, [pc, #28]	@ (8007f8c <tcp_next_iss+0x44>)
 8007f70:	6013      	str	r3, [r2, #0]
  return iss;
 8007f72:	4b06      	ldr	r3, [pc, #24]	@ (8007f8c <tcp_next_iss+0x44>)
 8007f74:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	080133c0 	.word	0x080133c0
 8007f84:	08013ab0 	.word	0x08013ab0
 8007f88:	08013404 	.word	0x08013404
 8007f8c:	20000024 	.word	0x20000024
 8007f90:	20008048 	.word	0x20008048

08007f94 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d106      	bne.n	8007fb6 <tcp_eff_send_mss_netif+0x22>
 8007fa8:	4b14      	ldr	r3, [pc, #80]	@ (8007ffc <tcp_eff_send_mss_netif+0x68>)
 8007faa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8007fae:	4914      	ldr	r1, [pc, #80]	@ (8008000 <tcp_eff_send_mss_netif+0x6c>)
 8007fb0:	4814      	ldr	r0, [pc, #80]	@ (8008004 <tcp_eff_send_mss_netif+0x70>)
 8007fb2:	f009 fbcd 	bl	8011750 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007fbc:	89fb      	ldrh	r3, [r7, #14]
 8007fbe:	e019      	b.n	8007ff4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fc4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007fc6:	8afb      	ldrh	r3, [r7, #22]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d012      	beq.n	8007ff2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007fcc:	2328      	movs	r3, #40	@ 0x28
 8007fce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007fd0:	8afa      	ldrh	r2, [r7, #22]
 8007fd2:	8abb      	ldrh	r3, [r7, #20]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d904      	bls.n	8007fe2 <tcp_eff_send_mss_netif+0x4e>
 8007fd8:	8afa      	ldrh	r2, [r7, #22]
 8007fda:	8abb      	ldrh	r3, [r7, #20]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	e000      	b.n	8007fe4 <tcp_eff_send_mss_netif+0x50>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007fe6:	8a7a      	ldrh	r2, [r7, #18]
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	4293      	cmp	r3, r2
 8007fec:	bf28      	it	cs
 8007fee:	4613      	movcs	r3, r2
 8007ff0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3718      	adds	r7, #24
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	080133c0 	.word	0x080133c0
 8008000:	08013acc 	.word	0x08013acc
 8008004:	08013404 	.word	0x08013404

08008008 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d119      	bne.n	8008050 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800801c:	4b10      	ldr	r3, [pc, #64]	@ (8008060 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800801e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8008022:	4910      	ldr	r1, [pc, #64]	@ (8008064 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008024:	4810      	ldr	r0, [pc, #64]	@ (8008068 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008026:	f009 fb93 	bl	8011750 <iprintf>

  while (pcb != NULL) {
 800802a:	e011      	b.n	8008050 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d108      	bne.n	800804a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f7fe fd1e 	bl	8006a80 <tcp_abort>
      pcb = next;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e002      	b.n	8008050 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1ea      	bne.n	800802c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008056:	bf00      	nop
 8008058:	bf00      	nop
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	080133c0 	.word	0x080133c0
 8008064:	08013af4 	.word	0x08013af4
 8008068:	08013404 	.word	0x08013404

0800806c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d02a      	beq.n	80080d2 <tcp_netif_ip_addr_changed+0x66>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d026      	beq.n	80080d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008084:	4b15      	ldr	r3, [pc, #84]	@ (80080dc <tcp_netif_ip_addr_changed+0x70>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff ffbc 	bl	8008008 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008090:	4b13      	ldr	r3, [pc, #76]	@ (80080e0 <tcp_netif_ip_addr_changed+0x74>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7ff ffb6 	bl	8008008 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d017      	beq.n	80080d2 <tcp_netif_ip_addr_changed+0x66>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d013      	beq.n	80080d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080aa:	4b0e      	ldr	r3, [pc, #56]	@ (80080e4 <tcp_netif_ip_addr_changed+0x78>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e00c      	b.n	80080cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d103      	bne.n	80080c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1ef      	bne.n	80080b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80080d2:	bf00      	nop
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20008054 	.word	0x20008054
 80080e0:	2000804c 	.word	0x2000804c
 80080e4:	20008050 	.word	0x20008050

080080e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff fb51 	bl	80077a4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b08d      	sub	sp, #52	@ 0x34
 8008114:	af04      	add	r7, sp, #16
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d105      	bne.n	800812c <tcp_input+0x1c>
 8008120:	4b9b      	ldr	r3, [pc, #620]	@ (8008390 <tcp_input+0x280>)
 8008122:	2283      	movs	r2, #131	@ 0x83
 8008124:	499b      	ldr	r1, [pc, #620]	@ (8008394 <tcp_input+0x284>)
 8008126:	489c      	ldr	r0, [pc, #624]	@ (8008398 <tcp_input+0x288>)
 8008128:	f009 fb12 	bl	8011750 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	4a9a      	ldr	r2, [pc, #616]	@ (800839c <tcp_input+0x28c>)
 8008132:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	895b      	ldrh	r3, [r3, #10]
 8008138:	2b13      	cmp	r3, #19
 800813a:	f240 83d1 	bls.w	80088e0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800813e:	4b98      	ldr	r3, [pc, #608]	@ (80083a0 <tcp_input+0x290>)
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	4a97      	ldr	r2, [pc, #604]	@ (80083a0 <tcp_input+0x290>)
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	4611      	mov	r1, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f008 fa1b 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 83c7 	bne.w	80088e4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008156:	4b92      	ldr	r3, [pc, #584]	@ (80083a0 <tcp_input+0x290>)
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800815e:	2be0      	cmp	r3, #224	@ 0xe0
 8008160:	f000 83c0 	beq.w	80088e4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008164:	4b8d      	ldr	r3, [pc, #564]	@ (800839c <tcp_input+0x28c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	899b      	ldrh	r3, [r3, #12]
 800816a:	b29b      	uxth	r3, r3
 800816c:	4618      	mov	r0, r3
 800816e:	f7fc fb53 	bl	8004818 <lwip_htons>
 8008172:	4603      	mov	r3, r0
 8008174:	0b1b      	lsrs	r3, r3, #12
 8008176:	b29b      	uxth	r3, r3
 8008178:	b2db      	uxtb	r3, r3
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800817e:	7cbb      	ldrb	r3, [r7, #18]
 8008180:	2b13      	cmp	r3, #19
 8008182:	f240 83b1 	bls.w	80088e8 <tcp_input+0x7d8>
 8008186:	7cbb      	ldrb	r3, [r7, #18]
 8008188:	b29a      	uxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	891b      	ldrh	r3, [r3, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	f200 83aa 	bhi.w	80088e8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008194:	7cbb      	ldrb	r3, [r7, #18]
 8008196:	b29b      	uxth	r3, r3
 8008198:	3b14      	subs	r3, #20
 800819a:	b29a      	uxth	r2, r3
 800819c:	4b81      	ldr	r3, [pc, #516]	@ (80083a4 <tcp_input+0x294>)
 800819e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80081a0:	4b81      	ldr	r3, [pc, #516]	@ (80083a8 <tcp_input+0x298>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	895a      	ldrh	r2, [r3, #10]
 80081aa:	7cbb      	ldrb	r3, [r7, #18]
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d309      	bcc.n	80081c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80081b2:	4b7c      	ldr	r3, [pc, #496]	@ (80083a4 <tcp_input+0x294>)
 80081b4:	881a      	ldrh	r2, [r3, #0]
 80081b6:	4b7d      	ldr	r3, [pc, #500]	@ (80083ac <tcp_input+0x29c>)
 80081b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80081ba:	7cbb      	ldrb	r3, [r7, #18]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fd fe40 	bl	8005e44 <pbuf_remove_header>
 80081c4:	e04e      	b.n	8008264 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <tcp_input+0xca>
 80081ce:	4b70      	ldr	r3, [pc, #448]	@ (8008390 <tcp_input+0x280>)
 80081d0:	22c2      	movs	r2, #194	@ 0xc2
 80081d2:	4977      	ldr	r1, [pc, #476]	@ (80083b0 <tcp_input+0x2a0>)
 80081d4:	4870      	ldr	r0, [pc, #448]	@ (8008398 <tcp_input+0x288>)
 80081d6:	f009 fabb 	bl	8011750 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80081da:	2114      	movs	r1, #20
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fd fe31 	bl	8005e44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	895a      	ldrh	r2, [r3, #10]
 80081e6:	4b71      	ldr	r3, [pc, #452]	@ (80083ac <tcp_input+0x29c>)
 80081e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80081ea:	4b6e      	ldr	r3, [pc, #440]	@ (80083a4 <tcp_input+0x294>)
 80081ec:	881a      	ldrh	r2, [r3, #0]
 80081ee:	4b6f      	ldr	r3, [pc, #444]	@ (80083ac <tcp_input+0x29c>)
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	1ad3      	subs	r3, r2, r3
 80081f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80081f6:	4b6d      	ldr	r3, [pc, #436]	@ (80083ac <tcp_input+0x29c>)
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f7fd fe21 	bl	8005e44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	895b      	ldrh	r3, [r3, #10]
 8008208:	8a3a      	ldrh	r2, [r7, #16]
 800820a:	429a      	cmp	r2, r3
 800820c:	f200 836e 	bhi.w	80088ec <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	4a64      	ldr	r2, [pc, #400]	@ (80083a8 <tcp_input+0x298>)
 8008218:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	8a3a      	ldrh	r2, [r7, #16]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7fd fe0e 	bl	8005e44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	891a      	ldrh	r2, [r3, #8]
 800822c:	8a3b      	ldrh	r3, [r7, #16]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	b29a      	uxth	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	895b      	ldrh	r3, [r3, #10]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <tcp_input+0x13a>
 800823e:	4b54      	ldr	r3, [pc, #336]	@ (8008390 <tcp_input+0x280>)
 8008240:	22df      	movs	r2, #223	@ 0xdf
 8008242:	495c      	ldr	r1, [pc, #368]	@ (80083b4 <tcp_input+0x2a4>)
 8008244:	4854      	ldr	r0, [pc, #336]	@ (8008398 <tcp_input+0x288>)
 8008246:	f009 fa83 	bl	8011750 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	891a      	ldrh	r2, [r3, #8]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	891b      	ldrh	r3, [r3, #8]
 8008254:	429a      	cmp	r2, r3
 8008256:	d005      	beq.n	8008264 <tcp_input+0x154>
 8008258:	4b4d      	ldr	r3, [pc, #308]	@ (8008390 <tcp_input+0x280>)
 800825a:	22e0      	movs	r2, #224	@ 0xe0
 800825c:	4956      	ldr	r1, [pc, #344]	@ (80083b8 <tcp_input+0x2a8>)
 800825e:	484e      	ldr	r0, [pc, #312]	@ (8008398 <tcp_input+0x288>)
 8008260:	f009 fa76 	bl	8011750 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008264:	4b4d      	ldr	r3, [pc, #308]	@ (800839c <tcp_input+0x28c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b29b      	uxth	r3, r3
 800826c:	4a4b      	ldr	r2, [pc, #300]	@ (800839c <tcp_input+0x28c>)
 800826e:	6814      	ldr	r4, [r2, #0]
 8008270:	4618      	mov	r0, r3
 8008272:	f7fc fad1 	bl	8004818 <lwip_htons>
 8008276:	4603      	mov	r3, r0
 8008278:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800827a:	4b48      	ldr	r3, [pc, #288]	@ (800839c <tcp_input+0x28c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	b29b      	uxth	r3, r3
 8008282:	4a46      	ldr	r2, [pc, #280]	@ (800839c <tcp_input+0x28c>)
 8008284:	6814      	ldr	r4, [r2, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f7fc fac6 	bl	8004818 <lwip_htons>
 800828c:	4603      	mov	r3, r0
 800828e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008290:	4b42      	ldr	r3, [pc, #264]	@ (800839c <tcp_input+0x28c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4a41      	ldr	r2, [pc, #260]	@ (800839c <tcp_input+0x28c>)
 8008298:	6814      	ldr	r4, [r2, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f7fc fad1 	bl	8004842 <lwip_htonl>
 80082a0:	4603      	mov	r3, r0
 80082a2:	6063      	str	r3, [r4, #4]
 80082a4:	6863      	ldr	r3, [r4, #4]
 80082a6:	4a45      	ldr	r2, [pc, #276]	@ (80083bc <tcp_input+0x2ac>)
 80082a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80082aa:	4b3c      	ldr	r3, [pc, #240]	@ (800839c <tcp_input+0x28c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	4a3a      	ldr	r2, [pc, #232]	@ (800839c <tcp_input+0x28c>)
 80082b2:	6814      	ldr	r4, [r2, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fc fac4 	bl	8004842 <lwip_htonl>
 80082ba:	4603      	mov	r3, r0
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	68a3      	ldr	r3, [r4, #8]
 80082c0:	4a3f      	ldr	r2, [pc, #252]	@ (80083c0 <tcp_input+0x2b0>)
 80082c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80082c4:	4b35      	ldr	r3, [pc, #212]	@ (800839c <tcp_input+0x28c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	89db      	ldrh	r3, [r3, #14]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4a33      	ldr	r2, [pc, #204]	@ (800839c <tcp_input+0x28c>)
 80082ce:	6814      	ldr	r4, [r2, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fc faa1 	bl	8004818 <lwip_htons>
 80082d6:	4603      	mov	r3, r0
 80082d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80082da:	4b30      	ldr	r3, [pc, #192]	@ (800839c <tcp_input+0x28c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	899b      	ldrh	r3, [r3, #12]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fc fa98 	bl	8004818 <lwip_htons>
 80082e8:	4603      	mov	r3, r0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	4b34      	ldr	r3, [pc, #208]	@ (80083c4 <tcp_input+0x2b4>)
 80082f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	891a      	ldrh	r2, [r3, #8]
 80082fa:	4b33      	ldr	r3, [pc, #204]	@ (80083c8 <tcp_input+0x2b8>)
 80082fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80082fe:	4b31      	ldr	r3, [pc, #196]	@ (80083c4 <tcp_input+0x2b4>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <tcp_input+0x214>
    tcplen++;
 800830a:	4b2f      	ldr	r3, [pc, #188]	@ (80083c8 <tcp_input+0x2b8>)
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	3301      	adds	r3, #1
 8008310:	b29a      	uxth	r2, r3
 8008312:	4b2d      	ldr	r3, [pc, #180]	@ (80083c8 <tcp_input+0x2b8>)
 8008314:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	891a      	ldrh	r2, [r3, #8]
 800831a:	4b2b      	ldr	r3, [pc, #172]	@ (80083c8 <tcp_input+0x2b8>)
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	f200 82e6 	bhi.w	80088f0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008328:	4b28      	ldr	r3, [pc, #160]	@ (80083cc <tcp_input+0x2bc>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	e09d      	b.n	800846c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	7d1b      	ldrb	r3, [r3, #20]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <tcp_input+0x234>
 8008338:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <tcp_input+0x280>)
 800833a:	22fb      	movs	r2, #251	@ 0xfb
 800833c:	4924      	ldr	r1, [pc, #144]	@ (80083d0 <tcp_input+0x2c0>)
 800833e:	4816      	ldr	r0, [pc, #88]	@ (8008398 <tcp_input+0x288>)
 8008340:	f009 fa06 	bl	8011750 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	7d1b      	ldrb	r3, [r3, #20]
 8008348:	2b0a      	cmp	r3, #10
 800834a:	d105      	bne.n	8008358 <tcp_input+0x248>
 800834c:	4b10      	ldr	r3, [pc, #64]	@ (8008390 <tcp_input+0x280>)
 800834e:	22fc      	movs	r2, #252	@ 0xfc
 8008350:	4920      	ldr	r1, [pc, #128]	@ (80083d4 <tcp_input+0x2c4>)
 8008352:	4811      	ldr	r0, [pc, #68]	@ (8008398 <tcp_input+0x288>)
 8008354:	f009 f9fc 	bl	8011750 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	7d1b      	ldrb	r3, [r3, #20]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d105      	bne.n	800836c <tcp_input+0x25c>
 8008360:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <tcp_input+0x280>)
 8008362:	22fd      	movs	r2, #253	@ 0xfd
 8008364:	491c      	ldr	r1, [pc, #112]	@ (80083d8 <tcp_input+0x2c8>)
 8008366:	480c      	ldr	r0, [pc, #48]	@ (8008398 <tcp_input+0x288>)
 8008368:	f009 f9f2 	bl	8011750 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	7a1b      	ldrb	r3, [r3, #8]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d033      	beq.n	80083dc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	7a1a      	ldrb	r2, [r3, #8]
 8008378:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <tcp_input+0x290>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008380:	3301      	adds	r3, #1
 8008382:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008384:	429a      	cmp	r2, r3
 8008386:	d029      	beq.n	80083dc <tcp_input+0x2cc>
      prev = pcb;
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	61bb      	str	r3, [r7, #24]
      continue;
 800838c:	e06b      	b.n	8008466 <tcp_input+0x356>
 800838e:	bf00      	nop
 8008390:	08013b28 	.word	0x08013b28
 8008394:	08013b5c 	.word	0x08013b5c
 8008398:	08013b74 	.word	0x08013b74
 800839c:	20008070 	.word	0x20008070
 80083a0:	2000510c 	.word	0x2000510c
 80083a4:	20008074 	.word	0x20008074
 80083a8:	20008078 	.word	0x20008078
 80083ac:	20008076 	.word	0x20008076
 80083b0:	08013b9c 	.word	0x08013b9c
 80083b4:	08013bac 	.word	0x08013bac
 80083b8:	08013bb8 	.word	0x08013bb8
 80083bc:	20008080 	.word	0x20008080
 80083c0:	20008084 	.word	0x20008084
 80083c4:	2000808c 	.word	0x2000808c
 80083c8:	2000808a 	.word	0x2000808a
 80083cc:	20008054 	.word	0x20008054
 80083d0:	08013bd8 	.word	0x08013bd8
 80083d4:	08013c00 	.word	0x08013c00
 80083d8:	08013c2c 	.word	0x08013c2c
    }

    if (pcb->remote_port == tcphdr->src &&
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	8b1a      	ldrh	r2, [r3, #24]
 80083e0:	4b72      	ldr	r3, [pc, #456]	@ (80085ac <tcp_input+0x49c>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d13a      	bne.n	8008462 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	8ada      	ldrh	r2, [r3, #22]
 80083f0:	4b6e      	ldr	r3, [pc, #440]	@ (80085ac <tcp_input+0x49c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	885b      	ldrh	r3, [r3, #2]
 80083f6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d132      	bne.n	8008462 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	4b6b      	ldr	r3, [pc, #428]	@ (80085b0 <tcp_input+0x4a0>)
 8008402:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008404:	429a      	cmp	r2, r3
 8008406:	d12c      	bne.n	8008462 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b68      	ldr	r3, [pc, #416]	@ (80085b0 <tcp_input+0x4a0>)
 800840e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008410:	429a      	cmp	r2, r3
 8008412:	d126      	bne.n	8008462 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	69fa      	ldr	r2, [r7, #28]
 800841a:	429a      	cmp	r2, r3
 800841c:	d106      	bne.n	800842c <tcp_input+0x31c>
 800841e:	4b65      	ldr	r3, [pc, #404]	@ (80085b4 <tcp_input+0x4a4>)
 8008420:	f240 120d 	movw	r2, #269	@ 0x10d
 8008424:	4964      	ldr	r1, [pc, #400]	@ (80085b8 <tcp_input+0x4a8>)
 8008426:	4865      	ldr	r0, [pc, #404]	@ (80085bc <tcp_input+0x4ac>)
 8008428:	f009 f992 	bl	8011750 <iprintf>
      if (prev != NULL) {
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00a      	beq.n	8008448 <tcp_input+0x338>
        prev->next = pcb->next;
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800843a:	4b61      	ldr	r3, [pc, #388]	@ (80085c0 <tcp_input+0x4b0>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008442:	4a5f      	ldr	r2, [pc, #380]	@ (80085c0 <tcp_input+0x4b0>)
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	69fa      	ldr	r2, [r7, #28]
 800844e:	429a      	cmp	r2, r3
 8008450:	d111      	bne.n	8008476 <tcp_input+0x366>
 8008452:	4b58      	ldr	r3, [pc, #352]	@ (80085b4 <tcp_input+0x4a4>)
 8008454:	f240 1215 	movw	r2, #277	@ 0x115
 8008458:	495a      	ldr	r1, [pc, #360]	@ (80085c4 <tcp_input+0x4b4>)
 800845a:	4858      	ldr	r0, [pc, #352]	@ (80085bc <tcp_input+0x4ac>)
 800845c:	f009 f978 	bl	8011750 <iprintf>
      break;
 8008460:	e009      	b.n	8008476 <tcp_input+0x366>
    }
    prev = pcb;
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	61fb      	str	r3, [r7, #28]
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f47f af5e 	bne.w	8008330 <tcp_input+0x220>
 8008474:	e000      	b.n	8008478 <tcp_input+0x368>
      break;
 8008476:	bf00      	nop
  }

  if (pcb == NULL) {
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 80aa 	bne.w	80085d4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008480:	4b51      	ldr	r3, [pc, #324]	@ (80085c8 <tcp_input+0x4b8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	e03f      	b.n	8008508 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	7d1b      	ldrb	r3, [r3, #20]
 800848c:	2b0a      	cmp	r3, #10
 800848e:	d006      	beq.n	800849e <tcp_input+0x38e>
 8008490:	4b48      	ldr	r3, [pc, #288]	@ (80085b4 <tcp_input+0x4a4>)
 8008492:	f240 121f 	movw	r2, #287	@ 0x11f
 8008496:	494d      	ldr	r1, [pc, #308]	@ (80085cc <tcp_input+0x4bc>)
 8008498:	4848      	ldr	r0, [pc, #288]	@ (80085bc <tcp_input+0x4ac>)
 800849a:	f009 f959 	bl	8011750 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	7a1b      	ldrb	r3, [r3, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d009      	beq.n	80084ba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	7a1a      	ldrb	r2, [r3, #8]
 80084aa:	4b41      	ldr	r3, [pc, #260]	@ (80085b0 <tcp_input+0x4a0>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80084b2:	3301      	adds	r3, #1
 80084b4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d122      	bne.n	8008500 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	8b1a      	ldrh	r2, [r3, #24]
 80084be:	4b3b      	ldr	r3, [pc, #236]	@ (80085ac <tcp_input+0x49c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d11b      	bne.n	8008502 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	8ada      	ldrh	r2, [r3, #22]
 80084ce:	4b37      	ldr	r3, [pc, #220]	@ (80085ac <tcp_input+0x49c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	885b      	ldrh	r3, [r3, #2]
 80084d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d113      	bne.n	8008502 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	4b34      	ldr	r3, [pc, #208]	@ (80085b0 <tcp_input+0x4a0>)
 80084e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d10d      	bne.n	8008502 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b31      	ldr	r3, [pc, #196]	@ (80085b0 <tcp_input+0x4a0>)
 80084ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d107      	bne.n	8008502 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80084f2:	69f8      	ldr	r0, [r7, #28]
 80084f4:	f000 fb56 	bl	8008ba4 <tcp_timewait_input>
        }
        pbuf_free(p);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7fd fd29 	bl	8005f50 <pbuf_free>
        return;
 80084fe:	e1fd      	b.n	80088fc <tcp_input+0x7ec>
        continue;
 8008500:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	61fb      	str	r3, [r7, #28]
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1bc      	bne.n	8008488 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008512:	4b2f      	ldr	r3, [pc, #188]	@ (80085d0 <tcp_input+0x4c0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e02a      	b.n	8008570 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	7a1b      	ldrb	r3, [r3, #8]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	7a1a      	ldrb	r2, [r3, #8]
 8008526:	4b22      	ldr	r3, [pc, #136]	@ (80085b0 <tcp_input+0x4a0>)
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800852e:	3301      	adds	r3, #1
 8008530:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008532:	429a      	cmp	r2, r3
 8008534:	d002      	beq.n	800853c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	61bb      	str	r3, [r7, #24]
        continue;
 800853a:	e016      	b.n	800856a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	8ada      	ldrh	r2, [r3, #22]
 8008540:	4b1a      	ldr	r3, [pc, #104]	@ (80085ac <tcp_input+0x49c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	885b      	ldrh	r3, [r3, #2]
 8008546:	b29b      	uxth	r3, r3
 8008548:	429a      	cmp	r2, r3
 800854a:	d10c      	bne.n	8008566 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	4b17      	ldr	r3, [pc, #92]	@ (80085b0 <tcp_input+0x4a0>)
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	429a      	cmp	r2, r3
 8008556:	d00f      	beq.n	8008578 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00d      	beq.n	800857a <tcp_input+0x46a>
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1d1      	bne.n	800851a <tcp_input+0x40a>
 8008576:	e000      	b.n	800857a <tcp_input+0x46a>
            break;
 8008578:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d029      	beq.n	80085d4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00a      	beq.n	800859c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800858e:	4b10      	ldr	r3, [pc, #64]	@ (80085d0 <tcp_input+0x4c0>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008596:	4a0e      	ldr	r2, [pc, #56]	@ (80085d0 <tcp_input+0x4c0>)
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800859c:	6978      	ldr	r0, [r7, #20]
 800859e:	f000 fa03 	bl	80089a8 <tcp_listen_input>
      }
      pbuf_free(p);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fd fcd4 	bl	8005f50 <pbuf_free>
      return;
 80085a8:	e1a8      	b.n	80088fc <tcp_input+0x7ec>
 80085aa:	bf00      	nop
 80085ac:	20008070 	.word	0x20008070
 80085b0:	2000510c 	.word	0x2000510c
 80085b4:	08013b28 	.word	0x08013b28
 80085b8:	08013c54 	.word	0x08013c54
 80085bc:	08013b74 	.word	0x08013b74
 80085c0:	20008054 	.word	0x20008054
 80085c4:	08013c80 	.word	0x08013c80
 80085c8:	20008058 	.word	0x20008058
 80085cc:	08013cac 	.word	0x08013cac
 80085d0:	20008050 	.word	0x20008050
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 8158 	beq.w	800888c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80085dc:	4b95      	ldr	r3, [pc, #596]	@ (8008834 <tcp_input+0x724>)
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	891a      	ldrh	r2, [r3, #8]
 80085e6:	4b93      	ldr	r3, [pc, #588]	@ (8008834 <tcp_input+0x724>)
 80085e8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80085ea:	4a92      	ldr	r2, [pc, #584]	@ (8008834 <tcp_input+0x724>)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80085f0:	4b91      	ldr	r3, [pc, #580]	@ (8008838 <tcp_input+0x728>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a8f      	ldr	r2, [pc, #572]	@ (8008834 <tcp_input+0x724>)
 80085f6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80085f8:	4b90      	ldr	r3, [pc, #576]	@ (800883c <tcp_input+0x72c>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80085fe:	4b90      	ldr	r3, [pc, #576]	@ (8008840 <tcp_input+0x730>)
 8008600:	2200      	movs	r2, #0
 8008602:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008604:	4b8f      	ldr	r3, [pc, #572]	@ (8008844 <tcp_input+0x734>)
 8008606:	2200      	movs	r2, #0
 8008608:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800860a:	4b8f      	ldr	r3, [pc, #572]	@ (8008848 <tcp_input+0x738>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	2b00      	cmp	r3, #0
 8008614:	d006      	beq.n	8008624 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7b5b      	ldrb	r3, [r3, #13]
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	b2da      	uxtb	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008628:	2b00      	cmp	r3, #0
 800862a:	d017      	beq.n	800865c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800862c:	69f8      	ldr	r0, [r7, #28]
 800862e:	f7ff f83d 	bl	80076ac <tcp_process_refused_data>
 8008632:	4603      	mov	r3, r0
 8008634:	f113 0f0d 	cmn.w	r3, #13
 8008638:	d007      	beq.n	800864a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008642:	4b82      	ldr	r3, [pc, #520]	@ (800884c <tcp_input+0x73c>)
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d008      	beq.n	800865c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 80e3 	bne.w	800881a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008654:	69f8      	ldr	r0, [r7, #28]
 8008656:	f003 fdff 	bl	800c258 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800865a:	e0de      	b.n	800881a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800865c:	4a7c      	ldr	r2, [pc, #496]	@ (8008850 <tcp_input+0x740>)
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008662:	69f8      	ldr	r0, [r7, #28]
 8008664:	f000 fb18 	bl	8008c98 <tcp_process>
 8008668:	4603      	mov	r3, r0
 800866a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800866c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008670:	f113 0f0d 	cmn.w	r3, #13
 8008674:	f000 80d3 	beq.w	800881e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008678:	4b71      	ldr	r3, [pc, #452]	@ (8008840 <tcp_input+0x730>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d015      	beq.n	80086b0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <tcp_input+0x590>
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	6912      	ldr	r2, [r2, #16]
 8008698:	f06f 010d 	mvn.w	r1, #13
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086a0:	69f9      	ldr	r1, [r7, #28]
 80086a2:	486c      	ldr	r0, [pc, #432]	@ (8008854 <tcp_input+0x744>)
 80086a4:	f7ff fbbc 	bl	8007e20 <tcp_pcb_remove>
        tcp_free(pcb);
 80086a8:	69f8      	ldr	r0, [r7, #28]
 80086aa:	f7fd ff01 	bl	80064b0 <tcp_free>
 80086ae:	e0da      	b.n	8008866 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80086b4:	4b63      	ldr	r3, [pc, #396]	@ (8008844 <tcp_input+0x734>)
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01d      	beq.n	80086f8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80086bc:	4b61      	ldr	r3, [pc, #388]	@ (8008844 <tcp_input+0x734>)
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00a      	beq.n	80086e2 <tcp_input+0x5d2>
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	6910      	ldr	r0, [r2, #16]
 80086d6:	89fa      	ldrh	r2, [r7, #14]
 80086d8:	69f9      	ldr	r1, [r7, #28]
 80086da:	4798      	blx	r3
 80086dc:	4603      	mov	r3, r0
 80086de:	74fb      	strb	r3, [r7, #19]
 80086e0:	e001      	b.n	80086e6 <tcp_input+0x5d6>
 80086e2:	2300      	movs	r3, #0
 80086e4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80086e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086ea:	f113 0f0d 	cmn.w	r3, #13
 80086ee:	f000 8098 	beq.w	8008822 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80086f2:	4b54      	ldr	r3, [pc, #336]	@ (8008844 <tcp_input+0x734>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80086f8:	69f8      	ldr	r0, [r7, #28]
 80086fa:	f000 f915 	bl	8008928 <tcp_input_delayed_close>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	f040 8090 	bne.w	8008826 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008706:	4b4d      	ldr	r3, [pc, #308]	@ (800883c <tcp_input+0x72c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d041      	beq.n	8008792 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008712:	2b00      	cmp	r3, #0
 8008714:	d006      	beq.n	8008724 <tcp_input+0x614>
 8008716:	4b50      	ldr	r3, [pc, #320]	@ (8008858 <tcp_input+0x748>)
 8008718:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800871c:	494f      	ldr	r1, [pc, #316]	@ (800885c <tcp_input+0x74c>)
 800871e:	4850      	ldr	r0, [pc, #320]	@ (8008860 <tcp_input+0x750>)
 8008720:	f009 f816 	bl	8011750 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	8b5b      	ldrh	r3, [r3, #26]
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d008      	beq.n	8008742 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008730:	4b42      	ldr	r3, [pc, #264]	@ (800883c <tcp_input+0x72c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4618      	mov	r0, r3
 8008736:	f7fd fc0b 	bl	8005f50 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800873a:	69f8      	ldr	r0, [r7, #28]
 800873c:	f7fe f9a0 	bl	8006a80 <tcp_abort>
            goto aborted;
 8008740:	e091      	b.n	8008866 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00c      	beq.n	8008766 <tcp_input+0x656>
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	6918      	ldr	r0, [r3, #16]
 8008756:	4b39      	ldr	r3, [pc, #228]	@ (800883c <tcp_input+0x72c>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	2300      	movs	r3, #0
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	47a0      	blx	r4
 8008760:	4603      	mov	r3, r0
 8008762:	74fb      	strb	r3, [r7, #19]
 8008764:	e008      	b.n	8008778 <tcp_input+0x668>
 8008766:	4b35      	ldr	r3, [pc, #212]	@ (800883c <tcp_input+0x72c>)
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	2300      	movs	r3, #0
 800876c:	69f9      	ldr	r1, [r7, #28]
 800876e:	2000      	movs	r0, #0
 8008770:	f7ff f890 	bl	8007894 <tcp_recv_null>
 8008774:	4603      	mov	r3, r0
 8008776:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800877c:	f113 0f0d 	cmn.w	r3, #13
 8008780:	d053      	beq.n	800882a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008782:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800878a:	4b2c      	ldr	r3, [pc, #176]	@ (800883c <tcp_input+0x72c>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008792:	4b2b      	ldr	r3, [pc, #172]	@ (8008840 <tcp_input+0x730>)
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d030      	beq.n	8008800 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087aa:	7b5a      	ldrb	r2, [r3, #13]
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087b0:	f042 0220 	orr.w	r2, r2, #32
 80087b4:	b2d2      	uxtb	r2, r2
 80087b6:	735a      	strb	r2, [r3, #13]
 80087b8:	e022      	b.n	8008800 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80087c2:	d005      	beq.n	80087d0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087c8:	3301      	adds	r3, #1
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <tcp_input+0x6e2>
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	6918      	ldr	r0, [r3, #16]
 80087e4:	2300      	movs	r3, #0
 80087e6:	2200      	movs	r2, #0
 80087e8:	69f9      	ldr	r1, [r7, #28]
 80087ea:	47a0      	blx	r4
 80087ec:	4603      	mov	r3, r0
 80087ee:	74fb      	strb	r3, [r7, #19]
 80087f0:	e001      	b.n	80087f6 <tcp_input+0x6e6>
 80087f2:	2300      	movs	r3, #0
 80087f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80087f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087fa:	f113 0f0d 	cmn.w	r3, #13
 80087fe:	d016      	beq.n	800882e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008800:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <tcp_input+0x740>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008806:	69f8      	ldr	r0, [r7, #28]
 8008808:	f000 f88e 	bl	8008928 <tcp_input_delayed_close>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d128      	bne.n	8008864 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008812:	69f8      	ldr	r0, [r7, #28]
 8008814:	f002 ff1a 	bl	800b64c <tcp_output>
 8008818:	e025      	b.n	8008866 <tcp_input+0x756>
        goto aborted;
 800881a:	bf00      	nop
 800881c:	e023      	b.n	8008866 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800881e:	bf00      	nop
 8008820:	e021      	b.n	8008866 <tcp_input+0x756>
              goto aborted;
 8008822:	bf00      	nop
 8008824:	e01f      	b.n	8008866 <tcp_input+0x756>
          goto aborted;
 8008826:	bf00      	nop
 8008828:	e01d      	b.n	8008866 <tcp_input+0x756>
            goto aborted;
 800882a:	bf00      	nop
 800882c:	e01b      	b.n	8008866 <tcp_input+0x756>
              goto aborted;
 800882e:	bf00      	nop
 8008830:	e019      	b.n	8008866 <tcp_input+0x756>
 8008832:	bf00      	nop
 8008834:	20008060 	.word	0x20008060
 8008838:	20008070 	.word	0x20008070
 800883c:	20008090 	.word	0x20008090
 8008840:	2000808d 	.word	0x2000808d
 8008844:	20008088 	.word	0x20008088
 8008848:	2000808c 	.word	0x2000808c
 800884c:	2000808a 	.word	0x2000808a
 8008850:	20008094 	.word	0x20008094
 8008854:	20008054 	.word	0x20008054
 8008858:	08013b28 	.word	0x08013b28
 800885c:	08013cdc 	.word	0x08013cdc
 8008860:	08013b74 	.word	0x08013b74
          goto aborted;
 8008864:	bf00      	nop
    tcp_input_pcb = NULL;
 8008866:	4b27      	ldr	r3, [pc, #156]	@ (8008904 <tcp_input+0x7f4>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800886c:	4b26      	ldr	r3, [pc, #152]	@ (8008908 <tcp_input+0x7f8>)
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008872:	4b26      	ldr	r3, [pc, #152]	@ (800890c <tcp_input+0x7fc>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d03f      	beq.n	80088fa <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800887a:	4b24      	ldr	r3, [pc, #144]	@ (800890c <tcp_input+0x7fc>)
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd fb66 	bl	8005f50 <pbuf_free>
      inseg.p = NULL;
 8008884:	4b21      	ldr	r3, [pc, #132]	@ (800890c <tcp_input+0x7fc>)
 8008886:	2200      	movs	r2, #0
 8008888:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800888a:	e036      	b.n	80088fa <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800888c:	4b20      	ldr	r3, [pc, #128]	@ (8008910 <tcp_input+0x800>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	899b      	ldrh	r3, [r3, #12]
 8008892:	b29b      	uxth	r3, r3
 8008894:	4618      	mov	r0, r3
 8008896:	f7fb ffbf 	bl	8004818 <lwip_htons>
 800889a:	4603      	mov	r3, r0
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 0304 	and.w	r3, r3, #4
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d118      	bne.n	80088d8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008914 <tcp_input+0x804>)
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	4b1b      	ldr	r3, [pc, #108]	@ (8008918 <tcp_input+0x808>)
 80088ac:	881b      	ldrh	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	4b1a      	ldr	r3, [pc, #104]	@ (800891c <tcp_input+0x80c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088b6:	4b16      	ldr	r3, [pc, #88]	@ (8008910 <tcp_input+0x800>)
 80088b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088ba:	885b      	ldrh	r3, [r3, #2]
 80088bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088be:	4a14      	ldr	r2, [pc, #80]	@ (8008910 <tcp_input+0x800>)
 80088c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088c2:	8812      	ldrh	r2, [r2, #0]
 80088c4:	b292      	uxth	r2, r2
 80088c6:	9202      	str	r2, [sp, #8]
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	4b15      	ldr	r3, [pc, #84]	@ (8008920 <tcp_input+0x810>)
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4b15      	ldr	r3, [pc, #84]	@ (8008924 <tcp_input+0x814>)
 80088d0:	4602      	mov	r2, r0
 80088d2:	2000      	movs	r0, #0
 80088d4:	f003 fc6e 	bl	800c1b4 <tcp_rst>
    pbuf_free(p);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7fd fb39 	bl	8005f50 <pbuf_free>
  return;
 80088de:	e00c      	b.n	80088fa <tcp_input+0x7ea>
    goto dropped;
 80088e0:	bf00      	nop
 80088e2:	e006      	b.n	80088f2 <tcp_input+0x7e2>
    goto dropped;
 80088e4:	bf00      	nop
 80088e6:	e004      	b.n	80088f2 <tcp_input+0x7e2>
    goto dropped;
 80088e8:	bf00      	nop
 80088ea:	e002      	b.n	80088f2 <tcp_input+0x7e2>
      goto dropped;
 80088ec:	bf00      	nop
 80088ee:	e000      	b.n	80088f2 <tcp_input+0x7e2>
      goto dropped;
 80088f0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7fd fb2c 	bl	8005f50 <pbuf_free>
 80088f8:	e000      	b.n	80088fc <tcp_input+0x7ec>
  return;
 80088fa:	bf00      	nop
}
 80088fc:	3724      	adds	r7, #36	@ 0x24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd90      	pop	{r4, r7, pc}
 8008902:	bf00      	nop
 8008904:	20008094 	.word	0x20008094
 8008908:	20008090 	.word	0x20008090
 800890c:	20008060 	.word	0x20008060
 8008910:	20008070 	.word	0x20008070
 8008914:	20008084 	.word	0x20008084
 8008918:	2000808a 	.word	0x2000808a
 800891c:	20008080 	.word	0x20008080
 8008920:	2000511c 	.word	0x2000511c
 8008924:	20005120 	.word	0x20005120

08008928 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <tcp_input_delayed_close+0x1c>
 8008936:	4b17      	ldr	r3, [pc, #92]	@ (8008994 <tcp_input_delayed_close+0x6c>)
 8008938:	f240 225a 	movw	r2, #602	@ 0x25a
 800893c:	4916      	ldr	r1, [pc, #88]	@ (8008998 <tcp_input_delayed_close+0x70>)
 800893e:	4817      	ldr	r0, [pc, #92]	@ (800899c <tcp_input_delayed_close+0x74>)
 8008940:	f008 ff06 	bl	8011750 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008944:	4b16      	ldr	r3, [pc, #88]	@ (80089a0 <tcp_input_delayed_close+0x78>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01c      	beq.n	800898a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8b5b      	ldrh	r3, [r3, #26]
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10d      	bne.n	8008978 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008962:	2b00      	cmp	r3, #0
 8008964:	d008      	beq.n	8008978 <tcp_input_delayed_close+0x50>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6912      	ldr	r2, [r2, #16]
 8008970:	f06f 010e 	mvn.w	r1, #14
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	480a      	ldr	r0, [pc, #40]	@ (80089a4 <tcp_input_delayed_close+0x7c>)
 800897c:	f7ff fa50 	bl	8007e20 <tcp_pcb_remove>
    tcp_free(pcb);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7fd fd95 	bl	80064b0 <tcp_free>
    return 1;
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	08013b28 	.word	0x08013b28
 8008998:	08013cf8 	.word	0x08013cf8
 800899c:	08013b74 	.word	0x08013b74
 80089a0:	2000808d 	.word	0x2000808d
 80089a4:	20008054 	.word	0x20008054

080089a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80089a8:	b590      	push	{r4, r7, lr}
 80089aa:	b08b      	sub	sp, #44	@ 0x2c
 80089ac:	af04      	add	r7, sp, #16
 80089ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80089b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008b70 <tcp_listen_input+0x1c8>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80d2 	bne.w	8008b62 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <tcp_listen_input+0x2a>
 80089c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008b74 <tcp_listen_input+0x1cc>)
 80089c6:	f240 2281 	movw	r2, #641	@ 0x281
 80089ca:	496b      	ldr	r1, [pc, #428]	@ (8008b78 <tcp_listen_input+0x1d0>)
 80089cc:	486b      	ldr	r0, [pc, #428]	@ (8008b7c <tcp_listen_input+0x1d4>)
 80089ce:	f008 febf 	bl	8011750 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80089d2:	4b67      	ldr	r3, [pc, #412]	@ (8008b70 <tcp_listen_input+0x1c8>)
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d019      	beq.n	8008a12 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089de:	4b68      	ldr	r3, [pc, #416]	@ (8008b80 <tcp_listen_input+0x1d8>)
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	4b68      	ldr	r3, [pc, #416]	@ (8008b84 <tcp_listen_input+0x1dc>)
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	4b67      	ldr	r3, [pc, #412]	@ (8008b88 <tcp_listen_input+0x1e0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089ee:	4b67      	ldr	r3, [pc, #412]	@ (8008b8c <tcp_listen_input+0x1e4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089f2:	885b      	ldrh	r3, [r3, #2]
 80089f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089f6:	4a65      	ldr	r2, [pc, #404]	@ (8008b8c <tcp_listen_input+0x1e4>)
 80089f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089fa:	8812      	ldrh	r2, [r2, #0]
 80089fc:	b292      	uxth	r2, r2
 80089fe:	9202      	str	r2, [sp, #8]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	4b63      	ldr	r3, [pc, #396]	@ (8008b90 <tcp_listen_input+0x1e8>)
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4b63      	ldr	r3, [pc, #396]	@ (8008b94 <tcp_listen_input+0x1ec>)
 8008a08:	4602      	mov	r2, r0
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f003 fbd2 	bl	800c1b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008a10:	e0a9      	b.n	8008b66 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008a12:	4b57      	ldr	r3, [pc, #348]	@ (8008b70 <tcp_listen_input+0x1c8>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80a3 	beq.w	8008b66 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	7d5b      	ldrb	r3, [r3, #21]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff f859 	bl	8007adc <tcp_alloc>
 8008a2a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d111      	bne.n	8008a56 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <tcp_listen_input+0xa8>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6910      	ldr	r0, [r2, #16]
 8008a42:	f04f 32ff 	mov.w	r2, #4294967295
 8008a46:	2100      	movs	r1, #0
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73bb      	strb	r3, [r7, #14]
      return;
 8008a4e:	e08b      	b.n	8008b68 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008a50:	23f0      	movs	r3, #240	@ 0xf0
 8008a52:	73bb      	strb	r3, [r7, #14]
      return;
 8008a54:	e088      	b.n	8008b68 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008a56:	4b50      	ldr	r3, [pc, #320]	@ (8008b98 <tcp_listen_input+0x1f0>)
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8008b98 <tcp_listen_input+0x1f0>)
 8008a60:	691a      	ldr	r2, [r3, #16]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	8ada      	ldrh	r2, [r3, #22]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008a6e:	4b47      	ldr	r3, [pc, #284]	@ (8008b8c <tcp_listen_input+0x1e4>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008a80:	4b41      	ldr	r3, [pc, #260]	@ (8008b88 <tcp_listen_input+0x1e0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008a92:	6978      	ldr	r0, [r7, #20]
 8008a94:	f7ff fa58 	bl	8007f48 <tcp_next_iss>
 8008a98:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008ab2:	4b35      	ldr	r3, [pc, #212]	@ (8008b88 <tcp_listen_input+0x1e0>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	1e5a      	subs	r2, r3, #1
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	7a5b      	ldrb	r3, [r3, #9]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7a1a      	ldrb	r2, [r3, #8]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8008b9c <tcp_listen_input+0x1f4>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	60da      	str	r2, [r3, #12]
 8008ae8:	4a2c      	ldr	r2, [pc, #176]	@ (8008b9c <tcp_listen_input+0x1f4>)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	f003 fd23 	bl	800c538 <tcp_timer_needed>
 8008af2:	4b2b      	ldr	r3, [pc, #172]	@ (8008ba0 <tcp_listen_input+0x1f8>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008af8:	6978      	ldr	r0, [r7, #20]
 8008afa:	f001 fd8b 	bl	800a614 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008afe:	4b23      	ldr	r3, [pc, #140]	@ (8008b8c <tcp_listen_input+0x1e4>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	89db      	ldrh	r3, [r3, #14]
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	4618      	mov	r0, r3
 8008b22:	f007 fa7b 	bl	801001c <ip4_route>
 8008b26:	4601      	mov	r1, r0
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f7ff fa30 	bl	8007f94 <tcp_eff_send_mss_netif>
 8008b34:	4603      	mov	r3, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008b3c:	2112      	movs	r1, #18
 8008b3e:	6978      	ldr	r0, [r7, #20]
 8008b40:	f002 fc96 	bl	800b470 <tcp_enqueue_flags>
 8008b44:	4603      	mov	r3, r0
 8008b46:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d004      	beq.n	8008b5a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008b50:	2100      	movs	r1, #0
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	f7fd fed6 	bl	8006904 <tcp_abandon>
      return;
 8008b58:	e006      	b.n	8008b68 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f002 fd76 	bl	800b64c <tcp_output>
  return;
 8008b60:	e001      	b.n	8008b66 <tcp_listen_input+0x1be>
    return;
 8008b62:	bf00      	nop
 8008b64:	e000      	b.n	8008b68 <tcp_listen_input+0x1c0>
  return;
 8008b66:	bf00      	nop
}
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000808c 	.word	0x2000808c
 8008b74:	08013b28 	.word	0x08013b28
 8008b78:	08013d20 	.word	0x08013d20
 8008b7c:	08013b74 	.word	0x08013b74
 8008b80:	20008084 	.word	0x20008084
 8008b84:	2000808a 	.word	0x2000808a
 8008b88:	20008080 	.word	0x20008080
 8008b8c:	20008070 	.word	0x20008070
 8008b90:	2000511c 	.word	0x2000511c
 8008b94:	20005120 	.word	0x20005120
 8008b98:	2000510c 	.word	0x2000510c
 8008b9c:	20008054 	.word	0x20008054
 8008ba0:	2000805c 	.word	0x2000805c

08008ba4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af04      	add	r7, sp, #16
 8008baa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008bac:	4b2f      	ldr	r3, [pc, #188]	@ (8008c6c <tcp_timewait_input+0xc8>)
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d153      	bne.n	8008c60 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d106      	bne.n	8008bcc <tcp_timewait_input+0x28>
 8008bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8008c70 <tcp_timewait_input+0xcc>)
 8008bc0:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008bc4:	492b      	ldr	r1, [pc, #172]	@ (8008c74 <tcp_timewait_input+0xd0>)
 8008bc6:	482c      	ldr	r0, [pc, #176]	@ (8008c78 <tcp_timewait_input+0xd4>)
 8008bc8:	f008 fdc2 	bl	8011750 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008bcc:	4b27      	ldr	r3, [pc, #156]	@ (8008c6c <tcp_timewait_input+0xc8>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d02a      	beq.n	8008c2e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008bd8:	4b28      	ldr	r3, [pc, #160]	@ (8008c7c <tcp_timewait_input+0xd8>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	db2d      	blt.n	8008c42 <tcp_timewait_input+0x9e>
 8008be6:	4b25      	ldr	r3, [pc, #148]	@ (8008c7c <tcp_timewait_input+0xd8>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008bf2:	440b      	add	r3, r1
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dc23      	bgt.n	8008c42 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bfa:	4b21      	ldr	r3, [pc, #132]	@ (8008c80 <tcp_timewait_input+0xdc>)
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	4b21      	ldr	r3, [pc, #132]	@ (8008c84 <tcp_timewait_input+0xe0>)
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	4b1d      	ldr	r3, [pc, #116]	@ (8008c7c <tcp_timewait_input+0xd8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008c88 <tcp_timewait_input+0xe4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c0e:	885b      	ldrh	r3, [r3, #2]
 8008c10:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c12:	4a1d      	ldr	r2, [pc, #116]	@ (8008c88 <tcp_timewait_input+0xe4>)
 8008c14:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c16:	8812      	ldrh	r2, [r2, #0]
 8008c18:	b292      	uxth	r2, r2
 8008c1a:	9202      	str	r2, [sp, #8]
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008c8c <tcp_timewait_input+0xe8>)
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4b1b      	ldr	r3, [pc, #108]	@ (8008c90 <tcp_timewait_input+0xec>)
 8008c24:	4602      	mov	r2, r0
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f003 fac4 	bl	800c1b4 <tcp_rst>
      return;
 8008c2c:	e01b      	b.n	8008c66 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <tcp_timewait_input+0xc8>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008c3a:	4b16      	ldr	r3, [pc, #88]	@ (8008c94 <tcp_timewait_input+0xf0>)
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008c42:	4b10      	ldr	r3, [pc, #64]	@ (8008c84 <tcp_timewait_input+0xe0>)
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00c      	beq.n	8008c64 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	8b5b      	ldrh	r3, [r3, #26]
 8008c4e:	f043 0302 	orr.w	r3, r3, #2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f002 fcf7 	bl	800b64c <tcp_output>
  }
  return;
 8008c5e:	e001      	b.n	8008c64 <tcp_timewait_input+0xc0>
    return;
 8008c60:	bf00      	nop
 8008c62:	e000      	b.n	8008c66 <tcp_timewait_input+0xc2>
  return;
 8008c64:	bf00      	nop
}
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	2000808c 	.word	0x2000808c
 8008c70:	08013b28 	.word	0x08013b28
 8008c74:	08013d40 	.word	0x08013d40
 8008c78:	08013b74 	.word	0x08013b74
 8008c7c:	20008080 	.word	0x20008080
 8008c80:	20008084 	.word	0x20008084
 8008c84:	2000808a 	.word	0x2000808a
 8008c88:	20008070 	.word	0x20008070
 8008c8c:	2000511c 	.word	0x2000511c
 8008c90:	20005120 	.word	0x20005120
 8008c94:	20008048 	.word	0x20008048

08008c98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008c98:	b590      	push	{r4, r7, lr}
 8008c9a:	b08d      	sub	sp, #52	@ 0x34
 8008c9c:	af04      	add	r7, sp, #16
 8008c9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <tcp_process+0x24>
 8008cae:	4b9d      	ldr	r3, [pc, #628]	@ (8008f24 <tcp_process+0x28c>)
 8008cb0:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008cb4:	499c      	ldr	r1, [pc, #624]	@ (8008f28 <tcp_process+0x290>)
 8008cb6:	489d      	ldr	r0, [pc, #628]	@ (8008f2c <tcp_process+0x294>)
 8008cb8:	f008 fd4a 	bl	8011750 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008cbc:	4b9c      	ldr	r3, [pc, #624]	@ (8008f30 <tcp_process+0x298>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d04e      	beq.n	8008d66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	7d1b      	ldrb	r3, [r3, #20]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d108      	bne.n	8008ce2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cd4:	4b97      	ldr	r3, [pc, #604]	@ (8008f34 <tcp_process+0x29c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d123      	bne.n	8008d24 <tcp_process+0x8c>
        acceptable = 1;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	76fb      	strb	r3, [r7, #27]
 8008ce0:	e020      	b.n	8008d24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ce6:	4b94      	ldr	r3, [pc, #592]	@ (8008f38 <tcp_process+0x2a0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d102      	bne.n	8008cf4 <tcp_process+0x5c>
        acceptable = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	76fb      	strb	r3, [r7, #27]
 8008cf2:	e017      	b.n	8008d24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008cf4:	4b90      	ldr	r3, [pc, #576]	@ (8008f38 <tcp_process+0x2a0>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db10      	blt.n	8008d24 <tcp_process+0x8c>
 8008d02:	4b8d      	ldr	r3, [pc, #564]	@ (8008f38 <tcp_process+0x2a0>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0a:	6879      	ldr	r1, [r7, #4]
 8008d0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008d0e:	440b      	add	r3, r1
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dc06      	bgt.n	8008d24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	8b5b      	ldrh	r3, [r3, #26]
 8008d1a:	f043 0302 	orr.w	r3, r3, #2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008d24:	7efb      	ldrb	r3, [r7, #27]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01b      	beq.n	8008d62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7d1b      	ldrb	r3, [r3, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <tcp_process+0xa8>
 8008d32:	4b7c      	ldr	r3, [pc, #496]	@ (8008f24 <tcp_process+0x28c>)
 8008d34:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008d38:	4980      	ldr	r1, [pc, #512]	@ (8008f3c <tcp_process+0x2a4>)
 8008d3a:	487c      	ldr	r0, [pc, #496]	@ (8008f2c <tcp_process+0x294>)
 8008d3c:	f008 fd08 	bl	8011750 <iprintf>
      recv_flags |= TF_RESET;
 8008d40:	4b7f      	ldr	r3, [pc, #508]	@ (8008f40 <tcp_process+0x2a8>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f043 0308 	orr.w	r3, r3, #8
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8008f40 <tcp_process+0x2a8>)
 8008d4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8b5b      	ldrh	r3, [r3, #26]
 8008d52:	f023 0301 	bic.w	r3, r3, #1
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008d5c:	f06f 030d 	mvn.w	r3, #13
 8008d60:	e37a      	b.n	8009458 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e378      	b.n	8009458 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008d66:	4b72      	ldr	r3, [pc, #456]	@ (8008f30 <tcp_process+0x298>)
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d010      	beq.n	8008d94 <tcp_process+0xfc>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	7d1b      	ldrb	r3, [r3, #20]
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d00c      	beq.n	8008d94 <tcp_process+0xfc>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7d1b      	ldrb	r3, [r3, #20]
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d008      	beq.n	8008d94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8b5b      	ldrh	r3, [r3, #26]
 8008d86:	f043 0302 	orr.w	r3, r3, #2
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	e361      	b.n	8009458 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	8b5b      	ldrh	r3, [r3, #26]
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d103      	bne.n	8008da8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008da0:	4b68      	ldr	r3, [pc, #416]	@ (8008f44 <tcp_process+0x2ac>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fc2b 	bl	800a614 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	7d1b      	ldrb	r3, [r3, #20]
 8008dc2:	3b02      	subs	r3, #2
 8008dc4:	2b07      	cmp	r3, #7
 8008dc6:	f200 8337 	bhi.w	8009438 <tcp_process+0x7a0>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <tcp_process+0x138>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08009021 	.word	0x08009021
 8008dd8:	08009199 	.word	0x08009199
 8008ddc:	080091c3 	.word	0x080091c3
 8008de0:	080092e7 	.word	0x080092e7
 8008de4:	08009199 	.word	0x08009199
 8008de8:	08009373 	.word	0x08009373
 8008dec:	08009403 	.word	0x08009403
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008df0:	4b4f      	ldr	r3, [pc, #316]	@ (8008f30 <tcp_process+0x298>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 80e4 	beq.w	8008fc6 <tcp_process+0x32e>
 8008dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8008f30 <tcp_process+0x298>)
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	f000 80dd 	beq.w	8008fc6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e10:	1c5a      	adds	r2, r3, #1
 8008e12:	4b48      	ldr	r3, [pc, #288]	@ (8008f34 <tcp_process+0x29c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	f040 80d5 	bne.w	8008fc6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008e1c:	4b46      	ldr	r3, [pc, #280]	@ (8008f38 <tcp_process+0x2a0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8008e2e:	4b41      	ldr	r3, [pc, #260]	@ (8008f34 <tcp_process+0x29c>)
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008e36:	4b44      	ldr	r3, [pc, #272]	@ (8008f48 <tcp_process+0x2b0>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	89db      	ldrh	r3, [r3, #14]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008e50:	4b39      	ldr	r3, [pc, #228]	@ (8008f38 <tcp_process+0x2a0>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2204      	movs	r2, #4
 8008e5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f007 f8d7 	bl	801001c <ip4_route>
 8008e6e:	4601      	mov	r1, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	3304      	adds	r3, #4
 8008e74:	461a      	mov	r2, r3
 8008e76:	4620      	mov	r0, r4
 8008e78:	f7ff f88c 	bl	8007f94 <tcp_eff_send_mss_netif>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	461a      	mov	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e88:	009a      	lsls	r2, r3, #2
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf38      	it	cc
 8008e98:	460b      	movcc	r3, r1
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d204      	bcs.n	8008ea8 <tcp_process+0x210>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	e00d      	b.n	8008ec4 <tcp_process+0x22c>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d904      	bls.n	8008ec0 <tcp_process+0x228>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	e001      	b.n	8008ec4 <tcp_process+0x22c>
 8008ec0:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <tcp_process+0x24a>
 8008ed4:	4b13      	ldr	r3, [pc, #76]	@ (8008f24 <tcp_process+0x28c>)
 8008ed6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8008eda:	491c      	ldr	r1, [pc, #112]	@ (8008f4c <tcp_process+0x2b4>)
 8008edc:	4813      	ldr	r0, [pc, #76]	@ (8008f2c <tcp_process+0x294>)
 8008ede:	f008 fc37 	bl	8011750 <iprintf>
        --pcb->snd_queuelen;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ef6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d12a      	bne.n	8008f54 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <tcp_process+0x280>
 8008f0a:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <tcp_process+0x28c>)
 8008f0c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8008f10:	490f      	ldr	r1, [pc, #60]	@ (8008f50 <tcp_process+0x2b8>)
 8008f12:	4806      	ldr	r0, [pc, #24]	@ (8008f2c <tcp_process+0x294>)
 8008f14:	f008 fc1c 	bl	8011750 <iprintf>
          pcb->unsent = rseg->next;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008f20:	e01c      	b.n	8008f5c <tcp_process+0x2c4>
 8008f22:	bf00      	nop
 8008f24:	08013b28 	.word	0x08013b28
 8008f28:	08013d60 	.word	0x08013d60
 8008f2c:	08013b74 	.word	0x08013b74
 8008f30:	2000808c 	.word	0x2000808c
 8008f34:	20008084 	.word	0x20008084
 8008f38:	20008080 	.word	0x20008080
 8008f3c:	08013d7c 	.word	0x08013d7c
 8008f40:	2000808d 	.word	0x2000808d
 8008f44:	20008048 	.word	0x20008048
 8008f48:	20008070 	.word	0x20008070
 8008f4c:	08013d9c 	.word	0x08013d9c
 8008f50:	08013db4 	.word	0x08013db4
        } else {
          pcb->unacked = rseg->next;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8008f5c:	69f8      	ldr	r0, [r7, #28]
 8008f5e:	f7fe fc36 	bl	80077ce <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008f70:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008f72:	e006      	b.n	8008f82 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <tcp_process+0x30a>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6910      	ldr	r0, [r2, #16]
 8008f96:	2200      	movs	r2, #0
 8008f98:	6879      	ldr	r1, [r7, #4]
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	76bb      	strb	r3, [r7, #26]
 8008fa0:	e001      	b.n	8008fa6 <tcp_process+0x30e>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008fa6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008faa:	f113 0f0d 	cmn.w	r3, #13
 8008fae:	d102      	bne.n	8008fb6 <tcp_process+0x31e>
          return ERR_ABRT;
 8008fb0:	f06f 030c 	mvn.w	r3, #12
 8008fb4:	e250      	b.n	8009458 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	8b5b      	ldrh	r3, [r3, #26]
 8008fba:	f043 0302 	orr.w	r3, r3, #2
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008fc4:	e23a      	b.n	800943c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008fc6:	4b98      	ldr	r3, [pc, #608]	@ (8009228 <tcp_process+0x590>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 0310 	and.w	r3, r3, #16
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8234 	beq.w	800943c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fd4:	4b95      	ldr	r3, [pc, #596]	@ (800922c <tcp_process+0x594>)
 8008fd6:	6819      	ldr	r1, [r3, #0]
 8008fd8:	4b95      	ldr	r3, [pc, #596]	@ (8009230 <tcp_process+0x598>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4b95      	ldr	r3, [pc, #596]	@ (8009234 <tcp_process+0x59c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fe4:	4b94      	ldr	r3, [pc, #592]	@ (8009238 <tcp_process+0x5a0>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008fec:	4a92      	ldr	r2, [pc, #584]	@ (8009238 <tcp_process+0x5a0>)
 8008fee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ff0:	8812      	ldrh	r2, [r2, #0]
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	9202      	str	r2, [sp, #8]
 8008ff6:	9301      	str	r3, [sp, #4]
 8008ff8:	4b90      	ldr	r3, [pc, #576]	@ (800923c <tcp_process+0x5a4>)
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4b90      	ldr	r3, [pc, #576]	@ (8009240 <tcp_process+0x5a8>)
 8008ffe:	4602      	mov	r2, r0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f003 f8d7 	bl	800c1b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800900c:	2b05      	cmp	r3, #5
 800900e:	f200 8215 	bhi.w	800943c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f002 fea3 	bl	800bd64 <tcp_rexmit_rto>
      break;
 800901e:	e20d      	b.n	800943c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009020:	4b81      	ldr	r3, [pc, #516]	@ (8009228 <tcp_process+0x590>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 0310 	and.w	r3, r3, #16
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 80a1 	beq.w	8009170 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800902e:	4b7f      	ldr	r3, [pc, #508]	@ (800922c <tcp_process+0x594>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	3b01      	subs	r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	db7e      	blt.n	800913c <tcp_process+0x4a4>
 800903e:	4b7b      	ldr	r3, [pc, #492]	@ (800922c <tcp_process+0x594>)
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	dc77      	bgt.n	800913c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2204      	movs	r2, #4
 8009050:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800905a:	23fa      	movs	r3, #250	@ 0xfa
 800905c:	76bb      	strb	r3, [r7, #26]
 800905e:	e01d      	b.n	800909c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <tcp_process+0x3e0>
 800906a:	4b76      	ldr	r3, [pc, #472]	@ (8009244 <tcp_process+0x5ac>)
 800906c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8009070:	4975      	ldr	r1, [pc, #468]	@ (8009248 <tcp_process+0x5b0>)
 8009072:	4876      	ldr	r0, [pc, #472]	@ (800924c <tcp_process+0x5b4>)
 8009074:	f008 fb6c 	bl	8011750 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <tcp_process+0x400>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	6910      	ldr	r0, [r2, #16]
 800908c:	2200      	movs	r2, #0
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	4798      	blx	r3
 8009092:	4603      	mov	r3, r0
 8009094:	76bb      	strb	r3, [r7, #26]
 8009096:	e001      	b.n	800909c <tcp_process+0x404>
 8009098:	23f0      	movs	r3, #240	@ 0xf0
 800909a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800909c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00a      	beq.n	80090ba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80090a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80090a8:	f113 0f0d 	cmn.w	r3, #13
 80090ac:	d002      	beq.n	80090b4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fd fce6 	bl	8006a80 <tcp_abort>
            }
            return ERR_ABRT;
 80090b4:	f06f 030c 	mvn.w	r3, #12
 80090b8:	e1ce      	b.n	8009458 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fae0 	bl	8009680 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80090c0:	4b63      	ldr	r3, [pc, #396]	@ (8009250 <tcp_process+0x5b8>)
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <tcp_process+0x43c>
            recv_acked--;
 80090c8:	4b61      	ldr	r3, [pc, #388]	@ (8009250 <tcp_process+0x5b8>)
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	4b5f      	ldr	r3, [pc, #380]	@ (8009250 <tcp_process+0x5b8>)
 80090d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090d8:	009a      	lsls	r2, r3, #2
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80090e4:	428b      	cmp	r3, r1
 80090e6:	bf38      	it	cc
 80090e8:	460b      	movcc	r3, r1
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d204      	bcs.n	80090f8 <tcp_process+0x460>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	e00d      	b.n	8009114 <tcp_process+0x47c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8009102:	4293      	cmp	r3, r2
 8009104:	d904      	bls.n	8009110 <tcp_process+0x478>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	b29b      	uxth	r3, r3
 800910e:	e001      	b.n	8009114 <tcp_process+0x47c>
 8009110:	f241 131c 	movw	r3, #4380	@ 0x111c
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800911a:	4b4e      	ldr	r3, [pc, #312]	@ (8009254 <tcp_process+0x5bc>)
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d037      	beq.n	8009196 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	8b5b      	ldrh	r3, [r3, #26]
 800912a:	f043 0302 	orr.w	r3, r3, #2
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2207      	movs	r2, #7
 8009138:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800913a:	e02c      	b.n	8009196 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800913c:	4b3b      	ldr	r3, [pc, #236]	@ (800922c <tcp_process+0x594>)
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	4b3b      	ldr	r3, [pc, #236]	@ (8009230 <tcp_process+0x598>)
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	4b3b      	ldr	r3, [pc, #236]	@ (8009234 <tcp_process+0x59c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800914c:	4b3a      	ldr	r3, [pc, #232]	@ (8009238 <tcp_process+0x5a0>)
 800914e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009154:	4a38      	ldr	r2, [pc, #224]	@ (8009238 <tcp_process+0x5a0>)
 8009156:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009158:	8812      	ldrh	r2, [r2, #0]
 800915a:	b292      	uxth	r2, r2
 800915c:	9202      	str	r2, [sp, #8]
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	4b36      	ldr	r3, [pc, #216]	@ (800923c <tcp_process+0x5a4>)
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4b36      	ldr	r3, [pc, #216]	@ (8009240 <tcp_process+0x5a8>)
 8009166:	4602      	mov	r2, r0
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f003 f823 	bl	800c1b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800916e:	e167      	b.n	8009440 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009170:	4b2d      	ldr	r3, [pc, #180]	@ (8009228 <tcp_process+0x590>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8161 	beq.w	8009440 <tcp_process+0x7a8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009182:	1e5a      	subs	r2, r3, #1
 8009184:	4b2b      	ldr	r3, [pc, #172]	@ (8009234 <tcp_process+0x59c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	429a      	cmp	r2, r3
 800918a:	f040 8159 	bne.w	8009440 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f002 fe0a 	bl	800bda8 <tcp_rexmit>
      break;
 8009194:	e154      	b.n	8009440 <tcp_process+0x7a8>
 8009196:	e153      	b.n	8009440 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fa71 	bl	8009680 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800919e:	4b2d      	ldr	r3, [pc, #180]	@ (8009254 <tcp_process+0x5bc>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 814c 	beq.w	8009444 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8b5b      	ldrh	r3, [r3, #26]
 80091b0:	f043 0302 	orr.w	r3, r3, #2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2207      	movs	r2, #7
 80091be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80091c0:	e140      	b.n	8009444 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fa5c 	bl	8009680 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80091c8:	4b22      	ldr	r3, [pc, #136]	@ (8009254 <tcp_process+0x5bc>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d071      	beq.n	80092b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091d4:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <tcp_process+0x590>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d060      	beq.n	80092a2 <tcp_process+0x60a>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091e4:	4b11      	ldr	r3, [pc, #68]	@ (800922c <tcp_process+0x594>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d15a      	bne.n	80092a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d156      	bne.n	80092a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	8b5b      	ldrh	r3, [r3, #26]
 80091f8:	f043 0302 	orr.w	r3, r3, #2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7fe fdbc 	bl	8007d80 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009208:	4b13      	ldr	r3, [pc, #76]	@ (8009258 <tcp_process+0x5c0>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d105      	bne.n	800921e <tcp_process+0x586>
 8009212:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <tcp_process+0x5c0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	4a0f      	ldr	r2, [pc, #60]	@ (8009258 <tcp_process+0x5c0>)
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	e02e      	b.n	800927c <tcp_process+0x5e4>
 800921e:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <tcp_process+0x5c0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	e027      	b.n	8009276 <tcp_process+0x5de>
 8009226:	bf00      	nop
 8009228:	2000808c 	.word	0x2000808c
 800922c:	20008084 	.word	0x20008084
 8009230:	2000808a 	.word	0x2000808a
 8009234:	20008080 	.word	0x20008080
 8009238:	20008070 	.word	0x20008070
 800923c:	2000511c 	.word	0x2000511c
 8009240:	20005120 	.word	0x20005120
 8009244:	08013b28 	.word	0x08013b28
 8009248:	08013dc8 	.word	0x08013dc8
 800924c:	08013b74 	.word	0x08013b74
 8009250:	20008088 	.word	0x20008088
 8009254:	2000808d 	.word	0x2000808d
 8009258:	20008054 	.word	0x20008054
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	429a      	cmp	r2, r3
 8009264:	d104      	bne.n	8009270 <tcp_process+0x5d8>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68da      	ldr	r2, [r3, #12]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	e005      	b.n	800927c <tcp_process+0x5e4>
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	617b      	str	r3, [r7, #20]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1ef      	bne.n	800925c <tcp_process+0x5c4>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	60da      	str	r2, [r3, #12]
 8009282:	4b77      	ldr	r3, [pc, #476]	@ (8009460 <tcp_process+0x7c8>)
 8009284:	2201      	movs	r2, #1
 8009286:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	220a      	movs	r2, #10
 800928c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800928e:	4b75      	ldr	r3, [pc, #468]	@ (8009464 <tcp_process+0x7cc>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	4a73      	ldr	r2, [pc, #460]	@ (8009464 <tcp_process+0x7cc>)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	f003 f94c 	bl	800c538 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80092a0:	e0d2      	b.n	8009448 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	8b5b      	ldrh	r3, [r3, #26]
 80092a6:	f043 0302 	orr.w	r3, r3, #2
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2208      	movs	r2, #8
 80092b4:	751a      	strb	r2, [r3, #20]
      break;
 80092b6:	e0c7      	b.n	8009448 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092b8:	4b6b      	ldr	r3, [pc, #428]	@ (8009468 <tcp_process+0x7d0>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 0310 	and.w	r3, r3, #16
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80c1 	beq.w	8009448 <tcp_process+0x7b0>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092ca:	4b68      	ldr	r3, [pc, #416]	@ (800946c <tcp_process+0x7d4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	f040 80ba 	bne.w	8009448 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 80b5 	bne.w	8009448 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2206      	movs	r2, #6
 80092e2:	751a      	strb	r2, [r3, #20]
      break;
 80092e4:	e0b0      	b.n	8009448 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f9ca 	bl	8009680 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80092ec:	4b60      	ldr	r3, [pc, #384]	@ (8009470 <tcp_process+0x7d8>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80a9 	beq.w	800944c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8b5b      	ldrh	r3, [r3, #26]
 80092fe:	f043 0302 	orr.w	r3, r3, #2
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe fd39 	bl	8007d80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800930e:	4b59      	ldr	r3, [pc, #356]	@ (8009474 <tcp_process+0x7dc>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	d105      	bne.n	8009324 <tcp_process+0x68c>
 8009318:	4b56      	ldr	r3, [pc, #344]	@ (8009474 <tcp_process+0x7dc>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	4a55      	ldr	r2, [pc, #340]	@ (8009474 <tcp_process+0x7dc>)
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e013      	b.n	800934c <tcp_process+0x6b4>
 8009324:	4b53      	ldr	r3, [pc, #332]	@ (8009474 <tcp_process+0x7dc>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e00c      	b.n	8009346 <tcp_process+0x6ae>
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d104      	bne.n	8009340 <tcp_process+0x6a8>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	60da      	str	r2, [r3, #12]
 800933e:	e005      	b.n	800934c <tcp_process+0x6b4>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1ef      	bne.n	800932c <tcp_process+0x694>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	60da      	str	r2, [r3, #12]
 8009352:	4b43      	ldr	r3, [pc, #268]	@ (8009460 <tcp_process+0x7c8>)
 8009354:	2201      	movs	r2, #1
 8009356:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	220a      	movs	r2, #10
 800935c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800935e:	4b41      	ldr	r3, [pc, #260]	@ (8009464 <tcp_process+0x7cc>)
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	4a3f      	ldr	r2, [pc, #252]	@ (8009464 <tcp_process+0x7cc>)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	f003 f8e4 	bl	800c538 <tcp_timer_needed>
      }
      break;
 8009370:	e06c      	b.n	800944c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f984 	bl	8009680 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009378:	4b3b      	ldr	r3, [pc, #236]	@ (8009468 <tcp_process+0x7d0>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 0310 	and.w	r3, r3, #16
 8009380:	2b00      	cmp	r3, #0
 8009382:	d065      	beq.n	8009450 <tcp_process+0x7b8>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009388:	4b38      	ldr	r3, [pc, #224]	@ (800946c <tcp_process+0x7d4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d15f      	bne.n	8009450 <tcp_process+0x7b8>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d15b      	bne.n	8009450 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fe fcf1 	bl	8007d80 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800939e:	4b35      	ldr	r3, [pc, #212]	@ (8009474 <tcp_process+0x7dc>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d105      	bne.n	80093b4 <tcp_process+0x71c>
 80093a8:	4b32      	ldr	r3, [pc, #200]	@ (8009474 <tcp_process+0x7dc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	4a31      	ldr	r2, [pc, #196]	@ (8009474 <tcp_process+0x7dc>)
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	e013      	b.n	80093dc <tcp_process+0x744>
 80093b4:	4b2f      	ldr	r3, [pc, #188]	@ (8009474 <tcp_process+0x7dc>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	e00c      	b.n	80093d6 <tcp_process+0x73e>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d104      	bne.n	80093d0 <tcp_process+0x738>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	60da      	str	r2, [r3, #12]
 80093ce:	e005      	b.n	80093dc <tcp_process+0x744>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1ef      	bne.n	80093bc <tcp_process+0x724>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	60da      	str	r2, [r3, #12]
 80093e2:	4b1f      	ldr	r3, [pc, #124]	@ (8009460 <tcp_process+0x7c8>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	220a      	movs	r2, #10
 80093ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80093ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009464 <tcp_process+0x7cc>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60da      	str	r2, [r3, #12]
 80093f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009464 <tcp_process+0x7cc>)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6013      	str	r3, [r2, #0]
 80093fc:	f003 f89c 	bl	800c538 <tcp_timer_needed>
      }
      break;
 8009400:	e026      	b.n	8009450 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f93c 	bl	8009680 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009408:	4b17      	ldr	r3, [pc, #92]	@ (8009468 <tcp_process+0x7d0>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	d01f      	beq.n	8009454 <tcp_process+0x7bc>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009418:	4b14      	ldr	r3, [pc, #80]	@ (800946c <tcp_process+0x7d4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d119      	bne.n	8009454 <tcp_process+0x7bc>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009424:	2b00      	cmp	r3, #0
 8009426:	d115      	bne.n	8009454 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009428:	4b11      	ldr	r3, [pc, #68]	@ (8009470 <tcp_process+0x7d8>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f043 0310 	orr.w	r3, r3, #16
 8009430:	b2da      	uxtb	r2, r3
 8009432:	4b0f      	ldr	r3, [pc, #60]	@ (8009470 <tcp_process+0x7d8>)
 8009434:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009436:	e00d      	b.n	8009454 <tcp_process+0x7bc>
    default:
      break;
 8009438:	bf00      	nop
 800943a:	e00c      	b.n	8009456 <tcp_process+0x7be>
      break;
 800943c:	bf00      	nop
 800943e:	e00a      	b.n	8009456 <tcp_process+0x7be>
      break;
 8009440:	bf00      	nop
 8009442:	e008      	b.n	8009456 <tcp_process+0x7be>
      break;
 8009444:	bf00      	nop
 8009446:	e006      	b.n	8009456 <tcp_process+0x7be>
      break;
 8009448:	bf00      	nop
 800944a:	e004      	b.n	8009456 <tcp_process+0x7be>
      break;
 800944c:	bf00      	nop
 800944e:	e002      	b.n	8009456 <tcp_process+0x7be>
      break;
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <tcp_process+0x7be>
      break;
 8009454:	bf00      	nop
  }
  return ERR_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3724      	adds	r7, #36	@ 0x24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd90      	pop	{r4, r7, pc}
 8009460:	2000805c 	.word	0x2000805c
 8009464:	20008058 	.word	0x20008058
 8009468:	2000808c 	.word	0x2000808c
 800946c:	20008084 	.word	0x20008084
 8009470:	2000808d 	.word	0x2000808d
 8009474:	20008054 	.word	0x20008054

08009478 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009478:	b590      	push	{r4, r7, lr}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d106      	bne.n	8009496 <tcp_oos_insert_segment+0x1e>
 8009488:	4b3b      	ldr	r3, [pc, #236]	@ (8009578 <tcp_oos_insert_segment+0x100>)
 800948a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800948e:	493b      	ldr	r1, [pc, #236]	@ (800957c <tcp_oos_insert_segment+0x104>)
 8009490:	483b      	ldr	r0, [pc, #236]	@ (8009580 <tcp_oos_insert_segment+0x108>)
 8009492:	f008 f95d 	bl	8011750 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	899b      	ldrh	r3, [r3, #12]
 800949c:	b29b      	uxth	r3, r3
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fb f9ba 	bl	8004818 <lwip_htons>
 80094a4:	4603      	mov	r3, r0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d028      	beq.n	8009502 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80094b0:	6838      	ldr	r0, [r7, #0]
 80094b2:	f7fe f977 	bl	80077a4 <tcp_segs_free>
    next = NULL;
 80094b6:	2300      	movs	r3, #0
 80094b8:	603b      	str	r3, [r7, #0]
 80094ba:	e056      	b.n	800956a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	899b      	ldrh	r3, [r3, #12]
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fb f9a7 	bl	8004818 <lwip_htons>
 80094ca:	4603      	mov	r3, r0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	899b      	ldrh	r3, [r3, #12]
 80094dc:	b29c      	uxth	r4, r3
 80094de:	2001      	movs	r0, #1
 80094e0:	f7fb f99a 	bl	8004818 <lwip_htons>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	4322      	orrs	r2, r4
 80094ee:	b292      	uxth	r2, r2
 80094f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7fe f966 	bl	80077ce <tcp_seg_free>
    while (next &&
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00e      	beq.n	8009526 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	891b      	ldrh	r3, [r3, #8]
 800950c:	461a      	mov	r2, r3
 800950e:	4b1d      	ldr	r3, [pc, #116]	@ (8009584 <tcp_oos_insert_segment+0x10c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	441a      	add	r2, r3
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	8909      	ldrh	r1, [r1, #8]
 800951e:	440b      	add	r3, r1
 8009520:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009522:	2b00      	cmp	r3, #0
 8009524:	daca      	bge.n	80094bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01e      	beq.n	800956a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	891b      	ldrh	r3, [r3, #8]
 8009530:	461a      	mov	r2, r3
 8009532:	4b14      	ldr	r3, [pc, #80]	@ (8009584 <tcp_oos_insert_segment+0x10c>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	441a      	add	r2, r3
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009540:	2b00      	cmp	r3, #0
 8009542:	dd12      	ble.n	800956a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	b29a      	uxth	r2, r3
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <tcp_oos_insert_segment+0x10c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	b29b      	uxth	r3, r3
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	b29a      	uxth	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	891b      	ldrh	r3, [r3, #8]
 8009562:	4619      	mov	r1, r3
 8009564:	4610      	mov	r0, r2
 8009566:	f7fc fb6d 	bl	8005c44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	601a      	str	r2, [r3, #0]
}
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	bd90      	pop	{r4, r7, pc}
 8009578:	08013b28 	.word	0x08013b28
 800957c:	08013de8 	.word	0x08013de8
 8009580:	08013b74 	.word	0x08013b74
 8009584:	20008080 	.word	0x20008080

08009588 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009588:	b5b0      	push	{r4, r5, r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
 8009594:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009596:	e03e      	b.n	8009616 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fc fd5a 	bl	8006060 <pbuf_clen>
 80095ac:	4603      	mov	r3, r0
 80095ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80095b6:	8a7a      	ldrh	r2, [r7, #18]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d906      	bls.n	80095ca <tcp_free_acked_segments+0x42>
 80095bc:	4b2a      	ldr	r3, [pc, #168]	@ (8009668 <tcp_free_acked_segments+0xe0>)
 80095be:	f240 4257 	movw	r2, #1111	@ 0x457
 80095c2:	492a      	ldr	r1, [pc, #168]	@ (800966c <tcp_free_acked_segments+0xe4>)
 80095c4:	482a      	ldr	r0, [pc, #168]	@ (8009670 <tcp_free_acked_segments+0xe8>)
 80095c6:	f008 f8c3 	bl	8011750 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80095d0:	8a7b      	ldrh	r3, [r7, #18]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	891a      	ldrh	r2, [r3, #8]
 80095e0:	4b24      	ldr	r3, [pc, #144]	@ (8009674 <tcp_free_acked_segments+0xec>)
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	4413      	add	r3, r2
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	4b22      	ldr	r3, [pc, #136]	@ (8009674 <tcp_free_acked_segments+0xec>)
 80095ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80095ec:	6978      	ldr	r0, [r7, #20]
 80095ee:	f7fe f8ee 	bl	80077ce <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00c      	beq.n	8009616 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <tcp_free_acked_segments+0x8e>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <tcp_free_acked_segments+0x8e>
 8009608:	4b17      	ldr	r3, [pc, #92]	@ (8009668 <tcp_free_acked_segments+0xe0>)
 800960a:	f240 4261 	movw	r2, #1121	@ 0x461
 800960e:	491a      	ldr	r1, [pc, #104]	@ (8009678 <tcp_free_acked_segments+0xf0>)
 8009610:	4817      	ldr	r0, [pc, #92]	@ (8009670 <tcp_free_acked_segments+0xe8>)
 8009612:	f008 f89d 	bl	8011750 <iprintf>
  while (seg_list != NULL &&
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d020      	beq.n	800965e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4618      	mov	r0, r3
 8009624:	f7fb f90d 	bl	8004842 <lwip_htonl>
 8009628:	4604      	mov	r4, r0
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	891b      	ldrh	r3, [r3, #8]
 800962e:	461d      	mov	r5, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	899b      	ldrh	r3, [r3, #12]
 8009636:	b29b      	uxth	r3, r3
 8009638:	4618      	mov	r0, r3
 800963a:	f7fb f8ed 	bl	8004818 <lwip_htons>
 800963e:	4603      	mov	r3, r0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	f003 0303 	and.w	r3, r3, #3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <tcp_free_acked_segments+0xc6>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <tcp_free_acked_segments+0xc8>
 800964e:	2300      	movs	r3, #0
 8009650:	442b      	add	r3, r5
 8009652:	18e2      	adds	r2, r4, r3
 8009654:	4b09      	ldr	r3, [pc, #36]	@ (800967c <tcp_free_acked_segments+0xf4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800965a:	2b00      	cmp	r3, #0
 800965c:	dd9c      	ble.n	8009598 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800965e:	68bb      	ldr	r3, [r7, #8]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bdb0      	pop	{r4, r5, r7, pc}
 8009668:	08013b28 	.word	0x08013b28
 800966c:	08013e10 	.word	0x08013e10
 8009670:	08013b74 	.word	0x08013b74
 8009674:	20008088 	.word	0x20008088
 8009678:	08013e38 	.word	0x08013e38
 800967c:	20008084 	.word	0x20008084

08009680 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009680:	b5b0      	push	{r4, r5, r7, lr}
 8009682:	b094      	sub	sp, #80	@ 0x50
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <tcp_receive+0x20>
 8009692:	4b91      	ldr	r3, [pc, #580]	@ (80098d8 <tcp_receive+0x258>)
 8009694:	f240 427b 	movw	r2, #1147	@ 0x47b
 8009698:	4990      	ldr	r1, [pc, #576]	@ (80098dc <tcp_receive+0x25c>)
 800969a:	4891      	ldr	r0, [pc, #580]	@ (80098e0 <tcp_receive+0x260>)
 800969c:	f008 f858 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7d1b      	ldrb	r3, [r3, #20]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d806      	bhi.n	80096b6 <tcp_receive+0x36>
 80096a8:	4b8b      	ldr	r3, [pc, #556]	@ (80098d8 <tcp_receive+0x258>)
 80096aa:	f240 427c 	movw	r2, #1148	@ 0x47c
 80096ae:	498d      	ldr	r1, [pc, #564]	@ (80098e4 <tcp_receive+0x264>)
 80096b0:	488b      	ldr	r0, [pc, #556]	@ (80098e0 <tcp_receive+0x260>)
 80096b2:	f008 f84d 	bl	8011750 <iprintf>

  if (flags & TCP_ACK) {
 80096b6:	4b8c      	ldr	r3, [pc, #560]	@ (80098e8 <tcp_receive+0x268>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 8264 	beq.w	8009b8c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096d0:	4413      	add	r3, r2
 80096d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096d8:	4b84      	ldr	r3, [pc, #528]	@ (80098ec <tcp_receive+0x26c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	db1b      	blt.n	800971a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096e6:	4b81      	ldr	r3, [pc, #516]	@ (80098ec <tcp_receive+0x26c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d106      	bne.n	80096fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096f2:	4b7f      	ldr	r3, [pc, #508]	@ (80098f0 <tcp_receive+0x270>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	1ad3      	subs	r3, r2, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	db0e      	blt.n	800971a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009700:	4b7b      	ldr	r3, [pc, #492]	@ (80098f0 <tcp_receive+0x270>)
 8009702:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009704:	429a      	cmp	r2, r3
 8009706:	d125      	bne.n	8009754 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009708:	4b7a      	ldr	r3, [pc, #488]	@ (80098f4 <tcp_receive+0x274>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	89db      	ldrh	r3, [r3, #14]
 800970e:	b29a      	uxth	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009716:	429a      	cmp	r2, r3
 8009718:	d91c      	bls.n	8009754 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800971a:	4b76      	ldr	r3, [pc, #472]	@ (80098f4 <tcp_receive+0x274>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	89db      	ldrh	r3, [r3, #14]
 8009720:	b29a      	uxth	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009734:	429a      	cmp	r2, r3
 8009736:	d205      	bcs.n	8009744 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009744:	4b69      	ldr	r3, [pc, #420]	@ (80098ec <tcp_receive+0x26c>)
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800974c:	4b68      	ldr	r3, [pc, #416]	@ (80098f0 <tcp_receive+0x270>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009754:	4b66      	ldr	r3, [pc, #408]	@ (80098f0 <tcp_receive+0x270>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	dc58      	bgt.n	8009814 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009762:	4b65      	ldr	r3, [pc, #404]	@ (80098f8 <tcp_receive+0x278>)
 8009764:	881b      	ldrh	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d14b      	bne.n	8009802 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009774:	4413      	add	r3, r2
 8009776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009778:	429a      	cmp	r2, r3
 800977a:	d142      	bne.n	8009802 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009782:	2b00      	cmp	r3, #0
 8009784:	db3d      	blt.n	8009802 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800978a:	4b59      	ldr	r3, [pc, #356]	@ (80098f0 <tcp_receive+0x270>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d137      	bne.n	8009802 <tcp_receive+0x182>
              found_dupack = 1;
 8009792:	2301      	movs	r3, #1
 8009794:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800979c:	2bff      	cmp	r3, #255	@ 0xff
 800979e:	d007      	beq.n	80097b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097a6:	3301      	adds	r3, #1
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d91b      	bls.n	80097f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097c4:	4413      	add	r3, r2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d30a      	bcc.n	80097e8 <tcp_receive+0x168>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80097dc:	4413      	add	r3, r2
 80097de:	b29a      	uxth	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80097e6:	e004      	b.n	80097f2 <tcp_receive+0x172>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80097ee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d902      	bls.n	8009802 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f002 fb3f 	bl	800be80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 8161 	bne.w	8009acc <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009812:	e15b      	b.n	8009acc <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009814:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <tcp_receive+0x270>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	3b01      	subs	r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	f2c0 814e 	blt.w	8009ac2 <tcp_receive+0x442>
 8009826:	4b32      	ldr	r3, [pc, #200]	@ (80098f0 <tcp_receive+0x270>)
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	f300 8146 	bgt.w	8009ac2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	8b5b      	ldrh	r3, [r3, #26]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d010      	beq.n	8009864 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	8b5b      	ldrh	r3, [r3, #26]
 8009846:	f023 0304 	bic.w	r3, r3, #4
 800984a:	b29a      	uxth	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009872:	10db      	asrs	r3, r3, #3
 8009874:	b21b      	sxth	r3, r3
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	4413      	add	r3, r2
 8009882:	b29b      	uxth	r3, r3
 8009884:	b21a      	sxth	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800988c:	4b18      	ldr	r3, [pc, #96]	@ (80098f0 <tcp_receive+0x270>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009896:	b29b      	uxth	r3, r3
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80098a4:	4b12      	ldr	r3, [pc, #72]	@ (80098f0 <tcp_receive+0x270>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	7d1b      	ldrb	r3, [r3, #20]
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	f240 8097 	bls.w	80099e4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d245      	bcs.n	8009952 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	8b5b      	ldrh	r3, [r3, #26]
 80098ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d014      	beq.n	80098fc <tcp_receive+0x27c>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e013      	b.n	80098fe <tcp_receive+0x27e>
 80098d6:	bf00      	nop
 80098d8:	08013b28 	.word	0x08013b28
 80098dc:	08013e58 	.word	0x08013e58
 80098e0:	08013b74 	.word	0x08013b74
 80098e4:	08013e74 	.word	0x08013e74
 80098e8:	2000808c 	.word	0x2000808c
 80098ec:	20008080 	.word	0x20008080
 80098f0:	20008084 	.word	0x20008084
 80098f4:	20008070 	.word	0x20008070
 80098f8:	2000808a 	.word	0x2000808a
 80098fc:	2302      	movs	r3, #2
 80098fe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009902:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009906:	b29a      	uxth	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800990c:	fb12 f303 	smulbb	r3, r2, r3
 8009910:	b29b      	uxth	r3, r3
 8009912:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009914:	4293      	cmp	r3, r2
 8009916:	bf28      	it	cs
 8009918:	4613      	movcs	r3, r2
 800991a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009922:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009924:	4413      	add	r3, r2
 8009926:	b29a      	uxth	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800992e:	429a      	cmp	r2, r3
 8009930:	d309      	bcc.n	8009946 <tcp_receive+0x2c6>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009938:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800993a:	4413      	add	r3, r2
 800993c:	b29a      	uxth	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009944:	e04e      	b.n	80099e4 <tcp_receive+0x364>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800994c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009950:	e048      	b.n	80099e4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009958:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800995a:	4413      	add	r3, r2
 800995c:	b29a      	uxth	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009964:	429a      	cmp	r2, r3
 8009966:	d309      	bcc.n	800997c <tcp_receive+0x2fc>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800996e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009970:	4413      	add	r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800997a:	e004      	b.n	8009986 <tcp_receive+0x306>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009982:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009992:	429a      	cmp	r2, r3
 8009994:	d326      	bcc.n	80099e4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099b6:	4413      	add	r3, r2
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d30a      	bcc.n	80099da <tcp_receive+0x35a>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099ce:	4413      	add	r3, r2
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80099d8:	e004      	b.n	80099e4 <tcp_receive+0x364>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80099e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ec:	4a98      	ldr	r2, [pc, #608]	@ (8009c50 <tcp_receive+0x5d0>)
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff fdca 	bl	8009588 <tcp_free_acked_segments>
 80099f4:	4602      	mov	r2, r0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a02:	4a94      	ldr	r2, [pc, #592]	@ (8009c54 <tcp_receive+0x5d4>)
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fdbf 	bl	8009588 <tcp_free_acked_segments>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d104      	bne.n	8009a22 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a1e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8009a20:	e002      	b.n	8009a28 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d103      	bne.n	8009a3e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009a44:	4b84      	ldr	r3, [pc, #528]	@ (8009c58 <tcp_receive+0x5d8>)
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	4413      	add	r3, r2
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8b5b      	ldrh	r3, [r3, #26]
 8009a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d035      	beq.n	8009aca <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d118      	bne.n	8009a98 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00c      	beq.n	8009a88 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fa fee1 	bl	8004842 <lwip_htonl>
 8009a80:	4603      	mov	r3, r0
 8009a82:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	dc20      	bgt.n	8009aca <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	8b5b      	ldrh	r3, [r3, #26]
 8009a8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a96:	e018      	b.n	8009aca <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fa fecc 	bl	8004842 <lwip_htonl>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	1ae3      	subs	r3, r4, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	dc0b      	bgt.n	8009aca <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	8b5b      	ldrh	r3, [r3, #26]
 8009ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009ac0:	e003      	b.n	8009aca <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f002 fbc8 	bl	800c258 <tcp_send_empty_ack>
 8009ac8:	e000      	b.n	8009acc <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009aca:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d05b      	beq.n	8009b8c <tcp_receive+0x50c>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ad8:	4b60      	ldr	r3, [pc, #384]	@ (8009c5c <tcp_receive+0x5dc>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	da54      	bge.n	8009b8c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8009c60 <tcp_receive+0x5e0>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009af6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009b00:	10db      	asrs	r3, r3, #3
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b1a:	4413      	add	r3, r2
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	b21a      	sxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8009b24:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	da05      	bge.n	8009b38 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b30:	425b      	negs	r3, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b42:	109b      	asrs	r3, r3, #2
 8009b44:	b21b      	sxth	r3, r3
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009b5c:	4413      	add	r3, r2
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	b21a      	sxth	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009b6c:	10db      	asrs	r3, r3, #3
 8009b6e:	b21b      	sxth	r3, r3
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	b21a      	sxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009b8c:	4b35      	ldr	r3, [pc, #212]	@ (8009c64 <tcp_receive+0x5e4>)
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 84df 	beq.w	800a554 <tcp_receive+0xed4>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7d1b      	ldrb	r3, [r3, #20]
 8009b9a:	2b06      	cmp	r3, #6
 8009b9c:	f200 84da 	bhi.w	800a554 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ba4:	4b30      	ldr	r3, [pc, #192]	@ (8009c68 <tcp_receive+0x5e8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f2c0 808f 	blt.w	8009cd0 <tcp_receive+0x650>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bb6:	4b2b      	ldr	r3, [pc, #172]	@ (8009c64 <tcp_receive+0x5e4>)
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8009c68 <tcp_receive+0x5e8>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	440b      	add	r3, r1
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f300 8082 	bgt.w	8009cd0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009bcc:	4b27      	ldr	r3, [pc, #156]	@ (8009c6c <tcp_receive+0x5ec>)
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bd6:	4b24      	ldr	r3, [pc, #144]	@ (8009c68 <tcp_receive+0x5e8>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009bde:	4b23      	ldr	r3, [pc, #140]	@ (8009c6c <tcp_receive+0x5ec>)
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d106      	bne.n	8009bf4 <tcp_receive+0x574>
 8009be6:	4b22      	ldr	r3, [pc, #136]	@ (8009c70 <tcp_receive+0x5f0>)
 8009be8:	f240 5294 	movw	r2, #1428	@ 0x594
 8009bec:	4921      	ldr	r1, [pc, #132]	@ (8009c74 <tcp_receive+0x5f4>)
 8009bee:	4822      	ldr	r0, [pc, #136]	@ (8009c78 <tcp_receive+0x5f8>)
 8009bf0:	f007 fdae 	bl	8011750 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d906      	bls.n	8009c0c <tcp_receive+0x58c>
 8009bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8009c70 <tcp_receive+0x5f0>)
 8009c00:	f240 5295 	movw	r2, #1429	@ 0x595
 8009c04:	491d      	ldr	r1, [pc, #116]	@ (8009c7c <tcp_receive+0x5fc>)
 8009c06:	481c      	ldr	r0, [pc, #112]	@ (8009c78 <tcp_receive+0x5f8>)
 8009c08:	f007 fda2 	bl	8011750 <iprintf>
      off = (u16_t)off32;
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c12:	4b16      	ldr	r3, [pc, #88]	@ (8009c6c <tcp_receive+0x5ec>)
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	891b      	ldrh	r3, [r3, #8]
 8009c18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d906      	bls.n	8009c2e <tcp_receive+0x5ae>
 8009c20:	4b13      	ldr	r3, [pc, #76]	@ (8009c70 <tcp_receive+0x5f0>)
 8009c22:	f240 5297 	movw	r2, #1431	@ 0x597
 8009c26:	4916      	ldr	r1, [pc, #88]	@ (8009c80 <tcp_receive+0x600>)
 8009c28:	4813      	ldr	r0, [pc, #76]	@ (8009c78 <tcp_receive+0x5f8>)
 8009c2a:	f007 fd91 	bl	8011750 <iprintf>
      inseg.len -= off;
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c6c <tcp_receive+0x5ec>)
 8009c30:	891a      	ldrh	r2, [r3, #8]
 8009c32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8009c6c <tcp_receive+0x5ec>)
 8009c3c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c6c <tcp_receive+0x5ec>)
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	891a      	ldrh	r2, [r3, #8]
 8009c44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8009c4c:	e02a      	b.n	8009ca4 <tcp_receive+0x624>
 8009c4e:	bf00      	nop
 8009c50:	08013e90 	.word	0x08013e90
 8009c54:	08013e98 	.word	0x08013e98
 8009c58:	20008088 	.word	0x20008088
 8009c5c:	20008084 	.word	0x20008084
 8009c60:	20008048 	.word	0x20008048
 8009c64:	2000808a 	.word	0x2000808a
 8009c68:	20008080 	.word	0x20008080
 8009c6c:	20008060 	.word	0x20008060
 8009c70:	08013b28 	.word	0x08013b28
 8009c74:	08013ea0 	.word	0x08013ea0
 8009c78:	08013b74 	.word	0x08013b74
 8009c7c:	08013eb0 	.word	0x08013eb0
 8009c80:	08013ec0 	.word	0x08013ec0
        off -= p->len;
 8009c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c86:	895b      	ldrh	r3, [r3, #10]
 8009c88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c94:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009c96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009c9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca6:	895b      	ldrh	r3, [r3, #10]
 8009ca8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d8e9      	bhi.n	8009c84 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009cb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009cb8:	f7fc f8c4 	bl	8005e44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc0:	4a90      	ldr	r2, [pc, #576]	@ (8009f04 <tcp_receive+0x884>)
 8009cc2:	6013      	str	r3, [r2, #0]
 8009cc4:	4b90      	ldr	r3, [pc, #576]	@ (8009f08 <tcp_receive+0x888>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4a8e      	ldr	r2, [pc, #568]	@ (8009f04 <tcp_receive+0x884>)
 8009cca:	6812      	ldr	r2, [r2, #0]
 8009ccc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009cce:	e00d      	b.n	8009cec <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009cd0:	4b8c      	ldr	r3, [pc, #560]	@ (8009f04 <tcp_receive+0x884>)
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	da06      	bge.n	8009cec <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	8b5b      	ldrh	r3, [r3, #26]
 8009ce2:	f043 0302 	orr.w	r3, r3, #2
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009cec:	4b85      	ldr	r3, [pc, #532]	@ (8009f04 <tcp_receive+0x884>)
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f2c0 8427 	blt.w	800a54a <tcp_receive+0xeca>
 8009cfc:	4b81      	ldr	r3, [pc, #516]	@ (8009f04 <tcp_receive+0x884>)
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009d08:	440b      	add	r3, r1
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f300 841b 	bgt.w	800a54a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d18:	4b7a      	ldr	r3, [pc, #488]	@ (8009f04 <tcp_receive+0x884>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	f040 8298 	bne.w	800a252 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009d22:	4b79      	ldr	r3, [pc, #484]	@ (8009f08 <tcp_receive+0x888>)
 8009d24:	891c      	ldrh	r4, [r3, #8]
 8009d26:	4b78      	ldr	r3, [pc, #480]	@ (8009f08 <tcp_receive+0x888>)
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	899b      	ldrh	r3, [r3, #12]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fa fd72 	bl	8004818 <lwip_htons>
 8009d34:	4603      	mov	r3, r0
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <tcp_receive+0x6c4>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <tcp_receive+0x6c6>
 8009d44:	2300      	movs	r3, #0
 8009d46:	4423      	add	r3, r4
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	4b70      	ldr	r3, [pc, #448]	@ (8009f0c <tcp_receive+0x88c>)
 8009d4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d52:	4b6e      	ldr	r3, [pc, #440]	@ (8009f0c <tcp_receive+0x88c>)
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d274      	bcs.n	8009e44 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8009f08 <tcp_receive+0x888>)
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	899b      	ldrh	r3, [r3, #12]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fa fd58 	bl	8004818 <lwip_htons>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01e      	beq.n	8009db2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009d74:	4b64      	ldr	r3, [pc, #400]	@ (8009f08 <tcp_receive+0x888>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	899b      	ldrh	r3, [r3, #12]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	b21b      	sxth	r3, r3
 8009d7e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d82:	b21c      	sxth	r4, r3
 8009d84:	4b60      	ldr	r3, [pc, #384]	@ (8009f08 <tcp_receive+0x888>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	899b      	ldrh	r3, [r3, #12]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7fa fd43 	bl	8004818 <lwip_htons>
 8009d92:	4603      	mov	r3, r0
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fa fd3b 	bl	8004818 <lwip_htons>
 8009da2:	4603      	mov	r3, r0
 8009da4:	b21b      	sxth	r3, r3
 8009da6:	4323      	orrs	r3, r4
 8009da8:	b21a      	sxth	r2, r3
 8009daa:	4b57      	ldr	r3, [pc, #348]	@ (8009f08 <tcp_receive+0x888>)
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	b292      	uxth	r2, r2
 8009db0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009db6:	4b54      	ldr	r3, [pc, #336]	@ (8009f08 <tcp_receive+0x888>)
 8009db8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009dba:	4b53      	ldr	r3, [pc, #332]	@ (8009f08 <tcp_receive+0x888>)
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	899b      	ldrh	r3, [r3, #12]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fa fd28 	bl	8004818 <lwip_htons>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <tcp_receive+0x760>
            inseg.len -= 1;
 8009dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8009f08 <tcp_receive+0x888>)
 8009dd6:	891b      	ldrh	r3, [r3, #8]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8009f08 <tcp_receive+0x888>)
 8009dde:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009de0:	4b49      	ldr	r3, [pc, #292]	@ (8009f08 <tcp_receive+0x888>)
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	4a48      	ldr	r2, [pc, #288]	@ (8009f08 <tcp_receive+0x888>)
 8009de6:	8912      	ldrh	r2, [r2, #8]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fb ff2a 	bl	8005c44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009df0:	4b45      	ldr	r3, [pc, #276]	@ (8009f08 <tcp_receive+0x888>)
 8009df2:	891c      	ldrh	r4, [r3, #8]
 8009df4:	4b44      	ldr	r3, [pc, #272]	@ (8009f08 <tcp_receive+0x888>)
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	899b      	ldrh	r3, [r3, #12]
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fa fd0b 	bl	8004818 <lwip_htons>
 8009e02:	4603      	mov	r3, r0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	f003 0303 	and.w	r3, r3, #3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <tcp_receive+0x792>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <tcp_receive+0x794>
 8009e12:	2300      	movs	r3, #0
 8009e14:	4423      	add	r3, r4
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	4b3c      	ldr	r3, [pc, #240]	@ (8009f0c <tcp_receive+0x88c>)
 8009e1a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009f0c <tcp_receive+0x88c>)
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	461a      	mov	r2, r3
 8009e22:	4b38      	ldr	r3, [pc, #224]	@ (8009f04 <tcp_receive+0x884>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	441a      	add	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e30:	440b      	add	r3, r1
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d006      	beq.n	8009e44 <tcp_receive+0x7c4>
 8009e36:	4b36      	ldr	r3, [pc, #216]	@ (8009f10 <tcp_receive+0x890>)
 8009e38:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8009e3c:	4935      	ldr	r1, [pc, #212]	@ (8009f14 <tcp_receive+0x894>)
 8009e3e:	4836      	ldr	r0, [pc, #216]	@ (8009f18 <tcp_receive+0x898>)
 8009e40:	f007 fc86 	bl	8011750 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 80e6 	beq.w	800a01a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8009f08 <tcp_receive+0x888>)
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	899b      	ldrh	r3, [r3, #12]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fa fcde 	bl	8004818 <lwip_htons>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d010      	beq.n	8009e8a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009e68:	e00a      	b.n	8009e80 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e6e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fd fca7 	bl	80077ce <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d1f0      	bne.n	8009e6a <tcp_receive+0x7ea>
 8009e88:	e0c7      	b.n	800a01a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009e90:	e051      	b.n	8009f36 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	899b      	ldrh	r3, [r3, #12]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fa fcbc 	bl	8004818 <lwip_htons>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d03c      	beq.n	8009f26 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009eac:	4b16      	ldr	r3, [pc, #88]	@ (8009f08 <tcp_receive+0x888>)
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	899b      	ldrh	r3, [r3, #12]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7fa fcaf 	bl	8004818 <lwip_htons>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d12f      	bne.n	8009f26 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009ec6:	4b10      	ldr	r3, [pc, #64]	@ (8009f08 <tcp_receive+0x888>)
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	899b      	ldrh	r3, [r3, #12]
 8009ecc:	b29c      	uxth	r4, r3
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f7fa fca2 	bl	8004818 <lwip_htons>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <tcp_receive+0x888>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4322      	orrs	r2, r4
 8009ede:	b292      	uxth	r2, r2
 8009ee0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <tcp_receive+0x888>)
 8009ee4:	891c      	ldrh	r4, [r3, #8]
 8009ee6:	4b08      	ldr	r3, [pc, #32]	@ (8009f08 <tcp_receive+0x888>)
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	899b      	ldrh	r3, [r3, #12]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fa fc92 	bl	8004818 <lwip_htons>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00d      	beq.n	8009f1c <tcp_receive+0x89c>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e00c      	b.n	8009f1e <tcp_receive+0x89e>
 8009f04:	20008080 	.word	0x20008080
 8009f08:	20008060 	.word	0x20008060
 8009f0c:	2000808a 	.word	0x2000808a
 8009f10:	08013b28 	.word	0x08013b28
 8009f14:	08013ed0 	.word	0x08013ed0
 8009f18:	08013b74 	.word	0x08013b74
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4423      	add	r3, r4
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	4b98      	ldr	r3, [pc, #608]	@ (800a184 <tcp_receive+0xb04>)
 8009f24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f28:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009f30:	6938      	ldr	r0, [r7, #16]
 8009f32:	f7fd fc4c 	bl	80077ce <tcp_seg_free>
            while (next &&
 8009f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009f3c:	4b91      	ldr	r3, [pc, #580]	@ (800a184 <tcp_receive+0xb04>)
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	4b91      	ldr	r3, [pc, #580]	@ (800a188 <tcp_receive+0xb08>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	441a      	add	r2, r3
 8009f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f50:	8909      	ldrh	r1, [r1, #8]
 8009f52:	440b      	add	r3, r1
 8009f54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da9b      	bge.n	8009e92 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d059      	beq.n	800a014 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009f60:	4b88      	ldr	r3, [pc, #544]	@ (800a184 <tcp_receive+0xb04>)
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b88      	ldr	r3, [pc, #544]	@ (800a188 <tcp_receive+0xb08>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dd4d      	ble.n	800a014 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	4b81      	ldr	r3, [pc, #516]	@ (800a188 <tcp_receive+0xb08>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	4b80      	ldr	r3, [pc, #512]	@ (800a18c <tcp_receive+0xb0c>)
 8009f8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f8e:	4b7f      	ldr	r3, [pc, #508]	@ (800a18c <tcp_receive+0xb0c>)
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fa fc3e 	bl	8004818 <lwip_htons>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d005      	beq.n	8009fb4 <tcp_receive+0x934>
                inseg.len -= 1;
 8009fa8:	4b78      	ldr	r3, [pc, #480]	@ (800a18c <tcp_receive+0xb0c>)
 8009faa:	891b      	ldrh	r3, [r3, #8]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	4b76      	ldr	r3, [pc, #472]	@ (800a18c <tcp_receive+0xb0c>)
 8009fb2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009fb4:	4b75      	ldr	r3, [pc, #468]	@ (800a18c <tcp_receive+0xb0c>)
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	4a74      	ldr	r2, [pc, #464]	@ (800a18c <tcp_receive+0xb0c>)
 8009fba:	8912      	ldrh	r2, [r2, #8]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fb fe40 	bl	8005c44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009fc4:	4b71      	ldr	r3, [pc, #452]	@ (800a18c <tcp_receive+0xb0c>)
 8009fc6:	891c      	ldrh	r4, [r3, #8]
 8009fc8:	4b70      	ldr	r3, [pc, #448]	@ (800a18c <tcp_receive+0xb0c>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	899b      	ldrh	r3, [r3, #12]
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fa fc21 	bl	8004818 <lwip_htons>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	f003 0303 	and.w	r3, r3, #3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <tcp_receive+0x966>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <tcp_receive+0x968>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4423      	add	r3, r4
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	4b65      	ldr	r3, [pc, #404]	@ (800a184 <tcp_receive+0xb04>)
 8009fee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ff0:	4b64      	ldr	r3, [pc, #400]	@ (800a184 <tcp_receive+0xb04>)
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4b64      	ldr	r3, [pc, #400]	@ (800a188 <tcp_receive+0xb08>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	441a      	add	r2, r3
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	429a      	cmp	r2, r3
 800a004:	d006      	beq.n	800a014 <tcp_receive+0x994>
 800a006:	4b62      	ldr	r3, [pc, #392]	@ (800a190 <tcp_receive+0xb10>)
 800a008:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a00c:	4961      	ldr	r1, [pc, #388]	@ (800a194 <tcp_receive+0xb14>)
 800a00e:	4862      	ldr	r0, [pc, #392]	@ (800a198 <tcp_receive+0xb18>)
 800a010:	f007 fb9e 	bl	8011750 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a018:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a01a:	4b5a      	ldr	r3, [pc, #360]	@ (800a184 <tcp_receive+0xb04>)
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	461a      	mov	r2, r3
 800a020:	4b59      	ldr	r3, [pc, #356]	@ (800a188 <tcp_receive+0xb08>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	441a      	add	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a02e:	4b55      	ldr	r3, [pc, #340]	@ (800a184 <tcp_receive+0xb04>)
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d206      	bcs.n	800a044 <tcp_receive+0x9c4>
 800a036:	4b56      	ldr	r3, [pc, #344]	@ (800a190 <tcp_receive+0xb10>)
 800a038:	f240 6207 	movw	r2, #1543	@ 0x607
 800a03c:	4957      	ldr	r1, [pc, #348]	@ (800a19c <tcp_receive+0xb1c>)
 800a03e:	4856      	ldr	r0, [pc, #344]	@ (800a198 <tcp_receive+0xb18>)
 800a040:	f007 fb86 	bl	8011750 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a048:	4b4e      	ldr	r3, [pc, #312]	@ (800a184 <tcp_receive+0xb04>)
 800a04a:	881b      	ldrh	r3, [r3, #0]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7fc fe93 	bl	8006d80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a05a:	4b4c      	ldr	r3, [pc, #304]	@ (800a18c <tcp_receive+0xb0c>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	891b      	ldrh	r3, [r3, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d006      	beq.n	800a072 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a064:	4b49      	ldr	r3, [pc, #292]	@ (800a18c <tcp_receive+0xb0c>)
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a4d      	ldr	r2, [pc, #308]	@ (800a1a0 <tcp_receive+0xb20>)
 800a06a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a06c:	4b47      	ldr	r3, [pc, #284]	@ (800a18c <tcp_receive+0xb0c>)
 800a06e:	2200      	movs	r2, #0
 800a070:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a072:	4b46      	ldr	r3, [pc, #280]	@ (800a18c <tcp_receive+0xb0c>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	899b      	ldrh	r3, [r3, #12]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fa fbcc 	bl	8004818 <lwip_htons>
 800a080:	4603      	mov	r3, r0
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0301 	and.w	r3, r3, #1
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 80b8 	beq.w	800a1fe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a08e:	4b45      	ldr	r3, [pc, #276]	@ (800a1a4 <tcp_receive+0xb24>)
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	f043 0320 	orr.w	r3, r3, #32
 800a096:	b2da      	uxtb	r2, r3
 800a098:	4b42      	ldr	r3, [pc, #264]	@ (800a1a4 <tcp_receive+0xb24>)
 800a09a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a09c:	e0af      	b.n	800a1fe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	4a36      	ldr	r2, [pc, #216]	@ (800a188 <tcp_receive+0xb08>)
 800a0ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	891b      	ldrh	r3, [r3, #8]
 800a0b4:	461c      	mov	r4, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	899b      	ldrh	r3, [r3, #12]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fa fbaa 	bl	8004818 <lwip_htons>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	f003 0303 	and.w	r3, r3, #3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <tcp_receive+0xa54>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e000      	b.n	800a0d6 <tcp_receive+0xa56>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	191a      	adds	r2, r3, r4
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0dc:	441a      	add	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0e6:	461c      	mov	r4, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	891b      	ldrh	r3, [r3, #8]
 800a0ec:	461d      	mov	r5, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	899b      	ldrh	r3, [r3, #12]
 800a0f4:	b29b      	uxth	r3, r3
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fa fb8e 	bl	8004818 <lwip_htons>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <tcp_receive+0xa8c>
 800a108:	2301      	movs	r3, #1
 800a10a:	e000      	b.n	800a10e <tcp_receive+0xa8e>
 800a10c:	2300      	movs	r3, #0
 800a10e:	442b      	add	r3, r5
 800a110:	429c      	cmp	r4, r3
 800a112:	d206      	bcs.n	800a122 <tcp_receive+0xaa2>
 800a114:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <tcp_receive+0xb10>)
 800a116:	f240 622b 	movw	r2, #1579	@ 0x62b
 800a11a:	4923      	ldr	r1, [pc, #140]	@ (800a1a8 <tcp_receive+0xb28>)
 800a11c:	481e      	ldr	r0, [pc, #120]	@ (800a198 <tcp_receive+0xb18>)
 800a11e:	f007 fb17 	bl	8011750 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	891b      	ldrh	r3, [r3, #8]
 800a126:	461c      	mov	r4, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	899b      	ldrh	r3, [r3, #12]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4618      	mov	r0, r3
 800a132:	f7fa fb71 	bl	8004818 <lwip_htons>
 800a136:	4603      	mov	r3, r0
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <tcp_receive+0xac6>
 800a142:	2301      	movs	r3, #1
 800a144:	e000      	b.n	800a148 <tcp_receive+0xac8>
 800a146:	2300      	movs	r3, #0
 800a148:	1919      	adds	r1, r3, r4
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a14e:	b28b      	uxth	r3, r1
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7fc fe11 	bl	8006d80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	891b      	ldrh	r3, [r3, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d028      	beq.n	800a1ba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a168:	4b0d      	ldr	r3, [pc, #52]	@ (800a1a0 <tcp_receive+0xb20>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01d      	beq.n	800a1ac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a170:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a0 <tcp_receive+0xb20>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4619      	mov	r1, r3
 800a17a:	4610      	mov	r0, r2
 800a17c:	f7fb ffaa 	bl	80060d4 <pbuf_cat>
 800a180:	e018      	b.n	800a1b4 <tcp_receive+0xb34>
 800a182:	bf00      	nop
 800a184:	2000808a 	.word	0x2000808a
 800a188:	20008080 	.word	0x20008080
 800a18c:	20008060 	.word	0x20008060
 800a190:	08013b28 	.word	0x08013b28
 800a194:	08013f08 	.word	0x08013f08
 800a198:	08013b74 	.word	0x08013b74
 800a19c:	08013f44 	.word	0x08013f44
 800a1a0:	20008090 	.word	0x20008090
 800a1a4:	2000808d 	.word	0x2000808d
 800a1a8:	08013f64 	.word	0x08013f64
            } else {
              recv_data = cseg->p;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a70      	ldr	r2, [pc, #448]	@ (800a374 <tcp_receive+0xcf4>)
 800a1b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	899b      	ldrh	r3, [r3, #12]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fa fb28 	bl	8004818 <lwip_htons>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00d      	beq.n	800a1f0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a1d4:	4b68      	ldr	r3, [pc, #416]	@ (800a378 <tcp_receive+0xcf8>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	f043 0320 	orr.w	r3, r3, #32
 800a1dc:	b2da      	uxtb	r2, r3
 800a1de:	4b66      	ldr	r3, [pc, #408]	@ (800a378 <tcp_receive+0xcf8>)
 800a1e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7d1b      	ldrb	r3, [r3, #20]
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d102      	bne.n	800a1f0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2207      	movs	r2, #7
 800a1ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800a1f8:	68b8      	ldr	r0, [r7, #8]
 800a1fa:	f7fd fae8 	bl	80077ce <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a202:	2b00      	cmp	r3, #0
 800a204:	d008      	beq.n	800a218 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800a212:	429a      	cmp	r2, r3
 800a214:	f43f af43 	beq.w	800a09e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	8b5b      	ldrh	r3, [r3, #26]
 800a21c:	f003 0301 	and.w	r3, r3, #1
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00e      	beq.n	800a242 <tcp_receive+0xbc2>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	8b5b      	ldrh	r3, [r3, #26]
 800a228:	f023 0301 	bic.w	r3, r3, #1
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	835a      	strh	r2, [r3, #26]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	8b5b      	ldrh	r3, [r3, #26]
 800a236:	f043 0302 	orr.w	r3, r3, #2
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a240:	e187      	b.n	800a552 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	8b5b      	ldrh	r3, [r3, #26]
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a250:	e17f      	b.n	800a552 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a25a:	4848      	ldr	r0, [pc, #288]	@ (800a37c <tcp_receive+0xcfc>)
 800a25c:	f7fd faee 	bl	800783c <tcp_seg_copy>
 800a260:	4602      	mov	r2, r0
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	675a      	str	r2, [r3, #116]	@ 0x74
 800a266:	e16c      	b.n	800a542 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a268:	2300      	movs	r3, #0
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a270:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a272:	e156      	b.n	800a522 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	4b41      	ldr	r3, [pc, #260]	@ (800a380 <tcp_receive+0xd00>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d11d      	bne.n	800a2be <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a282:	4b3e      	ldr	r3, [pc, #248]	@ (800a37c <tcp_receive+0xcfc>)
 800a284:	891a      	ldrh	r2, [r3, #8]
 800a286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a288:	891b      	ldrh	r3, [r3, #8]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	f240 814e 	bls.w	800a52c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a290:	483a      	ldr	r0, [pc, #232]	@ (800a37c <tcp_receive+0xcfc>)
 800a292:	f7fd fad3 	bl	800783c <tcp_seg_copy>
 800a296:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 8148 	beq.w	800a530 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800a2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d003      	beq.n	800a2ae <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e002      	b.n	800a2b4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a2b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2b6:	6978      	ldr	r0, [r7, #20]
 800a2b8:	f7ff f8de 	bl	8009478 <tcp_oos_insert_segment>
                }
                break;
 800a2bc:	e138      	b.n	800a530 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d117      	bne.n	800a2f4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a2c4:	4b2e      	ldr	r3, [pc, #184]	@ (800a380 <tcp_receive+0xd00>)
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da57      	bge.n	800a384 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a2d4:	4829      	ldr	r0, [pc, #164]	@ (800a37c <tcp_receive+0xcfc>)
 800a2d6:	f7fd fab1 	bl	800783c <tcp_seg_copy>
 800a2da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 8128 	beq.w	800a534 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a2ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a2ec:	69b8      	ldr	r0, [r7, #24]
 800a2ee:	f7ff f8c3 	bl	8009478 <tcp_oos_insert_segment>
                  }
                  break;
 800a2f2:	e11f      	b.n	800a534 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a2f4:	4b22      	ldr	r3, [pc, #136]	@ (800a380 <tcp_receive+0xd00>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	3b01      	subs	r3, #1
 800a302:	2b00      	cmp	r3, #0
 800a304:	db3e      	blt.n	800a384 <tcp_receive+0xd04>
 800a306:	4b1e      	ldr	r3, [pc, #120]	@ (800a380 <tcp_receive+0xd00>)
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	3301      	adds	r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc35      	bgt.n	800a384 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a318:	4818      	ldr	r0, [pc, #96]	@ (800a37c <tcp_receive+0xcfc>)
 800a31a:	f7fd fa8f 	bl	800783c <tcp_seg_copy>
 800a31e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2b00      	cmp	r3, #0
 800a324:	f000 8108 	beq.w	800a538 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a330:	8912      	ldrh	r2, [r2, #8]
 800a332:	441a      	add	r2, r3
 800a334:	4b12      	ldr	r3, [pc, #72]	@ (800a380 <tcp_receive+0xd00>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dd12      	ble.n	800a364 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a33e:	4b10      	ldr	r3, [pc, #64]	@ (800a380 <tcp_receive+0xd00>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	b29a      	uxth	r2, r3
 800a344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	b29a      	uxth	r2, r3
 800a350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a352:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	685a      	ldr	r2, [r3, #4]
 800a358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35a:	891b      	ldrh	r3, [r3, #8]
 800a35c:	4619      	mov	r1, r3
 800a35e:	4610      	mov	r0, r2
 800a360:	f7fb fc70 	bl	8005c44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a366:	69fa      	ldr	r2, [r7, #28]
 800a368:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a36a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a36c:	69f8      	ldr	r0, [r7, #28]
 800a36e:	f7ff f883 	bl	8009478 <tcp_oos_insert_segment>
                  }
                  break;
 800a372:	e0e1      	b.n	800a538 <tcp_receive+0xeb8>
 800a374:	20008090 	.word	0x20008090
 800a378:	2000808d 	.word	0x2000808d
 800a37c:	20008060 	.word	0x20008060
 800a380:	20008080 	.word	0x20008080
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f040 80c5 	bne.w	800a51c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a392:	4b7f      	ldr	r3, [pc, #508]	@ (800a590 <tcp_receive+0xf10>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f340 80bc 	ble.w	800a51c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	899b      	ldrh	r3, [r3, #12]
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fa fa33 	bl	8004818 <lwip_htons>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	f003 0301 	and.w	r3, r3, #1
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f040 80be 	bne.w	800a53c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a3c0:	4874      	ldr	r0, [pc, #464]	@ (800a594 <tcp_receive+0xf14>)
 800a3c2:	f7fd fa3b 	bl	800783c <tcp_seg_copy>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80b5 	beq.w	800a540 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3de:	8912      	ldrh	r2, [r2, #8]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	4b6b      	ldr	r3, [pc, #428]	@ (800a590 <tcp_receive+0xf10>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd12      	ble.n	800a412 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a3ec:	4b68      	ldr	r3, [pc, #416]	@ (800a590 <tcp_receive+0xf10>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	891b      	ldrh	r3, [r3, #8]
 800a40a:	4619      	mov	r1, r3
 800a40c:	4610      	mov	r0, r2
 800a40e:	f7fb fc19 	bl	8005c44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a412:	4b61      	ldr	r3, [pc, #388]	@ (800a598 <tcp_receive+0xf18>)
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	4b5d      	ldr	r3, [pc, #372]	@ (800a590 <tcp_receive+0xf10>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	441a      	add	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a426:	440b      	add	r3, r1
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f340 8088 	ble.w	800a540 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	899b      	ldrh	r3, [r3, #12]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fa f9ec 	bl	8004818 <lwip_htons>
 800a440:	4603      	mov	r3, r0
 800a442:	b2db      	uxtb	r3, r3
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d021      	beq.n	800a490 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	899b      	ldrh	r3, [r3, #12]
 800a454:	b29b      	uxth	r3, r3
 800a456:	b21b      	sxth	r3, r3
 800a458:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a45c:	b21c      	sxth	r4, r3
 800a45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	899b      	ldrh	r3, [r3, #12]
 800a466:	b29b      	uxth	r3, r3
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fa f9d5 	bl	8004818 <lwip_htons>
 800a46e:	4603      	mov	r3, r0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800a476:	b29b      	uxth	r3, r3
 800a478:	4618      	mov	r0, r3
 800a47a:	f7fa f9cd 	bl	8004818 <lwip_htons>
 800a47e:	4603      	mov	r3, r0
 800a480:	b21b      	sxth	r3, r3
 800a482:	4323      	orrs	r3, r4
 800a484:	b21a      	sxth	r2, r3
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	b292      	uxth	r2, r2
 800a48e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a49a:	4413      	add	r3, r2
 800a49c:	b299      	uxth	r1, r3
 800a49e:	4b3c      	ldr	r3, [pc, #240]	@ (800a590 <tcp_receive+0xf10>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	1a8a      	subs	r2, r1, r2
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	891b      	ldrh	r3, [r3, #8]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	4610      	mov	r0, r2
 800a4be:	f7fb fbc1 	bl	8005c44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	891c      	ldrh	r4, [r3, #8]
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	899b      	ldrh	r3, [r3, #12]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fa f9a0 	bl	8004818 <lwip_htons>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	f003 0303 	and.w	r3, r3, #3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d001      	beq.n	800a4e8 <tcp_receive+0xe68>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e000      	b.n	800a4ea <tcp_receive+0xe6a>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	4423      	add	r3, r4
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	4b2a      	ldr	r3, [pc, #168]	@ (800a598 <tcp_receive+0xf18>)
 800a4f0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a4f2:	4b29      	ldr	r3, [pc, #164]	@ (800a598 <tcp_receive+0xf18>)
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	4b25      	ldr	r3, [pc, #148]	@ (800a590 <tcp_receive+0xf10>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	441a      	add	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a502:	6879      	ldr	r1, [r7, #4]
 800a504:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a506:	440b      	add	r3, r1
 800a508:	429a      	cmp	r2, r3
 800a50a:	d019      	beq.n	800a540 <tcp_receive+0xec0>
 800a50c:	4b23      	ldr	r3, [pc, #140]	@ (800a59c <tcp_receive+0xf1c>)
 800a50e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800a512:	4923      	ldr	r1, [pc, #140]	@ (800a5a0 <tcp_receive+0xf20>)
 800a514:	4823      	ldr	r0, [pc, #140]	@ (800a5a4 <tcp_receive+0xf24>)
 800a516:	f007 f91b 	bl	8011750 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a51a:	e011      	b.n	800a540 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	f47f aea5 	bne.w	800a274 <tcp_receive+0xbf4>
 800a52a:	e00a      	b.n	800a542 <tcp_receive+0xec2>
                break;
 800a52c:	bf00      	nop
 800a52e:	e008      	b.n	800a542 <tcp_receive+0xec2>
                break;
 800a530:	bf00      	nop
 800a532:	e006      	b.n	800a542 <tcp_receive+0xec2>
                  break;
 800a534:	bf00      	nop
 800a536:	e004      	b.n	800a542 <tcp_receive+0xec2>
                  break;
 800a538:	bf00      	nop
 800a53a:	e002      	b.n	800a542 <tcp_receive+0xec2>
                  break;
 800a53c:	bf00      	nop
 800a53e:	e000      	b.n	800a542 <tcp_receive+0xec2>
                break;
 800a540:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fe88 	bl	800c258 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a548:	e003      	b.n	800a552 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f001 fe84 	bl	800c258 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a550:	e01a      	b.n	800a588 <tcp_receive+0xf08>
 800a552:	e019      	b.n	800a588 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a554:	4b0e      	ldr	r3, [pc, #56]	@ (800a590 <tcp_receive+0xf10>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	2b00      	cmp	r3, #0
 800a560:	db0a      	blt.n	800a578 <tcp_receive+0xef8>
 800a562:	4b0b      	ldr	r3, [pc, #44]	@ (800a590 <tcp_receive+0xf10>)
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a56e:	440b      	add	r3, r1
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	3301      	adds	r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd07      	ble.n	800a588 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	8b5b      	ldrh	r3, [r3, #26]
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	b29a      	uxth	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a586:	e7ff      	b.n	800a588 <tcp_receive+0xf08>
 800a588:	bf00      	nop
 800a58a:	3750      	adds	r7, #80	@ 0x50
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bdb0      	pop	{r4, r5, r7, pc}
 800a590:	20008080 	.word	0x20008080
 800a594:	20008060 	.word	0x20008060
 800a598:	2000808a 	.word	0x2000808a
 800a59c:	08013b28 	.word	0x08013b28
 800a5a0:	08013ed0 	.word	0x08013ed0
 800a5a4:	08013b74 	.word	0x08013b74

0800a5a8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a5ae:	4b15      	ldr	r3, [pc, #84]	@ (800a604 <tcp_get_next_optbyte+0x5c>)
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	b291      	uxth	r1, r2
 800a5b6:	4a13      	ldr	r2, [pc, #76]	@ (800a604 <tcp_get_next_optbyte+0x5c>)
 800a5b8:	8011      	strh	r1, [r2, #0]
 800a5ba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a5bc:	4b12      	ldr	r3, [pc, #72]	@ (800a608 <tcp_get_next_optbyte+0x60>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d004      	beq.n	800a5ce <tcp_get_next_optbyte+0x26>
 800a5c4:	4b11      	ldr	r3, [pc, #68]	@ (800a60c <tcp_get_next_optbyte+0x64>)
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	88fa      	ldrh	r2, [r7, #6]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d208      	bcs.n	800a5e0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a5ce:	4b10      	ldr	r3, [pc, #64]	@ (800a610 <tcp_get_next_optbyte+0x68>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3314      	adds	r3, #20
 800a5d4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a5d6:	88fb      	ldrh	r3, [r7, #6]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	4413      	add	r3, r2
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	e00b      	b.n	800a5f8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	4b09      	ldr	r3, [pc, #36]	@ (800a60c <tcp_get_next_optbyte+0x64>)
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a5ee:	4b06      	ldr	r3, [pc, #24]	@ (800a608 <tcp_get_next_optbyte+0x60>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	797b      	ldrb	r3, [r7, #5]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	2000807c 	.word	0x2000807c
 800a608:	20008078 	.word	0x20008078
 800a60c:	20008076 	.word	0x20008076
 800a610:	20008070 	.word	0x20008070

0800a614 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d106      	bne.n	800a630 <tcp_parseopt+0x1c>
 800a622:	4b32      	ldr	r3, [pc, #200]	@ (800a6ec <tcp_parseopt+0xd8>)
 800a624:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a628:	4931      	ldr	r1, [pc, #196]	@ (800a6f0 <tcp_parseopt+0xdc>)
 800a62a:	4832      	ldr	r0, [pc, #200]	@ (800a6f4 <tcp_parseopt+0xe0>)
 800a62c:	f007 f890 	bl	8011750 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a630:	4b31      	ldr	r3, [pc, #196]	@ (800a6f8 <tcp_parseopt+0xe4>)
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d056      	beq.n	800a6e6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a638:	4b30      	ldr	r3, [pc, #192]	@ (800a6fc <tcp_parseopt+0xe8>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	801a      	strh	r2, [r3, #0]
 800a63e:	e046      	b.n	800a6ce <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800a640:	f7ff ffb2 	bl	800a5a8 <tcp_get_next_optbyte>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d006      	beq.n	800a65c <tcp_parseopt+0x48>
 800a64e:	2b02      	cmp	r3, #2
 800a650:	dc2a      	bgt.n	800a6a8 <tcp_parseopt+0x94>
 800a652:	2b00      	cmp	r3, #0
 800a654:	d042      	beq.n	800a6dc <tcp_parseopt+0xc8>
 800a656:	2b01      	cmp	r3, #1
 800a658:	d038      	beq.n	800a6cc <tcp_parseopt+0xb8>
 800a65a:	e025      	b.n	800a6a8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a65c:	f7ff ffa4 	bl	800a5a8 <tcp_get_next_optbyte>
 800a660:	4603      	mov	r3, r0
 800a662:	2b04      	cmp	r3, #4
 800a664:	d13c      	bne.n	800a6e0 <tcp_parseopt+0xcc>
 800a666:	4b25      	ldr	r3, [pc, #148]	@ (800a6fc <tcp_parseopt+0xe8>)
 800a668:	881b      	ldrh	r3, [r3, #0]
 800a66a:	3301      	adds	r3, #1
 800a66c:	4a22      	ldr	r2, [pc, #136]	@ (800a6f8 <tcp_parseopt+0xe4>)
 800a66e:	8812      	ldrh	r2, [r2, #0]
 800a670:	4293      	cmp	r3, r2
 800a672:	da35      	bge.n	800a6e0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a674:	f7ff ff98 	bl	800a5a8 <tcp_get_next_optbyte>
 800a678:	4603      	mov	r3, r0
 800a67a:	021b      	lsls	r3, r3, #8
 800a67c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a67e:	f7ff ff93 	bl	800a5a8 <tcp_get_next_optbyte>
 800a682:	4603      	mov	r3, r0
 800a684:	461a      	mov	r2, r3
 800a686:	89bb      	ldrh	r3, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a68c:	89bb      	ldrh	r3, [r7, #12]
 800a68e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800a692:	d804      	bhi.n	800a69e <tcp_parseopt+0x8a>
 800a694:	89bb      	ldrh	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <tcp_parseopt+0x8a>
 800a69a:	89ba      	ldrh	r2, [r7, #12]
 800a69c:	e001      	b.n	800a6a2 <tcp_parseopt+0x8e>
 800a69e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800a6a6:	e012      	b.n	800a6ce <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a6a8:	f7ff ff7e 	bl	800a5a8 <tcp_get_next_optbyte>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d916      	bls.n	800a6e4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a6b6:	7afb      	ldrb	r3, [r7, #11]
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	4b10      	ldr	r3, [pc, #64]	@ (800a6fc <tcp_parseopt+0xe8>)
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	4413      	add	r3, r2
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	3b02      	subs	r3, #2
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <tcp_parseopt+0xe8>)
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	e000      	b.n	800a6ce <tcp_parseopt+0xba>
          break;
 800a6cc:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a6fc <tcp_parseopt+0xe8>)
 800a6d0:	881a      	ldrh	r2, [r3, #0]
 800a6d2:	4b09      	ldr	r3, [pc, #36]	@ (800a6f8 <tcp_parseopt+0xe4>)
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d3b2      	bcc.n	800a640 <tcp_parseopt+0x2c>
 800a6da:	e004      	b.n	800a6e6 <tcp_parseopt+0xd2>
          return;
 800a6dc:	bf00      	nop
 800a6de:	e002      	b.n	800a6e6 <tcp_parseopt+0xd2>
            return;
 800a6e0:	bf00      	nop
 800a6e2:	e000      	b.n	800a6e6 <tcp_parseopt+0xd2>
            return;
 800a6e4:	bf00      	nop
      }
    }
  }
}
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	08013b28 	.word	0x08013b28
 800a6f0:	08013f8c 	.word	0x08013f8c
 800a6f4:	08013b74 	.word	0x08013b74
 800a6f8:	20008074 	.word	0x20008074
 800a6fc:	2000807c 	.word	0x2000807c

0800a700 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a704:	4b05      	ldr	r3, [pc, #20]	@ (800a71c <tcp_trigger_input_pcb_close+0x1c>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	f043 0310 	orr.w	r3, r3, #16
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	4b03      	ldr	r3, [pc, #12]	@ (800a71c <tcp_trigger_input_pcb_close+0x1c>)
 800a710:	701a      	strb	r2, [r3, #0]
}
 800a712:	bf00      	nop
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	2000808d 	.word	0x2000808d

0800a720 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <tcp_route+0x28>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	7a1b      	ldrb	r3, [r3, #8]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	7a1b      	ldrb	r3, [r3, #8]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fb f8a6 	bl	8005890 <netif_get_by_index>
 800a744:	4603      	mov	r3, r0
 800a746:	e003      	b.n	800a750 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f005 fc67 	bl	801001c <ip4_route>
 800a74e:	4603      	mov	r3, r0
  }
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a758:	b590      	push	{r4, r7, lr}
 800a75a:	b087      	sub	sp, #28
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d105      	bne.n	800a77a <tcp_create_segment+0x22>
 800a76e:	4b43      	ldr	r3, [pc, #268]	@ (800a87c <tcp_create_segment+0x124>)
 800a770:	22a3      	movs	r2, #163	@ 0xa3
 800a772:	4943      	ldr	r1, [pc, #268]	@ (800a880 <tcp_create_segment+0x128>)
 800a774:	4843      	ldr	r0, [pc, #268]	@ (800a884 <tcp_create_segment+0x12c>)
 800a776:	f006 ffeb 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d105      	bne.n	800a78c <tcp_create_segment+0x34>
 800a780:	4b3e      	ldr	r3, [pc, #248]	@ (800a87c <tcp_create_segment+0x124>)
 800a782:	22a4      	movs	r2, #164	@ 0xa4
 800a784:	4940      	ldr	r1, [pc, #256]	@ (800a888 <tcp_create_segment+0x130>)
 800a786:	483f      	ldr	r0, [pc, #252]	@ (800a884 <tcp_create_segment+0x12c>)
 800a788:	f006 ffe2 	bl	8011750 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a78c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a79a:	2003      	movs	r0, #3
 800a79c:	f7fa fce6 	bl	800516c <memp_malloc>
 800a7a0:	6138      	str	r0, [r7, #16]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d104      	bne.n	800a7b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a7a8:	68b8      	ldr	r0, [r7, #8]
 800a7aa:	f7fb fbd1 	bl	8005f50 <pbuf_free>
    return NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e060      	b.n	800a874 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a7b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	891a      	ldrh	r2, [r3, #8]
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d205      	bcs.n	800a7de <tcp_create_segment+0x86>
 800a7d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a87c <tcp_create_segment+0x124>)
 800a7d4:	22b0      	movs	r2, #176	@ 0xb0
 800a7d6:	492d      	ldr	r1, [pc, #180]	@ (800a88c <tcp_create_segment+0x134>)
 800a7d8:	482a      	ldr	r0, [pc, #168]	@ (800a884 <tcp_create_segment+0x12c>)
 800a7da:	f006 ffb9 	bl	8011750 <iprintf>
  seg->len = p->tot_len - optlen;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	891a      	ldrh	r2, [r3, #8]
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a7ee:	2114      	movs	r1, #20
 800a7f0:	68b8      	ldr	r0, [r7, #8]
 800a7f2:	f7fb fb17 	bl	8005e24 <pbuf_add_header>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a7fc:	6938      	ldr	r0, [r7, #16]
 800a7fe:	f7fc ffe6 	bl	80077ce <tcp_seg_free>
    return NULL;
 800a802:	2300      	movs	r3, #0
 800a804:	e036      	b.n	800a874 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8ada      	ldrh	r2, [r3, #22]
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	68dc      	ldr	r4, [r3, #12]
 800a818:	4610      	mov	r0, r2
 800a81a:	f7f9 fffd 	bl	8004818 <lwip_htons>
 800a81e:	4603      	mov	r3, r0
 800a820:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8b1a      	ldrh	r2, [r3, #24]
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	68dc      	ldr	r4, [r3, #12]
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7f9 fff4 	bl	8004818 <lwip_htons>
 800a830:	4603      	mov	r3, r0
 800a832:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	68dc      	ldr	r4, [r3, #12]
 800a838:	6838      	ldr	r0, [r7, #0]
 800a83a:	f7fa f802 	bl	8004842 <lwip_htonl>
 800a83e:	4603      	mov	r3, r0
 800a840:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a842:	7dfb      	ldrb	r3, [r7, #23]
 800a844:	089b      	lsrs	r3, r3, #2
 800a846:	b2db      	uxtb	r3, r3
 800a848:	3305      	adds	r3, #5
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	031b      	lsls	r3, r3, #12
 800a84e:	b29a      	uxth	r2, r3
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	b29b      	uxth	r3, r3
 800a854:	4313      	orrs	r3, r2
 800a856:	b29a      	uxth	r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	68dc      	ldr	r4, [r3, #12]
 800a85c:	4610      	mov	r0, r2
 800a85e:	f7f9 ffdb 	bl	8004818 <lwip_htons>
 800a862:	4603      	mov	r3, r0
 800a864:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	749a      	strb	r2, [r3, #18]
 800a86e:	2200      	movs	r2, #0
 800a870:	74da      	strb	r2, [r3, #19]
  return seg;
 800a872:	693b      	ldr	r3, [r7, #16]
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}
 800a87c:	08013fa8 	.word	0x08013fa8
 800a880:	08013fdc 	.word	0x08013fdc
 800a884:	08013ffc 	.word	0x08013ffc
 800a888:	08014024 	.word	0x08014024
 800a88c:	08014048 	.word	0x08014048

0800a890 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	607b      	str	r3, [r7, #4]
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]
 800a89c:	460b      	mov	r3, r1
 800a89e:	81bb      	strh	r3, [r7, #12]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a8a4:	89bb      	ldrh	r3, [r7, #12]
 800a8a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d105      	bne.n	800a8ba <tcp_pbuf_prealloc+0x2a>
 800a8ae:	4b30      	ldr	r3, [pc, #192]	@ (800a970 <tcp_pbuf_prealloc+0xe0>)
 800a8b0:	22e8      	movs	r2, #232	@ 0xe8
 800a8b2:	4930      	ldr	r1, [pc, #192]	@ (800a974 <tcp_pbuf_prealloc+0xe4>)
 800a8b4:	4830      	ldr	r0, [pc, #192]	@ (800a978 <tcp_pbuf_prealloc+0xe8>)
 800a8b6:	f006 ff4b 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d105      	bne.n	800a8cc <tcp_pbuf_prealloc+0x3c>
 800a8c0:	4b2b      	ldr	r3, [pc, #172]	@ (800a970 <tcp_pbuf_prealloc+0xe0>)
 800a8c2:	22e9      	movs	r2, #233	@ 0xe9
 800a8c4:	492d      	ldr	r1, [pc, #180]	@ (800a97c <tcp_pbuf_prealloc+0xec>)
 800a8c6:	482c      	ldr	r0, [pc, #176]	@ (800a978 <tcp_pbuf_prealloc+0xe8>)
 800a8c8:	f006 ff42 	bl	8011750 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a8cc:	89ba      	ldrh	r2, [r7, #12]
 800a8ce:	897b      	ldrh	r3, [r7, #10]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d221      	bcs.n	800a918 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a8d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a8d8:	f003 0302 	and.w	r3, r3, #2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d111      	bne.n	800a904 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	8b5b      	ldrh	r3, [r3, #26]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d115      	bne.n	800a918 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a8ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d007      	beq.n	800a904 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800a900:	2b00      	cmp	r3, #0
 800a902:	d009      	beq.n	800a918 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a904:	89bb      	ldrh	r3, [r7, #12]
 800a906:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800a90a:	f023 0203 	bic.w	r2, r3, #3
 800a90e:	897b      	ldrh	r3, [r7, #10]
 800a910:	4293      	cmp	r3, r2
 800a912:	bf28      	it	cs
 800a914:	4613      	movcs	r3, r2
 800a916:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a918:	8af9      	ldrh	r1, [r7, #22]
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a920:	4618      	mov	r0, r3
 800a922:	f7fb f831 	bl	8005988 <pbuf_alloc>
 800a926:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d101      	bne.n	800a932 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	e019      	b.n	800a966 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d006      	beq.n	800a948 <tcp_pbuf_prealloc+0xb8>
 800a93a:	4b0d      	ldr	r3, [pc, #52]	@ (800a970 <tcp_pbuf_prealloc+0xe0>)
 800a93c:	f240 120b 	movw	r2, #267	@ 0x10b
 800a940:	490f      	ldr	r1, [pc, #60]	@ (800a980 <tcp_pbuf_prealloc+0xf0>)
 800a942:	480d      	ldr	r0, [pc, #52]	@ (800a978 <tcp_pbuf_prealloc+0xe8>)
 800a944:	f006 ff04 	bl	8011750 <iprintf>
  *oversize = p->len - length;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	895a      	ldrh	r2, [r3, #10]
 800a94c:	89bb      	ldrh	r3, [r7, #12]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	b29a      	uxth	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	89ba      	ldrh	r2, [r7, #12]
 800a95a:	811a      	strh	r2, [r3, #8]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	891a      	ldrh	r2, [r3, #8]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	815a      	strh	r2, [r3, #10]
  return p;
 800a964:	693b      	ldr	r3, [r7, #16]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	08013fa8 	.word	0x08013fa8
 800a974:	08014060 	.word	0x08014060
 800a978:	08013ffc 	.word	0x08013ffc
 800a97c:	08014084 	.word	0x08014084
 800a980:	080140a4 	.word	0x080140a4

0800a984 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d106      	bne.n	800a9a4 <tcp_write_checks+0x20>
 800a996:	4b33      	ldr	r3, [pc, #204]	@ (800aa64 <tcp_write_checks+0xe0>)
 800a998:	f240 1233 	movw	r2, #307	@ 0x133
 800a99c:	4932      	ldr	r1, [pc, #200]	@ (800aa68 <tcp_write_checks+0xe4>)
 800a99e:	4833      	ldr	r0, [pc, #204]	@ (800aa6c <tcp_write_checks+0xe8>)
 800a9a0:	f006 fed6 	bl	8011750 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	7d1b      	ldrb	r3, [r3, #20]
 800a9a8:	2b04      	cmp	r3, #4
 800a9aa:	d00e      	beq.n	800a9ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a9b0:	2b07      	cmp	r3, #7
 800a9b2:	d00a      	beq.n	800a9ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d006      	beq.n	800a9ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d002      	beq.n	800a9ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a9c4:	f06f 030a 	mvn.w	r3, #10
 800a9c8:	e048      	b.n	800aa5c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a9ca:	887b      	ldrh	r3, [r7, #2]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <tcp_write_checks+0x50>
    return ERR_OK;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e043      	b.n	800aa5c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a9da:	887a      	ldrh	r2, [r7, #2]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d909      	bls.n	800a9f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	8b5b      	ldrh	r3, [r3, #26]
 800a9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f2:	e033      	b.n	800aa5c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a9fa:	2b08      	cmp	r3, #8
 800a9fc:	d909      	bls.n	800aa12 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	8b5b      	ldrh	r3, [r3, #26]
 800aa02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa06:	b29a      	uxth	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	e024      	b.n	800aa5c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00f      	beq.n	800aa3c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11a      	bne.n	800aa5a <tcp_write_checks+0xd6>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d116      	bne.n	800aa5a <tcp_write_checks+0xd6>
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <tcp_write_checks+0xe0>)
 800aa2e:	f240 1255 	movw	r2, #341	@ 0x155
 800aa32:	490f      	ldr	r1, [pc, #60]	@ (800aa70 <tcp_write_checks+0xec>)
 800aa34:	480d      	ldr	r0, [pc, #52]	@ (800aa6c <tcp_write_checks+0xe8>)
 800aa36:	f006 fe8b 	bl	8011750 <iprintf>
 800aa3a:	e00e      	b.n	800aa5a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d103      	bne.n	800aa4c <tcp_write_checks+0xc8>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d006      	beq.n	800aa5a <tcp_write_checks+0xd6>
 800aa4c:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <tcp_write_checks+0xe0>)
 800aa4e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800aa52:	4908      	ldr	r1, [pc, #32]	@ (800aa74 <tcp_write_checks+0xf0>)
 800aa54:	4805      	ldr	r0, [pc, #20]	@ (800aa6c <tcp_write_checks+0xe8>)
 800aa56:	f006 fe7b 	bl	8011750 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	08013fa8 	.word	0x08013fa8
 800aa68:	080140b8 	.word	0x080140b8
 800aa6c:	08013ffc 	.word	0x08013ffc
 800aa70:	080140d8 	.word	0x080140d8
 800aa74:	08014114 	.word	0x08014114

0800aa78 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800aa78:	b590      	push	{r4, r7, lr}
 800aa7a:	b09b      	sub	sp, #108	@ 0x6c
 800aa7c:	af04      	add	r7, sp, #16
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4611      	mov	r1, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	460b      	mov	r3, r1
 800aa88:	80fb      	strh	r3, [r7, #6]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa96:	2300      	movs	r3, #0
 800aa98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800aab6:	2300      	movs	r3, #0
 800aab8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d109      	bne.n	800aad4 <tcp_write+0x5c>
 800aac0:	4ba4      	ldr	r3, [pc, #656]	@ (800ad54 <tcp_write+0x2dc>)
 800aac2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800aac6:	49a4      	ldr	r1, [pc, #656]	@ (800ad58 <tcp_write+0x2e0>)
 800aac8:	48a4      	ldr	r0, [pc, #656]	@ (800ad5c <tcp_write+0x2e4>)
 800aaca:	f006 fe41 	bl	8011750 <iprintf>
 800aace:	f06f 030f 	mvn.w	r3, #15
 800aad2:	e32a      	b.n	800b12a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aae2:	4293      	cmp	r3, r2
 800aae4:	bf28      	it	cs
 800aae6:	4613      	movcs	r3, r2
 800aae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800aaea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <tcp_write+0x7e>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aaf4:	e000      	b.n	800aaf8 <tcp_write+0x80>
 800aaf6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aaf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d109      	bne.n	800ab14 <tcp_write+0x9c>
 800ab00:	4b94      	ldr	r3, [pc, #592]	@ (800ad54 <tcp_write+0x2dc>)
 800ab02:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800ab06:	4996      	ldr	r1, [pc, #600]	@ (800ad60 <tcp_write+0x2e8>)
 800ab08:	4894      	ldr	r0, [pc, #592]	@ (800ad5c <tcp_write+0x2e4>)
 800ab0a:	f006 fe21 	bl	8011750 <iprintf>
 800ab0e:	f06f 030f 	mvn.w	r3, #15
 800ab12:	e30a      	b.n	800b12a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ab14:	88fb      	ldrh	r3, [r7, #6]
 800ab16:	4619      	mov	r1, r3
 800ab18:	68f8      	ldr	r0, [r7, #12]
 800ab1a:	f7ff ff33 	bl	800a984 <tcp_write_checks>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800ab24:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <tcp_write+0xba>
    return err;
 800ab2c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800ab30:	e2fb      	b.n	800b12a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ab38:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f000 80f6 	beq.w	800ad38 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab50:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab52:	e002      	b.n	800ab5a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ab54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ab5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1f8      	bne.n	800ab54 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ab62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab64:	7a9b      	ldrb	r3, [r3, #10]
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	f003 0304 	and.w	r3, r3, #4
 800ab6e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ab70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab74:	891b      	ldrh	r3, [r3, #8]
 800ab76:	4619      	mov	r1, r3
 800ab78:	8c3b      	ldrh	r3, [r7, #32]
 800ab7a:	440b      	add	r3, r1
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	da06      	bge.n	800ab8e <tcp_write+0x116>
 800ab80:	4b74      	ldr	r3, [pc, #464]	@ (800ad54 <tcp_write+0x2dc>)
 800ab82:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ab86:	4977      	ldr	r1, [pc, #476]	@ (800ad64 <tcp_write+0x2ec>)
 800ab88:	4874      	ldr	r0, [pc, #464]	@ (800ad5c <tcp_write+0x2e4>)
 800ab8a:	f006 fde1 	bl	8011750 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ab8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab90:	891a      	ldrh	r2, [r3, #8]
 800ab92:	8c3b      	ldrh	r3, [r7, #32]
 800ab94:	4413      	add	r3, r2
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800aba4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800aba6:	8a7b      	ldrh	r3, [r7, #18]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d026      	beq.n	800abfa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800abac:	8a7b      	ldrh	r3, [r7, #18]
 800abae:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d206      	bcs.n	800abc2 <tcp_write+0x14a>
 800abb4:	4b67      	ldr	r3, [pc, #412]	@ (800ad54 <tcp_write+0x2dc>)
 800abb6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800abba:	496b      	ldr	r1, [pc, #428]	@ (800ad68 <tcp_write+0x2f0>)
 800abbc:	4867      	ldr	r0, [pc, #412]	@ (800ad5c <tcp_write+0x2e4>)
 800abbe:	f006 fdc7 	bl	8011750 <iprintf>
      seg = last_unsent;
 800abc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800abc6:	8a7b      	ldrh	r3, [r7, #18]
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	4293      	cmp	r3, r2
 800abcc:	bf28      	it	cs
 800abce:	4613      	movcs	r3, r2
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800abd4:	4293      	cmp	r3, r2
 800abd6:	bf28      	it	cs
 800abd8:	4613      	movcs	r3, r2
 800abda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800abdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800abe0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abe2:	4413      	add	r3, r2
 800abe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800abe8:	8a7a      	ldrh	r2, [r7, #18]
 800abea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abec:	1ad3      	subs	r3, r2, r3
 800abee:	b29b      	uxth	r3, r3
 800abf0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800abf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800abf4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800abfa:	8a7b      	ldrh	r3, [r7, #18]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <tcp_write+0x1a0>
 800ac00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ac04:	88fb      	ldrh	r3, [r7, #6]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d006      	beq.n	800ac18 <tcp_write+0x1a0>
 800ac0a:	4b52      	ldr	r3, [pc, #328]	@ (800ad54 <tcp_write+0x2dc>)
 800ac0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac10:	4956      	ldr	r1, [pc, #344]	@ (800ad6c <tcp_write+0x2f4>)
 800ac12:	4852      	ldr	r0, [pc, #328]	@ (800ad5c <tcp_write+0x2e4>)
 800ac14:	f006 fd9c 	bl	8011750 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ac18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ac1c:	88fb      	ldrh	r3, [r7, #6]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	f080 8167 	bcs.w	800aef2 <tcp_write+0x47a>
 800ac24:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 8163 	beq.w	800aef2 <tcp_write+0x47a>
 800ac2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac2e:	891b      	ldrh	r3, [r3, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 815e 	beq.w	800aef2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ac36:	88fa      	ldrh	r2, [r7, #6]
 800ac38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac3c:	1ad2      	subs	r2, r2, r3
 800ac3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ac40:	4293      	cmp	r3, r2
 800ac42:	bfa8      	it	ge
 800ac44:	4613      	movge	r3, r2
 800ac46:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ac48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ac4c:	797b      	ldrb	r3, [r7, #5]
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d027      	beq.n	800aca6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ac56:	f107 0012 	add.w	r0, r7, #18
 800ac5a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ac5c:	8bf9      	ldrh	r1, [r7, #30]
 800ac5e:	2301      	movs	r3, #1
 800ac60:	9302      	str	r3, [sp, #8]
 800ac62:	797b      	ldrb	r3, [r7, #5]
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	f7ff fe0f 	bl	800a890 <tcp_pbuf_prealloc>
 800ac72:	6578      	str	r0, [r7, #84]	@ 0x54
 800ac74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 8225 	beq.w	800b0c6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ac7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac7e:	6858      	ldr	r0, [r3, #4]
 800ac80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	4413      	add	r3, r2
 800ac88:	8bfa      	ldrh	r2, [r7, #30]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f006 ff4d 	bl	8011b2a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ac90:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ac92:	f7fb f9e5 	bl	8006060 <pbuf_clen>
 800ac96:	4603      	mov	r3, r0
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ac9e:	4413      	add	r3, r2
 800aca0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800aca4:	e041      	b.n	800ad2a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800aca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800acac:	e002      	b.n	800acb4 <tcp_write+0x23c>
 800acae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1f8      	bne.n	800acae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800acbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbe:	7b1b      	ldrb	r3, [r3, #12]
 800acc0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d115      	bne.n	800acf4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800acc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acce:	8952      	ldrh	r2, [r2, #10]
 800acd0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d10d      	bne.n	800acf4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800acd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d006      	beq.n	800acee <tcp_write+0x276>
 800ace0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad54 <tcp_write+0x2dc>)
 800ace2:	f240 2231 	movw	r2, #561	@ 0x231
 800ace6:	4922      	ldr	r1, [pc, #136]	@ (800ad70 <tcp_write+0x2f8>)
 800ace8:	481c      	ldr	r0, [pc, #112]	@ (800ad5c <tcp_write+0x2e4>)
 800acea:	f006 fd31 	bl	8011750 <iprintf>
          extendlen = seglen;
 800acee:	8bfb      	ldrh	r3, [r7, #30]
 800acf0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800acf2:	e01a      	b.n	800ad2a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800acf4:	8bfb      	ldrh	r3, [r7, #30]
 800acf6:	2201      	movs	r2, #1
 800acf8:	4619      	mov	r1, r3
 800acfa:	2000      	movs	r0, #0
 800acfc:	f7fa fe44 	bl	8005988 <pbuf_alloc>
 800ad00:	6578      	str	r0, [r7, #84]	@ 0x54
 800ad02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 81e0 	beq.w	800b0ca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ad0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	441a      	add	r2, r3
 800ad12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad14:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ad16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ad18:	f7fb f9a2 	bl	8006060 <pbuf_clen>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ad24:	4413      	add	r3, r2
 800ad26:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ad2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ad2e:	8bfb      	ldrh	r3, [r7, #30]
 800ad30:	4413      	add	r3, r2
 800ad32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800ad36:	e0dc      	b.n	800aef2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f000 80d7 	beq.w	800aef2 <tcp_write+0x47a>
 800ad44:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <tcp_write+0x2dc>)
 800ad46:	f240 224a 	movw	r2, #586	@ 0x24a
 800ad4a:	490a      	ldr	r1, [pc, #40]	@ (800ad74 <tcp_write+0x2fc>)
 800ad4c:	4803      	ldr	r0, [pc, #12]	@ (800ad5c <tcp_write+0x2e4>)
 800ad4e:	f006 fcff 	bl	8011750 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ad52:	e0ce      	b.n	800aef2 <tcp_write+0x47a>
 800ad54:	08013fa8 	.word	0x08013fa8
 800ad58:	08014148 	.word	0x08014148
 800ad5c:	08013ffc 	.word	0x08013ffc
 800ad60:	08014160 	.word	0x08014160
 800ad64:	08014194 	.word	0x08014194
 800ad68:	080141ac 	.word	0x080141ac
 800ad6c:	080141cc 	.word	0x080141cc
 800ad70:	080141ec 	.word	0x080141ec
 800ad74:	08014218 	.word	0x08014218
    struct pbuf *p;
    u16_t left = len - pos;
 800ad78:	88fa      	ldrh	r2, [r7, #6]
 800ad7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ad82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ad8e:	8b7a      	ldrh	r2, [r7, #26]
 800ad90:	8bbb      	ldrh	r3, [r7, #28]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	bf28      	it	cs
 800ad96:	4613      	movcs	r3, r2
 800ad98:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ad9a:	797b      	ldrb	r3, [r7, #5]
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d036      	beq.n	800ae12 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ada4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	8b3b      	ldrh	r3, [r7, #24]
 800adac:	4413      	add	r3, r2
 800adae:	b299      	uxth	r1, r3
 800adb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf0c      	ite	eq
 800adb6:	2301      	moveq	r3, #1
 800adb8:	2300      	movne	r3, #0
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	f107 0012 	add.w	r0, r7, #18
 800adc0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800adc2:	9302      	str	r3, [sp, #8]
 800adc4:	797b      	ldrb	r3, [r7, #5]
 800adc6:	9301      	str	r3, [sp, #4]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	4603      	mov	r3, r0
 800adce:	2036      	movs	r0, #54	@ 0x36
 800add0:	f7ff fd5e 	bl	800a890 <tcp_pbuf_prealloc>
 800add4:	6338      	str	r0, [r7, #48]	@ 0x30
 800add6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 8178 	beq.w	800b0ce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800adde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade0:	895b      	ldrh	r3, [r3, #10]
 800ade2:	8b3a      	ldrh	r2, [r7, #24]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d906      	bls.n	800adf6 <tcp_write+0x37e>
 800ade8:	4b8c      	ldr	r3, [pc, #560]	@ (800b01c <tcp_write+0x5a4>)
 800adea:	f240 2266 	movw	r2, #614	@ 0x266
 800adee:	498c      	ldr	r1, [pc, #560]	@ (800b020 <tcp_write+0x5a8>)
 800adf0:	488c      	ldr	r0, [pc, #560]	@ (800b024 <tcp_write+0x5ac>)
 800adf2:	f006 fcad 	bl	8011750 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800adf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf8:	685a      	ldr	r2, [r3, #4]
 800adfa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800adfe:	18d0      	adds	r0, r2, r3
 800ae00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	8b3a      	ldrh	r2, [r7, #24]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f006 fe8d 	bl	8011b2a <memcpy>
 800ae10:	e02f      	b.n	800ae72 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ae12:	8a7b      	ldrh	r3, [r7, #18]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d006      	beq.n	800ae26 <tcp_write+0x3ae>
 800ae18:	4b80      	ldr	r3, [pc, #512]	@ (800b01c <tcp_write+0x5a4>)
 800ae1a:	f240 2271 	movw	r2, #625	@ 0x271
 800ae1e:	4982      	ldr	r1, [pc, #520]	@ (800b028 <tcp_write+0x5b0>)
 800ae20:	4880      	ldr	r0, [pc, #512]	@ (800b024 <tcp_write+0x5ac>)
 800ae22:	f006 fc95 	bl	8011750 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ae26:	8b3b      	ldrh	r3, [r7, #24]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	2036      	movs	r0, #54	@ 0x36
 800ae2e:	f7fa fdab 	bl	8005988 <pbuf_alloc>
 800ae32:	6178      	str	r0, [r7, #20]
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 814b 	beq.w	800b0d2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ae3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	441a      	add	r2, r3
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ae48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ae52:	4619      	mov	r1, r3
 800ae54:	2036      	movs	r0, #54	@ 0x36
 800ae56:	f7fa fd97 	bl	8005988 <pbuf_alloc>
 800ae5a:	6338      	str	r0, [r7, #48]	@ 0x30
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ae62:	6978      	ldr	r0, [r7, #20]
 800ae64:	f7fb f874 	bl	8005f50 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ae68:	e136      	b.n	800b0d8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ae6a:	6979      	ldr	r1, [r7, #20]
 800ae6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae6e:	f7fb f931 	bl	80060d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ae72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae74:	f7fb f8f4 	bl	8006060 <pbuf_clen>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae80:	4413      	add	r3, r2
 800ae82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800ae86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ae8a:	2b09      	cmp	r3, #9
 800ae8c:	d903      	bls.n	800ae96 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ae8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae90:	f7fb f85e 	bl	8005f50 <pbuf_free>
      goto memerr;
 800ae94:	e120      	b.n	800b0d8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ae9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ae9e:	441a      	add	r2, r3
 800aea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	4613      	mov	r3, r2
 800aea8:	2200      	movs	r2, #0
 800aeaa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff fc53 	bl	800a758 <tcp_create_segment>
 800aeb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800aeb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f000 810d 	beq.w	800b0d6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800aebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <tcp_write+0x450>
      queue = seg;
 800aec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aec6:	e00c      	b.n	800aee2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800aec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d106      	bne.n	800aedc <tcp_write+0x464>
 800aece:	4b53      	ldr	r3, [pc, #332]	@ (800b01c <tcp_write+0x5a4>)
 800aed0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800aed4:	4955      	ldr	r1, [pc, #340]	@ (800b02c <tcp_write+0x5b4>)
 800aed6:	4853      	ldr	r0, [pc, #332]	@ (800b024 <tcp_write+0x5ac>)
 800aed8:	f006 fc3a 	bl	8011750 <iprintf>
      prev_seg->next = seg;
 800aedc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aede:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aee0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800aee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800aee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aeea:	8b3b      	ldrh	r3, [r7, #24]
 800aeec:	4413      	add	r3, r2
 800aeee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800aef2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	f4ff af3d 	bcc.w	800ad78 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800aefe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af00:	2b00      	cmp	r3, #0
 800af02:	d02c      	beq.n	800af5e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800af04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af0a:	e01e      	b.n	800af4a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	891a      	ldrh	r2, [r3, #8]
 800af10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af12:	4413      	add	r3, r2
 800af14:	b29a      	uxth	r2, r3
 800af16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af18:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800af1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d110      	bne.n	800af44 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800af22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af28:	8952      	ldrh	r2, [r2, #10]
 800af2a:	4413      	add	r3, r2
 800af2c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	4618      	mov	r0, r3
 800af32:	f006 fdfa 	bl	8011b2a <memcpy>
        p->len += oversize_used;
 800af36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af38:	895a      	ldrh	r2, [r3, #10]
 800af3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af3c:	4413      	add	r3, r2
 800af3e:	b29a      	uxth	r2, r3
 800af40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af42:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800af44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1dd      	bne.n	800af0c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800af50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af52:	891a      	ldrh	r2, [r3, #8]
 800af54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800af56:	4413      	add	r3, r2
 800af58:	b29a      	uxth	r2, r3
 800af5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800af5e:	8a7a      	ldrh	r2, [r7, #18]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800af66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d018      	beq.n	800af9e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800af6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d106      	bne.n	800af80 <tcp_write+0x508>
 800af72:	4b2a      	ldr	r3, [pc, #168]	@ (800b01c <tcp_write+0x5a4>)
 800af74:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800af78:	492d      	ldr	r1, [pc, #180]	@ (800b030 <tcp_write+0x5b8>)
 800af7a:	482a      	ldr	r0, [pc, #168]	@ (800b024 <tcp_write+0x5ac>)
 800af7c:	f006 fbe8 	bl	8011750 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800af80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af86:	4618      	mov	r0, r3
 800af88:	f7fb f8a4 	bl	80060d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800af8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af8e:	891a      	ldrh	r2, [r3, #8]
 800af90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af92:	891b      	ldrh	r3, [r3, #8]
 800af94:	4413      	add	r3, r2
 800af96:	b29a      	uxth	r2, r3
 800af98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af9a:	811a      	strh	r2, [r3, #8]
 800af9c:	e037      	b.n	800b00e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800af9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d034      	beq.n	800b00e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800afa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <tcp_write+0x53a>
 800afaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d106      	bne.n	800afc0 <tcp_write+0x548>
 800afb2:	4b1a      	ldr	r3, [pc, #104]	@ (800b01c <tcp_write+0x5a4>)
 800afb4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800afb8:	491e      	ldr	r1, [pc, #120]	@ (800b034 <tcp_write+0x5bc>)
 800afba:	481a      	ldr	r0, [pc, #104]	@ (800b024 <tcp_write+0x5ac>)
 800afbc:	f006 fbc8 	bl	8011750 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800afc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afc6:	e009      	b.n	800afdc <tcp_write+0x564>
      p->tot_len += extendlen;
 800afc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afca:	891a      	ldrh	r2, [r3, #8]
 800afcc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800afce:	4413      	add	r3, r2
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800afd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1f1      	bne.n	800afc8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800afe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe6:	891a      	ldrh	r2, [r3, #8]
 800afe8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800afea:	4413      	add	r3, r2
 800afec:	b29a      	uxth	r2, r3
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800aff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff4:	895a      	ldrh	r2, [r3, #10]
 800aff6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aff8:	4413      	add	r3, r2
 800affa:	b29a      	uxth	r2, r3
 800affc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b000:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b002:	891a      	ldrh	r2, [r3, #8]
 800b004:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b006:	4413      	add	r3, r2
 800b008:	b29a      	uxth	r2, r3
 800b00a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b00c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b00e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b010:	2b00      	cmp	r3, #0
 800b012:	d111      	bne.n	800b038 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b018:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b01a:	e010      	b.n	800b03e <tcp_write+0x5c6>
 800b01c:	08013fa8 	.word	0x08013fa8
 800b020:	08014248 	.word	0x08014248
 800b024:	08013ffc 	.word	0x08013ffc
 800b028:	08014288 	.word	0x08014288
 800b02c:	08014298 	.word	0x08014298
 800b030:	080142ac 	.word	0x080142ac
 800b034:	080142e4 	.word	0x080142e4
  } else {
    last_unsent->next = queue;
 800b038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b03a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b03c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	b29a      	uxth	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b062:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00e      	beq.n	800b08e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <tcp_write+0x616>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d106      	bne.n	800b08e <tcp_write+0x616>
 800b080:	4b2c      	ldr	r3, [pc, #176]	@ (800b134 <tcp_write+0x6bc>)
 800b082:	f240 3212 	movw	r2, #786	@ 0x312
 800b086:	492c      	ldr	r1, [pc, #176]	@ (800b138 <tcp_write+0x6c0>)
 800b088:	482c      	ldr	r0, [pc, #176]	@ (800b13c <tcp_write+0x6c4>)
 800b08a:	f006 fb61 	bl	8011750 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d016      	beq.n	800b0c2 <tcp_write+0x64a>
 800b094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d012      	beq.n	800b0c2 <tcp_write+0x64a>
 800b09c:	797b      	ldrb	r3, [r7, #5]
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10d      	bne.n	800b0c2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b0a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	899b      	ldrh	r3, [r3, #12]
 800b0ac:	b29c      	uxth	r4, r3
 800b0ae:	2008      	movs	r0, #8
 800b0b0:	f7f9 fbb2 	bl	8004818 <lwip_htons>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	4322      	orrs	r2, r4
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e031      	b.n	800b12a <tcp_write+0x6b2>
          goto memerr;
 800b0c6:	bf00      	nop
 800b0c8:	e006      	b.n	800b0d8 <tcp_write+0x660>
            goto memerr;
 800b0ca:	bf00      	nop
 800b0cc:	e004      	b.n	800b0d8 <tcp_write+0x660>
        goto memerr;
 800b0ce:	bf00      	nop
 800b0d0:	e002      	b.n	800b0d8 <tcp_write+0x660>
        goto memerr;
 800b0d2:	bf00      	nop
 800b0d4:	e000      	b.n	800b0d8 <tcp_write+0x660>
      goto memerr;
 800b0d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8b5b      	ldrh	r3, [r3, #26]
 800b0dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b0ec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b0ee:	f7fa ff2f 	bl	8005f50 <pbuf_free>
  }
  if (queue != NULL) {
 800b0f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <tcp_write+0x686>
    tcp_segs_free(queue);
 800b0f8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b0fa:	f7fc fb53 	bl	80077a4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00e      	beq.n	800b126 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <tcp_write+0x6ae>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <tcp_write+0x6ae>
 800b118:	4b06      	ldr	r3, [pc, #24]	@ (800b134 <tcp_write+0x6bc>)
 800b11a:	f240 3227 	movw	r2, #807	@ 0x327
 800b11e:	4906      	ldr	r1, [pc, #24]	@ (800b138 <tcp_write+0x6c0>)
 800b120:	4806      	ldr	r0, [pc, #24]	@ (800b13c <tcp_write+0x6c4>)
 800b122:	f006 fb15 	bl	8011750 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	375c      	adds	r7, #92	@ 0x5c
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd90      	pop	{r4, r7, pc}
 800b132:	bf00      	nop
 800b134:	08013fa8 	.word	0x08013fa8
 800b138:	0801431c 	.word	0x0801431c
 800b13c:	08013ffc 	.word	0x08013ffc

0800b140 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b140:	b590      	push	{r4, r7, lr}
 800b142:	b08b      	sub	sp, #44	@ 0x2c
 800b144:	af02      	add	r7, sp, #8
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	61fb      	str	r3, [r7, #28]
 800b150:	2300      	movs	r3, #0
 800b152:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b154:	2300      	movs	r3, #0
 800b156:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <tcp_split_unsent_seg+0x2c>
 800b15e:	4b95      	ldr	r3, [pc, #596]	@ (800b3b4 <tcp_split_unsent_seg+0x274>)
 800b160:	f240 324b 	movw	r2, #843	@ 0x34b
 800b164:	4994      	ldr	r1, [pc, #592]	@ (800b3b8 <tcp_split_unsent_seg+0x278>)
 800b166:	4895      	ldr	r0, [pc, #596]	@ (800b3bc <tcp_split_unsent_seg+0x27c>)
 800b168:	f006 faf2 	bl	8011750 <iprintf>

  useg = pcb->unsent;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b170:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d102      	bne.n	800b17e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b178:	f04f 33ff 	mov.w	r3, #4294967295
 800b17c:	e116      	b.n	800b3ac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b17e:	887b      	ldrh	r3, [r7, #2]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d109      	bne.n	800b198 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b184:	4b8b      	ldr	r3, [pc, #556]	@ (800b3b4 <tcp_split_unsent_seg+0x274>)
 800b186:	f240 3253 	movw	r2, #851	@ 0x353
 800b18a:	498d      	ldr	r1, [pc, #564]	@ (800b3c0 <tcp_split_unsent_seg+0x280>)
 800b18c:	488b      	ldr	r0, [pc, #556]	@ (800b3bc <tcp_split_unsent_seg+0x27c>)
 800b18e:	f006 fadf 	bl	8011750 <iprintf>
    return ERR_VAL;
 800b192:	f06f 0305 	mvn.w	r3, #5
 800b196:	e109      	b.n	800b3ac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	891b      	ldrh	r3, [r3, #8]
 800b19c:	887a      	ldrh	r2, [r7, #2]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d301      	bcc.n	800b1a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e102      	b.n	800b3ac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1aa:	887a      	ldrh	r2, [r7, #2]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d906      	bls.n	800b1be <tcp_split_unsent_seg+0x7e>
 800b1b0:	4b80      	ldr	r3, [pc, #512]	@ (800b3b4 <tcp_split_unsent_seg+0x274>)
 800b1b2:	f240 325b 	movw	r2, #859	@ 0x35b
 800b1b6:	4983      	ldr	r1, [pc, #524]	@ (800b3c4 <tcp_split_unsent_seg+0x284>)
 800b1b8:	4880      	ldr	r0, [pc, #512]	@ (800b3bc <tcp_split_unsent_seg+0x27c>)
 800b1ba:	f006 fac9 	bl	8011750 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	891b      	ldrh	r3, [r3, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <tcp_split_unsent_seg+0x94>
 800b1c6:	4b7b      	ldr	r3, [pc, #492]	@ (800b3b4 <tcp_split_unsent_seg+0x274>)
 800b1c8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800b1cc:	497e      	ldr	r1, [pc, #504]	@ (800b3c8 <tcp_split_unsent_seg+0x288>)
 800b1ce:	487b      	ldr	r0, [pc, #492]	@ (800b3bc <tcp_split_unsent_seg+0x27c>)
 800b1d0:	f006 fabe 	bl	8011750 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	7a9b      	ldrb	r3, [r3, #10]
 800b1d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b1da:	7bfb      	ldrb	r3, [r7, #15]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	b2db      	uxtb	r3, r3
 800b1e0:	f003 0304 	and.w	r3, r3, #4
 800b1e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	891a      	ldrh	r2, [r3, #8]
 800b1ea:	887b      	ldrh	r3, [r7, #2]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b1f0:	7bbb      	ldrb	r3, [r7, #14]
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	89bb      	ldrh	r3, [r7, #12]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b1fe:	4619      	mov	r1, r3
 800b200:	2036      	movs	r0, #54	@ 0x36
 800b202:	f7fa fbc1 	bl	8005988 <pbuf_alloc>
 800b206:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 80b7 	beq.w	800b37e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	891a      	ldrh	r2, [r3, #8]
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	891b      	ldrh	r3, [r3, #8]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	887b      	ldrh	r3, [r7, #2]
 800b220:	4413      	add	r3, r2
 800b222:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	6858      	ldr	r0, [r3, #4]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	7bbb      	ldrb	r3, [r7, #14]
 800b22e:	18d1      	adds	r1, r2, r3
 800b230:	897b      	ldrh	r3, [r7, #10]
 800b232:	89ba      	ldrh	r2, [r7, #12]
 800b234:	f7fb f886 	bl	8006344 <pbuf_copy_partial>
 800b238:	4603      	mov	r3, r0
 800b23a:	461a      	mov	r2, r3
 800b23c:	89bb      	ldrh	r3, [r7, #12]
 800b23e:	4293      	cmp	r3, r2
 800b240:	f040 809f 	bne.w	800b382 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	899b      	ldrh	r3, [r3, #12]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7f9 fae3 	bl	8004818 <lwip_htons>
 800b252:	4603      	mov	r3, r0
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b25a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b25c:	2300      	movs	r3, #0
 800b25e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b260:	7efb      	ldrb	r3, [r7, #27]
 800b262:	f003 0308 	and.w	r3, r3, #8
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b26a:	7efb      	ldrb	r3, [r7, #27]
 800b26c:	f023 0308 	bic.w	r3, r3, #8
 800b270:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b272:	7ebb      	ldrb	r3, [r7, #26]
 800b274:	f043 0308 	orr.w	r3, r3, #8
 800b278:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b27a:	7efb      	ldrb	r3, [r7, #27]
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d007      	beq.n	800b294 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b284:	7efb      	ldrb	r3, [r7, #27]
 800b286:	f023 0301 	bic.w	r3, r3, #1
 800b28a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b28c:	7ebb      	ldrb	r3, [r7, #26]
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7f9 fad1 	bl	8004842 <lwip_htonl>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	887b      	ldrh	r3, [r7, #2]
 800b2a4:	18d1      	adds	r1, r2, r3
 800b2a6:	7eba      	ldrb	r2, [r7, #26]
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	6939      	ldr	r1, [r7, #16]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff fa51 	bl	800a758 <tcp_create_segment>
 800b2b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d063      	beq.n	800b386 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fa fecc 	bl	8006060 <pbuf_clen>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b2d2:	1a9b      	subs	r3, r3, r2
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	6858      	ldr	r0, [r3, #4]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	891a      	ldrh	r2, [r3, #8]
 800b2e6:	89bb      	ldrh	r3, [r7, #12]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	f7fa fca9 	bl	8005c44 <pbuf_realloc>
  useg->len -= remainder;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	891a      	ldrh	r2, [r3, #8]
 800b2f6:	89bb      	ldrh	r3, [r7, #12]
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	899b      	ldrh	r3, [r3, #12]
 800b306:	b29c      	uxth	r4, r3
 800b308:	7efb      	ldrb	r3, [r7, #27]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f9 fa83 	bl	8004818 <lwip_htons>
 800b312:	4603      	mov	r3, r0
 800b314:	461a      	mov	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	4322      	orrs	r2, r4
 800b31c:	b292      	uxth	r2, r2
 800b31e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	4618      	mov	r0, r3
 800b326:	f7fa fe9b 	bl	8006060 <pbuf_clen>
 800b32a:	4603      	mov	r3, r0
 800b32c:	461a      	mov	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b334:	4413      	add	r3, r2
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	4618      	mov	r0, r3
 800b344:	f7fa fe8c 	bl	8006060 <pbuf_clen>
 800b348:	4603      	mov	r3, r0
 800b34a:	461a      	mov	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b352:	4413      	add	r3, r2
 800b354:	b29a      	uxth	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	e016      	b.n	800b3ac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b37e:	bf00      	nop
 800b380:	e002      	b.n	800b388 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b382:	bf00      	nop
 800b384:	e000      	b.n	800b388 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b386:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d006      	beq.n	800b39c <tcp_split_unsent_seg+0x25c>
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <tcp_split_unsent_seg+0x274>)
 800b390:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b394:	490d      	ldr	r1, [pc, #52]	@ (800b3cc <tcp_split_unsent_seg+0x28c>)
 800b396:	4809      	ldr	r0, [pc, #36]	@ (800b3bc <tcp_split_unsent_seg+0x27c>)
 800b398:	f006 f9da 	bl	8011750 <iprintf>
  if (p != NULL) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b3a2:	6938      	ldr	r0, [r7, #16]
 800b3a4:	f7fa fdd4 	bl	8005f50 <pbuf_free>
  }

  return ERR_MEM;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3724      	adds	r7, #36	@ 0x24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd90      	pop	{r4, r7, pc}
 800b3b4:	08013fa8 	.word	0x08013fa8
 800b3b8:	0801433c 	.word	0x0801433c
 800b3bc:	08013ffc 	.word	0x08013ffc
 800b3c0:	08014360 	.word	0x08014360
 800b3c4:	08014384 	.word	0x08014384
 800b3c8:	08014394 	.word	0x08014394
 800b3cc:	080143a4 	.word	0x080143a4

0800b3d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b3d0:	b590      	push	{r4, r7, lr}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d106      	bne.n	800b3ec <tcp_send_fin+0x1c>
 800b3de:	4b21      	ldr	r3, [pc, #132]	@ (800b464 <tcp_send_fin+0x94>)
 800b3e0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800b3e4:	4920      	ldr	r1, [pc, #128]	@ (800b468 <tcp_send_fin+0x98>)
 800b3e6:	4821      	ldr	r0, [pc, #132]	@ (800b46c <tcp_send_fin+0x9c>)
 800b3e8:	f006 f9b2 	bl	8011750 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d02e      	beq.n	800b452 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e002      	b.n	800b402 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1f8      	bne.n	800b3fc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	899b      	ldrh	r3, [r3, #12]
 800b410:	b29b      	uxth	r3, r3
 800b412:	4618      	mov	r0, r3
 800b414:	f7f9 fa00 	bl	8004818 <lwip_htons>
 800b418:	4603      	mov	r3, r0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	f003 0307 	and.w	r3, r3, #7
 800b420:	2b00      	cmp	r3, #0
 800b422:	d116      	bne.n	800b452 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	899b      	ldrh	r3, [r3, #12]
 800b42a:	b29c      	uxth	r4, r3
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7f9 f9f3 	bl	8004818 <lwip_htons>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	4322      	orrs	r2, r4
 800b43c:	b292      	uxth	r2, r2
 800b43e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	8b5b      	ldrh	r3, [r3, #26]
 800b444:	f043 0320 	orr.w	r3, r3, #32
 800b448:	b29a      	uxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	e004      	b.n	800b45c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b452:	2101      	movs	r1, #1
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f80b 	bl	800b470 <tcp_enqueue_flags>
 800b45a:	4603      	mov	r3, r0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	bd90      	pop	{r4, r7, pc}
 800b464:	08013fa8 	.word	0x08013fa8
 800b468:	080143b0 	.word	0x080143b0
 800b46c:	08013ffc 	.word	0x08013ffc

0800b470 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08a      	sub	sp, #40	@ 0x28
 800b474:	af02      	add	r7, sp, #8
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b484:	78fb      	ldrb	r3, [r7, #3]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d106      	bne.n	800b49c <tcp_enqueue_flags+0x2c>
 800b48e:	4b67      	ldr	r3, [pc, #412]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b490:	f240 4211 	movw	r2, #1041	@ 0x411
 800b494:	4966      	ldr	r1, [pc, #408]	@ (800b630 <tcp_enqueue_flags+0x1c0>)
 800b496:	4867      	ldr	r0, [pc, #412]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b498:	f006 f95a 	bl	8011750 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d106      	bne.n	800b4b0 <tcp_enqueue_flags+0x40>
 800b4a2:	4b62      	ldr	r3, [pc, #392]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b4a4:	f240 4213 	movw	r2, #1043	@ 0x413
 800b4a8:	4963      	ldr	r1, [pc, #396]	@ (800b638 <tcp_enqueue_flags+0x1c8>)
 800b4aa:	4862      	ldr	r0, [pc, #392]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b4ac:	f006 f950 	bl	8011750 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	f003 0302 	and.w	r3, r3, #2
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d001      	beq.n	800b4be <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4be:	7ffb      	ldrb	r3, [r7, #31]
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f003 0304 	and.w	r3, r3, #4
 800b4c8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	2036      	movs	r0, #54	@ 0x36
 800b4d6:	f7fa fa57 	bl	8005988 <pbuf_alloc>
 800b4da:	6138      	str	r0, [r7, #16]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8b5b      	ldrh	r3, [r3, #26]
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f4:	e095      	b.n	800b622 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	895a      	ldrh	r2, [r3, #10]
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d206      	bcs.n	800b510 <tcp_enqueue_flags+0xa0>
 800b502:	4b4a      	ldr	r3, [pc, #296]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b504:	f240 4239 	movw	r2, #1081	@ 0x439
 800b508:	494c      	ldr	r1, [pc, #304]	@ (800b63c <tcp_enqueue_flags+0x1cc>)
 800b50a:	484a      	ldr	r0, [pc, #296]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b50c:	f006 f920 	bl	8011750 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800b514:	78fa      	ldrb	r2, [r7, #3]
 800b516:	7ffb      	ldrb	r3, [r7, #31]
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	460b      	mov	r3, r1
 800b51c:	6939      	ldr	r1, [r7, #16]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff f91a 	bl	800a758 <tcp_create_segment>
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d109      	bne.n	800b540 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	8b5b      	ldrh	r3, [r3, #26]
 800b530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b534:	b29a      	uxth	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b53a:	f04f 33ff 	mov.w	r3, #4294967295
 800b53e:	e070      	b.n	800b622 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0303 	and.w	r3, r3, #3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d006      	beq.n	800b55a <tcp_enqueue_flags+0xea>
 800b54c:	4b37      	ldr	r3, [pc, #220]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b54e:	f240 4242 	movw	r2, #1090	@ 0x442
 800b552:	493b      	ldr	r1, [pc, #236]	@ (800b640 <tcp_enqueue_flags+0x1d0>)
 800b554:	4837      	ldr	r0, [pc, #220]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b556:	f006 f8fb 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	891b      	ldrh	r3, [r3, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <tcp_enqueue_flags+0x100>
 800b562:	4b32      	ldr	r3, [pc, #200]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b564:	f240 4243 	movw	r2, #1091	@ 0x443
 800b568:	4936      	ldr	r1, [pc, #216]	@ (800b644 <tcp_enqueue_flags+0x1d4>)
 800b56a:	4832      	ldr	r0, [pc, #200]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b56c:	f006 f8f0 	bl	8011750 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d103      	bne.n	800b580 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68fa      	ldr	r2, [r7, #12]
 800b57c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b57e:	e00d      	b.n	800b59c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b584:	61bb      	str	r3, [r7, #24]
 800b586:	e002      	b.n	800b58e <tcp_enqueue_flags+0x11e>
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	61bb      	str	r3, [r7, #24]
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1f8      	bne.n	800b588 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b5a4:	78fb      	ldrb	r3, [r7, #3]
 800b5a6:	f003 0302 	and.w	r3, r3, #2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d104      	bne.n	800b5b8 <tcp_enqueue_flags+0x148>
 800b5ae:	78fb      	ldrb	r3, [r7, #3]
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d004      	beq.n	800b5c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5bc:	1c5a      	adds	r2, r3, #1
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b5c2:	78fb      	ldrb	r3, [r7, #3]
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	8b5b      	ldrh	r3, [r3, #26]
 800b5d0:	f043 0320 	orr.w	r3, r3, #32
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fa fd3e 	bl	8006060 <pbuf_clen>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b5ee:	4413      	add	r3, r2
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00e      	beq.n	800b620 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <tcp_enqueue_flags+0x1b0>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <tcp_enqueue_flags+0x1b0>
 800b612:	4b06      	ldr	r3, [pc, #24]	@ (800b62c <tcp_enqueue_flags+0x1bc>)
 800b614:	f240 4265 	movw	r2, #1125	@ 0x465
 800b618:	490b      	ldr	r1, [pc, #44]	@ (800b648 <tcp_enqueue_flags+0x1d8>)
 800b61a:	4806      	ldr	r0, [pc, #24]	@ (800b634 <tcp_enqueue_flags+0x1c4>)
 800b61c:	f006 f898 	bl	8011750 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3720      	adds	r7, #32
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	08013fa8 	.word	0x08013fa8
 800b630:	080143cc 	.word	0x080143cc
 800b634:	08013ffc 	.word	0x08013ffc
 800b638:	08014424 	.word	0x08014424
 800b63c:	08014444 	.word	0x08014444
 800b640:	08014480 	.word	0x08014480
 800b644:	08014498 	.word	0x08014498
 800b648:	080144c4 	.word	0x080144c4

0800b64c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b64c:	b5b0      	push	{r4, r5, r7, lr}
 800b64e:	b08a      	sub	sp, #40	@ 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <tcp_output+0x1c>
 800b65a:	4b8a      	ldr	r3, [pc, #552]	@ (800b884 <tcp_output+0x238>)
 800b65c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800b660:	4989      	ldr	r1, [pc, #548]	@ (800b888 <tcp_output+0x23c>)
 800b662:	488a      	ldr	r0, [pc, #552]	@ (800b88c <tcp_output+0x240>)
 800b664:	f006 f874 	bl	8011750 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	7d1b      	ldrb	r3, [r3, #20]
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d106      	bne.n	800b67e <tcp_output+0x32>
 800b670:	4b84      	ldr	r3, [pc, #528]	@ (800b884 <tcp_output+0x238>)
 800b672:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800b676:	4986      	ldr	r1, [pc, #536]	@ (800b890 <tcp_output+0x244>)
 800b678:	4884      	ldr	r0, [pc, #528]	@ (800b88c <tcp_output+0x240>)
 800b67a:	f006 f869 	bl	8011750 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b67e:	4b85      	ldr	r3, [pc, #532]	@ (800b894 <tcp_output+0x248>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d101      	bne.n	800b68c <tcp_output+0x40>
    return ERR_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	e1ce      	b.n	800ba2a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b698:	4293      	cmp	r3, r2
 800b69a:	bf28      	it	cs
 800b69c:	4613      	movcs	r3, r2
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	8b5b      	ldrh	r3, [r3, #26]
 800b6b2:	f003 0302 	and.w	r3, r3, #2
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 81aa 	beq.w	800ba10 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fdcb 	bl	800c258 <tcp_send_empty_ack>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	e1b1      	b.n	800ba2a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff f826 	bl	800a720 <tcp_route>
 800b6d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d102      	bne.n	800b6e2 <tcp_output+0x96>
    return ERR_RTE;
 800b6dc:	f06f 0303 	mvn.w	r3, #3
 800b6e0:	e1a3      	b.n	800ba2a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <tcp_output+0xa4>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d111      	bne.n	800b714 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <tcp_output+0xb0>
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	e000      	b.n	800b6fe <tcp_output+0xb2>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d102      	bne.n	800b70c <tcp_output+0xc0>
      return ERR_RTE;
 800b706:	f06f 0303 	mvn.w	r3, #3
 800b70a:	e18e      	b.n	800ba2a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f9 f891 	bl	8004842 <lwip_htonl>
 800b720:	4602      	mov	r2, r0
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b72a:	8912      	ldrh	r2, [r2, #8]
 800b72c:	4413      	add	r3, r2
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	429a      	cmp	r2, r3
 800b732:	d227      	bcs.n	800b784 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b73a:	461a      	mov	r2, r3
 800b73c:	69bb      	ldr	r3, [r7, #24]
 800b73e:	4293      	cmp	r3, r2
 800b740:	d114      	bne.n	800b76c <tcp_output+0x120>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b746:	2b00      	cmp	r3, #0
 800b748:	d110      	bne.n	800b76c <tcp_output+0x120>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10b      	bne.n	800b76c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8b5b      	ldrh	r3, [r3, #26]
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 814d 	beq.w	800ba14 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fd6c 	bl	800c258 <tcp_send_empty_ack>
 800b780:	4603      	mov	r3, r0
 800b782:	e152      	b.n	800ba2a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b790:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b792:	6a3b      	ldr	r3, [r7, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 811c 	beq.w	800b9d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b79a:	e002      	b.n	800b7a2 <tcp_output+0x156>
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	623b      	str	r3, [r7, #32]
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1f8      	bne.n	800b79c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b7aa:	e112      	b.n	800b9d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	899b      	ldrh	r3, [r3, #12]
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7f9 f82f 	bl	8004818 <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0304 	and.w	r3, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d006      	beq.n	800b7d4 <tcp_output+0x188>
 800b7c6:	4b2f      	ldr	r3, [pc, #188]	@ (800b884 <tcp_output+0x238>)
 800b7c8:	f240 5236 	movw	r2, #1334	@ 0x536
 800b7cc:	4932      	ldr	r1, [pc, #200]	@ (800b898 <tcp_output+0x24c>)
 800b7ce:	482f      	ldr	r0, [pc, #188]	@ (800b88c <tcp_output+0x240>)
 800b7d0:	f005 ffbe 	bl	8011750 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d01f      	beq.n	800b81c <tcp_output+0x1d0>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	8b5b      	ldrh	r3, [r3, #26]
 800b7e0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d119      	bne.n	800b81c <tcp_output+0x1d0>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00b      	beq.n	800b808 <tcp_output+0x1bc>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d110      	bne.n	800b81c <tcp_output+0x1d0>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7fe:	891a      	ldrh	r2, [r3, #8]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b804:	429a      	cmp	r2, r3
 800b806:	d209      	bcs.n	800b81c <tcp_output+0x1d0>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d004      	beq.n	800b81c <tcp_output+0x1d0>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b818:	2b08      	cmp	r3, #8
 800b81a:	d901      	bls.n	800b820 <tcp_output+0x1d4>
 800b81c:	2301      	movs	r3, #1
 800b81e:	e000      	b.n	800b822 <tcp_output+0x1d6>
 800b820:	2300      	movs	r3, #0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d106      	bne.n	800b834 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	8b5b      	ldrh	r3, [r3, #26]
 800b82a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f000 80e4 	beq.w	800b9fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	7d1b      	ldrb	r3, [r3, #20]
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d00d      	beq.n	800b858 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	899b      	ldrh	r3, [r3, #12]
 800b842:	b29c      	uxth	r4, r3
 800b844:	2010      	movs	r0, #16
 800b846:	f7f8 ffe7 	bl	8004818 <lwip_htons>
 800b84a:	4603      	mov	r3, r0
 800b84c:	461a      	mov	r2, r3
 800b84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	4322      	orrs	r2, r4
 800b854:	b292      	uxth	r2, r2
 800b856:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	6879      	ldr	r1, [r7, #4]
 800b85c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b85e:	f000 f909 	bl	800ba74 <tcp_output_segment>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d016      	beq.n	800b89c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8b5b      	ldrh	r3, [r3, #26]
 800b872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b876:	b29a      	uxth	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	835a      	strh	r2, [r3, #26]
      return err;
 800b87c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b880:	e0d3      	b.n	800ba2a <tcp_output+0x3de>
 800b882:	bf00      	nop
 800b884:	08013fa8 	.word	0x08013fa8
 800b888:	080144ec 	.word	0x080144ec
 800b88c:	08013ffc 	.word	0x08013ffc
 800b890:	08014504 	.word	0x08014504
 800b894:	20008094 	.word	0x20008094
 800b898:	0801452c 	.word	0x0801452c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	7d1b      	ldrb	r3, [r3, #20]
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d006      	beq.n	800b8ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	8b5b      	ldrh	r3, [r3, #26]
 800b8b0:	f023 0303 	bic.w	r3, r3, #3
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f8 ffbe 	bl	8004842 <lwip_htonl>
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	891b      	ldrh	r3, [r3, #8]
 800b8cc:	461d      	mov	r5, r3
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f8 ff9e 	bl	8004818 <lwip_htons>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f003 0303 	and.w	r3, r3, #3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <tcp_output+0x2a0>
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e000      	b.n	800b8ee <tcp_output+0x2a2>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	442b      	add	r3, r5
 800b8f0:	4423      	add	r3, r4
 800b8f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	da02      	bge.n	800b906 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	891b      	ldrh	r3, [r3, #8]
 800b90a:	461c      	mov	r4, r3
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	899b      	ldrh	r3, [r3, #12]
 800b912:	b29b      	uxth	r3, r3
 800b914:	4618      	mov	r0, r3
 800b916:	f7f8 ff7f 	bl	8004818 <lwip_htons>
 800b91a:	4603      	mov	r3, r0
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <tcp_output+0x2de>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <tcp_output+0x2e0>
 800b92a:	2300      	movs	r3, #0
 800b92c:	4423      	add	r3, r4
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d049      	beq.n	800b9c6 <tcp_output+0x37a>
      seg->next = NULL;
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d105      	bne.n	800b94c <tcp_output+0x300>
        pcb->unacked = seg;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b944:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800b946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b948:	623b      	str	r3, [r7, #32]
 800b94a:	e03f      	b.n	800b9cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	4618      	mov	r0, r3
 800b954:	f7f8 ff75 	bl	8004842 <lwip_htonl>
 800b958:	4604      	mov	r4, r0
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4618      	mov	r0, r3
 800b962:	f7f8 ff6e 	bl	8004842 <lwip_htonl>
 800b966:	4603      	mov	r3, r0
 800b968:	1ae3      	subs	r3, r4, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da24      	bge.n	800b9b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3370      	adds	r3, #112	@ 0x70
 800b972:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b974:	e002      	b.n	800b97c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d011      	beq.n	800b9a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7f8 ff58 	bl	8004842 <lwip_htonl>
 800b992:	4604      	mov	r4, r0
 800b994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f8 ff51 	bl	8004842 <lwip_htonl>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	dbe6      	blt.n	800b976 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b9b0:	69fb      	ldr	r3, [r7, #28]
 800b9b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9b4:	601a      	str	r2, [r3, #0]
 800b9b6:	e009      	b.n	800b9cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b9b8:	6a3b      	ldr	r3, [r7, #32]
 800b9ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	623b      	str	r3, [r7, #32]
 800b9c4:	e002      	b.n	800b9cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b9c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b9c8:	f7fb ff01 	bl	80077ce <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d012      	beq.n	800b9fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f8 ff2f 	bl	8004842 <lwip_htonl>
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ee:	8912      	ldrh	r2, [r2, #8]
 800b9f0:	4413      	add	r3, r2
  while (seg != NULL &&
 800b9f2:	69ba      	ldr	r2, [r7, #24]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	f4bf aed9 	bcs.w	800b7ac <tcp_output+0x160>
 800b9fa:	e000      	b.n	800b9fe <tcp_output+0x3b2>
      break;
 800b9fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d108      	bne.n	800ba18 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800ba0e:	e004      	b.n	800ba1a <tcp_output+0x3ce>
    goto output_done;
 800ba10:	bf00      	nop
 800ba12:	e002      	b.n	800ba1a <tcp_output+0x3ce>
    goto output_done;
 800ba14:	bf00      	nop
 800ba16:	e000      	b.n	800ba1a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ba18:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	8b5b      	ldrh	r3, [r3, #26]
 800ba1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3728      	adds	r7, #40	@ 0x28
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bdb0      	pop	{r4, r5, r7, pc}
 800ba32:	bf00      	nop

0800ba34 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <tcp_output_segment_busy+0x1c>
 800ba42:	4b09      	ldr	r3, [pc, #36]	@ (800ba68 <tcp_output_segment_busy+0x34>)
 800ba44:	f240 529a 	movw	r2, #1434	@ 0x59a
 800ba48:	4908      	ldr	r1, [pc, #32]	@ (800ba6c <tcp_output_segment_busy+0x38>)
 800ba4a:	4809      	ldr	r0, [pc, #36]	@ (800ba70 <tcp_output_segment_busy+0x3c>)
 800ba4c:	f005 fe80 	bl	8011750 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	7b9b      	ldrb	r3, [r3, #14]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d001      	beq.n	800ba5e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e000      	b.n	800ba60 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	08013fa8 	.word	0x08013fa8
 800ba6c:	08014544 	.word	0x08014544
 800ba70:	08013ffc 	.word	0x08013ffc

0800ba74 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ba74:	b5b0      	push	{r4, r5, r7, lr}
 800ba76:	b08c      	sub	sp, #48	@ 0x30
 800ba78:	af04      	add	r7, sp, #16
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <tcp_output_segment+0x20>
 800ba86:	4b64      	ldr	r3, [pc, #400]	@ (800bc18 <tcp_output_segment+0x1a4>)
 800ba88:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800ba8c:	4963      	ldr	r1, [pc, #396]	@ (800bc1c <tcp_output_segment+0x1a8>)
 800ba8e:	4864      	ldr	r0, [pc, #400]	@ (800bc20 <tcp_output_segment+0x1ac>)
 800ba90:	f005 fe5e 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <tcp_output_segment+0x34>
 800ba9a:	4b5f      	ldr	r3, [pc, #380]	@ (800bc18 <tcp_output_segment+0x1a4>)
 800ba9c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800baa0:	4960      	ldr	r1, [pc, #384]	@ (800bc24 <tcp_output_segment+0x1b0>)
 800baa2:	485f      	ldr	r0, [pc, #380]	@ (800bc20 <tcp_output_segment+0x1ac>)
 800baa4:	f005 fe54 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <tcp_output_segment+0x48>
 800baae:	4b5a      	ldr	r3, [pc, #360]	@ (800bc18 <tcp_output_segment+0x1a4>)
 800bab0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800bab4:	495c      	ldr	r1, [pc, #368]	@ (800bc28 <tcp_output_segment+0x1b4>)
 800bab6:	485a      	ldr	r0, [pc, #360]	@ (800bc20 <tcp_output_segment+0x1ac>)
 800bab8:	f005 fe4a 	bl	8011750 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff ffb9 	bl	800ba34 <tcp_output_segment_busy>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	e0a1      	b.n	800bc10 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	68dc      	ldr	r4, [r3, #12]
 800bad4:	4610      	mov	r0, r2
 800bad6:	f7f8 feb4 	bl	8004842 <lwip_htonl>
 800bada:	4603      	mov	r3, r0
 800badc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	68dc      	ldr	r4, [r3, #12]
 800bae6:	4610      	mov	r0, r2
 800bae8:	f7f8 fe96 	bl	8004818 <lwip_htons>
 800baec:	4603      	mov	r3, r0
 800baee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800baf8:	441a      	add	r2, r3
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	3314      	adds	r3, #20
 800bb04:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	7a9b      	ldrb	r3, [r3, #10]
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d015      	beq.n	800bb3e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	3304      	adds	r3, #4
 800bb16:	461a      	mov	r2, r3
 800bb18:	6879      	ldr	r1, [r7, #4]
 800bb1a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800bb1e:	f7fc fa39 	bl	8007f94 <tcp_eff_send_mss_netif>
 800bb22:	4603      	mov	r3, r0
 800bb24:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bb26:	8b7b      	ldrh	r3, [r7, #26]
 800bb28:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f8 fe88 	bl	8004842 <lwip_htonl>
 800bb32:	4602      	mov	r2, r0
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	da02      	bge.n	800bb4e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d10c      	bne.n	800bb70 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bb56:	4b35      	ldr	r3, [pc, #212]	@ (800bc2c <tcp_output_segment+0x1b8>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7f8 fe6c 	bl	8004842 <lwip_htonl>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	8959      	ldrh	r1, [r3, #10]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	8b3a      	ldrh	r2, [r7, #24]
 800bb8a:	1a8a      	subs	r2, r1, r2
 800bb8c:	b292      	uxth	r2, r2
 800bb8e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	8919      	ldrh	r1, [r3, #8]
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	8b3a      	ldrh	r2, [r7, #24]
 800bb9c:	1a8a      	subs	r2, r1, r2
 800bb9e:	b292      	uxth	r2, r2
 800bba0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68fa      	ldr	r2, [r7, #12]
 800bba8:	68d2      	ldr	r2, [r2, #12]
 800bbaa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	741a      	strb	r2, [r3, #16]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	7a9b      	ldrb	r3, [r3, #10]
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d001      	beq.n	800bbcc <tcp_output_segment+0x158>
 800bbc8:	2318      	movs	r3, #24
 800bbca:	e000      	b.n	800bbce <tcp_output_segment+0x15a>
 800bbcc:	2314      	movs	r3, #20
 800bbce:	4413      	add	r3, r2
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d006      	beq.n	800bbe4 <tcp_output_segment+0x170>
 800bbd6:	4b10      	ldr	r3, [pc, #64]	@ (800bc18 <tcp_output_segment+0x1a4>)
 800bbd8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800bbdc:	4914      	ldr	r1, [pc, #80]	@ (800bc30 <tcp_output_segment+0x1bc>)
 800bbde:	4810      	ldr	r0, [pc, #64]	@ (800bc20 <tcp_output_segment+0x1ac>)
 800bbe0:	f005 fdb6 	bl	8011750 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	6858      	ldr	r0, [r3, #4]
 800bbe8:	68b9      	ldr	r1, [r7, #8]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	1d1c      	adds	r4, r3, #4
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	7add      	ldrb	r5, [r3, #11]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	7a9b      	ldrb	r3, [r3, #10]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	9202      	str	r2, [sp, #8]
 800bbfa:	2206      	movs	r2, #6
 800bbfc:	9201      	str	r2, [sp, #4]
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	462b      	mov	r3, r5
 800bc02:	4622      	mov	r2, r4
 800bc04:	f004 fbe6 	bl	80103d4 <ip4_output_if>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bdb0      	pop	{r4, r5, r7, pc}
 800bc18:	08013fa8 	.word	0x08013fa8
 800bc1c:	0801456c 	.word	0x0801456c
 800bc20:	08013ffc 	.word	0x08013ffc
 800bc24:	0801458c 	.word	0x0801458c
 800bc28:	080145ac 	.word	0x080145ac
 800bc2c:	20008048 	.word	0x20008048
 800bc30:	080145d0 	.word	0x080145d0

0800bc34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bc34:	b5b0      	push	{r4, r5, r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <tcp_rexmit_rto_prepare+0x1c>
 800bc42:	4b31      	ldr	r3, [pc, #196]	@ (800bd08 <tcp_rexmit_rto_prepare+0xd4>)
 800bc44:	f240 6263 	movw	r2, #1635	@ 0x663
 800bc48:	4930      	ldr	r1, [pc, #192]	@ (800bd0c <tcp_rexmit_rto_prepare+0xd8>)
 800bc4a:	4831      	ldr	r0, [pc, #196]	@ (800bd10 <tcp_rexmit_rto_prepare+0xdc>)
 800bc4c:	f005 fd80 	bl	8011750 <iprintf>

  if (pcb->unacked == NULL) {
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bc58:	f06f 0305 	mvn.w	r3, #5
 800bc5c:	e050      	b.n	800bd00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	e00b      	b.n	800bc7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bc66:	68f8      	ldr	r0, [r7, #12]
 800bc68:	f7ff fee4 	bl	800ba34 <tcp_output_segment_busy>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bc72:	f06f 0305 	mvn.w	r3, #5
 800bc76:	e043      	b.n	800bd00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	60fb      	str	r3, [r7, #12]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1ef      	bne.n	800bc66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bc86:	68f8      	ldr	r0, [r7, #12]
 800bc88:	f7ff fed4 	bl	800ba34 <tcp_output_segment_busy>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d002      	beq.n	800bc98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bc92:	f06f 0305 	mvn.w	r3, #5
 800bc96:	e033      	b.n	800bd00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8b5b      	ldrh	r3, [r3, #26]
 800bcb2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f8 fdbd 	bl	8004842 <lwip_htonl>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	891b      	ldrh	r3, [r3, #8]
 800bcce:	461d      	mov	r5, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	899b      	ldrh	r3, [r3, #12]
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7f8 fd9d 	bl	8004818 <lwip_htons>
 800bcde:	4603      	mov	r3, r0
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	f003 0303 	and.w	r3, r3, #3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d001      	beq.n	800bcee <tcp_rexmit_rto_prepare+0xba>
 800bcea:	2301      	movs	r3, #1
 800bcec:	e000      	b.n	800bcf0 <tcp_rexmit_rto_prepare+0xbc>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	442b      	add	r3, r5
 800bcf2:	18e2      	adds	r2, r4, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bdb0      	pop	{r4, r5, r7, pc}
 800bd08:	08013fa8 	.word	0x08013fa8
 800bd0c:	080145e4 	.word	0x080145e4
 800bd10:	08013ffc 	.word	0x08013ffc

0800bd14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <tcp_rexmit_rto_commit+0x1c>
 800bd22:	4b0d      	ldr	r3, [pc, #52]	@ (800bd58 <tcp_rexmit_rto_commit+0x44>)
 800bd24:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800bd28:	490c      	ldr	r1, [pc, #48]	@ (800bd5c <tcp_rexmit_rto_commit+0x48>)
 800bd2a:	480d      	ldr	r0, [pc, #52]	@ (800bd60 <tcp_rexmit_rto_commit+0x4c>)
 800bd2c:	f005 fd10 	bl	8011750 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd36:	2bff      	cmp	r3, #255	@ 0xff
 800bd38:	d007      	beq.n	800bd4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd40:	3301      	adds	r3, #1
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff fc7e 	bl	800b64c <tcp_output>
}
 800bd50:	bf00      	nop
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	08013fa8 	.word	0x08013fa8
 800bd5c:	08014608 	.word	0x08014608
 800bd60:	08013ffc 	.word	0x08013ffc

0800bd64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d106      	bne.n	800bd80 <tcp_rexmit_rto+0x1c>
 800bd72:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <tcp_rexmit_rto+0x38>)
 800bd74:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800bd78:	4909      	ldr	r1, [pc, #36]	@ (800bda0 <tcp_rexmit_rto+0x3c>)
 800bd7a:	480a      	ldr	r0, [pc, #40]	@ (800bda4 <tcp_rexmit_rto+0x40>)
 800bd7c:	f005 fce8 	bl	8011750 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff ff57 	bl	800bc34 <tcp_rexmit_rto_prepare>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff ffc1 	bl	800bd14 <tcp_rexmit_rto_commit>
  }
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	08013fa8 	.word	0x08013fa8
 800bda0:	0801462c 	.word	0x0801462c
 800bda4:	08013ffc 	.word	0x08013ffc

0800bda8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bda8:	b590      	push	{r4, r7, lr}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <tcp_rexmit+0x1c>
 800bdb6:	4b2f      	ldr	r3, [pc, #188]	@ (800be74 <tcp_rexmit+0xcc>)
 800bdb8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bdbc:	492e      	ldr	r1, [pc, #184]	@ (800be78 <tcp_rexmit+0xd0>)
 800bdbe:	482f      	ldr	r0, [pc, #188]	@ (800be7c <tcp_rexmit+0xd4>)
 800bdc0:	f005 fcc6 	bl	8011750 <iprintf>

  if (pcb->unacked == NULL) {
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d102      	bne.n	800bdd2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bdcc:	f06f 0305 	mvn.w	r3, #5
 800bdd0:	e04c      	b.n	800be6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdd6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bdd8:	68b8      	ldr	r0, [r7, #8]
 800bdda:	f7ff fe2b 	bl	800ba34 <tcp_output_segment_busy>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bde4:	f06f 0305 	mvn.w	r3, #5
 800bde8:	e040      	b.n	800be6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	336c      	adds	r3, #108	@ 0x6c
 800bdf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bdf8:	e002      	b.n	800be00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d011      	beq.n	800be2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	4618      	mov	r0, r3
 800be12:	f7f8 fd16 	bl	8004842 <lwip_htonl>
 800be16:	4604      	mov	r4, r0
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f8 fd0f 	bl	8004842 <lwip_htonl>
 800be24:	4603      	mov	r3, r0
 800be26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dbe6      	blt.n	800bdfa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2200      	movs	r2, #0
 800be46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be50:	2bff      	cmp	r3, #255	@ 0xff
 800be52:	d007      	beq.n	800be64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800be5a:	3301      	adds	r3, #1
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2200      	movs	r2, #0
 800be68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	bd90      	pop	{r4, r7, pc}
 800be74:	08013fa8 	.word	0x08013fa8
 800be78:	08014648 	.word	0x08014648
 800be7c:	08013ffc 	.word	0x08013ffc

0800be80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <tcp_rexmit_fast+0x1c>
 800be8e:	4b2a      	ldr	r3, [pc, #168]	@ (800bf38 <tcp_rexmit_fast+0xb8>)
 800be90:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800be94:	4929      	ldr	r1, [pc, #164]	@ (800bf3c <tcp_rexmit_fast+0xbc>)
 800be96:	482a      	ldr	r0, [pc, #168]	@ (800bf40 <tcp_rexmit_fast+0xc0>)
 800be98:	f005 fc5a 	bl	8011750 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d045      	beq.n	800bf30 <tcp_rexmit_fast+0xb0>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8b5b      	ldrh	r3, [r3, #26]
 800bea8:	f003 0304 	and.w	r3, r3, #4
 800beac:	2b00      	cmp	r3, #0
 800beae:	d13f      	bne.n	800bf30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7ff ff79 	bl	800bda8 <tcp_rexmit>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d139      	bne.n	800bf30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bec8:	4293      	cmp	r3, r2
 800beca:	bf28      	it	cs
 800becc:	4613      	movcs	r3, r2
 800bece:	b29b      	uxth	r3, r3
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	da00      	bge.n	800bed6 <tcp_rexmit_fast+0x56>
 800bed4:	3301      	adds	r3, #1
 800bed6:	105b      	asrs	r3, r3, #1
 800bed8:	b29a      	uxth	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	429a      	cmp	r2, r3
 800bef0:	d206      	bcs.n	800bf00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	b29a      	uxth	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	0049      	lsls	r1, r1, #1
 800bf0e:	440b      	add	r3, r1
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	4413      	add	r3, r2
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	8b5b      	ldrh	r3, [r3, #26]
 800bf20:	f043 0304 	orr.w	r3, r3, #4
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	08013fa8 	.word	0x08013fa8
 800bf3c:	08014660 	.word	0x08014660
 800bf40:	08013ffc 	.word	0x08013ffc

0800bf44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	817b      	strh	r3, [r7, #10]
 800bf52:	4613      	mov	r3, r2
 800bf54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf56:	897a      	ldrh	r2, [r7, #10]
 800bf58:	893b      	ldrh	r3, [r7, #8]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	3314      	adds	r3, #20
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bf66:	4619      	mov	r1, r3
 800bf68:	2022      	movs	r0, #34	@ 0x22
 800bf6a:	f7f9 fd0d 	bl	8005988 <pbuf_alloc>
 800bf6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d04d      	beq.n	800c012 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bf76:	897b      	ldrh	r3, [r7, #10]
 800bf78:	3313      	adds	r3, #19
 800bf7a:	697a      	ldr	r2, [r7, #20]
 800bf7c:	8952      	ldrh	r2, [r2, #10]
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	db06      	blt.n	800bf90 <tcp_output_alloc_header_common+0x4c>
 800bf82:	4b26      	ldr	r3, [pc, #152]	@ (800c01c <tcp_output_alloc_header_common+0xd8>)
 800bf84:	f240 7223 	movw	r2, #1827	@ 0x723
 800bf88:	4925      	ldr	r1, [pc, #148]	@ (800c020 <tcp_output_alloc_header_common+0xdc>)
 800bf8a:	4826      	ldr	r0, [pc, #152]	@ (800c024 <tcp_output_alloc_header_common+0xe0>)
 800bf8c:	f005 fbe0 	bl	8011750 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bf96:	8c3b      	ldrh	r3, [r7, #32]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7f8 fc3d 	bl	8004818 <lwip_htons>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bfa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f8 fc35 	bl	8004818 <lwip_htons>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7f8 fc40 	bl	8004842 <lwip_htonl>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bfc8:	897b      	ldrh	r3, [r7, #10]
 800bfca:	089b      	lsrs	r3, r3, #2
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	3305      	adds	r3, #5
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	031b      	lsls	r3, r3, #12
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f8 fc19 	bl	8004818 <lwip_htons>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	461a      	mov	r2, r3
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800bfee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7f8 fc11 	bl	8004818 <lwip_htons>
 800bff6:	4603      	mov	r3, r0
 800bff8:	461a      	mov	r2, r3
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2200      	movs	r2, #0
 800c002:	741a      	strb	r2, [r3, #16]
 800c004:	2200      	movs	r2, #0
 800c006:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2200      	movs	r2, #0
 800c00c:	749a      	strb	r2, [r3, #18]
 800c00e:	2200      	movs	r2, #0
 800c010:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c012:	697b      	ldr	r3, [r7, #20]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	08013fa8 	.word	0x08013fa8
 800c020:	08014680 	.word	0x08014680
 800c024:	08013ffc 	.word	0x08013ffc

0800c028 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c028:	b5b0      	push	{r4, r5, r7, lr}
 800c02a:	b08a      	sub	sp, #40	@ 0x28
 800c02c:	af04      	add	r7, sp, #16
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	607b      	str	r3, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	817b      	strh	r3, [r7, #10]
 800c036:	4613      	mov	r3, r2
 800c038:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d106      	bne.n	800c04e <tcp_output_alloc_header+0x26>
 800c040:	4b15      	ldr	r3, [pc, #84]	@ (800c098 <tcp_output_alloc_header+0x70>)
 800c042:	f240 7242 	movw	r2, #1858	@ 0x742
 800c046:	4915      	ldr	r1, [pc, #84]	@ (800c09c <tcp_output_alloc_header+0x74>)
 800c048:	4815      	ldr	r0, [pc, #84]	@ (800c0a0 <tcp_output_alloc_header+0x78>)
 800c04a:	f005 fb81 	bl	8011750 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8adb      	ldrh	r3, [r3, #22]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	8b12      	ldrh	r2, [r2, #24]
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800c05e:	893d      	ldrh	r5, [r7, #8]
 800c060:	897c      	ldrh	r4, [r7, #10]
 800c062:	9103      	str	r1, [sp, #12]
 800c064:	2110      	movs	r1, #16
 800c066:	9102      	str	r1, [sp, #8]
 800c068:	9201      	str	r2, [sp, #4]
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	462a      	mov	r2, r5
 800c070:	4621      	mov	r1, r4
 800c072:	f7ff ff67 	bl	800bf44 <tcp_output_alloc_header_common>
 800c076:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d006      	beq.n	800c08c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c086:	441a      	add	r2, r3
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800c08c:	697b      	ldr	r3, [r7, #20]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3718      	adds	r7, #24
 800c092:	46bd      	mov	sp, r7
 800c094:	bdb0      	pop	{r4, r5, r7, pc}
 800c096:	bf00      	nop
 800c098:	08013fa8 	.word	0x08013fa8
 800c09c:	080146b0 	.word	0x080146b0
 800c0a0:	08013ffc 	.word	0x08013ffc

0800c0a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	71fb      	strb	r3, [r7, #7]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d106      	bne.n	800c0d2 <tcp_output_fill_options+0x2e>
 800c0c4:	4b12      	ldr	r3, [pc, #72]	@ (800c110 <tcp_output_fill_options+0x6c>)
 800c0c6:	f240 7256 	movw	r2, #1878	@ 0x756
 800c0ca:	4912      	ldr	r1, [pc, #72]	@ (800c114 <tcp_output_fill_options+0x70>)
 800c0cc:	4812      	ldr	r0, [pc, #72]	@ (800c118 <tcp_output_fill_options+0x74>)
 800c0ce:	f005 fb3f 	bl	8011750 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	3314      	adds	r3, #20
 800c0dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c0de:	8bfb      	ldrh	r3, [r7, #30]
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	79fb      	ldrb	r3, [r7, #7]
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	f003 0304 	and.w	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3314      	adds	r3, #20
 800c0f0:	69ba      	ldr	r2, [r7, #24]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d006      	beq.n	800c108 <tcp_output_fill_options+0x64>
 800c0fa:	4b05      	ldr	r3, [pc, #20]	@ (800c110 <tcp_output_fill_options+0x6c>)
 800c0fc:	f240 7275 	movw	r2, #1909	@ 0x775
 800c100:	4906      	ldr	r1, [pc, #24]	@ (800c11c <tcp_output_fill_options+0x78>)
 800c102:	4805      	ldr	r0, [pc, #20]	@ (800c118 <tcp_output_fill_options+0x74>)
 800c104:	f005 fb24 	bl	8011750 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c108:	bf00      	nop
 800c10a:	3720      	adds	r7, #32
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	08013fa8 	.word	0x08013fa8
 800c114:	080146d8 	.word	0x080146d8
 800c118:	08013ffc 	.word	0x08013ffc
 800c11c:	080145d0 	.word	0x080145d0

0800c120 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08a      	sub	sp, #40	@ 0x28
 800c124:	af04      	add	r7, sp, #16
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <tcp_output_control_segment+0x22>
 800c134:	4b1c      	ldr	r3, [pc, #112]	@ (800c1a8 <tcp_output_control_segment+0x88>)
 800c136:	f240 7287 	movw	r2, #1927	@ 0x787
 800c13a:	491c      	ldr	r1, [pc, #112]	@ (800c1ac <tcp_output_control_segment+0x8c>)
 800c13c:	481c      	ldr	r0, [pc, #112]	@ (800c1b0 <tcp_output_control_segment+0x90>)
 800c13e:	f005 fb07 	bl	8011750 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c142:	683a      	ldr	r2, [r7, #0]
 800c144:	6879      	ldr	r1, [r7, #4]
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7fe faea 	bl	800a720 <tcp_route>
 800c14c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d102      	bne.n	800c15a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c154:	23fc      	movs	r3, #252	@ 0xfc
 800c156:	75fb      	strb	r3, [r7, #23]
 800c158:	e01c      	b.n	800c194 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d006      	beq.n	800c16e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	7adb      	ldrb	r3, [r3, #11]
 800c164:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	7a9b      	ldrb	r3, [r3, #10]
 800c16a:	757b      	strb	r3, [r7, #21]
 800c16c:	e003      	b.n	800c176 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c16e:	23ff      	movs	r3, #255	@ 0xff
 800c170:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c176:	7dba      	ldrb	r2, [r7, #22]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	9302      	str	r3, [sp, #8]
 800c17c:	2306      	movs	r3, #6
 800c17e:	9301      	str	r3, [sp, #4]
 800c180:	7d7b      	ldrb	r3, [r7, #21]
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	4613      	mov	r3, r2
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	68b8      	ldr	r0, [r7, #8]
 800c18c:	f004 f922 	bl	80103d4 <ip4_output_if>
 800c190:	4603      	mov	r3, r0
 800c192:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c194:	68b8      	ldr	r0, [r7, #8]
 800c196:	f7f9 fedb 	bl	8005f50 <pbuf_free>
  return err;
 800c19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3718      	adds	r7, #24
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	08013fa8 	.word	0x08013fa8
 800c1ac:	08014700 	.word	0x08014700
 800c1b0:	08013ffc 	.word	0x08013ffc

0800c1b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c1b4:	b590      	push	{r4, r7, lr}
 800c1b6:	b08b      	sub	sp, #44	@ 0x2c
 800c1b8:	af04      	add	r7, sp, #16
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d106      	bne.n	800c1d6 <tcp_rst+0x22>
 800c1c8:	4b1f      	ldr	r3, [pc, #124]	@ (800c248 <tcp_rst+0x94>)
 800c1ca:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800c1ce:	491f      	ldr	r1, [pc, #124]	@ (800c24c <tcp_rst+0x98>)
 800c1d0:	481f      	ldr	r0, [pc, #124]	@ (800c250 <tcp_rst+0x9c>)
 800c1d2:	f005 fabd 	bl	8011750 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d106      	bne.n	800c1ea <tcp_rst+0x36>
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <tcp_rst+0x94>)
 800c1de:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800c1e2:	491c      	ldr	r1, [pc, #112]	@ (800c254 <tcp_rst+0xa0>)
 800c1e4:	481a      	ldr	r0, [pc, #104]	@ (800c250 <tcp_rst+0x9c>)
 800c1e6:	f005 fab3 	bl	8011750 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c1ee:	f246 0308 	movw	r3, #24584	@ 0x6008
 800c1f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	b29c      	uxth	r4, r3
 800c1f8:	68b8      	ldr	r0, [r7, #8]
 800c1fa:	f7f8 fb22 	bl	8004842 <lwip_htonl>
 800c1fe:	4602      	mov	r2, r0
 800c200:	8abb      	ldrh	r3, [r7, #20]
 800c202:	9303      	str	r3, [sp, #12]
 800c204:	2314      	movs	r3, #20
 800c206:	9302      	str	r3, [sp, #8]
 800c208:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c20a:	9301      	str	r3, [sp, #4]
 800c20c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	4613      	mov	r3, r2
 800c212:	2200      	movs	r2, #0
 800c214:	4621      	mov	r1, r4
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f7ff fe94 	bl	800bf44 <tcp_output_alloc_header_common>
 800c21c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00c      	beq.n	800c23e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c224:	7dfb      	ldrb	r3, [r7, #23]
 800c226:	2200      	movs	r2, #0
 800c228:	6939      	ldr	r1, [r7, #16]
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff ff3a 	bl	800c0a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	6939      	ldr	r1, [r7, #16]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	f7ff ff72 	bl	800c120 <tcp_output_control_segment>
 800c23c:	e000      	b.n	800c240 <tcp_rst+0x8c>
    return;
 800c23e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd90      	pop	{r4, r7, pc}
 800c246:	bf00      	nop
 800c248:	08013fa8 	.word	0x08013fa8
 800c24c:	0801472c 	.word	0x0801472c
 800c250:	08013ffc 	.word	0x08013ffc
 800c254:	08014748 	.word	0x08014748

0800c258 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c258:	b590      	push	{r4, r7, lr}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d106      	bne.n	800c27c <tcp_send_empty_ack+0x24>
 800c26e:	4b28      	ldr	r3, [pc, #160]	@ (800c310 <tcp_send_empty_ack+0xb8>)
 800c270:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800c274:	4927      	ldr	r1, [pc, #156]	@ (800c314 <tcp_send_empty_ack+0xbc>)
 800c276:	4828      	ldr	r0, [pc, #160]	@ (800c318 <tcp_send_empty_ack+0xc0>)
 800c278:	f005 fa6a 	bl	8011750 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	b2db      	uxtb	r3, r3
 800c282:	f003 0304 	and.w	r3, r3, #4
 800c286:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c288:	7d7b      	ldrb	r3, [r7, #21]
 800c28a:	b29c      	uxth	r4, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c290:	4618      	mov	r0, r3
 800c292:	f7f8 fad6 	bl	8004842 <lwip_htonl>
 800c296:	4603      	mov	r3, r0
 800c298:	2200      	movs	r2, #0
 800c29a:	4621      	mov	r1, r4
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff fec3 	bl	800c028 <tcp_output_alloc_header>
 800c2a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	8b5b      	ldrh	r3, [r3, #26]
 800c2ae:	f043 0303 	orr.w	r3, r3, #3
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c2b8:	f06f 0301 	mvn.w	r3, #1
 800c2bc:	e023      	b.n	800c306 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c2be:	7dbb      	ldrb	r3, [r7, #22]
 800c2c0:	7dfa      	ldrb	r2, [r7, #23]
 800c2c2:	6939      	ldr	r1, [r7, #16]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff feed 	bl	800c0a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	6939      	ldr	r1, [r7, #16]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff ff24 	bl	800c120 <tcp_output_control_segment>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d007      	beq.n	800c2f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	8b5b      	ldrh	r3, [r3, #26]
 800c2e8:	f043 0303 	orr.w	r3, r3, #3
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	835a      	strh	r2, [r3, #26]
 800c2f2:	e006      	b.n	800c302 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	8b5b      	ldrh	r3, [r3, #26]
 800c2f8:	f023 0303 	bic.w	r3, r3, #3
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	371c      	adds	r7, #28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd90      	pop	{r4, r7, pc}
 800c30e:	bf00      	nop
 800c310:	08013fa8 	.word	0x08013fa8
 800c314:	08014764 	.word	0x08014764
 800c318:	08013ffc 	.word	0x08013ffc

0800c31c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c31c:	b590      	push	{r4, r7, lr}
 800c31e:	b087      	sub	sp, #28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c324:	2300      	movs	r3, #0
 800c326:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d106      	bne.n	800c33c <tcp_keepalive+0x20>
 800c32e:	4b18      	ldr	r3, [pc, #96]	@ (800c390 <tcp_keepalive+0x74>)
 800c330:	f640 0224 	movw	r2, #2084	@ 0x824
 800c334:	4917      	ldr	r1, [pc, #92]	@ (800c394 <tcp_keepalive+0x78>)
 800c336:	4818      	ldr	r0, [pc, #96]	@ (800c398 <tcp_keepalive+0x7c>)
 800c338:	f005 fa0a 	bl	8011750 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	b29c      	uxth	r4, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c344:	3b01      	subs	r3, #1
 800c346:	4618      	mov	r0, r3
 800c348:	f7f8 fa7b 	bl	8004842 <lwip_htonl>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2200      	movs	r2, #0
 800c350:	4621      	mov	r1, r4
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f7ff fe68 	bl	800c028 <tcp_output_alloc_header>
 800c358:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d102      	bne.n	800c366 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c360:	f04f 33ff 	mov.w	r3, #4294967295
 800c364:	e010      	b.n	800c388 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2200      	movs	r2, #0
 800c36a:	6939      	ldr	r1, [r7, #16]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f7ff fe99 	bl	800c0a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3304      	adds	r3, #4
 800c378:	6939      	ldr	r1, [r7, #16]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff fed0 	bl	800c120 <tcp_output_control_segment>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	371c      	adds	r7, #28
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd90      	pop	{r4, r7, pc}
 800c390:	08013fa8 	.word	0x08013fa8
 800c394:	08014784 	.word	0x08014784
 800c398:	08013ffc 	.word	0x08013ffc

0800c39c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c39c:	b590      	push	{r4, r7, lr}
 800c39e:	b08b      	sub	sp, #44	@ 0x2c
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d106      	bne.n	800c3be <tcp_zero_window_probe+0x22>
 800c3b0:	4b4c      	ldr	r3, [pc, #304]	@ (800c4e4 <tcp_zero_window_probe+0x148>)
 800c3b2:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c3b6:	494c      	ldr	r1, [pc, #304]	@ (800c4e8 <tcp_zero_window_probe+0x14c>)
 800c3b8:	484c      	ldr	r0, [pc, #304]	@ (800c4ec <tcp_zero_window_probe+0x150>)
 800c3ba:	f005 f9c9 	bl	8011750 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e086      	b.n	800c4dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c3d4:	2bff      	cmp	r3, #255	@ 0xff
 800c3d6:	d007      	beq.n	800c3e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c3de:	3301      	adds	r3, #1
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	899b      	ldrh	r3, [r3, #12]
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f8 fa11 	bl	8004818 <lwip_htons>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	f003 0301 	and.w	r3, r3, #1
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d005      	beq.n	800c40e <tcp_zero_window_probe+0x72>
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	891b      	ldrh	r3, [r3, #8]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <tcp_zero_window_probe+0x72>
 800c40a:	2301      	movs	r3, #1
 800c40c:	e000      	b.n	800c410 <tcp_zero_window_probe+0x74>
 800c40e:	2300      	movs	r3, #0
 800c410:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c412:	7ffb      	ldrb	r3, [r7, #31]
 800c414:	2b00      	cmp	r3, #0
 800c416:	bf0c      	ite	eq
 800c418:	2301      	moveq	r3, #1
 800c41a:	2300      	movne	r3, #0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c420:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c424:	b299      	uxth	r1, r3
 800c426:	6a3b      	ldr	r3, [r7, #32]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	8bba      	ldrh	r2, [r7, #28]
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff fdfa 	bl	800c028 <tcp_output_alloc_header>
 800c434:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d102      	bne.n	800c442 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c43c:	f04f 33ff 	mov.w	r3, #4294967295
 800c440:	e04c      	b.n	800c4dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c448:	7ffb      	ldrb	r3, [r7, #31]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d011      	beq.n	800c472 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	899b      	ldrh	r3, [r3, #12]
 800c452:	b29b      	uxth	r3, r3
 800c454:	b21b      	sxth	r3, r3
 800c456:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c45a:	b21c      	sxth	r4, r3
 800c45c:	2011      	movs	r0, #17
 800c45e:	f7f8 f9db 	bl	8004818 <lwip_htons>
 800c462:	4603      	mov	r3, r0
 800c464:	b21b      	sxth	r3, r3
 800c466:	4323      	orrs	r3, r4
 800c468:	b21b      	sxth	r3, r3
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	819a      	strh	r2, [r3, #12]
 800c470:	e010      	b.n	800c494 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c472:	69bb      	ldr	r3, [r7, #24]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	3314      	adds	r3, #20
 800c478:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	6858      	ldr	r0, [r3, #4]
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	891a      	ldrh	r2, [r3, #8]
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	891b      	ldrh	r3, [r3, #8]
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2201      	movs	r2, #1
 800c48e:	6939      	ldr	r1, [r7, #16]
 800c490:	f7f9 ff58 	bl	8006344 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f8 f9d1 	bl	8004842 <lwip_htonl>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	da02      	bge.n	800c4b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4bc:	2200      	movs	r2, #0
 800c4be:	69b9      	ldr	r1, [r7, #24]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fdef 	bl	800c0a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3304      	adds	r3, #4
 800c4cc:	69b9      	ldr	r1, [r7, #24]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff fe26 	bl	800c120 <tcp_output_control_segment>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c4d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	372c      	adds	r7, #44	@ 0x2c
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd90      	pop	{r4, r7, pc}
 800c4e4:	08013fa8 	.word	0x08013fa8
 800c4e8:	080147a0 	.word	0x080147a0
 800c4ec:	08013ffc 	.word	0x08013ffc

0800c4f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c4f8:	f7fa f812 	bl	8006520 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c528 <tcpip_tcp_timer+0x38>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d103      	bne.n	800c50c <tcpip_tcp_timer+0x1c>
 800c504:	4b09      	ldr	r3, [pc, #36]	@ (800c52c <tcpip_tcp_timer+0x3c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d005      	beq.n	800c518 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c50c:	2200      	movs	r2, #0
 800c50e:	4908      	ldr	r1, [pc, #32]	@ (800c530 <tcpip_tcp_timer+0x40>)
 800c510:	20fa      	movs	r0, #250	@ 0xfa
 800c512:	f000 f8f3 	bl	800c6fc <sys_timeout>
 800c516:	e003      	b.n	800c520 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c518:	4b06      	ldr	r3, [pc, #24]	@ (800c534 <tcpip_tcp_timer+0x44>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
  }
}
 800c51e:	bf00      	nop
 800c520:	bf00      	nop
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	20008054 	.word	0x20008054
 800c52c:	20008058 	.word	0x20008058
 800c530:	0800c4f1 	.word	0x0800c4f1
 800c534:	200080a0 	.word	0x200080a0

0800c538 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c53c:	4b0a      	ldr	r3, [pc, #40]	@ (800c568 <tcp_timer_needed+0x30>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10f      	bne.n	800c564 <tcp_timer_needed+0x2c>
 800c544:	4b09      	ldr	r3, [pc, #36]	@ (800c56c <tcp_timer_needed+0x34>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d103      	bne.n	800c554 <tcp_timer_needed+0x1c>
 800c54c:	4b08      	ldr	r3, [pc, #32]	@ (800c570 <tcp_timer_needed+0x38>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d007      	beq.n	800c564 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c554:	4b04      	ldr	r3, [pc, #16]	@ (800c568 <tcp_timer_needed+0x30>)
 800c556:	2201      	movs	r2, #1
 800c558:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c55a:	2200      	movs	r2, #0
 800c55c:	4905      	ldr	r1, [pc, #20]	@ (800c574 <tcp_timer_needed+0x3c>)
 800c55e:	20fa      	movs	r0, #250	@ 0xfa
 800c560:	f000 f8cc 	bl	800c6fc <sys_timeout>
  }
}
 800c564:	bf00      	nop
 800c566:	bd80      	pop	{r7, pc}
 800c568:	200080a0 	.word	0x200080a0
 800c56c:	20008054 	.word	0x20008054
 800c570:	20008058 	.word	0x20008058
 800c574:	0800c4f1 	.word	0x0800c4f1

0800c578 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c584:	2006      	movs	r0, #6
 800c586:	f7f8 fdf1 	bl	800516c <memp_malloc>
 800c58a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d109      	bne.n	800c5a6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d151      	bne.n	800c63c <sys_timeout_abs+0xc4>
 800c598:	4b2a      	ldr	r3, [pc, #168]	@ (800c644 <sys_timeout_abs+0xcc>)
 800c59a:	22be      	movs	r2, #190	@ 0xbe
 800c59c:	492a      	ldr	r1, [pc, #168]	@ (800c648 <sys_timeout_abs+0xd0>)
 800c59e:	482b      	ldr	r0, [pc, #172]	@ (800c64c <sys_timeout_abs+0xd4>)
 800c5a0:	f005 f8d6 	bl	8011750 <iprintf>
    return;
 800c5a4:	e04a      	b.n	800c63c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c5be:	4b24      	ldr	r3, [pc, #144]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d103      	bne.n	800c5ce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c5c6:	4a22      	ldr	r2, [pc, #136]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6013      	str	r3, [r2, #0]
    return;
 800c5cc:	e037      	b.n	800c63e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	685a      	ldr	r2, [r3, #4]
 800c5d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	0fdb      	lsrs	r3, r3, #31
 800c5dc:	f003 0301 	and.w	r3, r3, #1
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c5ee:	4a18      	ldr	r2, [pc, #96]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6013      	str	r3, [r2, #0]
 800c5f4:	e023      	b.n	800c63e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c5f6:	4b16      	ldr	r3, [pc, #88]	@ (800c650 <sys_timeout_abs+0xd8>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	617b      	str	r3, [r7, #20]
 800c5fc:	e01a      	b.n	800c634 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00b      	beq.n	800c61e <sys_timeout_abs+0xa6>
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	685a      	ldr	r2, [r3, #4]
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	0fdb      	lsrs	r3, r3, #31
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d007      	beq.n	800c62e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	601a      	str	r2, [r3, #0]
        break;
 800c62c:	e007      	b.n	800c63e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1e1      	bne.n	800c5fe <sys_timeout_abs+0x86>
 800c63a:	e000      	b.n	800c63e <sys_timeout_abs+0xc6>
    return;
 800c63c:	bf00      	nop
      }
    }
  }
}
 800c63e:	3718      	adds	r7, #24
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}
 800c644:	080147c4 	.word	0x080147c4
 800c648:	080147f8 	.word	0x080147f8
 800c64c:	08014838 	.word	0x08014838
 800c650:	20008098 	.word	0x20008098

0800c654 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	4798      	blx	r3

  now = sys_now();
 800c666:	f7f7 f8a9 	bl	80037bc <sys_now>
 800c66a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	4b0f      	ldr	r3, [pc, #60]	@ (800c6b0 <lwip_cyclic_timer+0x5c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	0fdb      	lsrs	r3, r3, #31
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d009      	beq.n	800c69e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	4413      	add	r3, r2
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	4907      	ldr	r1, [pc, #28]	@ (800c6b4 <lwip_cyclic_timer+0x60>)
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff ff6e 	bl	800c578 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c69c:	e004      	b.n	800c6a8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	4904      	ldr	r1, [pc, #16]	@ (800c6b4 <lwip_cyclic_timer+0x60>)
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f7ff ff68 	bl	800c578 <sys_timeout_abs>
}
 800c6a8:	bf00      	nop
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	2000809c 	.word	0x2000809c
 800c6b4:	0800c655 	.word	0x0800c655

0800c6b8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6be:	2301      	movs	r3, #1
 800c6c0:	607b      	str	r3, [r7, #4]
 800c6c2:	e00e      	b.n	800c6e2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c6c4:	4a0b      	ldr	r2, [pc, #44]	@ (800c6f4 <sys_timeouts_init+0x3c>)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	4a08      	ldr	r2, [pc, #32]	@ (800c6f4 <sys_timeouts_init+0x3c>)
 800c6d2:	4413      	add	r3, r2
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4908      	ldr	r1, [pc, #32]	@ (800c6f8 <sys_timeouts_init+0x40>)
 800c6d8:	f000 f810 	bl	800c6fc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	607b      	str	r3, [r7, #4]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	d9ed      	bls.n	800c6c4 <sys_timeouts_init+0xc>
  }
}
 800c6e8:	bf00      	nop
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	0801654c 	.word	0x0801654c
 800c6f8:	0800c655 	.word	0x0800c655

0800c6fc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b086      	sub	sp, #24
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c70e:	d306      	bcc.n	800c71e <sys_timeout+0x22>
 800c710:	4b0a      	ldr	r3, [pc, #40]	@ (800c73c <sys_timeout+0x40>)
 800c712:	f240 1229 	movw	r2, #297	@ 0x129
 800c716:	490a      	ldr	r1, [pc, #40]	@ (800c740 <sys_timeout+0x44>)
 800c718:	480a      	ldr	r0, [pc, #40]	@ (800c744 <sys_timeout+0x48>)
 800c71a:	f005 f819 	bl	8011750 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c71e:	f7f7 f84d 	bl	80037bc <sys_now>
 800c722:	4602      	mov	r2, r0
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	4413      	add	r3, r2
 800c728:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	68b9      	ldr	r1, [r7, #8]
 800c72e:	6978      	ldr	r0, [r7, #20]
 800c730:	f7ff ff22 	bl	800c578 <sys_timeout_abs>
#endif
}
 800c734:	bf00      	nop
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	080147c4 	.word	0x080147c4
 800c740:	08014860 	.word	0x08014860
 800c744:	08014838 	.word	0x08014838

0800c748 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c74e:	f7f7 f835 	bl	80037bc <sys_now>
 800c752:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c754:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c0 <sys_check_timeouts+0x78>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d001      	beq.n	800c762 <sys_check_timeouts+0x1a>
 800c75e:	f7f9 f8bd 	bl	80058dc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c762:	4b18      	ldr	r3, [pc, #96]	@ (800c7c4 <sys_check_timeouts+0x7c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d022      	beq.n	800c7b4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	0fdb      	lsrs	r3, r3, #31
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d11a      	bne.n	800c7b8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a0f      	ldr	r2, [pc, #60]	@ (800c7c4 <sys_check_timeouts+0x7c>)
 800c788:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	4a0b      	ldr	r2, [pc, #44]	@ (800c7c8 <sys_check_timeouts+0x80>)
 800c79c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c79e:	68b9      	ldr	r1, [r7, #8]
 800c7a0:	2006      	movs	r0, #6
 800c7a2:	f7f8 fd53 	bl	800524c <memp_free>
    if (handler != NULL) {
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d0d3      	beq.n	800c754 <sys_check_timeouts+0xc>
      handler(arg);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6838      	ldr	r0, [r7, #0]
 800c7b0:	4798      	blx	r3
  do {
 800c7b2:	e7cf      	b.n	800c754 <sys_check_timeouts+0xc>
      return;
 800c7b4:	bf00      	nop
 800c7b6:	e000      	b.n	800c7ba <sys_check_timeouts+0x72>
      return;
 800c7b8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	20008045 	.word	0x20008045
 800c7c4:	20008098 	.word	0x20008098
 800c7c8:	2000809c 	.word	0x2000809c

0800c7cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7d0:	f004 febe 	bl	8011550 <rand>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	4b01      	ldr	r3, [pc, #4]	@ (800c7ec <udp_init+0x20>)
 800c7e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7e8:	bf00      	nop
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20000028 	.word	0x20000028

0800c7f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c7fa:	4b17      	ldr	r3, [pc, #92]	@ (800c858 <udp_new_port+0x68>)
 800c7fc:	881b      	ldrh	r3, [r3, #0]
 800c7fe:	1c5a      	adds	r2, r3, #1
 800c800:	b291      	uxth	r1, r2
 800c802:	4a15      	ldr	r2, [pc, #84]	@ (800c858 <udp_new_port+0x68>)
 800c804:	8011      	strh	r1, [r2, #0]
 800c806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d103      	bne.n	800c816 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c80e:	4b12      	ldr	r3, [pc, #72]	@ (800c858 <udp_new_port+0x68>)
 800c810:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800c814:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c816:	4b11      	ldr	r3, [pc, #68]	@ (800c85c <udp_new_port+0x6c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	603b      	str	r3, [r7, #0]
 800c81c:	e011      	b.n	800c842 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	8a5a      	ldrh	r2, [r3, #18]
 800c822:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <udp_new_port+0x68>)
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	429a      	cmp	r2, r3
 800c828:	d108      	bne.n	800c83c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	3301      	adds	r3, #1
 800c82e:	80fb      	strh	r3, [r7, #6]
 800c830:	88fb      	ldrh	r3, [r7, #6]
 800c832:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c836:	d3e0      	bcc.n	800c7fa <udp_new_port+0xa>
        return 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	e007      	b.n	800c84c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	603b      	str	r3, [r7, #0]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1ea      	bne.n	800c81e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800c848:	4b03      	ldr	r3, [pc, #12]	@ (800c858 <udp_new_port+0x68>)
 800c84a:	881b      	ldrh	r3, [r3, #0]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	20000028 	.word	0x20000028
 800c85c:	200080a4 	.word	0x200080a4

0800c860 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	4613      	mov	r3, r2
 800c86c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d105      	bne.n	800c880 <udp_input_local_match+0x20>
 800c874:	4b27      	ldr	r3, [pc, #156]	@ (800c914 <udp_input_local_match+0xb4>)
 800c876:	2287      	movs	r2, #135	@ 0x87
 800c878:	4927      	ldr	r1, [pc, #156]	@ (800c918 <udp_input_local_match+0xb8>)
 800c87a:	4828      	ldr	r0, [pc, #160]	@ (800c91c <udp_input_local_match+0xbc>)
 800c87c:	f004 ff68 	bl	8011750 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d105      	bne.n	800c892 <udp_input_local_match+0x32>
 800c886:	4b23      	ldr	r3, [pc, #140]	@ (800c914 <udp_input_local_match+0xb4>)
 800c888:	2288      	movs	r2, #136	@ 0x88
 800c88a:	4925      	ldr	r1, [pc, #148]	@ (800c920 <udp_input_local_match+0xc0>)
 800c88c:	4823      	ldr	r0, [pc, #140]	@ (800c91c <udp_input_local_match+0xbc>)
 800c88e:	f004 ff5f 	bl	8011750 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	7a1b      	ldrb	r3, [r3, #8]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00b      	beq.n	800c8b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	7a1a      	ldrb	r2, [r3, #8]
 800c89e:	4b21      	ldr	r3, [pc, #132]	@ (800c924 <udp_input_local_match+0xc4>)
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d001      	beq.n	800c8b2 <udp_input_local_match+0x52>
    return 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e02b      	b.n	800c90a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c8b2:	79fb      	ldrb	r3, [r7, #7]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d018      	beq.n	800c8ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d013      	beq.n	800c8e6 <udp_input_local_match+0x86>
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00f      	beq.n	800c8e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c8c6:	4b17      	ldr	r3, [pc, #92]	@ (800c924 <udp_input_local_match+0xc4>)
 800c8c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8ce:	d00a      	beq.n	800c8e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <udp_input_local_match+0xc4>)
 800c8d6:	695b      	ldr	r3, [r3, #20]
 800c8d8:	405a      	eors	r2, r3
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	3308      	adds	r3, #8
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d110      	bne.n	800c908 <udp_input_local_match+0xa8>
          return 1;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e00f      	b.n	800c90a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d009      	beq.n	800c904 <udp_input_local_match+0xa4>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <udp_input_local_match+0xa4>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	4b09      	ldr	r3, [pc, #36]	@ (800c924 <udp_input_local_match+0xc4>)
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	429a      	cmp	r2, r3
 800c902:	d101      	bne.n	800c908 <udp_input_local_match+0xa8>
        return 1;
 800c904:	2301      	movs	r3, #1
 800c906:	e000      	b.n	800c90a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	080148ac 	.word	0x080148ac
 800c918:	080148dc 	.word	0x080148dc
 800c91c:	08014900 	.word	0x08014900
 800c920:	08014928 	.word	0x08014928
 800c924:	2000510c 	.word	0x2000510c

0800c928 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b08d      	sub	sp, #52	@ 0x34
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d105      	bne.n	800c948 <udp_input+0x20>
 800c93c:	4b7c      	ldr	r3, [pc, #496]	@ (800cb30 <udp_input+0x208>)
 800c93e:	22cf      	movs	r2, #207	@ 0xcf
 800c940:	497c      	ldr	r1, [pc, #496]	@ (800cb34 <udp_input+0x20c>)
 800c942:	487d      	ldr	r0, [pc, #500]	@ (800cb38 <udp_input+0x210>)
 800c944:	f004 ff04 	bl	8011750 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d105      	bne.n	800c95a <udp_input+0x32>
 800c94e:	4b78      	ldr	r3, [pc, #480]	@ (800cb30 <udp_input+0x208>)
 800c950:	22d0      	movs	r2, #208	@ 0xd0
 800c952:	497a      	ldr	r1, [pc, #488]	@ (800cb3c <udp_input+0x214>)
 800c954:	4878      	ldr	r0, [pc, #480]	@ (800cb38 <udp_input+0x210>)
 800c956:	f004 fefb 	bl	8011750 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	895b      	ldrh	r3, [r3, #10]
 800c95e:	2b07      	cmp	r3, #7
 800c960:	d803      	bhi.n	800c96a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7f9 faf4 	bl	8005f50 <pbuf_free>
    goto end;
 800c968:	e0de      	b.n	800cb28 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c970:	4b73      	ldr	r3, [pc, #460]	@ (800cb40 <udp_input+0x218>)
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	4a72      	ldr	r2, [pc, #456]	@ (800cb40 <udp_input+0x218>)
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	4611      	mov	r1, r2
 800c97a:	4618      	mov	r0, r3
 800c97c:	f003 fe02 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800c980:	4603      	mov	r3, r0
 800c982:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	b29b      	uxth	r3, r3
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7f7 ff44 	bl	8004818 <lwip_htons>
 800c990:	4603      	mov	r3, r0
 800c992:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	885b      	ldrh	r3, [r3, #2]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7f7 ff3c 	bl	8004818 <lwip_htons>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9b0:	4b64      	ldr	r3, [pc, #400]	@ (800cb44 <udp_input+0x21c>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9b6:	e054      	b.n	800ca62 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	8a5b      	ldrh	r3, [r3, #18]
 800c9bc:	89fa      	ldrh	r2, [r7, #14]
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d14a      	bne.n	800ca58 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c9c2:	7cfb      	ldrb	r3, [r7, #19]
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9ca:	f7ff ff49 	bl	800c860 <udp_input_local_match>
 800c9ce:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d041      	beq.n	800ca58 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	7c1b      	ldrb	r3, [r3, #16]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d11d      	bne.n	800ca1c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d102      	bne.n	800c9ec <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e8:	61fb      	str	r3, [r7, #28]
 800c9ea:	e017      	b.n	800ca1c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c9ec:	7cfb      	ldrb	r3, [r7, #19]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d014      	beq.n	800ca1c <udp_input+0xf4>
 800c9f2:	4b53      	ldr	r3, [pc, #332]	@ (800cb40 <udp_input+0x218>)
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9fa:	d10f      	bne.n	800ca1c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	3304      	adds	r3, #4
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d008      	beq.n	800ca1c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	3304      	adds	r3, #4
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d101      	bne.n	800ca1c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ca18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1e:	8a9b      	ldrh	r3, [r3, #20]
 800ca20:	8a3a      	ldrh	r2, [r7, #16]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d118      	bne.n	800ca58 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ca26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca28:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d005      	beq.n	800ca3a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	4b43      	ldr	r3, [pc, #268]	@ (800cb40 <udp_input+0x218>)
 800ca34:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d10e      	bne.n	800ca58 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d014      	beq.n	800ca6a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca42:	68da      	ldr	r2, [r3, #12]
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ca48:	4b3e      	ldr	r3, [pc, #248]	@ (800cb44 <udp_input+0x21c>)
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ca50:	4a3c      	ldr	r2, [pc, #240]	@ (800cb44 <udp_input+0x21c>)
 800ca52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca54:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ca56:	e008      	b.n	800ca6a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ca58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d1a7      	bne.n	800c9b8 <udp_input+0x90>
 800ca68:	e000      	b.n	800ca6c <udp_input+0x144>
        break;
 800ca6a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <udp_input+0x15a>
    for_us = 1;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	76fb      	strb	r3, [r7, #27]
 800ca80:	e00a      	b.n	800ca98 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	3304      	adds	r3, #4
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	4b2d      	ldr	r3, [pc, #180]	@ (800cb40 <udp_input+0x218>)
 800ca8a:	695b      	ldr	r3, [r3, #20]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	bf0c      	ite	eq
 800ca90:	2301      	moveq	r3, #1
 800ca92:	2300      	movne	r3, #0
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ca98:	7efb      	ldrb	r3, [r7, #27]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d041      	beq.n	800cb22 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ca9e:	2108      	movs	r1, #8
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f7f9 f9cf 	bl	8005e44 <pbuf_remove_header>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d00a      	beq.n	800cac2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800caac:	4b20      	ldr	r3, [pc, #128]	@ (800cb30 <udp_input+0x208>)
 800caae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800cab2:	4925      	ldr	r1, [pc, #148]	@ (800cb48 <udp_input+0x220>)
 800cab4:	4820      	ldr	r0, [pc, #128]	@ (800cb38 <udp_input+0x210>)
 800cab6:	f004 fe4b 	bl	8011750 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f7f9 fa48 	bl	8005f50 <pbuf_free>
      goto end;
 800cac0:	e032      	b.n	800cb28 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d012      	beq.n	800caee <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caca:	699b      	ldr	r3, [r3, #24]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d00a      	beq.n	800cae6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad2:	699c      	ldr	r4, [r3, #24]
 800cad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad6:	69d8      	ldr	r0, [r3, #28]
 800cad8:	8a3b      	ldrh	r3, [r7, #16]
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	4b1b      	ldr	r3, [pc, #108]	@ (800cb4c <udp_input+0x224>)
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cae2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cae4:	e021      	b.n	800cb2a <udp_input+0x202>
        pbuf_free(p);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7f9 fa32 	bl	8005f50 <pbuf_free>
        goto end;
 800caec:	e01c      	b.n	800cb28 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800caee:	7cfb      	ldrb	r3, [r7, #19]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d112      	bne.n	800cb1a <udp_input+0x1f2>
 800caf4:	4b12      	ldr	r3, [pc, #72]	@ (800cb40 <udp_input+0x218>)
 800caf6:	695b      	ldr	r3, [r3, #20]
 800caf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cafc:	2be0      	cmp	r3, #224	@ 0xe0
 800cafe:	d00c      	beq.n	800cb1a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cb00:	4b0f      	ldr	r3, [pc, #60]	@ (800cb40 <udp_input+0x218>)
 800cb02:	899b      	ldrh	r3, [r3, #12]
 800cb04:	3308      	adds	r3, #8
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	b21b      	sxth	r3, r3
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7f9 fa0c 	bl	8005f2a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cb12:	2103      	movs	r1, #3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f003 f9f7 	bl	800ff08 <icmp_dest_unreach>
      pbuf_free(p);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7f9 fa18 	bl	8005f50 <pbuf_free>
  return;
 800cb20:	e003      	b.n	800cb2a <udp_input+0x202>
    pbuf_free(p);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7f9 fa14 	bl	8005f50 <pbuf_free>
  return;
 800cb28:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cb2a:	372c      	adds	r7, #44	@ 0x2c
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd90      	pop	{r4, r7, pc}
 800cb30:	080148ac 	.word	0x080148ac
 800cb34:	08014950 	.word	0x08014950
 800cb38:	08014900 	.word	0x08014900
 800cb3c:	08014968 	.word	0x08014968
 800cb40:	2000510c 	.word	0x2000510c
 800cb44:	200080a4 	.word	0x200080a4
 800cb48:	08014984 	.word	0x08014984
 800cb4c:	2000511c 	.word	0x2000511c

0800cb50 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af02      	add	r7, sp, #8
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d109      	bne.n	800cb78 <udp_sendto_if+0x28>
 800cb64:	4b2e      	ldr	r3, [pc, #184]	@ (800cc20 <udp_sendto_if+0xd0>)
 800cb66:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cb6a:	492e      	ldr	r1, [pc, #184]	@ (800cc24 <udp_sendto_if+0xd4>)
 800cb6c:	482e      	ldr	r0, [pc, #184]	@ (800cc28 <udp_sendto_if+0xd8>)
 800cb6e:	f004 fdef 	bl	8011750 <iprintf>
 800cb72:	f06f 030f 	mvn.w	r3, #15
 800cb76:	e04f      	b.n	800cc18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d109      	bne.n	800cb92 <udp_sendto_if+0x42>
 800cb7e:	4b28      	ldr	r3, [pc, #160]	@ (800cc20 <udp_sendto_if+0xd0>)
 800cb80:	f240 2281 	movw	r2, #641	@ 0x281
 800cb84:	4929      	ldr	r1, [pc, #164]	@ (800cc2c <udp_sendto_if+0xdc>)
 800cb86:	4828      	ldr	r0, [pc, #160]	@ (800cc28 <udp_sendto_if+0xd8>)
 800cb88:	f004 fde2 	bl	8011750 <iprintf>
 800cb8c:	f06f 030f 	mvn.w	r3, #15
 800cb90:	e042      	b.n	800cc18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <udp_sendto_if+0x5c>
 800cb98:	4b21      	ldr	r3, [pc, #132]	@ (800cc20 <udp_sendto_if+0xd0>)
 800cb9a:	f240 2282 	movw	r2, #642	@ 0x282
 800cb9e:	4924      	ldr	r1, [pc, #144]	@ (800cc30 <udp_sendto_if+0xe0>)
 800cba0:	4821      	ldr	r0, [pc, #132]	@ (800cc28 <udp_sendto_if+0xd8>)
 800cba2:	f004 fdd5 	bl	8011750 <iprintf>
 800cba6:	f06f 030f 	mvn.w	r3, #15
 800cbaa:	e035      	b.n	800cc18 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d109      	bne.n	800cbc6 <udp_sendto_if+0x76>
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc20 <udp_sendto_if+0xd0>)
 800cbb4:	f240 2283 	movw	r2, #643	@ 0x283
 800cbb8:	491e      	ldr	r1, [pc, #120]	@ (800cc34 <udp_sendto_if+0xe4>)
 800cbba:	481b      	ldr	r0, [pc, #108]	@ (800cc28 <udp_sendto_if+0xd8>)
 800cbbc:	f004 fdc8 	bl	8011750 <iprintf>
 800cbc0:	f06f 030f 	mvn.w	r3, #15
 800cbc4:	e028      	b.n	800cc18 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d009      	beq.n	800cbe0 <udp_sendto_if+0x90>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cbdc:	2be0      	cmp	r3, #224	@ 0xe0
 800cbde:	d103      	bne.n	800cbe8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800cbe0:	6a3b      	ldr	r3, [r7, #32]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e00b      	b.n	800cc00 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	6a3b      	ldr	r3, [r7, #32]
 800cbee:	3304      	adds	r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d002      	beq.n	800cbfc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800cbf6:	f06f 0303 	mvn.w	r3, #3
 800cbfa:	e00d      	b.n	800cc18 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800cc00:	887a      	ldrh	r2, [r7, #2]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	68b9      	ldr	r1, [r7, #8]
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 f811 	bl	800cc38 <udp_sendto_if_src>
 800cc16:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	080148ac 	.word	0x080148ac
 800cc24:	08014a20 	.word	0x08014a20
 800cc28:	08014900 	.word	0x08014900
 800cc2c:	08014a3c 	.word	0x08014a3c
 800cc30:	08014a58 	.word	0x08014a58
 800cc34:	08014a78 	.word	0x08014a78

0800cc38 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08c      	sub	sp, #48	@ 0x30
 800cc3c:	af04      	add	r7, sp, #16
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d109      	bne.n	800cc60 <udp_sendto_if_src+0x28>
 800cc4c:	4b65      	ldr	r3, [pc, #404]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800cc4e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cc52:	4965      	ldr	r1, [pc, #404]	@ (800cde8 <udp_sendto_if_src+0x1b0>)
 800cc54:	4865      	ldr	r0, [pc, #404]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800cc56:	f004 fd7b 	bl	8011750 <iprintf>
 800cc5a:	f06f 030f 	mvn.w	r3, #15
 800cc5e:	e0bc      	b.n	800cdda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <udp_sendto_if_src+0x42>
 800cc66:	4b5f      	ldr	r3, [pc, #380]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800cc68:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800cc6c:	4960      	ldr	r1, [pc, #384]	@ (800cdf0 <udp_sendto_if_src+0x1b8>)
 800cc6e:	485f      	ldr	r0, [pc, #380]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800cc70:	f004 fd6e 	bl	8011750 <iprintf>
 800cc74:	f06f 030f 	mvn.w	r3, #15
 800cc78:	e0af      	b.n	800cdda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d109      	bne.n	800cc94 <udp_sendto_if_src+0x5c>
 800cc80:	4b58      	ldr	r3, [pc, #352]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800cc82:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800cc86:	495b      	ldr	r1, [pc, #364]	@ (800cdf4 <udp_sendto_if_src+0x1bc>)
 800cc88:	4858      	ldr	r0, [pc, #352]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800cc8a:	f004 fd61 	bl	8011750 <iprintf>
 800cc8e:	f06f 030f 	mvn.w	r3, #15
 800cc92:	e0a2      	b.n	800cdda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cc94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <udp_sendto_if_src+0x76>
 800cc9a:	4b52      	ldr	r3, [pc, #328]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800cc9c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800cca0:	4955      	ldr	r1, [pc, #340]	@ (800cdf8 <udp_sendto_if_src+0x1c0>)
 800cca2:	4852      	ldr	r0, [pc, #328]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800cca4:	f004 fd54 	bl	8011750 <iprintf>
 800cca8:	f06f 030f 	mvn.w	r3, #15
 800ccac:	e095      	b.n	800cdda <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ccae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d109      	bne.n	800ccc8 <udp_sendto_if_src+0x90>
 800ccb4:	4b4b      	ldr	r3, [pc, #300]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800ccb6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800ccba:	4950      	ldr	r1, [pc, #320]	@ (800cdfc <udp_sendto_if_src+0x1c4>)
 800ccbc:	484b      	ldr	r0, [pc, #300]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800ccbe:	f004 fd47 	bl	8011750 <iprintf>
 800ccc2:	f06f 030f 	mvn.w	r3, #15
 800ccc6:	e088      	b.n	800cdda <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	8a5b      	ldrh	r3, [r3, #18]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10f      	bne.n	800ccf0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ccd0:	68f9      	ldr	r1, [r7, #12]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	8a5b      	ldrh	r3, [r3, #18]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f000 f893 	bl	800ce04 <udp_bind>
 800ccde:	4603      	mov	r3, r0
 800cce0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800cce2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ccea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccee:	e074      	b.n	800cdda <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	891b      	ldrh	r3, [r3, #8]
 800ccf4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	d902      	bls.n	800cd02 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295
 800cd00:	e06b      	b.n	800cdda <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800cd02:	2108      	movs	r1, #8
 800cd04:	68b8      	ldr	r0, [r7, #8]
 800cd06:	f7f9 f88d 	bl	8005e24 <pbuf_add_header>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d015      	beq.n	800cd3c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cd10:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cd14:	2108      	movs	r1, #8
 800cd16:	2022      	movs	r0, #34	@ 0x22
 800cd18:	f7f8 fe36 	bl	8005988 <pbuf_alloc>
 800cd1c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800cd24:	f04f 33ff 	mov.w	r3, #4294967295
 800cd28:	e057      	b.n	800cdda <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	891b      	ldrh	r3, [r3, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	69f8      	ldr	r0, [r7, #28]
 800cd36:	f7f9 fa23 	bl	8006180 <pbuf_chain>
 800cd3a:	e001      	b.n	800cd40 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	895b      	ldrh	r3, [r3, #10]
 800cd44:	2b07      	cmp	r3, #7
 800cd46:	d806      	bhi.n	800cd56 <udp_sendto_if_src+0x11e>
 800cd48:	4b26      	ldr	r3, [pc, #152]	@ (800cde4 <udp_sendto_if_src+0x1ac>)
 800cd4a:	f240 320d 	movw	r2, #781	@ 0x30d
 800cd4e:	492c      	ldr	r1, [pc, #176]	@ (800ce00 <udp_sendto_if_src+0x1c8>)
 800cd50:	4826      	ldr	r0, [pc, #152]	@ (800cdec <udp_sendto_if_src+0x1b4>)
 800cd52:	f004 fcfd 	bl	8011750 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8a5b      	ldrh	r3, [r3, #18]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f7 fd59 	bl	8004818 <lwip_htons>
 800cd66:	4603      	mov	r3, r0
 800cd68:	461a      	mov	r2, r3
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cd6e:	887b      	ldrh	r3, [r7, #2]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7f7 fd51 	bl	8004818 <lwip_htons>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2200      	movs	r2, #0
 800cd82:	719a      	strb	r2, [r3, #6]
 800cd84:	2200      	movs	r2, #0
 800cd86:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	891b      	ldrh	r3, [r3, #8]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f7 fd43 	bl	8004818 <lwip_htons>
 800cd92:	4603      	mov	r3, r0
 800cd94:	461a      	mov	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800cd9a:	2311      	movs	r3, #17
 800cd9c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	7adb      	ldrb	r3, [r3, #11]
 800cda2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	7a9b      	ldrb	r3, [r3, #10]
 800cda8:	7cb9      	ldrb	r1, [r7, #18]
 800cdaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cdac:	9202      	str	r2, [sp, #8]
 800cdae:	7cfa      	ldrb	r2, [r7, #19]
 800cdb0:	9201      	str	r2, [sp, #4]
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdba:	69f8      	ldr	r0, [r7, #28]
 800cdbc:	f003 fb34 	bl	8010428 <ip4_output_if_src>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800cdc4:	69fa      	ldr	r2, [r7, #28]
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d004      	beq.n	800cdd6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800cdcc:	69f8      	ldr	r0, [r7, #28]
 800cdce:	f7f9 f8bf 	bl	8005f50 <pbuf_free>
    q = NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800cdd6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	080148ac 	.word	0x080148ac
 800cde8:	08014a98 	.word	0x08014a98
 800cdec:	08014900 	.word	0x08014900
 800cdf0:	08014ab8 	.word	0x08014ab8
 800cdf4:	08014ad8 	.word	0x08014ad8
 800cdf8:	08014afc 	.word	0x08014afc
 800cdfc:	08014b20 	.word	0x08014b20
 800ce00:	08014b44 	.word	0x08014b44

0800ce04 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ce18:	4b39      	ldr	r3, [pc, #228]	@ (800cf00 <udp_bind+0xfc>)
 800ce1a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d109      	bne.n	800ce36 <udp_bind+0x32>
 800ce22:	4b38      	ldr	r3, [pc, #224]	@ (800cf04 <udp_bind+0x100>)
 800ce24:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ce28:	4937      	ldr	r1, [pc, #220]	@ (800cf08 <udp_bind+0x104>)
 800ce2a:	4838      	ldr	r0, [pc, #224]	@ (800cf0c <udp_bind+0x108>)
 800ce2c:	f004 fc90 	bl	8011750 <iprintf>
 800ce30:	f06f 030f 	mvn.w	r3, #15
 800ce34:	e060      	b.n	800cef8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ce36:	2300      	movs	r3, #0
 800ce38:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce3a:	4b35      	ldr	r3, [pc, #212]	@ (800cf10 <udp_bind+0x10c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	617b      	str	r3, [r7, #20]
 800ce40:	e009      	b.n	800ce56 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ce42:	68fa      	ldr	r2, [r7, #12]
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d102      	bne.n	800ce50 <udp_bind+0x4c>
      rebind = 1;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	74fb      	strb	r3, [r7, #19]
      break;
 800ce4e:	e005      	b.n	800ce5c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	617b      	str	r3, [r7, #20]
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d1f2      	bne.n	800ce42 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d109      	bne.n	800ce76 <udp_bind+0x72>
    port = udp_new_port();
 800ce62:	f7ff fcc5 	bl	800c7f0 <udp_new_port>
 800ce66:	4603      	mov	r3, r0
 800ce68:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ce6a:	88fb      	ldrh	r3, [r7, #6]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d12c      	bne.n	800ceca <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ce70:	f06f 0307 	mvn.w	r3, #7
 800ce74:	e040      	b.n	800cef8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ce76:	4b26      	ldr	r3, [pc, #152]	@ (800cf10 <udp_bind+0x10c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	e022      	b.n	800cec4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d01b      	beq.n	800cebe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	8a5b      	ldrh	r3, [r3, #18]
 800ce8a:	88fa      	ldrh	r2, [r7, #6]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d116      	bne.n	800cebe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d00d      	beq.n	800ceb8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d00a      	beq.n	800ceb8 <udp_bind+0xb4>
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ceaa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d003      	beq.n	800ceb8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ceb8:	f06f 0307 	mvn.w	r3, #7
 800cebc:	e01c      	b.n	800cef8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	617b      	str	r3, [r7, #20]
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1d9      	bne.n	800ce7e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <udp_bind+0xd2>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	e000      	b.n	800ced8 <udp_bind+0xd4>
 800ced6:	2300      	movs	r3, #0
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	88fa      	ldrh	r2, [r7, #6]
 800cee0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cee2:	7cfb      	ldrb	r3, [r7, #19]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d106      	bne.n	800cef6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800cee8:	4b09      	ldr	r3, [pc, #36]	@ (800cf10 <udp_bind+0x10c>)
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800cef0:	4a07      	ldr	r2, [pc, #28]	@ (800cf10 <udp_bind+0x10c>)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cef6:	2300      	movs	r3, #0
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	08016574 	.word	0x08016574
 800cf04:	080148ac 	.word	0x080148ac
 800cf08:	08014b74 	.word	0x08014b74
 800cf0c:	08014900 	.word	0x08014900
 800cf10:	200080a4 	.word	0x200080a4

0800cf14 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d109      	bne.n	800cf3c <udp_connect+0x28>
 800cf28:	4b2c      	ldr	r3, [pc, #176]	@ (800cfdc <udp_connect+0xc8>)
 800cf2a:	f240 4235 	movw	r2, #1077	@ 0x435
 800cf2e:	492c      	ldr	r1, [pc, #176]	@ (800cfe0 <udp_connect+0xcc>)
 800cf30:	482c      	ldr	r0, [pc, #176]	@ (800cfe4 <udp_connect+0xd0>)
 800cf32:	f004 fc0d 	bl	8011750 <iprintf>
 800cf36:	f06f 030f 	mvn.w	r3, #15
 800cf3a:	e04b      	b.n	800cfd4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d109      	bne.n	800cf56 <udp_connect+0x42>
 800cf42:	4b26      	ldr	r3, [pc, #152]	@ (800cfdc <udp_connect+0xc8>)
 800cf44:	f240 4236 	movw	r2, #1078	@ 0x436
 800cf48:	4927      	ldr	r1, [pc, #156]	@ (800cfe8 <udp_connect+0xd4>)
 800cf4a:	4826      	ldr	r0, [pc, #152]	@ (800cfe4 <udp_connect+0xd0>)
 800cf4c:	f004 fc00 	bl	8011750 <iprintf>
 800cf50:	f06f 030f 	mvn.w	r3, #15
 800cf54:	e03e      	b.n	800cfd4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	8a5b      	ldrh	r3, [r3, #18]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d10f      	bne.n	800cf7e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cf5e:	68f9      	ldr	r1, [r7, #12]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	8a5b      	ldrh	r3, [r3, #18]
 800cf64:	461a      	mov	r2, r3
 800cf66:	68f8      	ldr	r0, [r7, #12]
 800cf68:	f7ff ff4c 	bl	800ce04 <udp_bind>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800cf70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <udp_connect+0x6a>
      return err;
 800cf78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf7c:	e02a      	b.n	800cfd4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <udp_connect+0x76>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	e000      	b.n	800cf8c <udp_connect+0x78>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	88fa      	ldrh	r2, [r7, #6]
 800cf94:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	7c1b      	ldrb	r3, [r3, #16]
 800cf9a:	f043 0304 	orr.w	r3, r3, #4
 800cf9e:	b2da      	uxtb	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cfa4:	4b11      	ldr	r3, [pc, #68]	@ (800cfec <udp_connect+0xd8>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	617b      	str	r3, [r7, #20]
 800cfaa:	e008      	b.n	800cfbe <udp_connect+0xaa>
    if (pcb == ipcb) {
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d101      	bne.n	800cfb8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e00d      	b.n	800cfd4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1f3      	bne.n	800cfac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800cfc4:	4b09      	ldr	r3, [pc, #36]	@ (800cfec <udp_connect+0xd8>)
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800cfcc:	4a07      	ldr	r2, [pc, #28]	@ (800cfec <udp_connect+0xd8>)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	080148ac 	.word	0x080148ac
 800cfe0:	08014b8c 	.word	0x08014b8c
 800cfe4:	08014900 	.word	0x08014900
 800cfe8:	08014ba8 	.word	0x08014ba8
 800cfec:	200080a4 	.word	0x200080a4

0800cff0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d107      	bne.n	800d012 <udp_recv+0x22>
 800d002:	4b08      	ldr	r3, [pc, #32]	@ (800d024 <udp_recv+0x34>)
 800d004:	f240 428a 	movw	r2, #1162	@ 0x48a
 800d008:	4907      	ldr	r1, [pc, #28]	@ (800d028 <udp_recv+0x38>)
 800d00a:	4808      	ldr	r0, [pc, #32]	@ (800d02c <udp_recv+0x3c>)
 800d00c:	f004 fba0 	bl	8011750 <iprintf>
 800d010:	e005      	b.n	800d01e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	61da      	str	r2, [r3, #28]
}
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	080148ac 	.word	0x080148ac
 800d028:	08014be0 	.word	0x08014be0
 800d02c:	08014900 	.word	0x08014900

0800d030 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d107      	bne.n	800d04e <udp_remove+0x1e>
 800d03e:	4b19      	ldr	r3, [pc, #100]	@ (800d0a4 <udp_remove+0x74>)
 800d040:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800d044:	4918      	ldr	r1, [pc, #96]	@ (800d0a8 <udp_remove+0x78>)
 800d046:	4819      	ldr	r0, [pc, #100]	@ (800d0ac <udp_remove+0x7c>)
 800d048:	f004 fb82 	bl	8011750 <iprintf>
 800d04c:	e026      	b.n	800d09c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d04e:	4b18      	ldr	r3, [pc, #96]	@ (800d0b0 <udp_remove+0x80>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	429a      	cmp	r2, r3
 800d056:	d105      	bne.n	800d064 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d058:	4b15      	ldr	r3, [pc, #84]	@ (800d0b0 <udp_remove+0x80>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	4a14      	ldr	r2, [pc, #80]	@ (800d0b0 <udp_remove+0x80>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	e017      	b.n	800d094 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d064:	4b12      	ldr	r3, [pc, #72]	@ (800d0b0 <udp_remove+0x80>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	e010      	b.n	800d08e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <udp_remove+0x58>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d104      	bne.n	800d088 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68da      	ldr	r2, [r3, #12]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	60da      	str	r2, [r3, #12]
        break;
 800d086:	e005      	b.n	800d094 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1eb      	bne.n	800d06c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	2000      	movs	r0, #0
 800d098:	f7f8 f8d8 	bl	800524c <memp_free>
}
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	080148ac 	.word	0x080148ac
 800d0a8:	08014bf8 	.word	0x08014bf8
 800d0ac:	08014900 	.word	0x08014900
 800d0b0:	200080a4 	.word	0x200080a4

0800d0b4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	f7f8 f856 	bl	800516c <memp_malloc>
 800d0c0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d007      	beq.n	800d0d8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d0c8:	2220      	movs	r2, #32
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f004 fc97 	bl	8011a00 <memset>
    pcb->ttl = UDP_TTL;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	22ff      	movs	r2, #255	@ 0xff
 800d0d6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d0d8:	687b      	ldr	r3, [r7, #4]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3708      	adds	r7, #8
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
	...

0800d0e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b085      	sub	sp, #20
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d01e      	beq.n	800d132 <udp_netif_ip_addr_changed+0x4e>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d01a      	beq.n	800d132 <udp_netif_ip_addr_changed+0x4e>
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d017      	beq.n	800d132 <udp_netif_ip_addr_changed+0x4e>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d013      	beq.n	800d132 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d10a:	4b0d      	ldr	r3, [pc, #52]	@ (800d140 <udp_netif_ip_addr_changed+0x5c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]
 800d110:	e00c      	b.n	800d12c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d103      	bne.n	800d126 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	681a      	ldr	r2, [r3, #0]
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	60fb      	str	r3, [r7, #12]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1ef      	bne.n	800d112 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d132:	bf00      	nop
 800d134:	3714      	adds	r7, #20
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	bf00      	nop
 800d140:	200080a4 	.word	0x200080a4

0800d144 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800d148:	4b20      	ldr	r3, [pc, #128]	@ (800d1cc <dhcp_inc_pcb_refcount+0x88>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d133      	bne.n	800d1b8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d150:	4b1f      	ldr	r3, [pc, #124]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d005      	beq.n	800d164 <dhcp_inc_pcb_refcount+0x20>
 800d158:	4b1e      	ldr	r3, [pc, #120]	@ (800d1d4 <dhcp_inc_pcb_refcount+0x90>)
 800d15a:	22e5      	movs	r2, #229	@ 0xe5
 800d15c:	491e      	ldr	r1, [pc, #120]	@ (800d1d8 <dhcp_inc_pcb_refcount+0x94>)
 800d15e:	481f      	ldr	r0, [pc, #124]	@ (800d1dc <dhcp_inc_pcb_refcount+0x98>)
 800d160:	f004 faf6 	bl	8011750 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800d164:	f7ff ffa6 	bl	800d0b4 <udp_new>
 800d168:	4603      	mov	r3, r0
 800d16a:	4a19      	ldr	r2, [pc, #100]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d16c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800d16e:	4b18      	ldr	r3, [pc, #96]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800d176:	f04f 33ff 	mov.w	r3, #4294967295
 800d17a:	e024      	b.n	800d1c6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d17c:	4b14      	ldr	r3, [pc, #80]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	7a5a      	ldrb	r2, [r3, #9]
 800d182:	4b13      	ldr	r3, [pc, #76]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0220 	orr.w	r2, r2, #32
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d18e:	4b10      	ldr	r3, [pc, #64]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2244      	movs	r2, #68	@ 0x44
 800d194:	4912      	ldr	r1, [pc, #72]	@ (800d1e0 <dhcp_inc_pcb_refcount+0x9c>)
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fe34 	bl	800ce04 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d19c:	4b0c      	ldr	r3, [pc, #48]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2243      	movs	r2, #67	@ 0x43
 800d1a2:	490f      	ldr	r1, [pc, #60]	@ (800d1e0 <dhcp_inc_pcb_refcount+0x9c>)
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7ff feb5 	bl	800cf14 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d1aa:	4b09      	ldr	r3, [pc, #36]	@ (800d1d0 <dhcp_inc_pcb_refcount+0x8c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	490c      	ldr	r1, [pc, #48]	@ (800d1e4 <dhcp_inc_pcb_refcount+0xa0>)
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7ff ff1c 	bl	800cff0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800d1b8:	4b04      	ldr	r3, [pc, #16]	@ (800d1cc <dhcp_inc_pcb_refcount+0x88>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	4b02      	ldr	r3, [pc, #8]	@ (800d1cc <dhcp_inc_pcb_refcount+0x88>)
 800d1c2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	200080d4 	.word	0x200080d4
 800d1d0:	200080d0 	.word	0x200080d0
 800d1d4:	08014c10 	.word	0x08014c10
 800d1d8:	08014c48 	.word	0x08014c48
 800d1dc:	08014c70 	.word	0x08014c70
 800d1e0:	08016574 	.word	0x08016574
 800d1e4:	0800ea71 	.word	0x0800ea71

0800d1e8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <dhcp_dec_pcb_refcount+0x40>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d105      	bne.n	800d200 <dhcp_dec_pcb_refcount+0x18>
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d22c <dhcp_dec_pcb_refcount+0x44>)
 800d1f6:	22ff      	movs	r2, #255	@ 0xff
 800d1f8:	490d      	ldr	r1, [pc, #52]	@ (800d230 <dhcp_dec_pcb_refcount+0x48>)
 800d1fa:	480e      	ldr	r0, [pc, #56]	@ (800d234 <dhcp_dec_pcb_refcount+0x4c>)
 800d1fc:	f004 faa8 	bl	8011750 <iprintf>
  dhcp_pcb_refcount--;
 800d200:	4b09      	ldr	r3, [pc, #36]	@ (800d228 <dhcp_dec_pcb_refcount+0x40>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	3b01      	subs	r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	4b07      	ldr	r3, [pc, #28]	@ (800d228 <dhcp_dec_pcb_refcount+0x40>)
 800d20a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800d20c:	4b06      	ldr	r3, [pc, #24]	@ (800d228 <dhcp_dec_pcb_refcount+0x40>)
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d107      	bne.n	800d224 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800d214:	4b08      	ldr	r3, [pc, #32]	@ (800d238 <dhcp_dec_pcb_refcount+0x50>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff ff09 	bl	800d030 <udp_remove>
    dhcp_pcb = NULL;
 800d21e:	4b06      	ldr	r3, [pc, #24]	@ (800d238 <dhcp_dec_pcb_refcount+0x50>)
 800d220:	2200      	movs	r2, #0
 800d222:	601a      	str	r2, [r3, #0]
  }
}
 800d224:	bf00      	nop
 800d226:	bd80      	pop	{r7, pc}
 800d228:	200080d4 	.word	0x200080d4
 800d22c:	08014c10 	.word	0x08014c10
 800d230:	08014c98 	.word	0x08014c98
 800d234:	08014c70 	.word	0x08014c70
 800d238:	200080d0 	.word	0x200080d0

0800d23c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d248:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d24a:	210c      	movs	r1, #12
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f001 f851 	bl	800e2f4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d252:	4b06      	ldr	r3, [pc, #24]	@ (800d26c <dhcp_handle_nak+0x30>)
 800d254:	4a05      	ldr	r2, [pc, #20]	@ (800d26c <dhcp_handle_nak+0x30>)
 800d256:	4905      	ldr	r1, [pc, #20]	@ (800d26c <dhcp_handle_nak+0x30>)
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f7f8 f999 	bl	8005590 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fc4a 	bl	800daf8 <dhcp_discover>
}
 800d264:	bf00      	nop
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	08016574 	.word	0x08016574

0800d270 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d27e:	2108      	movs	r1, #8
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f001 f837 	bl	800e2f4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	331c      	adds	r3, #28
 800d28a:	2200      	movs	r2, #0
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f002 fb38 	bl	800f904 <etharp_query>
 800d294:	4603      	mov	r3, r0
 800d296:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	799b      	ldrb	r3, [r3, #6]
 800d29c:	2bff      	cmp	r3, #255	@ 0xff
 800d29e:	d005      	beq.n	800d2ac <dhcp_check+0x3c>
    dhcp->tries++;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	799b      	ldrb	r3, [r3, #6]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800d2ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800d2b0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d2b2:	893b      	ldrh	r3, [r7, #8]
 800d2b4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800d2b8:	4a06      	ldr	r2, [pc, #24]	@ (800d2d4 <dhcp_check+0x64>)
 800d2ba:	fb82 1203 	smull	r1, r2, r2, r3
 800d2be:	1152      	asrs	r2, r2, #5
 800d2c0:	17db      	asrs	r3, r3, #31
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800d2ca:	bf00      	nop
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	10624dd3 	.word	0x10624dd3

0800d2d8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d2e8:	4b0c      	ldr	r3, [pc, #48]	@ (800d31c <dhcp_handle_offer+0x44>)
 800d2ea:	789b      	ldrb	r3, [r3, #2]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d011      	beq.n	800d314 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d2f6:	4b0a      	ldr	r3, [pc, #40]	@ (800d320 <dhcp_handle_offer+0x48>)
 800d2f8:	689b      	ldr	r3, [r3, #8]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7f7 faa1 	bl	8004842 <lwip_htonl>
 800d300:	4602      	mov	r2, r0
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	691a      	ldr	r2, [r3, #16]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f808 	bl	800d324 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d314:	bf00      	nop
 800d316:	3710      	adds	r7, #16
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	200080c8 	.word	0x200080c8
 800d320:	200080a8 	.word	0x200080a8

0800d324 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d324:	b5b0      	push	{r4, r5, r7, lr}
 800d326:	b08a      	sub	sp, #40	@ 0x28
 800d328:	af02      	add	r7, sp, #8
 800d32a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d109      	bne.n	800d346 <dhcp_select+0x22>
 800d332:	4b71      	ldr	r3, [pc, #452]	@ (800d4f8 <dhcp_select+0x1d4>)
 800d334:	f240 1277 	movw	r2, #375	@ 0x177
 800d338:	4970      	ldr	r1, [pc, #448]	@ (800d4fc <dhcp_select+0x1d8>)
 800d33a:	4871      	ldr	r0, [pc, #452]	@ (800d500 <dhcp_select+0x1dc>)
 800d33c:	f004 fa08 	bl	8011750 <iprintf>
 800d340:	f06f 030f 	mvn.w	r3, #15
 800d344:	e0d3      	b.n	800d4ee <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d109      	bne.n	800d366 <dhcp_select+0x42>
 800d352:	4b69      	ldr	r3, [pc, #420]	@ (800d4f8 <dhcp_select+0x1d4>)
 800d354:	f240 1279 	movw	r2, #377	@ 0x179
 800d358:	496a      	ldr	r1, [pc, #424]	@ (800d504 <dhcp_select+0x1e0>)
 800d35a:	4869      	ldr	r0, [pc, #420]	@ (800d500 <dhcp_select+0x1dc>)
 800d35c:	f004 f9f8 	bl	8011750 <iprintf>
 800d360:	f06f 0305 	mvn.w	r3, #5
 800d364:	e0c3      	b.n	800d4ee <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d366:	2101      	movs	r1, #1
 800d368:	69b8      	ldr	r0, [r7, #24]
 800d36a:	f000 ffc3 	bl	800e2f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d36e:	f107 030c 	add.w	r3, r7, #12
 800d372:	2203      	movs	r2, #3
 800d374:	69b9      	ldr	r1, [r7, #24]
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f001 fc48 	bl	800ec0c <dhcp_create_msg>
 800d37c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	f000 8085 	beq.w	800d490 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d38c:	89b8      	ldrh	r0, [r7, #12]
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d394:	2302      	movs	r3, #2
 800d396:	2239      	movs	r2, #57	@ 0x39
 800d398:	f000 ffc6 	bl	800e328 <dhcp_option>
 800d39c:	4603      	mov	r3, r0
 800d39e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d3a0:	89b8      	ldrh	r0, [r7, #12]
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	f001 f815 	bl	800e3dc <dhcp_option_short>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d3b6:	89b8      	ldrh	r0, [r7, #12]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d3be:	2304      	movs	r3, #4
 800d3c0:	2232      	movs	r2, #50	@ 0x32
 800d3c2:	f000 ffb1 	bl	800e328 <dhcp_option>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d3ca:	89bc      	ldrh	r4, [r7, #12]
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7f7 fa33 	bl	8004842 <lwip_htonl>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	461a      	mov	r2, r3
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f001 f82c 	bl	800e440 <dhcp_option_long>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d3ec:	89b8      	ldrh	r0, [r7, #12]
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d3f4:	2304      	movs	r3, #4
 800d3f6:	2236      	movs	r2, #54	@ 0x36
 800d3f8:	f000 ff96 	bl	800e328 <dhcp_option>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d400:	89bc      	ldrh	r4, [r7, #12]
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f7 fa18 	bl	8004842 <lwip_htonl>
 800d412:	4603      	mov	r3, r0
 800d414:	461a      	mov	r2, r3
 800d416:	4629      	mov	r1, r5
 800d418:	4620      	mov	r0, r4
 800d41a:	f001 f811 	bl	800e440 <dhcp_option_long>
 800d41e:	4603      	mov	r3, r0
 800d420:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d422:	89b8      	ldrh	r0, [r7, #12]
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d42a:	2303      	movs	r3, #3
 800d42c:	2237      	movs	r2, #55	@ 0x37
 800d42e:	f000 ff7b 	bl	800e328 <dhcp_option>
 800d432:	4603      	mov	r3, r0
 800d434:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d436:	2300      	movs	r3, #0
 800d438:	77bb      	strb	r3, [r7, #30]
 800d43a:	e00e      	b.n	800d45a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d43c:	89b8      	ldrh	r0, [r7, #12]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800d444:	7fbb      	ldrb	r3, [r7, #30]
 800d446:	4a30      	ldr	r2, [pc, #192]	@ (800d508 <dhcp_select+0x1e4>)
 800d448:	5cd3      	ldrb	r3, [r2, r3]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f000 ffa0 	bl	800e390 <dhcp_option_byte>
 800d450:	4603      	mov	r3, r0
 800d452:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d454:	7fbb      	ldrb	r3, [r7, #30]
 800d456:	3301      	adds	r3, #1
 800d458:	77bb      	strb	r3, [r7, #30]
 800d45a:	7fbb      	ldrb	r3, [r7, #30]
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d9ed      	bls.n	800d43c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d460:	89b8      	ldrh	r0, [r7, #12]
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	33f0      	adds	r3, #240	@ 0xf0
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4619      	mov	r1, r3
 800d46a:	f001 fca5 	bl	800edb8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d46e:	4b27      	ldr	r3, [pc, #156]	@ (800d50c <dhcp_select+0x1e8>)
 800d470:	6818      	ldr	r0, [r3, #0]
 800d472:	4b27      	ldr	r3, [pc, #156]	@ (800d510 <dhcp_select+0x1ec>)
 800d474:	9301      	str	r3, [sp, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	2343      	movs	r3, #67	@ 0x43
 800d47c:	4a25      	ldr	r2, [pc, #148]	@ (800d514 <dhcp_select+0x1f0>)
 800d47e:	6979      	ldr	r1, [r7, #20]
 800d480:	f7ff fbda 	bl	800cc38 <udp_sendto_if_src>
 800d484:	4603      	mov	r3, r0
 800d486:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d488:	6978      	ldr	r0, [r7, #20]
 800d48a:	f7f8 fd61 	bl	8005f50 <pbuf_free>
 800d48e:	e001      	b.n	800d494 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d490:	23ff      	movs	r3, #255	@ 0xff
 800d492:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	799b      	ldrb	r3, [r3, #6]
 800d498:	2bff      	cmp	r3, #255	@ 0xff
 800d49a:	d005      	beq.n	800d4a8 <dhcp_select+0x184>
    dhcp->tries++;
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	799b      	ldrb	r3, [r3, #6]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	799b      	ldrb	r3, [r3, #6]
 800d4ac:	2b05      	cmp	r3, #5
 800d4ae:	d80d      	bhi.n	800d4cc <dhcp_select+0x1a8>
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	799b      	ldrb	r3, [r3, #6]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	2301      	movs	r3, #1
 800d4b8:	4093      	lsls	r3, r2
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	461a      	mov	r2, r3
 800d4be:	0152      	lsls	r2, r2, #5
 800d4c0:	1ad2      	subs	r2, r2, r3
 800d4c2:	0092      	lsls	r2, r2, #2
 800d4c4:	4413      	add	r3, r2
 800d4c6:	00db      	lsls	r3, r3, #3
 800d4c8:	b29b      	uxth	r3, r3
 800d4ca:	e001      	b.n	800d4d0 <dhcp_select+0x1ac>
 800d4cc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800d4d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800d4d8:	4a0f      	ldr	r2, [pc, #60]	@ (800d518 <dhcp_select+0x1f4>)
 800d4da:	fb82 1203 	smull	r1, r2, r2, r3
 800d4de:	1152      	asrs	r2, r2, #5
 800d4e0:	17db      	asrs	r3, r3, #31
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d4ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3720      	adds	r7, #32
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	08014c10 	.word	0x08014c10
 800d4fc:	08014cbc 	.word	0x08014cbc
 800d500:	08014c70 	.word	0x08014c70
 800d504:	08014cd8 	.word	0x08014cd8
 800d508:	2000002c 	.word	0x2000002c
 800d50c:	200080d0 	.word	0x200080d0
 800d510:	08016574 	.word	0x08016574
 800d514:	08016578 	.word	0x08016578
 800d518:	10624dd3 	.word	0x10624dd3

0800d51c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800d522:	4b27      	ldr	r3, [pc, #156]	@ (800d5c0 <dhcp_coarse_tmr+0xa4>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	607b      	str	r3, [r7, #4]
 800d528:	e042      	b.n	800d5b0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d52e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d039      	beq.n	800d5aa <dhcp_coarse_tmr+0x8e>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	795b      	ldrb	r3, [r3, #5]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d035      	beq.n	800d5aa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	8a9b      	ldrh	r3, [r3, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d012      	beq.n	800d56c <dhcp_coarse_tmr+0x50>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	8a5b      	ldrh	r3, [r3, #18]
 800d54a:	3301      	adds	r3, #1
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	825a      	strh	r2, [r3, #18]
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	8a5a      	ldrh	r2, [r3, #18]
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	8a9b      	ldrh	r3, [r3, #20]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d106      	bne.n	800d56c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 fe2e 	bl	800e1c0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f96b 	bl	800d840 <dhcp_start>
 800d56a:	e01e      	b.n	800d5aa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	8a1b      	ldrh	r3, [r3, #16]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00b      	beq.n	800d58c <dhcp_coarse_tmr+0x70>
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	8a1b      	ldrh	r3, [r3, #16]
 800d578:	1e5a      	subs	r2, r3, #1
 800d57a:	b291      	uxth	r1, r2
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	8211      	strh	r1, [r2, #16]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d103      	bne.n	800d58c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 f8c7 	bl	800d718 <dhcp_t2_timeout>
 800d58a:	e00e      	b.n	800d5aa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	89db      	ldrh	r3, [r3, #14]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d00a      	beq.n	800d5aa <dhcp_coarse_tmr+0x8e>
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	89db      	ldrh	r3, [r3, #14]
 800d598:	1e5a      	subs	r2, r3, #1
 800d59a:	b291      	uxth	r1, r2
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	81d1      	strh	r1, [r2, #14]
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d102      	bne.n	800d5aa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 f888 	bl	800d6ba <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	607b      	str	r3, [r7, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1b9      	bne.n	800d52a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800d5b6:	bf00      	nop
 800d5b8:	bf00      	nop
 800d5ba:	3708      	adds	r7, #8
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	2000803c 	.word	0x2000803c

0800d5c4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800d5ca:	4b16      	ldr	r3, [pc, #88]	@ (800d624 <dhcp_fine_tmr+0x60>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	607b      	str	r3, [r7, #4]
 800d5d0:	e020      	b.n	800d614 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d017      	beq.n	800d60e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	891b      	ldrh	r3, [r3, #8]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d906      	bls.n	800d5f4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	891b      	ldrh	r3, [r3, #8]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	b29a      	uxth	r2, r3
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	811a      	strh	r2, [r3, #8]
 800d5f2:	e00c      	b.n	800d60e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	891b      	ldrh	r3, [r3, #8]
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d108      	bne.n	800d60e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	891b      	ldrh	r3, [r3, #8]
 800d600:	3b01      	subs	r3, #1
 800d602:	b29a      	uxth	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f80d 	bl	800d628 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	607b      	str	r3, [r7, #4]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1db      	bne.n	800d5d2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	2000803c 	.word	0x2000803c

0800d628 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d634:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	795b      	ldrb	r3, [r3, #5]
 800d63a:	2b0c      	cmp	r3, #12
 800d63c:	d003      	beq.n	800d646 <dhcp_timeout+0x1e>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	795b      	ldrb	r3, [r3, #5]
 800d642:	2b06      	cmp	r3, #6
 800d644:	d103      	bne.n	800d64e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fa56 	bl	800daf8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800d64c:	e031      	b.n	800d6b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	795b      	ldrb	r3, [r3, #5]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d10e      	bne.n	800d674 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	799b      	ldrb	r3, [r3, #6]
 800d65a:	2b05      	cmp	r3, #5
 800d65c:	d803      	bhi.n	800d666 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff fe60 	bl	800d324 <dhcp_select>
}
 800d664:	e025      	b.n	800d6b2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fdaa 	bl	800e1c0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f8e7 	bl	800d840 <dhcp_start>
}
 800d672:	e01e      	b.n	800d6b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	795b      	ldrb	r3, [r3, #5]
 800d678:	2b08      	cmp	r3, #8
 800d67a:	d10b      	bne.n	800d694 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	799b      	ldrb	r3, [r3, #6]
 800d680:	2b01      	cmp	r3, #1
 800d682:	d803      	bhi.n	800d68c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff fdf3 	bl	800d270 <dhcp_check>
}
 800d68a:	e012      	b.n	800d6b2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fad5 	bl	800dc3c <dhcp_bind>
}
 800d692:	e00e      	b.n	800d6b2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	795b      	ldrb	r3, [r3, #5]
 800d698:	2b03      	cmp	r3, #3
 800d69a:	d10a      	bne.n	800d6b2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	799b      	ldrb	r3, [r3, #6]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d803      	bhi.n	800d6ac <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 fcd7 	bl	800e058 <dhcp_reboot>
}
 800d6aa:	e002      	b.n	800d6b2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 fa23 	bl	800daf8 <dhcp_discover>
}
 800d6b2:	bf00      	nop
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b084      	sub	sp, #16
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6c6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	795b      	ldrb	r3, [r3, #5]
 800d6cc:	2b01      	cmp	r3, #1
 800d6ce:	d007      	beq.n	800d6e0 <dhcp_t1_timeout+0x26>
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	795b      	ldrb	r3, [r3, #5]
 800d6d4:	2b0a      	cmp	r3, #10
 800d6d6:	d003      	beq.n	800d6e0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d6dc:	2b05      	cmp	r3, #5
 800d6de:	d117      	bne.n	800d710 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 fb85 	bl	800ddf0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	899b      	ldrh	r3, [r3, #12]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8a5b      	ldrh	r3, [r3, #18]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	dd0c      	ble.n	800d710 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	899b      	ldrh	r3, [r3, #12]
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8a5b      	ldrh	r3, [r3, #18]
 800d700:	1ad3      	subs	r3, r2, r3
 800d702:	2b00      	cmp	r3, #0
 800d704:	da00      	bge.n	800d708 <dhcp_t1_timeout+0x4e>
 800d706:	3301      	adds	r3, #1
 800d708:	105b      	asrs	r3, r3, #1
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800d710:	bf00      	nop
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d724:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	795b      	ldrb	r3, [r3, #5]
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d00b      	beq.n	800d746 <dhcp_t2_timeout+0x2e>
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	795b      	ldrb	r3, [r3, #5]
 800d732:	2b0a      	cmp	r3, #10
 800d734:	d007      	beq.n	800d746 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d73a:	2b05      	cmp	r3, #5
 800d73c:	d003      	beq.n	800d746 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	795b      	ldrb	r3, [r3, #5]
 800d742:	2b04      	cmp	r3, #4
 800d744:	d117      	bne.n	800d776 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fbec 	bl	800df24 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	8a9b      	ldrh	r3, [r3, #20]
 800d750:	461a      	mov	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	8a5b      	ldrh	r3, [r3, #18]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	2b01      	cmp	r3, #1
 800d75a:	dd0c      	ble.n	800d776 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	8a9b      	ldrh	r3, [r3, #20]
 800d760:	461a      	mov	r2, r3
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	8a5b      	ldrh	r3, [r3, #18]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	2b00      	cmp	r3, #0
 800d76a:	da00      	bge.n	800d76e <dhcp_t2_timeout+0x56>
 800d76c:	3301      	adds	r3, #1
 800d76e:	105b      	asrs	r3, r3, #1
 800d770:	b29a      	uxth	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800d776:	bf00      	nop
 800d778:	3710      	adds	r7, #16
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d78e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800d79c:	4b26      	ldr	r3, [pc, #152]	@ (800d838 <dhcp_handle_ack+0xb8>)
 800d79e:	78db      	ldrb	r3, [r3, #3]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d003      	beq.n	800d7ac <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800d7a4:	4b25      	ldr	r3, [pc, #148]	@ (800d83c <dhcp_handle_ack+0xbc>)
 800d7a6:	68da      	ldr	r2, [r3, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800d7ac:	4b22      	ldr	r3, [pc, #136]	@ (800d838 <dhcp_handle_ack+0xb8>)
 800d7ae:	791b      	ldrb	r3, [r3, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d004      	beq.n	800d7be <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800d7b4:	4b21      	ldr	r3, [pc, #132]	@ (800d83c <dhcp_handle_ack+0xbc>)
 800d7b6:	691a      	ldr	r2, [r3, #16]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d7bc:	e004      	b.n	800d7c8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7c2:	085a      	lsrs	r2, r3, #1
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800d7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d838 <dhcp_handle_ack+0xb8>)
 800d7ca:	795b      	ldrb	r3, [r3, #5]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d004      	beq.n	800d7da <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800d7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800d83c <dhcp_handle_ack+0xbc>)
 800d7d2:	695a      	ldr	r2, [r3, #20]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	631a      	str	r2, [r3, #48]	@ 0x30
 800d7d8:	e007      	b.n	800d7ea <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d7de:	4613      	mov	r3, r2
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	1a9b      	subs	r3, r3, r2
 800d7e4:	08da      	lsrs	r2, r3, #3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	691a      	ldr	r2, [r3, #16]
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800d7f2:	4b11      	ldr	r3, [pc, #68]	@ (800d838 <dhcp_handle_ack+0xb8>)
 800d7f4:	799b      	ldrb	r3, [r3, #6]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00b      	beq.n	800d812 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800d7fa:	4b10      	ldr	r3, [pc, #64]	@ (800d83c <dhcp_handle_ack+0xbc>)
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f7 f81f 	bl	8004842 <lwip_htonl>
 800d804:	4602      	mov	r2, r0
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	71da      	strb	r2, [r3, #7]
 800d810:	e002      	b.n	800d818 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800d818:	4b07      	ldr	r3, [pc, #28]	@ (800d838 <dhcp_handle_ack+0xb8>)
 800d81a:	79db      	ldrb	r3, [r3, #7]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d007      	beq.n	800d830 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800d820:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <dhcp_handle_ack+0xbc>)
 800d822:	69db      	ldr	r3, [r3, #28]
 800d824:	4618      	mov	r0, r3
 800d826:	f7f7 f80c 	bl	8004842 <lwip_htonl>
 800d82a:	4602      	mov	r2, r0
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800d830:	bf00      	nop
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	200080c8 	.word	0x200080c8
 800d83c:	200080a8 	.word	0x200080a8

0800d840 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d109      	bne.n	800d862 <dhcp_start+0x22>
 800d84e:	4b37      	ldr	r3, [pc, #220]	@ (800d92c <dhcp_start+0xec>)
 800d850:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800d854:	4936      	ldr	r1, [pc, #216]	@ (800d930 <dhcp_start+0xf0>)
 800d856:	4837      	ldr	r0, [pc, #220]	@ (800d934 <dhcp_start+0xf4>)
 800d858:	f003 ff7a 	bl	8011750 <iprintf>
 800d85c:	f06f 030f 	mvn.w	r3, #15
 800d860:	e060      	b.n	800d924 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d109      	bne.n	800d884 <dhcp_start+0x44>
 800d870:	4b2e      	ldr	r3, [pc, #184]	@ (800d92c <dhcp_start+0xec>)
 800d872:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 800d876:	4930      	ldr	r1, [pc, #192]	@ (800d938 <dhcp_start+0xf8>)
 800d878:	482e      	ldr	r0, [pc, #184]	@ (800d934 <dhcp_start+0xf4>)
 800d87a:	f003 ff69 	bl	8011750 <iprintf>
 800d87e:	f06f 030f 	mvn.w	r3, #15
 800d882:	e04f      	b.n	800d924 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d888:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d88e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 800d892:	d202      	bcs.n	800d89a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800d894:	f04f 33ff 	mov.w	r3, #4294967295
 800d898:	e044      	b.n	800d924 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10d      	bne.n	800d8bc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800d8a0:	2034      	movs	r0, #52	@ 0x34
 800d8a2:	f7f7 fad3 	bl	8004e4c <mem_malloc>
 800d8a6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d8b2:	e037      	b.n	800d924 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	68fa      	ldr	r2, [r7, #12]
 800d8b8:	625a      	str	r2, [r3, #36]	@ 0x24
 800d8ba:	e005      	b.n	800d8c8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	791b      	ldrb	r3, [r3, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800d8c4:	f7ff fc90 	bl	800d1e8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800d8c8:	2234      	movs	r2, #52	@ 0x34
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f004 f897 	bl	8011a00 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d8d2:	f7ff fc37 	bl	800d144 <dhcp_inc_pcb_refcount>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <dhcp_start+0xa2>
    return ERR_MEM;
 800d8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e0:	e020      	b.n	800d924 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d8ee:	f003 0304 	and.w	r3, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d105      	bne.n	800d902 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800d8f6:	2102      	movs	r1, #2
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 fcfb 	bl	800e2f4 <dhcp_set_state>
    return ERR_OK;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e010      	b.n	800d924 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f8f8 	bl	800daf8 <dhcp_discover>
 800d908:	4603      	mov	r3, r0
 800d90a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800d90c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d005      	beq.n	800d920 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fc53 	bl	800e1c0 <dhcp_release_and_stop>
    return ERR_MEM;
 800d91a:	f04f 33ff 	mov.w	r3, #4294967295
 800d91e:	e001      	b.n	800d924 <dhcp_start+0xe4>
  }
  return result;
 800d920:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d924:	4618      	mov	r0, r3
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	08014c10 	.word	0x08014c10
 800d930:	08014cf4 	.word	0x08014cf4
 800d934:	08014c70 	.word	0x08014c70
 800d938:	08014d38 	.word	0x08014d38

0800d93c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d948:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d025      	beq.n	800d99c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	795b      	ldrb	r3, [r3, #5]
 800d954:	2b0a      	cmp	r3, #10
 800d956:	d008      	beq.n	800d96a <dhcp_network_changed+0x2e>
 800d958:	2b0a      	cmp	r3, #10
 800d95a:	dc0d      	bgt.n	800d978 <dhcp_network_changed+0x3c>
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d01f      	beq.n	800d9a0 <dhcp_network_changed+0x64>
 800d960:	2b00      	cmp	r3, #0
 800d962:	db09      	blt.n	800d978 <dhcp_network_changed+0x3c>
 800d964:	3b03      	subs	r3, #3
 800d966:	2b02      	cmp	r3, #2
 800d968:	d806      	bhi.n	800d978 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f000 fb71 	bl	800e058 <dhcp_reboot>
      break;
 800d976:	e014      	b.n	800d9a2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	795b      	ldrb	r3, [r3, #5]
 800d97c:	2b0c      	cmp	r3, #12
 800d97e:	d906      	bls.n	800d98e <dhcp_network_changed+0x52>
 800d980:	4b09      	ldr	r3, [pc, #36]	@ (800d9a8 <dhcp_network_changed+0x6c>)
 800d982:	f240 326d 	movw	r2, #877	@ 0x36d
 800d986:	4909      	ldr	r1, [pc, #36]	@ (800d9ac <dhcp_network_changed+0x70>)
 800d988:	4809      	ldr	r0, [pc, #36]	@ (800d9b0 <dhcp_network_changed+0x74>)
 800d98a:	f003 fee1 	bl	8011750 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f8af 	bl	800daf8 <dhcp_discover>
      break;
 800d99a:	e002      	b.n	800d9a2 <dhcp_network_changed+0x66>
    return;
 800d99c:	bf00      	nop
 800d99e:	e000      	b.n	800d9a2 <dhcp_network_changed+0x66>
      break;
 800d9a0:	bf00      	nop
  }
}
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	08014c10 	.word	0x08014c10
 800d9ac:	08014d5c 	.word	0x08014d5c
 800d9b0:	08014c70 	.word	0x08014c70

0800d9b4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d107      	bne.n	800d9d4 <dhcp_arp_reply+0x20>
 800d9c4:	4b0e      	ldr	r3, [pc, #56]	@ (800da00 <dhcp_arp_reply+0x4c>)
 800d9c6:	f240 328b 	movw	r2, #907	@ 0x38b
 800d9ca:	490e      	ldr	r1, [pc, #56]	@ (800da04 <dhcp_arp_reply+0x50>)
 800d9cc:	480e      	ldr	r0, [pc, #56]	@ (800da08 <dhcp_arp_reply+0x54>)
 800d9ce:	f003 febf 	bl	8011750 <iprintf>
 800d9d2:	e012      	b.n	800d9fa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00c      	beq.n	800d9fa <dhcp_arp_reply+0x46>
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	795b      	ldrb	r3, [r3, #5]
 800d9e4:	2b08      	cmp	r3, #8
 800d9e6:	d108      	bne.n	800d9fa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	69db      	ldr	r3, [r3, #28]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d102      	bne.n	800d9fa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f809 	bl	800da0c <dhcp_decline>
    }
  }
}
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	08014c10 	.word	0x08014c10
 800da04:	08014cf4 	.word	0x08014cf4
 800da08:	08014c70 	.word	0x08014c70

0800da0c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800da0c:	b5b0      	push	{r4, r5, r7, lr}
 800da0e:	b08a      	sub	sp, #40	@ 0x28
 800da10:	af02      	add	r7, sp, #8
 800da12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da18:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800da1a:	210c      	movs	r1, #12
 800da1c:	69b8      	ldr	r0, [r7, #24]
 800da1e:	f000 fc69 	bl	800e2f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800da22:	f107 030c 	add.w	r3, r7, #12
 800da26:	2204      	movs	r2, #4
 800da28:	69b9      	ldr	r1, [r7, #24]
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f001 f8ee 	bl	800ec0c <dhcp_create_msg>
 800da30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d035      	beq.n	800daa4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800da3e:	89b8      	ldrh	r0, [r7, #12]
 800da40:	693b      	ldr	r3, [r7, #16]
 800da42:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800da46:	2304      	movs	r3, #4
 800da48:	2232      	movs	r2, #50	@ 0x32
 800da4a:	f000 fc6d 	bl	800e328 <dhcp_option>
 800da4e:	4603      	mov	r3, r0
 800da50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800da52:	89bc      	ldrh	r4, [r7, #12]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f6 feef 	bl	8004842 <lwip_htonl>
 800da64:	4603      	mov	r3, r0
 800da66:	461a      	mov	r2, r3
 800da68:	4629      	mov	r1, r5
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fce8 	bl	800e440 <dhcp_option_long>
 800da70:	4603      	mov	r3, r0
 800da72:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800da74:	89b8      	ldrh	r0, [r7, #12]
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	33f0      	adds	r3, #240	@ 0xf0
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	4619      	mov	r1, r3
 800da7e:	f001 f99b 	bl	800edb8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800da82:	4b19      	ldr	r3, [pc, #100]	@ (800dae8 <dhcp_decline+0xdc>)
 800da84:	6818      	ldr	r0, [r3, #0]
 800da86:	4b19      	ldr	r3, [pc, #100]	@ (800daec <dhcp_decline+0xe0>)
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	2343      	movs	r3, #67	@ 0x43
 800da90:	4a17      	ldr	r2, [pc, #92]	@ (800daf0 <dhcp_decline+0xe4>)
 800da92:	6979      	ldr	r1, [r7, #20]
 800da94:	f7ff f8d0 	bl	800cc38 <udp_sendto_if_src>
 800da98:	4603      	mov	r3, r0
 800da9a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800da9c:	6978      	ldr	r0, [r7, #20]
 800da9e:	f7f8 fa57 	bl	8005f50 <pbuf_free>
 800daa2:	e001      	b.n	800daa8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800daa4:	23ff      	movs	r3, #255	@ 0xff
 800daa6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	799b      	ldrb	r3, [r3, #6]
 800daac:	2bff      	cmp	r3, #255	@ 0xff
 800daae:	d005      	beq.n	800dabc <dhcp_decline+0xb0>
    dhcp->tries++;
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	799b      	ldrb	r3, [r3, #6]
 800dab4:	3301      	adds	r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800dabc:	f242 7310 	movw	r3, #10000	@ 0x2710
 800dac0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dac2:	89fb      	ldrh	r3, [r7, #14]
 800dac4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800dac8:	4a0a      	ldr	r2, [pc, #40]	@ (800daf4 <dhcp_decline+0xe8>)
 800daca:	fb82 1203 	smull	r1, r2, r2, r3
 800dace:	1152      	asrs	r2, r2, #5
 800dad0:	17db      	asrs	r3, r3, #31
 800dad2:	1ad3      	subs	r3, r2, r3
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800dada:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3720      	adds	r7, #32
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bdb0      	pop	{r4, r5, r7, pc}
 800dae6:	bf00      	nop
 800dae8:	200080d0 	.word	0x200080d0
 800daec:	08016574 	.word	0x08016574
 800daf0:	08016578 	.word	0x08016578
 800daf4:	10624dd3 	.word	0x10624dd3

0800daf8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08a      	sub	sp, #40	@ 0x28
 800dafc:	af02      	add	r7, sp, #8
 800dafe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db04:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800db06:	2300      	movs	r3, #0
 800db08:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	2200      	movs	r2, #0
 800db0e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800db10:	2106      	movs	r1, #6
 800db12:	69b8      	ldr	r0, [r7, #24]
 800db14:	f000 fbee 	bl	800e2f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800db18:	f107 0308 	add.w	r3, r7, #8
 800db1c:	2201      	movs	r2, #1
 800db1e:	69b9      	ldr	r1, [r7, #24]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f001 f873 	bl	800ec0c <dhcp_create_msg>
 800db26:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d04b      	beq.n	800dbc6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800db34:	8938      	ldrh	r0, [r7, #8]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800db3c:	2302      	movs	r3, #2
 800db3e:	2239      	movs	r2, #57	@ 0x39
 800db40:	f000 fbf2 	bl	800e328 <dhcp_option>
 800db44:	4603      	mov	r3, r0
 800db46:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800db48:	8938      	ldrh	r0, [r7, #8]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db54:	461a      	mov	r2, r3
 800db56:	f000 fc41 	bl	800e3dc <dhcp_option_short>
 800db5a:	4603      	mov	r3, r0
 800db5c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800db5e:	8938      	ldrh	r0, [r7, #8]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800db66:	2303      	movs	r3, #3
 800db68:	2237      	movs	r2, #55	@ 0x37
 800db6a:	f000 fbdd 	bl	800e328 <dhcp_option>
 800db6e:	4603      	mov	r3, r0
 800db70:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800db72:	2300      	movs	r3, #0
 800db74:	77fb      	strb	r3, [r7, #31]
 800db76:	e00e      	b.n	800db96 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800db78:	8938      	ldrh	r0, [r7, #8]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800db80:	7ffb      	ldrb	r3, [r7, #31]
 800db82:	4a29      	ldr	r2, [pc, #164]	@ (800dc28 <dhcp_discover+0x130>)
 800db84:	5cd3      	ldrb	r3, [r2, r3]
 800db86:	461a      	mov	r2, r3
 800db88:	f000 fc02 	bl	800e390 <dhcp_option_byte>
 800db8c:	4603      	mov	r3, r0
 800db8e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800db90:	7ffb      	ldrb	r3, [r7, #31]
 800db92:	3301      	adds	r3, #1
 800db94:	77fb      	strb	r3, [r7, #31]
 800db96:	7ffb      	ldrb	r3, [r7, #31]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d9ed      	bls.n	800db78 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800db9c:	8938      	ldrh	r0, [r7, #8]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	33f0      	adds	r3, #240	@ 0xf0
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	4619      	mov	r1, r3
 800dba6:	f001 f907 	bl	800edb8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800dbaa:	4b20      	ldr	r3, [pc, #128]	@ (800dc2c <dhcp_discover+0x134>)
 800dbac:	6818      	ldr	r0, [r3, #0]
 800dbae:	4b20      	ldr	r3, [pc, #128]	@ (800dc30 <dhcp_discover+0x138>)
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	2343      	movs	r3, #67	@ 0x43
 800dbb8:	4a1e      	ldr	r2, [pc, #120]	@ (800dc34 <dhcp_discover+0x13c>)
 800dbba:	6939      	ldr	r1, [r7, #16]
 800dbbc:	f7ff f83c 	bl	800cc38 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800dbc0:	6938      	ldr	r0, [r7, #16]
 800dbc2:	f7f8 f9c5 	bl	8005f50 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	799b      	ldrb	r3, [r3, #6]
 800dbca:	2bff      	cmp	r3, #255	@ 0xff
 800dbcc:	d005      	beq.n	800dbda <dhcp_discover+0xe2>
    dhcp->tries++;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	799b      	ldrb	r3, [r3, #6]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	799b      	ldrb	r3, [r3, #6]
 800dbde:	2b05      	cmp	r3, #5
 800dbe0:	d80d      	bhi.n	800dbfe <dhcp_discover+0x106>
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	799b      	ldrb	r3, [r3, #6]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	2301      	movs	r3, #1
 800dbea:	4093      	lsls	r3, r2
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	461a      	mov	r2, r3
 800dbf0:	0152      	lsls	r2, r2, #5
 800dbf2:	1ad2      	subs	r2, r2, r3
 800dbf4:	0092      	lsls	r2, r2, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	00db      	lsls	r3, r3, #3
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	e001      	b.n	800dc02 <dhcp_discover+0x10a>
 800dbfe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800dc02:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dc04:	897b      	ldrh	r3, [r7, #10]
 800dc06:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800dc0a:	4a0b      	ldr	r2, [pc, #44]	@ (800dc38 <dhcp_discover+0x140>)
 800dc0c:	fb82 1203 	smull	r1, r2, r2, r3
 800dc10:	1152      	asrs	r2, r2, #5
 800dc12:	17db      	asrs	r3, r3, #31
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800dc1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3720      	adds	r7, #32
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	2000002c 	.word	0x2000002c
 800dc2c:	200080d0 	.word	0x200080d0
 800dc30:	08016574 	.word	0x08016574
 800dc34:	08016578 	.word	0x08016578
 800dc38:	10624dd3 	.word	0x10624dd3

0800dc3c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d107      	bne.n	800dc5a <dhcp_bind+0x1e>
 800dc4a:	4b64      	ldr	r3, [pc, #400]	@ (800dddc <dhcp_bind+0x1a0>)
 800dc4c:	f240 4215 	movw	r2, #1045	@ 0x415
 800dc50:	4963      	ldr	r1, [pc, #396]	@ (800dde0 <dhcp_bind+0x1a4>)
 800dc52:	4864      	ldr	r0, [pc, #400]	@ (800dde4 <dhcp_bind+0x1a8>)
 800dc54:	f003 fd7c 	bl	8011750 <iprintf>
 800dc58:	e0bc      	b.n	800ddd4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800dc60:	69bb      	ldr	r3, [r7, #24]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d107      	bne.n	800dc76 <dhcp_bind+0x3a>
 800dc66:	4b5d      	ldr	r3, [pc, #372]	@ (800dddc <dhcp_bind+0x1a0>)
 800dc68:	f240 4217 	movw	r2, #1047	@ 0x417
 800dc6c:	495e      	ldr	r1, [pc, #376]	@ (800dde8 <dhcp_bind+0x1ac>)
 800dc6e:	485d      	ldr	r0, [pc, #372]	@ (800dde4 <dhcp_bind+0x1a8>)
 800dc70:	f003 fd6e 	bl	8011750 <iprintf>
 800dc74:	e0ae      	b.n	800ddd4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc84:	d019      	beq.n	800dcba <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc8a:	331e      	adds	r3, #30
 800dc8c:	4a57      	ldr	r2, [pc, #348]	@ (800ddec <dhcp_bind+0x1b0>)
 800dc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc92:	095b      	lsrs	r3, r3, #5
 800dc94:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc9c:	d302      	bcc.n	800dca4 <dhcp_bind+0x68>
      timeout = 0xffff;
 800dc9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dca2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	b29a      	uxth	r2, r3
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	8a9b      	ldrh	r3, [r3, #20]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800dcba:	69bb      	ldr	r3, [r7, #24]
 800dcbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcc2:	d01d      	beq.n	800dd00 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc8:	331e      	adds	r3, #30
 800dcca:	4a48      	ldr	r2, [pc, #288]	@ (800ddec <dhcp_bind+0x1b0>)
 800dccc:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd0:	095b      	lsrs	r3, r3, #5
 800dcd2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcda:	d302      	bcc.n	800dce2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800dcdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dce0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	895b      	ldrh	r3, [r3, #10]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d102      	bne.n	800dcf8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	895a      	ldrh	r2, [r3, #10]
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd08:	d01d      	beq.n	800dd46 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd0e:	331e      	adds	r3, #30
 800dd10:	4a36      	ldr	r2, [pc, #216]	@ (800ddec <dhcp_bind+0x1b0>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	095b      	lsrs	r3, r3, #5
 800dd18:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd20:	d302      	bcc.n	800dd28 <dhcp_bind+0xec>
      timeout = 0xffff;
 800dd22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd26:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	899b      	ldrh	r3, [r3, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d102      	bne.n	800dd3e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800dd3e:	69bb      	ldr	r3, [r7, #24]
 800dd40:	899a      	ldrh	r2, [r3, #12]
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	895a      	ldrh	r2, [r3, #10]
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	899b      	ldrh	r3, [r3, #12]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d306      	bcc.n	800dd60 <dhcp_bind+0x124>
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	79db      	ldrb	r3, [r3, #7]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d003      	beq.n	800dd70 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800dd68:	69bb      	ldr	r3, [r7, #24]
 800dd6a:	6a1b      	ldr	r3, [r3, #32]
 800dd6c:	613b      	str	r3, [r7, #16]
 800dd6e:	e014      	b.n	800dd9a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	331c      	adds	r3, #28
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800dd78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	db02      	blt.n	800dd86 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800dd80:	23ff      	movs	r3, #255	@ 0xff
 800dd82:	613b      	str	r3, [r7, #16]
 800dd84:	e009      	b.n	800dd9a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	2bbf      	cmp	r3, #191	@ 0xbf
 800dd8a:	d903      	bls.n	800dd94 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800dd8c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800dd90:	613b      	str	r3, [r7, #16]
 800dd92:	e002      	b.n	800dd9a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800dd94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd98:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800dd9a:	69bb      	ldr	r3, [r7, #24]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d108      	bne.n	800ddb8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	69da      	ldr	r2, [r3, #28]
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	4013      	ands	r3, r2
 800ddae:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ddb6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ddb8:	210a      	movs	r1, #10
 800ddba:	69b8      	ldr	r0, [r7, #24]
 800ddbc:	f000 fa9a 	bl	800e2f4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	f103 011c 	add.w	r1, r3, #28
 800ddc6:	f107 030c 	add.w	r3, r7, #12
 800ddca:	f107 0210 	add.w	r2, r7, #16
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f7f7 fbde 	bl	8005590 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ddd4:	3720      	adds	r7, #32
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08014c10 	.word	0x08014c10
 800dde0:	08014d70 	.word	0x08014d70
 800dde4:	08014c70 	.word	0x08014c70
 800dde8:	08014d8c 	.word	0x08014d8c
 800ddec:	88888889 	.word	0x88888889

0800ddf0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08a      	sub	sp, #40	@ 0x28
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddfc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ddfe:	2105      	movs	r1, #5
 800de00:	69b8      	ldr	r0, [r7, #24]
 800de02:	f000 fa77 	bl	800e2f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800de06:	f107 030c 	add.w	r3, r7, #12
 800de0a:	2203      	movs	r2, #3
 800de0c:	69b9      	ldr	r1, [r7, #24]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fefc 	bl	800ec0c <dhcp_create_msg>
 800de14:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d04e      	beq.n	800deba <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800de22:	89b8      	ldrh	r0, [r7, #12]
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800de2a:	2302      	movs	r3, #2
 800de2c:	2239      	movs	r2, #57	@ 0x39
 800de2e:	f000 fa7b 	bl	800e328 <dhcp_option>
 800de32:	4603      	mov	r3, r0
 800de34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800de36:	89b8      	ldrh	r0, [r7, #12]
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de42:	461a      	mov	r2, r3
 800de44:	f000 faca 	bl	800e3dc <dhcp_option_short>
 800de48:	4603      	mov	r3, r0
 800de4a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800de4c:	89b8      	ldrh	r0, [r7, #12]
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800de54:	2303      	movs	r3, #3
 800de56:	2237      	movs	r2, #55	@ 0x37
 800de58:	f000 fa66 	bl	800e328 <dhcp_option>
 800de5c:	4603      	mov	r3, r0
 800de5e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de60:	2300      	movs	r3, #0
 800de62:	77bb      	strb	r3, [r7, #30]
 800de64:	e00e      	b.n	800de84 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800de66:	89b8      	ldrh	r0, [r7, #12]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800de6e:	7fbb      	ldrb	r3, [r7, #30]
 800de70:	4a29      	ldr	r2, [pc, #164]	@ (800df18 <dhcp_renew+0x128>)
 800de72:	5cd3      	ldrb	r3, [r2, r3]
 800de74:	461a      	mov	r2, r3
 800de76:	f000 fa8b 	bl	800e390 <dhcp_option_byte>
 800de7a:	4603      	mov	r3, r0
 800de7c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800de7e:	7fbb      	ldrb	r3, [r7, #30]
 800de80:	3301      	adds	r3, #1
 800de82:	77bb      	strb	r3, [r7, #30]
 800de84:	7fbb      	ldrb	r3, [r7, #30]
 800de86:	2b02      	cmp	r3, #2
 800de88:	d9ed      	bls.n	800de66 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800de8a:	89b8      	ldrh	r0, [r7, #12]
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	33f0      	adds	r3, #240	@ 0xf0
 800de90:	697a      	ldr	r2, [r7, #20]
 800de92:	4619      	mov	r1, r3
 800de94:	f000 ff90 	bl	800edb8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800de98:	4b20      	ldr	r3, [pc, #128]	@ (800df1c <dhcp_renew+0x12c>)
 800de9a:	6818      	ldr	r0, [r3, #0]
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	f103 0218 	add.w	r2, r3, #24
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	2343      	movs	r3, #67	@ 0x43
 800dea8:	6979      	ldr	r1, [r7, #20]
 800deaa:	f7fe fe51 	bl	800cb50 <udp_sendto_if>
 800deae:	4603      	mov	r3, r0
 800deb0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7f8 f84c 	bl	8005f50 <pbuf_free>
 800deb8:	e001      	b.n	800debe <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800deba:	23ff      	movs	r3, #255	@ 0xff
 800debc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	799b      	ldrb	r3, [r3, #6]
 800dec2:	2bff      	cmp	r3, #255	@ 0xff
 800dec4:	d005      	beq.n	800ded2 <dhcp_renew+0xe2>
    dhcp->tries++;
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	799b      	ldrb	r3, [r3, #6]
 800deca:	3301      	adds	r3, #1
 800decc:	b2da      	uxtb	r2, r3
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	799b      	ldrb	r3, [r3, #6]
 800ded6:	2b09      	cmp	r3, #9
 800ded8:	d809      	bhi.n	800deee <dhcp_renew+0xfe>
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	799b      	ldrb	r3, [r3, #6]
 800dede:	461a      	mov	r2, r3
 800dee0:	0152      	lsls	r2, r2, #5
 800dee2:	1ad2      	subs	r2, r2, r3
 800dee4:	0092      	lsls	r2, r2, #2
 800dee6:	4413      	add	r3, r2
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	b29b      	uxth	r3, r3
 800deec:	e001      	b.n	800def2 <dhcp_renew+0x102>
 800deee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800def2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800def4:	89fb      	ldrh	r3, [r7, #14]
 800def6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800defa:	4a09      	ldr	r2, [pc, #36]	@ (800df20 <dhcp_renew+0x130>)
 800defc:	fb82 1203 	smull	r1, r2, r2, r3
 800df00:	1152      	asrs	r2, r2, #5
 800df02:	17db      	asrs	r3, r3, #31
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	b29a      	uxth	r2, r3
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800df0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3720      	adds	r7, #32
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}
 800df18:	2000002c 	.word	0x2000002c
 800df1c:	200080d0 	.word	0x200080d0
 800df20:	10624dd3 	.word	0x10624dd3

0800df24 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b08a      	sub	sp, #40	@ 0x28
 800df28:	af02      	add	r7, sp, #8
 800df2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df30:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800df32:	2104      	movs	r1, #4
 800df34:	69b8      	ldr	r0, [r7, #24]
 800df36:	f000 f9dd 	bl	800e2f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800df3a:	f107 030c 	add.w	r3, r7, #12
 800df3e:	2203      	movs	r2, #3
 800df40:	69b9      	ldr	r1, [r7, #24]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fe62 	bl	800ec0c <dhcp_create_msg>
 800df48:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d04c      	beq.n	800dfea <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800df56:	89b8      	ldrh	r0, [r7, #12]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800df5e:	2302      	movs	r3, #2
 800df60:	2239      	movs	r2, #57	@ 0x39
 800df62:	f000 f9e1 	bl	800e328 <dhcp_option>
 800df66:	4603      	mov	r3, r0
 800df68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800df6a:	89b8      	ldrh	r0, [r7, #12]
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df76:	461a      	mov	r2, r3
 800df78:	f000 fa30 	bl	800e3dc <dhcp_option_short>
 800df7c:	4603      	mov	r3, r0
 800df7e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800df80:	89b8      	ldrh	r0, [r7, #12]
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800df88:	2303      	movs	r3, #3
 800df8a:	2237      	movs	r2, #55	@ 0x37
 800df8c:	f000 f9cc 	bl	800e328 <dhcp_option>
 800df90:	4603      	mov	r3, r0
 800df92:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800df94:	2300      	movs	r3, #0
 800df96:	77bb      	strb	r3, [r7, #30]
 800df98:	e00e      	b.n	800dfb8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800df9a:	89b8      	ldrh	r0, [r7, #12]
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800dfa2:	7fbb      	ldrb	r3, [r7, #30]
 800dfa4:	4a28      	ldr	r2, [pc, #160]	@ (800e048 <dhcp_rebind+0x124>)
 800dfa6:	5cd3      	ldrb	r3, [r2, r3]
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	f000 f9f1 	bl	800e390 <dhcp_option_byte>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800dfb2:	7fbb      	ldrb	r3, [r7, #30]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	77bb      	strb	r3, [r7, #30]
 800dfb8:	7fbb      	ldrb	r3, [r7, #30]
 800dfba:	2b02      	cmp	r3, #2
 800dfbc:	d9ed      	bls.n	800df9a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dfbe:	89b8      	ldrh	r0, [r7, #12]
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	33f0      	adds	r3, #240	@ 0xf0
 800dfc4:	697a      	ldr	r2, [r7, #20]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	f000 fef6 	bl	800edb8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800dfcc:	4b1f      	ldr	r3, [pc, #124]	@ (800e04c <dhcp_rebind+0x128>)
 800dfce:	6818      	ldr	r0, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	2343      	movs	r3, #67	@ 0x43
 800dfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800e050 <dhcp_rebind+0x12c>)
 800dfd8:	6979      	ldr	r1, [r7, #20]
 800dfda:	f7fe fdb9 	bl	800cb50 <udp_sendto_if>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dfe2:	6978      	ldr	r0, [r7, #20]
 800dfe4:	f7f7 ffb4 	bl	8005f50 <pbuf_free>
 800dfe8:	e001      	b.n	800dfee <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dfea:	23ff      	movs	r3, #255	@ 0xff
 800dfec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	799b      	ldrb	r3, [r3, #6]
 800dff2:	2bff      	cmp	r3, #255	@ 0xff
 800dff4:	d005      	beq.n	800e002 <dhcp_rebind+0xde>
    dhcp->tries++;
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	799b      	ldrb	r3, [r3, #6]
 800dffa:	3301      	adds	r3, #1
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e002:	69bb      	ldr	r3, [r7, #24]
 800e004:	799b      	ldrb	r3, [r3, #6]
 800e006:	2b09      	cmp	r3, #9
 800e008:	d809      	bhi.n	800e01e <dhcp_rebind+0xfa>
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	799b      	ldrb	r3, [r3, #6]
 800e00e:	461a      	mov	r2, r3
 800e010:	0152      	lsls	r2, r2, #5
 800e012:	1ad2      	subs	r2, r2, r3
 800e014:	0092      	lsls	r2, r2, #2
 800e016:	4413      	add	r3, r2
 800e018:	00db      	lsls	r3, r3, #3
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	e001      	b.n	800e022 <dhcp_rebind+0xfe>
 800e01e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e022:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e024:	89fb      	ldrh	r3, [r7, #14]
 800e026:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800e02a:	4a0a      	ldr	r2, [pc, #40]	@ (800e054 <dhcp_rebind+0x130>)
 800e02c:	fb82 1203 	smull	r1, r2, r2, r3
 800e030:	1152      	asrs	r2, r2, #5
 800e032:	17db      	asrs	r3, r3, #31
 800e034:	1ad3      	subs	r3, r2, r3
 800e036:	b29a      	uxth	r2, r3
 800e038:	69bb      	ldr	r3, [r7, #24]
 800e03a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e03c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3720      	adds	r7, #32
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000002c 	.word	0x2000002c
 800e04c:	200080d0 	.word	0x200080d0
 800e050:	08016578 	.word	0x08016578
 800e054:	10624dd3 	.word	0x10624dd3

0800e058 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800e058:	b5b0      	push	{r4, r5, r7, lr}
 800e05a:	b08a      	sub	sp, #40	@ 0x28
 800e05c:	af02      	add	r7, sp, #8
 800e05e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e064:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e066:	2103      	movs	r1, #3
 800e068:	69b8      	ldr	r0, [r7, #24]
 800e06a:	f000 f943 	bl	800e2f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e06e:	f107 030c 	add.w	r3, r7, #12
 800e072:	2203      	movs	r2, #3
 800e074:	69b9      	ldr	r1, [r7, #24]
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 fdc8 	bl	800ec0c <dhcp_create_msg>
 800e07c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d066      	beq.n	800e152 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e08a:	89b8      	ldrh	r0, [r7, #12]
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e092:	2302      	movs	r3, #2
 800e094:	2239      	movs	r2, #57	@ 0x39
 800e096:	f000 f947 	bl	800e328 <dhcp_option>
 800e09a:	4603      	mov	r3, r0
 800e09c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e09e:	89b8      	ldrh	r0, [r7, #12]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	33f0      	adds	r3, #240	@ 0xf0
 800e0a4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f000 f997 	bl	800e3dc <dhcp_option_short>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e0b2:	89b8      	ldrh	r0, [r7, #12]
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e0ba:	2304      	movs	r3, #4
 800e0bc:	2232      	movs	r2, #50	@ 0x32
 800e0be:	f000 f933 	bl	800e328 <dhcp_option>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e0c6:	89bc      	ldrh	r4, [r7, #12]
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f6 fbb5 	bl	8004842 <lwip_htonl>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f000 f9ae 	bl	800e440 <dhcp_option_long>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e0e8:	89b8      	ldrh	r0, [r7, #12]
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	2237      	movs	r2, #55	@ 0x37
 800e0f4:	f000 f918 	bl	800e328 <dhcp_option>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	77bb      	strb	r3, [r7, #30]
 800e100:	e00e      	b.n	800e120 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e102:	89b8      	ldrh	r0, [r7, #12]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e10a:	7fbb      	ldrb	r3, [r7, #30]
 800e10c:	4a28      	ldr	r2, [pc, #160]	@ (800e1b0 <dhcp_reboot+0x158>)
 800e10e:	5cd3      	ldrb	r3, [r2, r3]
 800e110:	461a      	mov	r2, r3
 800e112:	f000 f93d 	bl	800e390 <dhcp_option_byte>
 800e116:	4603      	mov	r3, r0
 800e118:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e11a:	7fbb      	ldrb	r3, [r7, #30]
 800e11c:	3301      	adds	r3, #1
 800e11e:	77bb      	strb	r3, [r7, #30]
 800e120:	7fbb      	ldrb	r3, [r7, #30]
 800e122:	2b02      	cmp	r3, #2
 800e124:	d9ed      	bls.n	800e102 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e126:	89b8      	ldrh	r0, [r7, #12]
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	33f0      	adds	r3, #240	@ 0xf0
 800e12c:	697a      	ldr	r2, [r7, #20]
 800e12e:	4619      	mov	r1, r3
 800e130:	f000 fe42 	bl	800edb8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e134:	4b1f      	ldr	r3, [pc, #124]	@ (800e1b4 <dhcp_reboot+0x15c>)
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	2343      	movs	r3, #67	@ 0x43
 800e13e:	4a1e      	ldr	r2, [pc, #120]	@ (800e1b8 <dhcp_reboot+0x160>)
 800e140:	6979      	ldr	r1, [r7, #20]
 800e142:	f7fe fd05 	bl	800cb50 <udp_sendto_if>
 800e146:	4603      	mov	r3, r0
 800e148:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e14a:	6978      	ldr	r0, [r7, #20]
 800e14c:	f7f7 ff00 	bl	8005f50 <pbuf_free>
 800e150:	e001      	b.n	800e156 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e152:	23ff      	movs	r3, #255	@ 0xff
 800e154:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	799b      	ldrb	r3, [r3, #6]
 800e15a:	2bff      	cmp	r3, #255	@ 0xff
 800e15c:	d005      	beq.n	800e16a <dhcp_reboot+0x112>
    dhcp->tries++;
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	799b      	ldrb	r3, [r3, #6]
 800e162:	3301      	adds	r3, #1
 800e164:	b2da      	uxtb	r2, r3
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	799b      	ldrb	r3, [r3, #6]
 800e16e:	2b09      	cmp	r3, #9
 800e170:	d809      	bhi.n	800e186 <dhcp_reboot+0x12e>
 800e172:	69bb      	ldr	r3, [r7, #24]
 800e174:	799b      	ldrb	r3, [r3, #6]
 800e176:	461a      	mov	r2, r3
 800e178:	0152      	lsls	r2, r2, #5
 800e17a:	1ad2      	subs	r2, r2, r3
 800e17c:	0092      	lsls	r2, r2, #2
 800e17e:	4413      	add	r3, r2
 800e180:	00db      	lsls	r3, r3, #3
 800e182:	b29b      	uxth	r3, r3
 800e184:	e001      	b.n	800e18a <dhcp_reboot+0x132>
 800e186:	f242 7310 	movw	r3, #10000	@ 0x2710
 800e18a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e18c:	89fb      	ldrh	r3, [r7, #14]
 800e18e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800e192:	4a0a      	ldr	r2, [pc, #40]	@ (800e1bc <dhcp_reboot+0x164>)
 800e194:	fb82 1203 	smull	r1, r2, r2, r3
 800e198:	1152      	asrs	r2, r2, #5
 800e19a:	17db      	asrs	r3, r3, #31
 800e19c:	1ad3      	subs	r3, r2, r3
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e1a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3720      	adds	r7, #32
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e1b0:	2000002c 	.word	0x2000002c
 800e1b4:	200080d0 	.word	0x200080d0
 800e1b8:	08016578 	.word	0x08016578
 800e1bc:	10624dd3 	.word	0x10624dd3

0800e1c0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800e1c0:	b5b0      	push	{r4, r5, r7, lr}
 800e1c2:	b08a      	sub	sp, #40	@ 0x28
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 8084 	beq.w	800e2de <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	795b      	ldrb	r3, [r3, #5]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 8081 	beq.w	800e2e2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	2200      	movs	r2, #0
 800e202:	631a      	str	r2, [r3, #48]	@ 0x30
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	2200      	movs	r2, #0
 800e218:	829a      	strh	r2, [r3, #20]
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	8a9a      	ldrh	r2, [r3, #20]
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	825a      	strh	r2, [r3, #18]
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	8a5a      	ldrh	r2, [r3, #18]
 800e226:	69fb      	ldr	r3, [r7, #28]
 800e228:	821a      	strh	r2, [r3, #16]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	8a1a      	ldrh	r2, [r3, #16]
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fdee 	bl	800ee14 <dhcp_supplied_address>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d03b      	beq.n	800e2b6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e23e:	f107 030e 	add.w	r3, r7, #14
 800e242:	2207      	movs	r2, #7
 800e244:	69f9      	ldr	r1, [r7, #28]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fce0 	bl	800ec0c <dhcp_create_msg>
 800e24c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d030      	beq.n	800e2b6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e25a:	89f8      	ldrh	r0, [r7, #14]
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800e262:	2304      	movs	r3, #4
 800e264:	2236      	movs	r2, #54	@ 0x36
 800e266:	f000 f85f 	bl	800e328 <dhcp_option>
 800e26a:	4603      	mov	r3, r0
 800e26c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e26e:	89fc      	ldrh	r4, [r7, #14]
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7f6 fae2 	bl	8004842 <lwip_htonl>
 800e27e:	4603      	mov	r3, r0
 800e280:	461a      	mov	r2, r3
 800e282:	4629      	mov	r1, r5
 800e284:	4620      	mov	r0, r4
 800e286:	f000 f8db 	bl	800e440 <dhcp_option_long>
 800e28a:	4603      	mov	r3, r0
 800e28c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e28e:	89f8      	ldrh	r0, [r7, #14]
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	33f0      	adds	r3, #240	@ 0xf0
 800e294:	69ba      	ldr	r2, [r7, #24]
 800e296:	4619      	mov	r1, r3
 800e298:	f000 fd8e 	bl	800edb8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e29c:	4b13      	ldr	r3, [pc, #76]	@ (800e2ec <dhcp_release_and_stop+0x12c>)
 800e29e:	6818      	ldr	r0, [r3, #0]
 800e2a0:	f107 0210 	add.w	r2, r7, #16
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2343      	movs	r3, #67	@ 0x43
 800e2aa:	69b9      	ldr	r1, [r7, #24]
 800e2ac:	f7fe fc50 	bl	800cb50 <udp_sendto_if>
      pbuf_free(p_out);
 800e2b0:	69b8      	ldr	r0, [r7, #24]
 800e2b2:	f7f7 fe4d 	bl	8005f50 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e2b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f0 <dhcp_release_and_stop+0x130>)
 800e2b8:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f0 <dhcp_release_and_stop+0x130>)
 800e2ba:	490d      	ldr	r1, [pc, #52]	@ (800e2f0 <dhcp_release_and_stop+0x130>)
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f7f7 f967 	bl	8005590 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	69f8      	ldr	r0, [r7, #28]
 800e2c6:	f000 f815 	bl	800e2f4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	791b      	ldrb	r3, [r3, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d008      	beq.n	800e2e4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e2d2:	f7fe ff89 	bl	800d1e8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	711a      	strb	r2, [r3, #4]
 800e2dc:	e002      	b.n	800e2e4 <dhcp_release_and_stop+0x124>
    return;
 800e2de:	bf00      	nop
 800e2e0:	e000      	b.n	800e2e4 <dhcp_release_and_stop+0x124>
    return;
 800e2e2:	bf00      	nop
  }
}
 800e2e4:	3720      	adds	r7, #32
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	200080d0 	.word	0x200080d0
 800e2f0:	08016574 	.word	0x08016574

0800e2f4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	795b      	ldrb	r3, [r3, #5]
 800e304:	78fa      	ldrb	r2, [r7, #3]
 800e306:	429a      	cmp	r2, r3
 800e308:	d008      	beq.n	800e31c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	78fa      	ldrb	r2, [r7, #3]
 800e30e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	811a      	strh	r2, [r3, #8]
  }
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6039      	str	r1, [r7, #0]
 800e330:	4611      	mov	r1, r2
 800e332:	461a      	mov	r2, r3
 800e334:	4603      	mov	r3, r0
 800e336:	80fb      	strh	r3, [r7, #6]
 800e338:	460b      	mov	r3, r1
 800e33a:	717b      	strb	r3, [r7, #5]
 800e33c:	4613      	mov	r3, r2
 800e33e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e340:	88fa      	ldrh	r2, [r7, #6]
 800e342:	793b      	ldrb	r3, [r7, #4]
 800e344:	4413      	add	r3, r2
 800e346:	3302      	adds	r3, #2
 800e348:	2b44      	cmp	r3, #68	@ 0x44
 800e34a:	d906      	bls.n	800e35a <dhcp_option+0x32>
 800e34c:	4b0d      	ldr	r3, [pc, #52]	@ (800e384 <dhcp_option+0x5c>)
 800e34e:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e352:	490d      	ldr	r1, [pc, #52]	@ (800e388 <dhcp_option+0x60>)
 800e354:	480d      	ldr	r0, [pc, #52]	@ (800e38c <dhcp_option+0x64>)
 800e356:	f003 f9fb 	bl	8011750 <iprintf>
  options[options_out_len++] = option_type;
 800e35a:	88fb      	ldrh	r3, [r7, #6]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	80fa      	strh	r2, [r7, #6]
 800e360:	461a      	mov	r2, r3
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	4413      	add	r3, r2
 800e366:	797a      	ldrb	r2, [r7, #5]
 800e368:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e36a:	88fb      	ldrh	r3, [r7, #6]
 800e36c:	1c5a      	adds	r2, r3, #1
 800e36e:	80fa      	strh	r2, [r7, #6]
 800e370:	461a      	mov	r2, r3
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	4413      	add	r3, r2
 800e376:	793a      	ldrb	r2, [r7, #4]
 800e378:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e37a:	88fb      	ldrh	r3, [r7, #6]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	08014c10 	.word	0x08014c10
 800e388:	08014da4 	.word	0x08014da4
 800e38c:	08014c70 	.word	0x08014c70

0800e390 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	4603      	mov	r3, r0
 800e398:	6039      	str	r1, [r7, #0]
 800e39a:	80fb      	strh	r3, [r7, #6]
 800e39c:	4613      	mov	r3, r2
 800e39e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e3a0:	88fb      	ldrh	r3, [r7, #6]
 800e3a2:	2b43      	cmp	r3, #67	@ 0x43
 800e3a4:	d906      	bls.n	800e3b4 <dhcp_option_byte+0x24>
 800e3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e3d0 <dhcp_option_byte+0x40>)
 800e3a8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800e3ac:	4909      	ldr	r1, [pc, #36]	@ (800e3d4 <dhcp_option_byte+0x44>)
 800e3ae:	480a      	ldr	r0, [pc, #40]	@ (800e3d8 <dhcp_option_byte+0x48>)
 800e3b0:	f003 f9ce 	bl	8011750 <iprintf>
  options[options_out_len++] = value;
 800e3b4:	88fb      	ldrh	r3, [r7, #6]
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	80fa      	strh	r2, [r7, #6]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	4413      	add	r3, r2
 800e3c0:	797a      	ldrb	r2, [r7, #5]
 800e3c2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e3c4:	88fb      	ldrh	r3, [r7, #6]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	08014c10 	.word	0x08014c10
 800e3d4:	08014de8 	.word	0x08014de8
 800e3d8:	08014c70 	.word	0x08014c70

0800e3dc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	6039      	str	r1, [r7, #0]
 800e3e6:	80fb      	strh	r3, [r7, #6]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e3ec:	88fb      	ldrh	r3, [r7, #6]
 800e3ee:	3302      	adds	r3, #2
 800e3f0:	2b44      	cmp	r3, #68	@ 0x44
 800e3f2:	d906      	bls.n	800e402 <dhcp_option_short+0x26>
 800e3f4:	4b0f      	ldr	r3, [pc, #60]	@ (800e434 <dhcp_option_short+0x58>)
 800e3f6:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800e3fa:	490f      	ldr	r1, [pc, #60]	@ (800e438 <dhcp_option_short+0x5c>)
 800e3fc:	480f      	ldr	r0, [pc, #60]	@ (800e43c <dhcp_option_short+0x60>)
 800e3fe:	f003 f9a7 	bl	8011750 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e402:	88bb      	ldrh	r3, [r7, #4]
 800e404:	0a1b      	lsrs	r3, r3, #8
 800e406:	b29a      	uxth	r2, r3
 800e408:	88fb      	ldrh	r3, [r7, #6]
 800e40a:	1c59      	adds	r1, r3, #1
 800e40c:	80f9      	strh	r1, [r7, #6]
 800e40e:	4619      	mov	r1, r3
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	440b      	add	r3, r1
 800e414:	b2d2      	uxtb	r2, r2
 800e416:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e418:	88fb      	ldrh	r3, [r7, #6]
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	80fa      	strh	r2, [r7, #6]
 800e41e:	461a      	mov	r2, r3
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	4413      	add	r3, r2
 800e424:	88ba      	ldrh	r2, [r7, #4]
 800e426:	b2d2      	uxtb	r2, r2
 800e428:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e42a:	88fb      	ldrh	r3, [r7, #6]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	08014c10 	.word	0x08014c10
 800e438:	08014e20 	.word	0x08014e20
 800e43c:	08014c70 	.word	0x08014c70

0800e440 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	4603      	mov	r3, r0
 800e448:	60b9      	str	r1, [r7, #8]
 800e44a:	607a      	str	r2, [r7, #4]
 800e44c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e44e:	89fb      	ldrh	r3, [r7, #14]
 800e450:	3304      	adds	r3, #4
 800e452:	2b44      	cmp	r3, #68	@ 0x44
 800e454:	d906      	bls.n	800e464 <dhcp_option_long+0x24>
 800e456:	4b19      	ldr	r3, [pc, #100]	@ (800e4bc <dhcp_option_long+0x7c>)
 800e458:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800e45c:	4918      	ldr	r1, [pc, #96]	@ (800e4c0 <dhcp_option_long+0x80>)
 800e45e:	4819      	ldr	r0, [pc, #100]	@ (800e4c4 <dhcp_option_long+0x84>)
 800e460:	f003 f976 	bl	8011750 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	0e1a      	lsrs	r2, r3, #24
 800e468:	89fb      	ldrh	r3, [r7, #14]
 800e46a:	1c59      	adds	r1, r3, #1
 800e46c:	81f9      	strh	r1, [r7, #14]
 800e46e:	4619      	mov	r1, r3
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	440b      	add	r3, r1
 800e474:	b2d2      	uxtb	r2, r2
 800e476:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	0c1a      	lsrs	r2, r3, #16
 800e47c:	89fb      	ldrh	r3, [r7, #14]
 800e47e:	1c59      	adds	r1, r3, #1
 800e480:	81f9      	strh	r1, [r7, #14]
 800e482:	4619      	mov	r1, r3
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	440b      	add	r3, r1
 800e488:	b2d2      	uxtb	r2, r2
 800e48a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	0a1a      	lsrs	r2, r3, #8
 800e490:	89fb      	ldrh	r3, [r7, #14]
 800e492:	1c59      	adds	r1, r3, #1
 800e494:	81f9      	strh	r1, [r7, #14]
 800e496:	4619      	mov	r1, r3
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	440b      	add	r3, r1
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e4a0:	89fb      	ldrh	r3, [r7, #14]
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	81fa      	strh	r2, [r7, #14]
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e4b2:	89fb      	ldrh	r3, [r7, #14]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	08014c10 	.word	0x08014c10
 800e4c0:	08014e5c 	.word	0x08014e5c
 800e4c4:	08014c70 	.word	0x08014c70

0800e4c8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b090      	sub	sp, #64	@ 0x40
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800e4da:	2208      	movs	r2, #8
 800e4dc:	2100      	movs	r1, #0
 800e4de:	48b5      	ldr	r0, [pc, #724]	@ (800e7b4 <dhcp_parse_reply+0x2ec>)
 800e4e0:	f003 fa8e 	bl	8011a00 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	895b      	ldrh	r3, [r3, #10]
 800e4e8:	2b2b      	cmp	r3, #43	@ 0x2b
 800e4ea:	d802      	bhi.n	800e4f2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800e4ec:	f06f 0301 	mvn.w	r3, #1
 800e4f0:	e2a7      	b.n	800ea42 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	685b      	ldr	r3, [r3, #4]
 800e4f6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800e4f8:	23f0      	movs	r3, #240	@ 0xf0
 800e4fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	891b      	ldrh	r3, [r3, #8]
 800e500:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e506:	e00c      	b.n	800e522 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800e508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e50a:	895b      	ldrh	r3, [r3, #10]
 800e50c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	895b      	ldrh	r3, [r3, #10]
 800e516:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800e51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e524:	2b00      	cmp	r3, #0
 800e526:	d004      	beq.n	800e532 <dhcp_parse_reply+0x6a>
 800e528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52a:	895b      	ldrh	r3, [r3, #10]
 800e52c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e52e:	429a      	cmp	r2, r3
 800e530:	d2ea      	bcs.n	800e508 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800e532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800e538:	f06f 0301 	mvn.w	r3, #1
 800e53c:	e281      	b.n	800ea42 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800e53e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e540:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800e542:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e544:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800e546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e54c:	e239      	b.n	800e9c2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800e54e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e550:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e552:	4413      	add	r3, r2
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800e55e:	f04f 33ff 	mov.w	r3, #4294967295
 800e562:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800e564:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e566:	3302      	adds	r3, #2
 800e568:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800e56a:	8bfa      	ldrh	r2, [r7, #30]
 800e56c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e56e:	429a      	cmp	r2, r3
 800e570:	d202      	bcs.n	800e578 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800e572:	f06f 0301 	mvn.w	r3, #1
 800e576:	e264      	b.n	800ea42 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800e578:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e57a:	3301      	adds	r3, #1
 800e57c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e57e:	8952      	ldrh	r2, [r2, #10]
 800e580:	4293      	cmp	r3, r2
 800e582:	da07      	bge.n	800e594 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800e584:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e586:	3301      	adds	r3, #1
 800e588:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e58a:	4413      	add	r3, r2
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e592:	e00b      	b.n	800e5ac <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d004      	beq.n	800e5a6 <dhcp_parse_reply+0xde>
 800e59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	e000      	b.n	800e5a8 <dhcp_parse_reply+0xe0>
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800e5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800e5b4:	7dfb      	ldrb	r3, [r7, #23]
 800e5b6:	2b3b      	cmp	r3, #59	@ 0x3b
 800e5b8:	f200 812c 	bhi.w	800e814 <dhcp_parse_reply+0x34c>
 800e5bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e5c4 <dhcp_parse_reply+0xfc>)
 800e5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c2:	bf00      	nop
 800e5c4:	0800e6b5 	.word	0x0800e6b5
 800e5c8:	0800e6c5 	.word	0x0800e6c5
 800e5cc:	0800e815 	.word	0x0800e815
 800e5d0:	0800e6e7 	.word	0x0800e6e7
 800e5d4:	0800e815 	.word	0x0800e815
 800e5d8:	0800e815 	.word	0x0800e815
 800e5dc:	0800e815 	.word	0x0800e815
 800e5e0:	0800e815 	.word	0x0800e815
 800e5e4:	0800e815 	.word	0x0800e815
 800e5e8:	0800e815 	.word	0x0800e815
 800e5ec:	0800e815 	.word	0x0800e815
 800e5f0:	0800e815 	.word	0x0800e815
 800e5f4:	0800e815 	.word	0x0800e815
 800e5f8:	0800e815 	.word	0x0800e815
 800e5fc:	0800e815 	.word	0x0800e815
 800e600:	0800e815 	.word	0x0800e815
 800e604:	0800e815 	.word	0x0800e815
 800e608:	0800e815 	.word	0x0800e815
 800e60c:	0800e815 	.word	0x0800e815
 800e610:	0800e815 	.word	0x0800e815
 800e614:	0800e815 	.word	0x0800e815
 800e618:	0800e815 	.word	0x0800e815
 800e61c:	0800e815 	.word	0x0800e815
 800e620:	0800e815 	.word	0x0800e815
 800e624:	0800e815 	.word	0x0800e815
 800e628:	0800e815 	.word	0x0800e815
 800e62c:	0800e815 	.word	0x0800e815
 800e630:	0800e815 	.word	0x0800e815
 800e634:	0800e815 	.word	0x0800e815
 800e638:	0800e815 	.word	0x0800e815
 800e63c:	0800e815 	.word	0x0800e815
 800e640:	0800e815 	.word	0x0800e815
 800e644:	0800e815 	.word	0x0800e815
 800e648:	0800e815 	.word	0x0800e815
 800e64c:	0800e815 	.word	0x0800e815
 800e650:	0800e815 	.word	0x0800e815
 800e654:	0800e815 	.word	0x0800e815
 800e658:	0800e815 	.word	0x0800e815
 800e65c:	0800e815 	.word	0x0800e815
 800e660:	0800e815 	.word	0x0800e815
 800e664:	0800e815 	.word	0x0800e815
 800e668:	0800e815 	.word	0x0800e815
 800e66c:	0800e815 	.word	0x0800e815
 800e670:	0800e815 	.word	0x0800e815
 800e674:	0800e815 	.word	0x0800e815
 800e678:	0800e815 	.word	0x0800e815
 800e67c:	0800e815 	.word	0x0800e815
 800e680:	0800e815 	.word	0x0800e815
 800e684:	0800e815 	.word	0x0800e815
 800e688:	0800e815 	.word	0x0800e815
 800e68c:	0800e815 	.word	0x0800e815
 800e690:	0800e713 	.word	0x0800e713
 800e694:	0800e735 	.word	0x0800e735
 800e698:	0800e771 	.word	0x0800e771
 800e69c:	0800e793 	.word	0x0800e793
 800e6a0:	0800e815 	.word	0x0800e815
 800e6a4:	0800e815 	.word	0x0800e815
 800e6a8:	0800e815 	.word	0x0800e815
 800e6ac:	0800e7d1 	.word	0x0800e7d1
 800e6b0:	0800e7f3 	.word	0x0800e7f3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e6ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800e6c2:	e0ab      	b.n	800e81c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6c8:	2b04      	cmp	r3, #4
 800e6ca:	d009      	beq.n	800e6e0 <dhcp_parse_reply+0x218>
 800e6cc:	4b3a      	ldr	r3, [pc, #232]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e6ce:	f240 622e 	movw	r2, #1582	@ 0x62e
 800e6d2:	493a      	ldr	r1, [pc, #232]	@ (800e7bc <dhcp_parse_reply+0x2f4>)
 800e6d4:	483a      	ldr	r0, [pc, #232]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e6d6:	f003 f83b 	bl	8011750 <iprintf>
 800e6da:	f06f 0305 	mvn.w	r3, #5
 800e6de:	e1b0      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e6e0:	2306      	movs	r3, #6
 800e6e2:	623b      	str	r3, [r7, #32]
        break;
 800e6e4:	e09a      	b.n	800e81c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800e6e6:	2304      	movs	r3, #4
 800e6e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e6ec:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e6f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d209      	bcs.n	800e70c <dhcp_parse_reply+0x244>
 800e6f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e6fa:	f240 6233 	movw	r2, #1587	@ 0x633
 800e6fe:	4931      	ldr	r1, [pc, #196]	@ (800e7c4 <dhcp_parse_reply+0x2fc>)
 800e700:	482f      	ldr	r0, [pc, #188]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e702:	f003 f825 	bl	8011750 <iprintf>
 800e706:	f06f 0305 	mvn.w	r3, #5
 800e70a:	e19a      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e70c:	2307      	movs	r3, #7
 800e70e:	623b      	str	r3, [r7, #32]
        break;
 800e710:	e084      	b.n	800e81c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e716:	2b04      	cmp	r3, #4
 800e718:	d009      	beq.n	800e72e <dhcp_parse_reply+0x266>
 800e71a:	4b27      	ldr	r3, [pc, #156]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e71c:	f240 6241 	movw	r2, #1601	@ 0x641
 800e720:	4926      	ldr	r1, [pc, #152]	@ (800e7bc <dhcp_parse_reply+0x2f4>)
 800e722:	4827      	ldr	r0, [pc, #156]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e724:	f003 f814 	bl	8011750 <iprintf>
 800e728:	f06f 0305 	mvn.w	r3, #5
 800e72c:	e189      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e72e:	2303      	movs	r3, #3
 800e730:	623b      	str	r3, [r7, #32]
        break;
 800e732:	e073      	b.n	800e81c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d009      	beq.n	800e750 <dhcp_parse_reply+0x288>
 800e73c:	4b1e      	ldr	r3, [pc, #120]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e73e:	f240 624f 	movw	r2, #1615	@ 0x64f
 800e742:	4921      	ldr	r1, [pc, #132]	@ (800e7c8 <dhcp_parse_reply+0x300>)
 800e744:	481e      	ldr	r0, [pc, #120]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e746:	f003 f803 	bl	8011750 <iprintf>
 800e74a:	f06f 0305 	mvn.w	r3, #5
 800e74e:	e178      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e750:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e752:	2bf0      	cmp	r3, #240	@ 0xf0
 800e754:	d009      	beq.n	800e76a <dhcp_parse_reply+0x2a2>
 800e756:	4b18      	ldr	r3, [pc, #96]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e758:	f240 6251 	movw	r2, #1617	@ 0x651
 800e75c:	491b      	ldr	r1, [pc, #108]	@ (800e7cc <dhcp_parse_reply+0x304>)
 800e75e:	4818      	ldr	r0, [pc, #96]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e760:	f002 fff6 	bl	8011750 <iprintf>
 800e764:	f06f 0305 	mvn.w	r3, #5
 800e768:	e16b      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e76a:	2300      	movs	r3, #0
 800e76c:	623b      	str	r3, [r7, #32]
        break;
 800e76e:	e055      	b.n	800e81c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e770:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e774:	2b01      	cmp	r3, #1
 800e776:	d009      	beq.n	800e78c <dhcp_parse_reply+0x2c4>
 800e778:	4b0f      	ldr	r3, [pc, #60]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e77a:	f240 6255 	movw	r2, #1621	@ 0x655
 800e77e:	4912      	ldr	r1, [pc, #72]	@ (800e7c8 <dhcp_parse_reply+0x300>)
 800e780:	480f      	ldr	r0, [pc, #60]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e782:	f002 ffe5 	bl	8011750 <iprintf>
 800e786:	f06f 0305 	mvn.w	r3, #5
 800e78a:	e15a      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e78c:	2301      	movs	r3, #1
 800e78e:	623b      	str	r3, [r7, #32]
        break;
 800e790:	e044      	b.n	800e81c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e796:	2b04      	cmp	r3, #4
 800e798:	d009      	beq.n	800e7ae <dhcp_parse_reply+0x2e6>
 800e79a:	4b07      	ldr	r3, [pc, #28]	@ (800e7b8 <dhcp_parse_reply+0x2f0>)
 800e79c:	f240 6259 	movw	r2, #1625	@ 0x659
 800e7a0:	4906      	ldr	r1, [pc, #24]	@ (800e7bc <dhcp_parse_reply+0x2f4>)
 800e7a2:	4807      	ldr	r0, [pc, #28]	@ (800e7c0 <dhcp_parse_reply+0x2f8>)
 800e7a4:	f002 ffd4 	bl	8011750 <iprintf>
 800e7a8:	f06f 0305 	mvn.w	r3, #5
 800e7ac:	e149      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	623b      	str	r3, [r7, #32]
        break;
 800e7b2:	e033      	b.n	800e81c <dhcp_parse_reply+0x354>
 800e7b4:	200080c8 	.word	0x200080c8
 800e7b8:	08014c10 	.word	0x08014c10
 800e7bc:	08014e98 	.word	0x08014e98
 800e7c0:	08014c70 	.word	0x08014c70
 800e7c4:	08014ea4 	.word	0x08014ea4
 800e7c8:	08014eb8 	.word	0x08014eb8
 800e7cc:	08014ec4 	.word	0x08014ec4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e7d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7d4:	2b04      	cmp	r3, #4
 800e7d6:	d009      	beq.n	800e7ec <dhcp_parse_reply+0x324>
 800e7d8:	4b9c      	ldr	r3, [pc, #624]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e7da:	f240 625d 	movw	r2, #1629	@ 0x65d
 800e7de:	499c      	ldr	r1, [pc, #624]	@ (800ea50 <dhcp_parse_reply+0x588>)
 800e7e0:	489c      	ldr	r0, [pc, #624]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e7e2:	f002 ffb5 	bl	8011750 <iprintf>
 800e7e6:	f06f 0305 	mvn.w	r3, #5
 800e7ea:	e12a      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800e7ec:	2304      	movs	r3, #4
 800e7ee:	623b      	str	r3, [r7, #32]
        break;
 800e7f0:	e014      	b.n	800e81c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e7f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7f6:	2b04      	cmp	r3, #4
 800e7f8:	d009      	beq.n	800e80e <dhcp_parse_reply+0x346>
 800e7fa:	4b94      	ldr	r3, [pc, #592]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e7fc:	f240 6261 	movw	r2, #1633	@ 0x661
 800e800:	4993      	ldr	r1, [pc, #588]	@ (800ea50 <dhcp_parse_reply+0x588>)
 800e802:	4894      	ldr	r0, [pc, #592]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e804:	f002 ffa4 	bl	8011750 <iprintf>
 800e808:	f06f 0305 	mvn.w	r3, #5
 800e80c:	e119      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800e80e:	2305      	movs	r3, #5
 800e810:	623b      	str	r3, [r7, #32]
        break;
 800e812:	e003      	b.n	800e81c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800e814:	2300      	movs	r3, #0
 800e816:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800e81a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d103      	bne.n	800e82a <dhcp_parse_reply+0x362>
      offset++;
 800e822:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e824:	3301      	adds	r3, #1
 800e826:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800e828:	e0a1      	b.n	800e96e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800e82a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e82c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e830:	4413      	add	r3, r2
 800e832:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800e836:	4293      	cmp	r3, r2
 800e838:	dd02      	ble.n	800e840 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800e83a:	f06f 0301 	mvn.w	r3, #1
 800e83e:	e100      	b.n	800ea42 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800e840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e844:	b29a      	uxth	r2, r3
 800e846:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e848:	4413      	add	r3, r2
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	3302      	adds	r3, #2
 800e84e:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800e850:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 808a 	beq.w	800e96e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	2b00      	cmp	r3, #0
 800e862:	db02      	blt.n	800e86a <dhcp_parse_reply+0x3a2>
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	2b07      	cmp	r3, #7
 800e868:	dd06      	ble.n	800e878 <dhcp_parse_reply+0x3b0>
 800e86a:	4b78      	ldr	r3, [pc, #480]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e86c:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800e870:	4979      	ldr	r1, [pc, #484]	@ (800ea58 <dhcp_parse_reply+0x590>)
 800e872:	4878      	ldr	r0, [pc, #480]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e874:	f002 ff6c 	bl	8011750 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e878:	4a78      	ldr	r2, [pc, #480]	@ (800ea5c <dhcp_parse_reply+0x594>)
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	4413      	add	r3, r2
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d174      	bne.n	800e96e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800e884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e888:	2b04      	cmp	r3, #4
 800e88a:	bf28      	it	cs
 800e88c:	2304      	movcs	r3, #4
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e892:	8bfb      	ldrh	r3, [r7, #30]
 800e894:	8aba      	ldrh	r2, [r7, #20]
 800e896:	f107 0108 	add.w	r1, r7, #8
 800e89a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e89c:	f7f7 fd52 	bl	8006344 <pbuf_copy_partial>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	8abb      	ldrh	r3, [r7, #20]
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d002      	beq.n	800e8b0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800e8aa:	f06f 0301 	mvn.w	r3, #1
 800e8ae:	e0c8      	b.n	800ea42 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800e8b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8b4:	2b04      	cmp	r3, #4
 800e8b6:	d933      	bls.n	800e920 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e8b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8bc:	f003 0303 	and.w	r3, r3, #3
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d009      	beq.n	800e8da <dhcp_parse_reply+0x412>
 800e8c6:	4b61      	ldr	r3, [pc, #388]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e8c8:	f240 6281 	movw	r2, #1665	@ 0x681
 800e8cc:	4964      	ldr	r1, [pc, #400]	@ (800ea60 <dhcp_parse_reply+0x598>)
 800e8ce:	4861      	ldr	r0, [pc, #388]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e8d0:	f002 ff3e 	bl	8011750 <iprintf>
 800e8d4:	f06f 0305 	mvn.w	r3, #5
 800e8d8:	e0b3      	b.n	800ea42 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800e8da:	4a60      	ldr	r2, [pc, #384]	@ (800ea5c <dhcp_parse_reply+0x594>)
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	4413      	add	r3, r2
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7f5 ffab 	bl	8004842 <lwip_htonl>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	495d      	ldr	r1, [pc, #372]	@ (800ea64 <dhcp_parse_reply+0x59c>)
 800e8f0:	6a3b      	ldr	r3, [r7, #32]
 800e8f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e8f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e8fa:	3b04      	subs	r3, #4
 800e8fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800e900:	8bfb      	ldrh	r3, [r7, #30]
 800e902:	3304      	adds	r3, #4
 800e904:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800e906:	8a7a      	ldrh	r2, [r7, #18]
 800e908:	8bfb      	ldrh	r3, [r7, #30]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d202      	bcs.n	800e914 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800e90e:	f06f 0301 	mvn.w	r3, #1
 800e912:	e096      	b.n	800ea42 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800e914:	8a7b      	ldrh	r3, [r7, #18]
 800e916:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	3301      	adds	r3, #1
 800e91c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800e91e:	e79e      	b.n	800e85e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800e920:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e924:	2b04      	cmp	r3, #4
 800e926:	d106      	bne.n	800e936 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	4618      	mov	r0, r3
 800e92c:	f7f5 ff89 	bl	8004842 <lwip_htonl>
 800e930:	4603      	mov	r3, r0
 800e932:	60bb      	str	r3, [r7, #8]
 800e934:	e011      	b.n	800e95a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e936:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d009      	beq.n	800e952 <dhcp_parse_reply+0x48a>
 800e93e:	4b43      	ldr	r3, [pc, #268]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e940:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800e944:	4948      	ldr	r1, [pc, #288]	@ (800ea68 <dhcp_parse_reply+0x5a0>)
 800e946:	4843      	ldr	r0, [pc, #268]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e948:	f002 ff02 	bl	8011750 <iprintf>
 800e94c:	f06f 0305 	mvn.w	r3, #5
 800e950:	e077      	b.n	800ea42 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800e952:	f107 0308 	add.w	r3, r7, #8
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800e95a:	4a40      	ldr	r2, [pc, #256]	@ (800ea5c <dhcp_parse_reply+0x594>)
 800e95c:	6a3b      	ldr	r3, [r7, #32]
 800e95e:	4413      	add	r3, r2
 800e960:	2201      	movs	r2, #1
 800e962:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800e964:	68ba      	ldr	r2, [r7, #8]
 800e966:	493f      	ldr	r1, [pc, #252]	@ (800ea64 <dhcp_parse_reply+0x59c>)
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	895b      	ldrh	r3, [r3, #10]
 800e972:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e974:	429a      	cmp	r2, r3
 800e976:	d324      	bcc.n	800e9c2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800e978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97a:	895b      	ldrh	r3, [r3, #10]
 800e97c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e97e:	1ad3      	subs	r3, r2, r3
 800e980:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800e982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e984:	895b      	ldrh	r3, [r3, #10]
 800e986:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e988:	1ad3      	subs	r3, r2, r3
 800e98a:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800e98c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e98e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e990:	429a      	cmp	r2, r3
 800e992:	d213      	bcs.n	800e9bc <dhcp_parse_reply+0x4f4>
        q = q->next;
 800e994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e99a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d109      	bne.n	800e9b4 <dhcp_parse_reply+0x4ec>
 800e9a0:	4b2a      	ldr	r3, [pc, #168]	@ (800ea4c <dhcp_parse_reply+0x584>)
 800e9a2:	f240 629d 	movw	r2, #1693	@ 0x69d
 800e9a6:	4931      	ldr	r1, [pc, #196]	@ (800ea6c <dhcp_parse_reply+0x5a4>)
 800e9a8:	482a      	ldr	r0, [pc, #168]	@ (800ea54 <dhcp_parse_reply+0x58c>)
 800e9aa:	f002 fed1 	bl	8011750 <iprintf>
 800e9ae:	f06f 0305 	mvn.w	r3, #5
 800e9b2:	e046      	b.n	800ea42 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800e9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9ba:	e002      	b.n	800e9c2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800e9bc:	f06f 0301 	mvn.w	r3, #1
 800e9c0:	e03f      	b.n	800ea42 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00a      	beq.n	800e9de <dhcp_parse_reply+0x516>
 800e9c8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e9ca:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d206      	bcs.n	800e9de <dhcp_parse_reply+0x516>
 800e9d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e9d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e9d4:	4413      	add	r3, r2
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	2bff      	cmp	r3, #255	@ 0xff
 800e9da:	f47f adb8 	bne.w	800e54e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e9de:	4b1f      	ldr	r3, [pc, #124]	@ (800ea5c <dhcp_parse_reply+0x594>)
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d018      	beq.n	800ea18 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e9e6:	4b1f      	ldr	r3, [pc, #124]	@ (800ea64 <dhcp_parse_reply+0x59c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e9ec:	4b1b      	ldr	r3, [pc, #108]	@ (800ea5c <dhcp_parse_reply+0x594>)
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d102      	bne.n	800e9fe <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9fc:	e00c      	b.n	800ea18 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	2b02      	cmp	r3, #2
 800ea02:	d102      	bne.n	800ea0a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800ea04:	2301      	movs	r3, #1
 800ea06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea08:	e006      	b.n	800ea18 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2b03      	cmp	r3, #3
 800ea0e:	d103      	bne.n	800ea18 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800ea10:	2301      	movs	r3, #1
 800ea12:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800ea14:	2301      	movs	r3, #1
 800ea16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ea18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d006      	beq.n	800ea2c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800ea22:	236c      	movs	r3, #108	@ 0x6c
 800ea24:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ea26:	23ec      	movs	r3, #236	@ 0xec
 800ea28:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ea2a:	e56a      	b.n	800e502 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ea2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d006      	beq.n	800ea40 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800ea36:	232c      	movs	r3, #44	@ 0x2c
 800ea38:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ea3a:	236c      	movs	r3, #108	@ 0x6c
 800ea3c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800ea3e:	e560      	b.n	800e502 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3740      	adds	r7, #64	@ 0x40
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	08014c10 	.word	0x08014c10
 800ea50:	08014e98 	.word	0x08014e98
 800ea54:	08014c70 	.word	0x08014c70
 800ea58:	08014edc 	.word	0x08014edc
 800ea5c:	200080c8 	.word	0x200080c8
 800ea60:	08014ef0 	.word	0x08014ef0
 800ea64:	200080a8 	.word	0x200080a8
 800ea68:	08014f08 	.word	0x08014f08
 800ea6c:	08014f1c 	.word	0x08014f1c

0800ea70 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08a      	sub	sp, #40	@ 0x28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ea7e:	4b60      	ldr	r3, [pc, #384]	@ (800ec00 <dhcp_recv+0x190>)
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea88:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f000 809d 	beq.w	800ebd2 <dhcp_recv+0x162>
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	791b      	ldrb	r3, [r3, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f000 8098 	beq.w	800ebd2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	895b      	ldrh	r3, [r3, #10]
 800eaa6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eaa8:	f240 8095 	bls.w	800ebd6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	f040 8092 	bne.w	800ebda <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800eab6:	2300      	movs	r3, #0
 800eab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eabc:	e012      	b.n	800eae4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800eabe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eac2:	6a3a      	ldr	r2, [r7, #32]
 800eac4:	4413      	add	r3, r2
 800eac6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800eaca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eace:	69b9      	ldr	r1, [r7, #24]
 800ead0:	440b      	add	r3, r1
 800ead2:	7f1b      	ldrb	r3, [r3, #28]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	f040 8082 	bne.w	800ebde <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800eada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eade:	3301      	adds	r3, #1
 800eae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eae4:	6a3b      	ldr	r3, [r7, #32]
 800eae6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eaea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d203      	bcs.n	800eafa <dhcp_recv+0x8a>
 800eaf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eaf6:	2b05      	cmp	r3, #5
 800eaf8:	d9e1      	bls.n	800eabe <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800eafa:	69bb      	ldr	r3, [r7, #24]
 800eafc:	685b      	ldr	r3, [r3, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f5 fe9f 	bl	8004842 <lwip_htonl>
 800eb04:	4602      	mov	r2, r0
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d169      	bne.n	800ebe2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800eb0e:	69f9      	ldr	r1, [r7, #28]
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff fcd9 	bl	800e4c8 <dhcp_parse_reply>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d164      	bne.n	800ebe6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800eb1c:	4b39      	ldr	r3, [pc, #228]	@ (800ec04 <dhcp_recv+0x194>)
 800eb1e:	785b      	ldrb	r3, [r3, #1]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d062      	beq.n	800ebea <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800eb2a:	4b37      	ldr	r3, [pc, #220]	@ (800ec08 <dhcp_recv+0x198>)
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800eb30:	7cfb      	ldrb	r3, [r7, #19]
 800eb32:	2b05      	cmp	r3, #5
 800eb34:	d12a      	bne.n	800eb8c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	795b      	ldrb	r3, [r3, #5]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d112      	bne.n	800eb64 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800eb3e:	6979      	ldr	r1, [r7, #20]
 800eb40:	6a38      	ldr	r0, [r7, #32]
 800eb42:	f7fe fe1d 	bl	800d780 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800eb46:	6a3b      	ldr	r3, [r7, #32]
 800eb48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb4c:	f003 0308 	and.w	r3, r3, #8
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d003      	beq.n	800eb5c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800eb54:	6a38      	ldr	r0, [r7, #32]
 800eb56:	f7fe fb8b 	bl	800d270 <dhcp_check>
 800eb5a:	e049      	b.n	800ebf0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800eb5c:	6a38      	ldr	r0, [r7, #32]
 800eb5e:	f7ff f86d 	bl	800dc3c <dhcp_bind>
 800eb62:	e045      	b.n	800ebf0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	795b      	ldrb	r3, [r3, #5]
 800eb68:	2b03      	cmp	r3, #3
 800eb6a:	d007      	beq.n	800eb7c <dhcp_recv+0x10c>
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	795b      	ldrb	r3, [r3, #5]
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	d003      	beq.n	800eb7c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800eb78:	2b05      	cmp	r3, #5
 800eb7a:	d139      	bne.n	800ebf0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800eb7c:	6979      	ldr	r1, [r7, #20]
 800eb7e:	6a38      	ldr	r0, [r7, #32]
 800eb80:	f7fe fdfe 	bl	800d780 <dhcp_handle_ack>
      dhcp_bind(netif);
 800eb84:	6a38      	ldr	r0, [r7, #32]
 800eb86:	f7ff f859 	bl	800dc3c <dhcp_bind>
 800eb8a:	e031      	b.n	800ebf0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800eb8c:	7cfb      	ldrb	r3, [r7, #19]
 800eb8e:	2b06      	cmp	r3, #6
 800eb90:	d113      	bne.n	800ebba <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800eb96:	2b03      	cmp	r3, #3
 800eb98:	d00b      	beq.n	800ebb2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	795b      	ldrb	r3, [r3, #5]
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d007      	beq.n	800ebb2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800eba6:	2b04      	cmp	r3, #4
 800eba8:	d003      	beq.n	800ebb2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	795b      	ldrb	r3, [r3, #5]
 800ebae:	2b05      	cmp	r3, #5
 800ebb0:	d103      	bne.n	800ebba <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ebb2:	6a38      	ldr	r0, [r7, #32]
 800ebb4:	f7fe fb42 	bl	800d23c <dhcp_handle_nak>
 800ebb8:	e01a      	b.n	800ebf0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ebba:	7cfb      	ldrb	r3, [r7, #19]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d116      	bne.n	800ebee <dhcp_recv+0x17e>
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	795b      	ldrb	r3, [r3, #5]
 800ebc4:	2b06      	cmp	r3, #6
 800ebc6:	d112      	bne.n	800ebee <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800ebc8:	6979      	ldr	r1, [r7, #20]
 800ebca:	6a38      	ldr	r0, [r7, #32]
 800ebcc:	f7fe fb84 	bl	800d2d8 <dhcp_handle_offer>
 800ebd0:	e00e      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebd2:	bf00      	nop
 800ebd4:	e00c      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebd6:	bf00      	nop
 800ebd8:	e00a      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebda:	bf00      	nop
 800ebdc:	e008      	b.n	800ebf0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800ebde:	bf00      	nop
 800ebe0:	e006      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebe2:	bf00      	nop
 800ebe4:	e004      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebe6:	bf00      	nop
 800ebe8:	e002      	b.n	800ebf0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ebea:	bf00      	nop
 800ebec:	e000      	b.n	800ebf0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800ebee:	bf00      	nop
  pbuf_free(p);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f7f7 f9ad 	bl	8005f50 <pbuf_free>
}
 800ebf6:	bf00      	nop
 800ebf8:	3728      	adds	r7, #40	@ 0x28
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	2000510c 	.word	0x2000510c
 800ec04:	200080c8 	.word	0x200080c8
 800ec08:	200080a8 	.word	0x200080a8

0800ec0c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	603b      	str	r3, [r7, #0]
 800ec18:	4613      	mov	r3, r2
 800ec1a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d108      	bne.n	800ec34 <dhcp_create_msg+0x28>
 800ec22:	4b5f      	ldr	r3, [pc, #380]	@ (800eda0 <dhcp_create_msg+0x194>)
 800ec24:	f240 7269 	movw	r2, #1897	@ 0x769
 800ec28:	495e      	ldr	r1, [pc, #376]	@ (800eda4 <dhcp_create_msg+0x198>)
 800ec2a:	485f      	ldr	r0, [pc, #380]	@ (800eda8 <dhcp_create_msg+0x19c>)
 800ec2c:	f002 fd90 	bl	8011750 <iprintf>
 800ec30:	2300      	movs	r3, #0
 800ec32:	e0b1      	b.n	800ed98 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d108      	bne.n	800ec4c <dhcp_create_msg+0x40>
 800ec3a:	4b59      	ldr	r3, [pc, #356]	@ (800eda0 <dhcp_create_msg+0x194>)
 800ec3c:	f240 726a 	movw	r2, #1898	@ 0x76a
 800ec40:	495a      	ldr	r1, [pc, #360]	@ (800edac <dhcp_create_msg+0x1a0>)
 800ec42:	4859      	ldr	r0, [pc, #356]	@ (800eda8 <dhcp_create_msg+0x19c>)
 800ec44:	f002 fd84 	bl	8011750 <iprintf>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	e0a5      	b.n	800ed98 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800ec4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec50:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800ec54:	2036      	movs	r0, #54	@ 0x36
 800ec56:	f7f6 fe97 	bl	8005988 <pbuf_alloc>
 800ec5a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800ec62:	2300      	movs	r3, #0
 800ec64:	e098      	b.n	800ed98 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	895b      	ldrh	r3, [r3, #10]
 800ec6a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800ec6e:	d206      	bcs.n	800ec7e <dhcp_create_msg+0x72>
 800ec70:	4b4b      	ldr	r3, [pc, #300]	@ (800eda0 <dhcp_create_msg+0x194>)
 800ec72:	f240 7271 	movw	r2, #1905	@ 0x771
 800ec76:	494e      	ldr	r1, [pc, #312]	@ (800edb0 <dhcp_create_msg+0x1a4>)
 800ec78:	484b      	ldr	r0, [pc, #300]	@ (800eda8 <dhcp_create_msg+0x19c>)
 800ec7a:	f002 fd69 	bl	8011750 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800ec7e:	79fb      	ldrb	r3, [r7, #7]
 800ec80:	2b03      	cmp	r3, #3
 800ec82:	d103      	bne.n	800ec8c <dhcp_create_msg+0x80>
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	795b      	ldrb	r3, [r3, #5]
 800ec88:	2b03      	cmp	r3, #3
 800ec8a:	d10d      	bne.n	800eca8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	799b      	ldrb	r3, [r3, #6]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d105      	bne.n	800eca0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ec94:	f002 fc5c 	bl	8011550 <rand>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	4b45      	ldr	r3, [pc, #276]	@ (800edb4 <dhcp_create_msg+0x1a8>)
 800ec9e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800eca0:	4b44      	ldr	r3, [pc, #272]	@ (800edb4 <dhcp_create_msg+0x1a8>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800ecae:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	6978      	ldr	r0, [r7, #20]
 800ecb6:	f002 fea3 	bl	8011a00 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7f5 fdb4 	bl	8004842 <lwip_htonl>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ece0:	79fb      	ldrb	r3, [r7, #7]
 800ece2:	2b08      	cmp	r3, #8
 800ece4:	d010      	beq.n	800ed08 <dhcp_create_msg+0xfc>
 800ece6:	79fb      	ldrb	r3, [r7, #7]
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	d00d      	beq.n	800ed08 <dhcp_create_msg+0xfc>
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b07      	cmp	r3, #7
 800ecf0:	d00a      	beq.n	800ed08 <dhcp_create_msg+0xfc>
 800ecf2:	79fb      	ldrb	r3, [r7, #7]
 800ecf4:	2b03      	cmp	r3, #3
 800ecf6:	d10c      	bne.n	800ed12 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ecfc:	2b05      	cmp	r3, #5
 800ecfe:	d003      	beq.n	800ed08 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	795b      	ldrb	r3, [r3, #5]
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d104      	bne.n	800ed12 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	3304      	adds	r3, #4
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ed12:	2300      	movs	r3, #0
 800ed14:	83fb      	strh	r3, [r7, #30]
 800ed16:	e00c      	b.n	800ed32 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ed18:	8bfa      	ldrh	r2, [r7, #30]
 800ed1a:	8bfb      	ldrh	r3, [r7, #30]
 800ed1c:	68f9      	ldr	r1, [r7, #12]
 800ed1e:	440a      	add	r2, r1
 800ed20:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	4413      	add	r3, r2
 800ed28:	460a      	mov	r2, r1
 800ed2a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ed2c:	8bfb      	ldrh	r3, [r7, #30]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	83fb      	strh	r3, [r7, #30]
 800ed32:	8bfb      	ldrh	r3, [r7, #30]
 800ed34:	2b05      	cmp	r3, #5
 800ed36:	d9ef      	bls.n	800ed18 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800ed40:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800ed44:	2200      	movs	r2, #0
 800ed46:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800ed4a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800ed54:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800ed5e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ed68:	2301      	movs	r3, #1
 800ed6a:	2235      	movs	r2, #53	@ 0x35
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7ff fadb 	bl	800e328 <dhcp_option>
 800ed72:	4603      	mov	r3, r0
 800ed74:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800ed7c:	79fa      	ldrb	r2, [r7, #7]
 800ed7e:	8a7b      	ldrh	r3, [r7, #18]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff fb05 	bl	800e390 <dhcp_option_byte>
 800ed86:	4603      	mov	r3, r0
 800ed88:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	8a7a      	ldrh	r2, [r7, #18]
 800ed94:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800ed96:	69bb      	ldr	r3, [r7, #24]
}
 800ed98:	4618      	mov	r0, r3
 800ed9a:	3720      	adds	r7, #32
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	bd80      	pop	{r7, pc}
 800eda0:	08014c10 	.word	0x08014c10
 800eda4:	08014f30 	.word	0x08014f30
 800eda8:	08014c70 	.word	0x08014c70
 800edac:	08014f50 	.word	0x08014f50
 800edb0:	08014f70 	.word	0x08014f70
 800edb4:	200080d8 	.word	0x200080d8

0800edb8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b084      	sub	sp, #16
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	4603      	mov	r3, r0
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	607a      	str	r2, [r7, #4]
 800edc4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800edc6:	89fb      	ldrh	r3, [r7, #14]
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	81fa      	strh	r2, [r7, #14]
 800edcc:	461a      	mov	r2, r3
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	4413      	add	r3, r2
 800edd2:	22ff      	movs	r2, #255	@ 0xff
 800edd4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800edd6:	e007      	b.n	800ede8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800edd8:	89fb      	ldrh	r3, [r7, #14]
 800edda:	1c5a      	adds	r2, r3, #1
 800eddc:	81fa      	strh	r2, [r7, #14]
 800edde:	461a      	mov	r2, r3
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	4413      	add	r3, r2
 800ede4:	2200      	movs	r2, #0
 800ede6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800ede8:	89fb      	ldrh	r3, [r7, #14]
 800edea:	2b43      	cmp	r3, #67	@ 0x43
 800edec:	d904      	bls.n	800edf8 <dhcp_option_trailer+0x40>
 800edee:	89fb      	ldrh	r3, [r7, #14]
 800edf0:	f003 0303 	and.w	r3, r3, #3
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d002      	beq.n	800edfe <dhcp_option_trailer+0x46>
 800edf8:	89fb      	ldrh	r3, [r7, #14]
 800edfa:	2b43      	cmp	r3, #67	@ 0x43
 800edfc:	d9ec      	bls.n	800edd8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800edfe:	89fb      	ldrh	r3, [r7, #14]
 800ee00:	33f0      	adds	r3, #240	@ 0xf0
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	4619      	mov	r1, r3
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7f6 ff1c 	bl	8005c44 <pbuf_realloc>
}
 800ee0c:	bf00      	nop
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b085      	sub	sp, #20
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d017      	beq.n	800ee52 <dhcp_supplied_address+0x3e>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d013      	beq.n	800ee52 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	795b      	ldrb	r3, [r3, #5]
 800ee34:	2b0a      	cmp	r3, #10
 800ee36:	d007      	beq.n	800ee48 <dhcp_supplied_address+0x34>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	795b      	ldrb	r3, [r3, #5]
 800ee3c:	2b05      	cmp	r3, #5
 800ee3e:	d003      	beq.n	800ee48 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ee44:	2b04      	cmp	r3, #4
 800ee46:	d101      	bne.n	800ee4c <dhcp_supplied_address+0x38>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e000      	b.n	800ee4e <dhcp_supplied_address+0x3a>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	e000      	b.n	800ee54 <dhcp_supplied_address+0x40>
  }
  return 0;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b082      	sub	sp, #8
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ee68:	4915      	ldr	r1, [pc, #84]	@ (800eec0 <etharp_free_entry+0x60>)
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	005b      	lsls	r3, r3, #1
 800ee70:	4413      	add	r3, r2
 800ee72:	00db      	lsls	r3, r3, #3
 800ee74:	440b      	add	r3, r1
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d013      	beq.n	800eea4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ee7c:	4910      	ldr	r1, [pc, #64]	@ (800eec0 <etharp_free_entry+0x60>)
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	00db      	lsls	r3, r3, #3
 800ee88:	440b      	add	r3, r1
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f7 f85f 	bl	8005f50 <pbuf_free>
    arp_table[i].q = NULL;
 800ee92:	490b      	ldr	r1, [pc, #44]	@ (800eec0 <etharp_free_entry+0x60>)
 800ee94:	687a      	ldr	r2, [r7, #4]
 800ee96:	4613      	mov	r3, r2
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	00db      	lsls	r3, r3, #3
 800ee9e:	440b      	add	r3, r1
 800eea0:	2200      	movs	r2, #0
 800eea2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800eea4:	4906      	ldr	r1, [pc, #24]	@ (800eec0 <etharp_free_entry+0x60>)
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	440b      	add	r3, r1
 800eeb2:	3314      	adds	r3, #20
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	200080dc 	.word	0x200080dc

0800eec4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b082      	sub	sp, #8
 800eec8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eeca:	2300      	movs	r3, #0
 800eecc:	607b      	str	r3, [r7, #4]
 800eece:	e096      	b.n	800effe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800eed0:	494f      	ldr	r1, [pc, #316]	@ (800f010 <etharp_tmr+0x14c>)
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	4613      	mov	r3, r2
 800eed6:	005b      	lsls	r3, r3, #1
 800eed8:	4413      	add	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	440b      	add	r3, r1
 800eede:	3314      	adds	r3, #20
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800eee4:	78fb      	ldrb	r3, [r7, #3]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	f000 8086 	beq.w	800eff8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800eeec:	4948      	ldr	r1, [pc, #288]	@ (800f010 <etharp_tmr+0x14c>)
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	4613      	mov	r3, r2
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	4413      	add	r3, r2
 800eef6:	00db      	lsls	r3, r3, #3
 800eef8:	440b      	add	r3, r1
 800eefa:	3312      	adds	r3, #18
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	3301      	adds	r3, #1
 800ef00:	b298      	uxth	r0, r3
 800ef02:	4943      	ldr	r1, [pc, #268]	@ (800f010 <etharp_tmr+0x14c>)
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	4613      	mov	r3, r2
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	00db      	lsls	r3, r3, #3
 800ef0e:	440b      	add	r3, r1
 800ef10:	3312      	adds	r3, #18
 800ef12:	4602      	mov	r2, r0
 800ef14:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ef16:	493e      	ldr	r1, [pc, #248]	@ (800f010 <etharp_tmr+0x14c>)
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	4613      	mov	r3, r2
 800ef1c:	005b      	lsls	r3, r3, #1
 800ef1e:	4413      	add	r3, r2
 800ef20:	00db      	lsls	r3, r3, #3
 800ef22:	440b      	add	r3, r1
 800ef24:	3312      	adds	r3, #18
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ef2c:	d215      	bcs.n	800ef5a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ef2e:	4938      	ldr	r1, [pc, #224]	@ (800f010 <etharp_tmr+0x14c>)
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	4613      	mov	r3, r2
 800ef34:	005b      	lsls	r3, r3, #1
 800ef36:	4413      	add	r3, r2
 800ef38:	00db      	lsls	r3, r3, #3
 800ef3a:	440b      	add	r3, r1
 800ef3c:	3314      	adds	r3, #20
 800ef3e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d10e      	bne.n	800ef62 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ef44:	4932      	ldr	r1, [pc, #200]	@ (800f010 <etharp_tmr+0x14c>)
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	4613      	mov	r3, r2
 800ef4a:	005b      	lsls	r3, r3, #1
 800ef4c:	4413      	add	r3, r2
 800ef4e:	00db      	lsls	r3, r3, #3
 800ef50:	440b      	add	r3, r1
 800ef52:	3312      	adds	r3, #18
 800ef54:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ef56:	2b04      	cmp	r3, #4
 800ef58:	d903      	bls.n	800ef62 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f7ff ff80 	bl	800ee60 <etharp_free_entry>
 800ef60:	e04a      	b.n	800eff8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ef62:	492b      	ldr	r1, [pc, #172]	@ (800f010 <etharp_tmr+0x14c>)
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	4613      	mov	r3, r2
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	4413      	add	r3, r2
 800ef6c:	00db      	lsls	r3, r3, #3
 800ef6e:	440b      	add	r3, r1
 800ef70:	3314      	adds	r3, #20
 800ef72:	781b      	ldrb	r3, [r3, #0]
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d10a      	bne.n	800ef8e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ef78:	4925      	ldr	r1, [pc, #148]	@ (800f010 <etharp_tmr+0x14c>)
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	4613      	mov	r3, r2
 800ef7e:	005b      	lsls	r3, r3, #1
 800ef80:	4413      	add	r3, r2
 800ef82:	00db      	lsls	r3, r3, #3
 800ef84:	440b      	add	r3, r1
 800ef86:	3314      	adds	r3, #20
 800ef88:	2204      	movs	r2, #4
 800ef8a:	701a      	strb	r2, [r3, #0]
 800ef8c:	e034      	b.n	800eff8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ef8e:	4920      	ldr	r1, [pc, #128]	@ (800f010 <etharp_tmr+0x14c>)
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	4613      	mov	r3, r2
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	4413      	add	r3, r2
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	440b      	add	r3, r1
 800ef9c:	3314      	adds	r3, #20
 800ef9e:	781b      	ldrb	r3, [r3, #0]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d10a      	bne.n	800efba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800efa4:	491a      	ldr	r1, [pc, #104]	@ (800f010 <etharp_tmr+0x14c>)
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	4613      	mov	r3, r2
 800efaa:	005b      	lsls	r3, r3, #1
 800efac:	4413      	add	r3, r2
 800efae:	00db      	lsls	r3, r3, #3
 800efb0:	440b      	add	r3, r1
 800efb2:	3314      	adds	r3, #20
 800efb4:	2202      	movs	r2, #2
 800efb6:	701a      	strb	r2, [r3, #0]
 800efb8:	e01e      	b.n	800eff8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800efba:	4915      	ldr	r1, [pc, #84]	@ (800f010 <etharp_tmr+0x14c>)
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	4613      	mov	r3, r2
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	4413      	add	r3, r2
 800efc4:	00db      	lsls	r3, r3, #3
 800efc6:	440b      	add	r3, r1
 800efc8:	3314      	adds	r3, #20
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d113      	bne.n	800eff8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800efd0:	490f      	ldr	r1, [pc, #60]	@ (800f010 <etharp_tmr+0x14c>)
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	4613      	mov	r3, r2
 800efd6:	005b      	lsls	r3, r3, #1
 800efd8:	4413      	add	r3, r2
 800efda:	00db      	lsls	r3, r3, #3
 800efdc:	440b      	add	r3, r1
 800efde:	3308      	adds	r3, #8
 800efe0:	6818      	ldr	r0, [r3, #0]
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	4613      	mov	r3, r2
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	4413      	add	r3, r2
 800efea:	00db      	lsls	r3, r3, #3
 800efec:	4a08      	ldr	r2, [pc, #32]	@ (800f010 <etharp_tmr+0x14c>)
 800efee:	4413      	add	r3, r2
 800eff0:	3304      	adds	r3, #4
 800eff2:	4619      	mov	r1, r3
 800eff4:	f000 fe72 	bl	800fcdc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	3301      	adds	r3, #1
 800effc:	607b      	str	r3, [r7, #4]
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b09      	cmp	r3, #9
 800f002:	f77f af65 	ble.w	800eed0 <etharp_tmr+0xc>
      }
    }
  }
}
 800f006:	bf00      	nop
 800f008:	bf00      	nop
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	200080dc 	.word	0x200080dc

0800f014 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	@ 0x28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	460b      	mov	r3, r1
 800f01e:	607a      	str	r2, [r7, #4]
 800f020:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f022:	230a      	movs	r3, #10
 800f024:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f026:	230a      	movs	r3, #10
 800f028:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f02a:	230a      	movs	r3, #10
 800f02c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f032:	230a      	movs	r3, #10
 800f034:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	83bb      	strh	r3, [r7, #28]
 800f03a:	2300      	movs	r3, #0
 800f03c:	837b      	strh	r3, [r7, #26]
 800f03e:	2300      	movs	r3, #0
 800f040:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f042:	2300      	movs	r3, #0
 800f044:	843b      	strh	r3, [r7, #32]
 800f046:	e0ae      	b.n	800f1a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f048:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f04c:	49a6      	ldr	r1, [pc, #664]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f04e:	4613      	mov	r3, r2
 800f050:	005b      	lsls	r3, r3, #1
 800f052:	4413      	add	r3, r2
 800f054:	00db      	lsls	r3, r3, #3
 800f056:	440b      	add	r3, r1
 800f058:	3314      	adds	r3, #20
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f05e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f062:	2b0a      	cmp	r3, #10
 800f064:	d105      	bne.n	800f072 <etharp_find_entry+0x5e>
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d102      	bne.n	800f072 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f06c:	8c3b      	ldrh	r3, [r7, #32]
 800f06e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800f070:	e095      	b.n	800f19e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f072:	7dfb      	ldrb	r3, [r7, #23]
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 8092 	beq.w	800f19e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d009      	beq.n	800f094 <etharp_find_entry+0x80>
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d806      	bhi.n	800f094 <etharp_find_entry+0x80>
 800f086:	4b99      	ldr	r3, [pc, #612]	@ (800f2ec <etharp_find_entry+0x2d8>)
 800f088:	f240 1223 	movw	r2, #291	@ 0x123
 800f08c:	4998      	ldr	r1, [pc, #608]	@ (800f2f0 <etharp_find_entry+0x2dc>)
 800f08e:	4899      	ldr	r0, [pc, #612]	@ (800f2f4 <etharp_find_entry+0x2e0>)
 800f090:	f002 fb5e 	bl	8011750 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d020      	beq.n	800f0dc <etharp_find_entry+0xc8>
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	6819      	ldr	r1, [r3, #0]
 800f09e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0a2:	4891      	ldr	r0, [pc, #580]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	005b      	lsls	r3, r3, #1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	00db      	lsls	r3, r3, #3
 800f0ac:	4403      	add	r3, r0
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4299      	cmp	r1, r3
 800f0b4:	d112      	bne.n	800f0dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d00c      	beq.n	800f0d6 <etharp_find_entry+0xc2>
 800f0bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0c0:	4989      	ldr	r1, [pc, #548]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	4413      	add	r3, r2
 800f0c8:	00db      	lsls	r3, r3, #3
 800f0ca:	440b      	add	r3, r1
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	687a      	ldr	r2, [r7, #4]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d102      	bne.n	800f0dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f0d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f0da:	e100      	b.n	800f2de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f0dc:	7dfb      	ldrb	r3, [r7, #23]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d140      	bne.n	800f164 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f0e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0e6:	4980      	ldr	r1, [pc, #512]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	005b      	lsls	r3, r3, #1
 800f0ec:	4413      	add	r3, r2
 800f0ee:	00db      	lsls	r3, r3, #3
 800f0f0:	440b      	add	r3, r1
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d01a      	beq.n	800f12e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f0f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0fc:	497a      	ldr	r1, [pc, #488]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f0fe:	4613      	mov	r3, r2
 800f100:	005b      	lsls	r3, r3, #1
 800f102:	4413      	add	r3, r2
 800f104:	00db      	lsls	r3, r3, #3
 800f106:	440b      	add	r3, r1
 800f108:	3312      	adds	r3, #18
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	8bba      	ldrh	r2, [r7, #28]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d845      	bhi.n	800f19e <etharp_find_entry+0x18a>
            old_queue = i;
 800f112:	8c3b      	ldrh	r3, [r7, #32]
 800f114:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f116:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f11a:	4973      	ldr	r1, [pc, #460]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f11c:	4613      	mov	r3, r2
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	4413      	add	r3, r2
 800f122:	00db      	lsls	r3, r3, #3
 800f124:	440b      	add	r3, r1
 800f126:	3312      	adds	r3, #18
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	83bb      	strh	r3, [r7, #28]
 800f12c:	e037      	b.n	800f19e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f12e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f132:	496d      	ldr	r1, [pc, #436]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f134:	4613      	mov	r3, r2
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	4413      	add	r3, r2
 800f13a:	00db      	lsls	r3, r3, #3
 800f13c:	440b      	add	r3, r1
 800f13e:	3312      	adds	r3, #18
 800f140:	881b      	ldrh	r3, [r3, #0]
 800f142:	8b7a      	ldrh	r2, [r7, #26]
 800f144:	429a      	cmp	r2, r3
 800f146:	d82a      	bhi.n	800f19e <etharp_find_entry+0x18a>
            old_pending = i;
 800f148:	8c3b      	ldrh	r3, [r7, #32]
 800f14a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800f14c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f150:	4965      	ldr	r1, [pc, #404]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f152:	4613      	mov	r3, r2
 800f154:	005b      	lsls	r3, r3, #1
 800f156:	4413      	add	r3, r2
 800f158:	00db      	lsls	r3, r3, #3
 800f15a:	440b      	add	r3, r1
 800f15c:	3312      	adds	r3, #18
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	837b      	strh	r3, [r7, #26]
 800f162:	e01c      	b.n	800f19e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f164:	7dfb      	ldrb	r3, [r7, #23]
 800f166:	2b01      	cmp	r3, #1
 800f168:	d919      	bls.n	800f19e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f16a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f16e:	495e      	ldr	r1, [pc, #376]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f170:	4613      	mov	r3, r2
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	4413      	add	r3, r2
 800f176:	00db      	lsls	r3, r3, #3
 800f178:	440b      	add	r3, r1
 800f17a:	3312      	adds	r3, #18
 800f17c:	881b      	ldrh	r3, [r3, #0]
 800f17e:	8b3a      	ldrh	r2, [r7, #24]
 800f180:	429a      	cmp	r2, r3
 800f182:	d80c      	bhi.n	800f19e <etharp_find_entry+0x18a>
            old_stable = i;
 800f184:	8c3b      	ldrh	r3, [r7, #32]
 800f186:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800f188:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f18c:	4956      	ldr	r1, [pc, #344]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f18e:	4613      	mov	r3, r2
 800f190:	005b      	lsls	r3, r3, #1
 800f192:	4413      	add	r3, r2
 800f194:	00db      	lsls	r3, r3, #3
 800f196:	440b      	add	r3, r1
 800f198:	3312      	adds	r3, #18
 800f19a:	881b      	ldrh	r3, [r3, #0]
 800f19c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f19e:	8c3b      	ldrh	r3, [r7, #32]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	843b      	strh	r3, [r7, #32]
 800f1a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f1aa:	2b09      	cmp	r3, #9
 800f1ac:	f77f af4c 	ble.w	800f048 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f1b0:	7afb      	ldrb	r3, [r7, #11]
 800f1b2:	f003 0302 	and.w	r3, r3, #2
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d108      	bne.n	800f1cc <etharp_find_entry+0x1b8>
 800f1ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f1be:	2b0a      	cmp	r3, #10
 800f1c0:	d107      	bne.n	800f1d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f1c2:	7afb      	ldrb	r3, [r7, #11]
 800f1c4:	f003 0301 	and.w	r3, r3, #1
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d102      	bne.n	800f1d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d0:	e085      	b.n	800f2de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f1d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f1d6:	2b09      	cmp	r3, #9
 800f1d8:	dc02      	bgt.n	800f1e0 <etharp_find_entry+0x1cc>
    i = empty;
 800f1da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f1dc:	843b      	strh	r3, [r7, #32]
 800f1de:	e039      	b.n	800f254 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f1e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800f1e4:	2b09      	cmp	r3, #9
 800f1e6:	dc14      	bgt.n	800f212 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f1e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f1ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f1ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f1f0:	493d      	ldr	r1, [pc, #244]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4413      	add	r3, r2
 800f1f8:	00db      	lsls	r3, r3, #3
 800f1fa:	440b      	add	r3, r1
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d018      	beq.n	800f234 <etharp_find_entry+0x220>
 800f202:	4b3a      	ldr	r3, [pc, #232]	@ (800f2ec <etharp_find_entry+0x2d8>)
 800f204:	f240 126d 	movw	r2, #365	@ 0x16d
 800f208:	493b      	ldr	r1, [pc, #236]	@ (800f2f8 <etharp_find_entry+0x2e4>)
 800f20a:	483a      	ldr	r0, [pc, #232]	@ (800f2f4 <etharp_find_entry+0x2e0>)
 800f20c:	f002 faa0 	bl	8011750 <iprintf>
 800f210:	e010      	b.n	800f234 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f212:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f216:	2b09      	cmp	r3, #9
 800f218:	dc02      	bgt.n	800f220 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f21a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f21c:	843b      	strh	r3, [r7, #32]
 800f21e:	e009      	b.n	800f234 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f220:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f224:	2b09      	cmp	r3, #9
 800f226:	dc02      	bgt.n	800f22e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f228:	8bfb      	ldrh	r3, [r7, #30]
 800f22a:	843b      	strh	r3, [r7, #32]
 800f22c:	e002      	b.n	800f234 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f22e:	f04f 33ff 	mov.w	r3, #4294967295
 800f232:	e054      	b.n	800f2de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f234:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f238:	2b09      	cmp	r3, #9
 800f23a:	dd06      	ble.n	800f24a <etharp_find_entry+0x236>
 800f23c:	4b2b      	ldr	r3, [pc, #172]	@ (800f2ec <etharp_find_entry+0x2d8>)
 800f23e:	f240 127f 	movw	r2, #383	@ 0x17f
 800f242:	492e      	ldr	r1, [pc, #184]	@ (800f2fc <etharp_find_entry+0x2e8>)
 800f244:	482b      	ldr	r0, [pc, #172]	@ (800f2f4 <etharp_find_entry+0x2e0>)
 800f246:	f002 fa83 	bl	8011750 <iprintf>
    etharp_free_entry(i);
 800f24a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f24e:	4618      	mov	r0, r3
 800f250:	f7ff fe06 	bl	800ee60 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f254:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f258:	2b09      	cmp	r3, #9
 800f25a:	dd06      	ble.n	800f26a <etharp_find_entry+0x256>
 800f25c:	4b23      	ldr	r3, [pc, #140]	@ (800f2ec <etharp_find_entry+0x2d8>)
 800f25e:	f240 1283 	movw	r2, #387	@ 0x183
 800f262:	4926      	ldr	r1, [pc, #152]	@ (800f2fc <etharp_find_entry+0x2e8>)
 800f264:	4823      	ldr	r0, [pc, #140]	@ (800f2f4 <etharp_find_entry+0x2e0>)
 800f266:	f002 fa73 	bl	8011750 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f26a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f26e:	491e      	ldr	r1, [pc, #120]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f270:	4613      	mov	r3, r2
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	4413      	add	r3, r2
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	440b      	add	r3, r1
 800f27a:	3314      	adds	r3, #20
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d006      	beq.n	800f290 <etharp_find_entry+0x27c>
 800f282:	4b1a      	ldr	r3, [pc, #104]	@ (800f2ec <etharp_find_entry+0x2d8>)
 800f284:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f288:	491d      	ldr	r1, [pc, #116]	@ (800f300 <etharp_find_entry+0x2ec>)
 800f28a:	481a      	ldr	r0, [pc, #104]	@ (800f2f4 <etharp_find_entry+0x2e0>)
 800f28c:	f002 fa60 	bl	8011750 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d00b      	beq.n	800f2ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f296:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6819      	ldr	r1, [r3, #0]
 800f29e:	4812      	ldr	r0, [pc, #72]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f2a0:	4613      	mov	r3, r2
 800f2a2:	005b      	lsls	r3, r3, #1
 800f2a4:	4413      	add	r3, r2
 800f2a6:	00db      	lsls	r3, r3, #3
 800f2a8:	4403      	add	r3, r0
 800f2aa:	3304      	adds	r3, #4
 800f2ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f2ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2b2:	490d      	ldr	r1, [pc, #52]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f2b4:	4613      	mov	r3, r2
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	4413      	add	r3, r2
 800f2ba:	00db      	lsls	r3, r3, #3
 800f2bc:	440b      	add	r3, r1
 800f2be:	3312      	adds	r3, #18
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f2c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2c8:	4907      	ldr	r1, [pc, #28]	@ (800f2e8 <etharp_find_entry+0x2d4>)
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	4413      	add	r3, r2
 800f2d0:	00db      	lsls	r3, r3, #3
 800f2d2:	440b      	add	r3, r1
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f2da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3728      	adds	r7, #40	@ 0x28
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	200080dc 	.word	0x200080dc
 800f2ec:	08014fb0 	.word	0x08014fb0
 800f2f0:	08014fe8 	.word	0x08014fe8
 800f2f4:	08015028 	.word	0x08015028
 800f2f8:	08015050 	.word	0x08015050
 800f2fc:	08015068 	.word	0x08015068
 800f300:	0801507c 	.word	0x0801507c

0800f304 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b088      	sub	sp, #32
 800f308:	af02      	add	r7, sp, #8
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
 800f310:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f318:	2b06      	cmp	r3, #6
 800f31a:	d006      	beq.n	800f32a <etharp_update_arp_entry+0x26>
 800f31c:	4b48      	ldr	r3, [pc, #288]	@ (800f440 <etharp_update_arp_entry+0x13c>)
 800f31e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f322:	4948      	ldr	r1, [pc, #288]	@ (800f444 <etharp_update_arp_entry+0x140>)
 800f324:	4848      	ldr	r0, [pc, #288]	@ (800f448 <etharp_update_arp_entry+0x144>)
 800f326:	f002 fa13 	bl	8011750 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d012      	beq.n	800f356 <etharp_update_arp_entry+0x52>
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00e      	beq.n	800f356 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68f9      	ldr	r1, [r7, #12]
 800f33e:	4618      	mov	r0, r3
 800f340:	f001 f920 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800f344:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f346:	2b00      	cmp	r3, #0
 800f348:	d105      	bne.n	800f356 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f352:	2be0      	cmp	r3, #224	@ 0xe0
 800f354:	d102      	bne.n	800f35c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f356:	f06f 030f 	mvn.w	r3, #15
 800f35a:	e06c      	b.n	800f436 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f35c:	78fb      	ldrb	r3, [r7, #3]
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	4619      	mov	r1, r3
 800f362:	68b8      	ldr	r0, [r7, #8]
 800f364:	f7ff fe56 	bl	800f014 <etharp_find_entry>
 800f368:	4603      	mov	r3, r0
 800f36a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f36c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f370:	2b00      	cmp	r3, #0
 800f372:	da02      	bge.n	800f37a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f374:	8afb      	ldrh	r3, [r7, #22]
 800f376:	b25b      	sxtb	r3, r3
 800f378:	e05d      	b.n	800f436 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f37a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f37e:	4933      	ldr	r1, [pc, #204]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f380:	4613      	mov	r3, r2
 800f382:	005b      	lsls	r3, r3, #1
 800f384:	4413      	add	r3, r2
 800f386:	00db      	lsls	r3, r3, #3
 800f388:	440b      	add	r3, r1
 800f38a:	3314      	adds	r3, #20
 800f38c:	2202      	movs	r2, #2
 800f38e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f390:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f394:	492d      	ldr	r1, [pc, #180]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f396:	4613      	mov	r3, r2
 800f398:	005b      	lsls	r3, r3, #1
 800f39a:	4413      	add	r3, r2
 800f39c:	00db      	lsls	r3, r3, #3
 800f39e:	440b      	add	r3, r1
 800f3a0:	3308      	adds	r3, #8
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f3a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	005b      	lsls	r3, r3, #1
 800f3ae:	4413      	add	r3, r2
 800f3b0:	00db      	lsls	r3, r3, #3
 800f3b2:	3308      	adds	r3, #8
 800f3b4:	4a25      	ldr	r2, [pc, #148]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f3b6:	4413      	add	r3, r2
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	6879      	ldr	r1, [r7, #4]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f002 fbb3 	bl	8011b2a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f3c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3c8:	4920      	ldr	r1, [pc, #128]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	4413      	add	r3, r2
 800f3d0:	00db      	lsls	r3, r3, #3
 800f3d2:	440b      	add	r3, r1
 800f3d4:	3312      	adds	r3, #18
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f3da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3de:	491b      	ldr	r1, [pc, #108]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	440b      	add	r3, r1
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d021      	beq.n	800f434 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f3f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f3f4:	4915      	ldr	r1, [pc, #84]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	005b      	lsls	r3, r3, #1
 800f3fa:	4413      	add	r3, r2
 800f3fc:	00db      	lsls	r3, r3, #3
 800f3fe:	440b      	add	r3, r1
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f404:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f408:	4910      	ldr	r1, [pc, #64]	@ (800f44c <etharp_update_arp_entry+0x148>)
 800f40a:	4613      	mov	r3, r2
 800f40c:	005b      	lsls	r3, r3, #1
 800f40e:	4413      	add	r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	440b      	add	r3, r1
 800f414:	2200      	movs	r2, #0
 800f416:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800f41e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6939      	ldr	r1, [r7, #16]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f002 f849 	bl	80114c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f42e:	6938      	ldr	r0, [r7, #16]
 800f430:	f7f6 fd8e 	bl	8005f50 <pbuf_free>
  }
  return ERR_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3718      	adds	r7, #24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	08014fb0 	.word	0x08014fb0
 800f444:	080150a8 	.word	0x080150a8
 800f448:	08015028 	.word	0x08015028
 800f44c:	200080dc 	.word	0x200080dc

0800f450 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f458:	2300      	movs	r3, #0
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e01e      	b.n	800f49c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f45e:	4913      	ldr	r1, [pc, #76]	@ (800f4ac <etharp_cleanup_netif+0x5c>)
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	4613      	mov	r3, r2
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4413      	add	r3, r2
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	440b      	add	r3, r1
 800f46c:	3314      	adds	r3, #20
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f472:	7afb      	ldrb	r3, [r7, #11]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00e      	beq.n	800f496 <etharp_cleanup_netif+0x46>
 800f478:	490c      	ldr	r1, [pc, #48]	@ (800f4ac <etharp_cleanup_netif+0x5c>)
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	4613      	mov	r3, r2
 800f47e:	005b      	lsls	r3, r3, #1
 800f480:	4413      	add	r3, r2
 800f482:	00db      	lsls	r3, r3, #3
 800f484:	440b      	add	r3, r1
 800f486:	3308      	adds	r3, #8
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d102      	bne.n	800f496 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f7ff fce5 	bl	800ee60 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	3301      	adds	r3, #1
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b09      	cmp	r3, #9
 800f4a0:	dddd      	ble.n	800f45e <etharp_cleanup_netif+0xe>
    }
  }
}
 800f4a2:	bf00      	nop
 800f4a4:	bf00      	nop
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	200080dc 	.word	0x200080dc

0800f4b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f4b0:	b5b0      	push	{r4, r5, r7, lr}
 800f4b2:	b08a      	sub	sp, #40	@ 0x28
 800f4b4:	af04      	add	r7, sp, #16
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d107      	bne.n	800f4d0 <etharp_input+0x20>
 800f4c0:	4b3f      	ldr	r3, [pc, #252]	@ (800f5c0 <etharp_input+0x110>)
 800f4c2:	f240 228a 	movw	r2, #650	@ 0x28a
 800f4c6:	493f      	ldr	r1, [pc, #252]	@ (800f5c4 <etharp_input+0x114>)
 800f4c8:	483f      	ldr	r0, [pc, #252]	@ (800f5c8 <etharp_input+0x118>)
 800f4ca:	f002 f941 	bl	8011750 <iprintf>
 800f4ce:	e074      	b.n	800f5ba <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f4e0:	d10c      	bne.n	800f4fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f4e6:	2b06      	cmp	r3, #6
 800f4e8:	d108      	bne.n	800f4fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f4ee:	2b04      	cmp	r3, #4
 800f4f0:	d104      	bne.n	800f4fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	885b      	ldrh	r3, [r3, #2]
 800f4f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f4f8:	2b08      	cmp	r3, #8
 800f4fa:	d003      	beq.n	800f504 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f6 fd27 	bl	8005f50 <pbuf_free>
    return;
 800f502:	e05a      	b.n	800f5ba <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	330e      	adds	r3, #14
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	3318      	adds	r3, #24
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	3304      	adds	r3, #4
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d102      	bne.n	800f524 <etharp_input+0x74>
    for_us = 0;
 800f51e:	2300      	movs	r3, #0
 800f520:	75fb      	strb	r3, [r7, #23]
 800f522:	e009      	b.n	800f538 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f524:	68ba      	ldr	r2, [r7, #8]
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	3304      	adds	r3, #4
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	bf0c      	ite	eq
 800f530:	2301      	moveq	r3, #1
 800f532:	2300      	movne	r3, #0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	f103 0208 	add.w	r2, r3, #8
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <etharp_input+0x98>
 800f544:	2301      	movs	r3, #1
 800f546:	e000      	b.n	800f54a <etharp_input+0x9a>
 800f548:	2302      	movs	r3, #2
 800f54a:	f107 010c 	add.w	r1, r7, #12
 800f54e:	6838      	ldr	r0, [r7, #0]
 800f550:	f7ff fed8 	bl	800f304 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	88db      	ldrh	r3, [r3, #6]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f55e:	d003      	beq.n	800f568 <etharp_input+0xb8>
 800f560:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f564:	d01e      	beq.n	800f5a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f566:	e025      	b.n	800f5b4 <etharp_input+0x104>
      if (for_us) {
 800f568:	7dfb      	ldrb	r3, [r7, #23]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d021      	beq.n	800f5b2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f584:	693a      	ldr	r2, [r7, #16]
 800f586:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f588:	2102      	movs	r1, #2
 800f58a:	9103      	str	r1, [sp, #12]
 800f58c:	f107 010c 	add.w	r1, r7, #12
 800f590:	9102      	str	r1, [sp, #8]
 800f592:	9201      	str	r2, [sp, #4]
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	462b      	mov	r3, r5
 800f598:	4622      	mov	r2, r4
 800f59a:	4601      	mov	r1, r0
 800f59c:	6838      	ldr	r0, [r7, #0]
 800f59e:	f000 faef 	bl	800fb80 <etharp_raw>
      break;
 800f5a2:	e006      	b.n	800f5b2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800f5a4:	f107 030c 	add.w	r3, r7, #12
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6838      	ldr	r0, [r7, #0]
 800f5ac:	f7fe fa02 	bl	800d9b4 <dhcp_arp_reply>
      break;
 800f5b0:	e000      	b.n	800f5b4 <etharp_input+0x104>
      break;
 800f5b2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f7f6 fccb 	bl	8005f50 <pbuf_free>
}
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c0:	08014fb0 	.word	0x08014fb0
 800f5c4:	08015100 	.word	0x08015100
 800f5c8:	08015028 	.word	0x08015028

0800f5cc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b086      	sub	sp, #24
 800f5d0:	af02      	add	r7, sp, #8
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f5da:	79fa      	ldrb	r2, [r7, #7]
 800f5dc:	4944      	ldr	r1, [pc, #272]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f5de:	4613      	mov	r3, r2
 800f5e0:	005b      	lsls	r3, r3, #1
 800f5e2:	4413      	add	r3, r2
 800f5e4:	00db      	lsls	r3, r3, #3
 800f5e6:	440b      	add	r3, r1
 800f5e8:	3314      	adds	r3, #20
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d806      	bhi.n	800f5fe <etharp_output_to_arp_index+0x32>
 800f5f0:	4b40      	ldr	r3, [pc, #256]	@ (800f6f4 <etharp_output_to_arp_index+0x128>)
 800f5f2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f5f6:	4940      	ldr	r1, [pc, #256]	@ (800f6f8 <etharp_output_to_arp_index+0x12c>)
 800f5f8:	4840      	ldr	r0, [pc, #256]	@ (800f6fc <etharp_output_to_arp_index+0x130>)
 800f5fa:	f002 f8a9 	bl	8011750 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f5fe:	79fa      	ldrb	r2, [r7, #7]
 800f600:	493b      	ldr	r1, [pc, #236]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f602:	4613      	mov	r3, r2
 800f604:	005b      	lsls	r3, r3, #1
 800f606:	4413      	add	r3, r2
 800f608:	00db      	lsls	r3, r3, #3
 800f60a:	440b      	add	r3, r1
 800f60c:	3314      	adds	r3, #20
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b02      	cmp	r3, #2
 800f612:	d153      	bne.n	800f6bc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f614:	79fa      	ldrb	r2, [r7, #7]
 800f616:	4936      	ldr	r1, [pc, #216]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f618:	4613      	mov	r3, r2
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	4413      	add	r3, r2
 800f61e:	00db      	lsls	r3, r3, #3
 800f620:	440b      	add	r3, r1
 800f622:	3312      	adds	r3, #18
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f62a:	d919      	bls.n	800f660 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f62c:	79fa      	ldrb	r2, [r7, #7]
 800f62e:	4613      	mov	r3, r2
 800f630:	005b      	lsls	r3, r3, #1
 800f632:	4413      	add	r3, r2
 800f634:	00db      	lsls	r3, r3, #3
 800f636:	4a2e      	ldr	r2, [pc, #184]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f638:	4413      	add	r3, r2
 800f63a:	3304      	adds	r3, #4
 800f63c:	4619      	mov	r1, r3
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f000 fb4c 	bl	800fcdc <etharp_request>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d138      	bne.n	800f6bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f64a:	79fa      	ldrb	r2, [r7, #7]
 800f64c:	4928      	ldr	r1, [pc, #160]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f64e:	4613      	mov	r3, r2
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	4413      	add	r3, r2
 800f654:	00db      	lsls	r3, r3, #3
 800f656:	440b      	add	r3, r1
 800f658:	3314      	adds	r3, #20
 800f65a:	2203      	movs	r2, #3
 800f65c:	701a      	strb	r2, [r3, #0]
 800f65e:	e02d      	b.n	800f6bc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f660:	79fa      	ldrb	r2, [r7, #7]
 800f662:	4923      	ldr	r1, [pc, #140]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f664:	4613      	mov	r3, r2
 800f666:	005b      	lsls	r3, r3, #1
 800f668:	4413      	add	r3, r2
 800f66a:	00db      	lsls	r3, r3, #3
 800f66c:	440b      	add	r3, r1
 800f66e:	3312      	adds	r3, #18
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f676:	d321      	bcc.n	800f6bc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f678:	79fa      	ldrb	r2, [r7, #7]
 800f67a:	4613      	mov	r3, r2
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	4413      	add	r3, r2
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	4a1b      	ldr	r2, [pc, #108]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f684:	4413      	add	r3, r2
 800f686:	1d19      	adds	r1, r3, #4
 800f688:	79fa      	ldrb	r2, [r7, #7]
 800f68a:	4613      	mov	r3, r2
 800f68c:	005b      	lsls	r3, r3, #1
 800f68e:	4413      	add	r3, r2
 800f690:	00db      	lsls	r3, r3, #3
 800f692:	3308      	adds	r3, #8
 800f694:	4a16      	ldr	r2, [pc, #88]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f696:	4413      	add	r3, r2
 800f698:	3304      	adds	r3, #4
 800f69a:	461a      	mov	r2, r3
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f000 fafb 	bl	800fc98 <etharp_request_dst>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d109      	bne.n	800f6bc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f6a8:	79fa      	ldrb	r2, [r7, #7]
 800f6aa:	4911      	ldr	r1, [pc, #68]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	005b      	lsls	r3, r3, #1
 800f6b0:	4413      	add	r3, r2
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	440b      	add	r3, r1
 800f6b6:	3314      	adds	r3, #20
 800f6b8:	2203      	movs	r2, #3
 800f6ba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 800f6c2:	79fa      	ldrb	r2, [r7, #7]
 800f6c4:	4613      	mov	r3, r2
 800f6c6:	005b      	lsls	r3, r3, #1
 800f6c8:	4413      	add	r3, r2
 800f6ca:	00db      	lsls	r3, r3, #3
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	4a08      	ldr	r2, [pc, #32]	@ (800f6f0 <etharp_output_to_arp_index+0x124>)
 800f6d0:	4413      	add	r3, r2
 800f6d2:	3304      	adds	r3, #4
 800f6d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f6d8:	9200      	str	r2, [sp, #0]
 800f6da:	460a      	mov	r2, r1
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	68f8      	ldr	r0, [r7, #12]
 800f6e0:	f001 feee 	bl	80114c0 <ethernet_output>
 800f6e4:	4603      	mov	r3, r0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3710      	adds	r7, #16
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	200080dc 	.word	0x200080dc
 800f6f4:	08014fb0 	.word	0x08014fb0
 800f6f8:	08015120 	.word	0x08015120
 800f6fc:	08015028 	.word	0x08015028

0800f700 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08a      	sub	sp, #40	@ 0x28
 800f704:	af02      	add	r7, sp, #8
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d106      	bne.n	800f724 <etharp_output+0x24>
 800f716:	4b73      	ldr	r3, [pc, #460]	@ (800f8e4 <etharp_output+0x1e4>)
 800f718:	f240 321e 	movw	r2, #798	@ 0x31e
 800f71c:	4972      	ldr	r1, [pc, #456]	@ (800f8e8 <etharp_output+0x1e8>)
 800f71e:	4873      	ldr	r0, [pc, #460]	@ (800f8ec <etharp_output+0x1ec>)
 800f720:	f002 f816 	bl	8011750 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d106      	bne.n	800f738 <etharp_output+0x38>
 800f72a:	4b6e      	ldr	r3, [pc, #440]	@ (800f8e4 <etharp_output+0x1e4>)
 800f72c:	f240 321f 	movw	r2, #799	@ 0x31f
 800f730:	496f      	ldr	r1, [pc, #444]	@ (800f8f0 <etharp_output+0x1f0>)
 800f732:	486e      	ldr	r0, [pc, #440]	@ (800f8ec <etharp_output+0x1ec>)
 800f734:	f002 f80c 	bl	8011750 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <etharp_output+0x4c>
 800f73e:	4b69      	ldr	r3, [pc, #420]	@ (800f8e4 <etharp_output+0x1e4>)
 800f740:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f744:	496b      	ldr	r1, [pc, #428]	@ (800f8f4 <etharp_output+0x1f4>)
 800f746:	4869      	ldr	r0, [pc, #420]	@ (800f8ec <etharp_output+0x1ec>)
 800f748:	f002 f802 	bl	8011750 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68f9      	ldr	r1, [r7, #12]
 800f752:	4618      	mov	r0, r3
 800f754:	f000 ff16 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d002      	beq.n	800f764 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f75e:	4b66      	ldr	r3, [pc, #408]	@ (800f8f8 <etharp_output+0x1f8>)
 800f760:	61fb      	str	r3, [r7, #28]
 800f762:	e0af      	b.n	800f8c4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f76c:	2be0      	cmp	r3, #224	@ 0xe0
 800f76e:	d118      	bne.n	800f7a2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f770:	2301      	movs	r3, #1
 800f772:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f774:	2300      	movs	r3, #0
 800f776:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f778:	235e      	movs	r3, #94	@ 0x5e
 800f77a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	3301      	adds	r3, #1
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f786:	b2db      	uxtb	r3, r3
 800f788:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	3302      	adds	r3, #2
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	3303      	adds	r3, #3
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f79a:	f107 0310 	add.w	r3, r7, #16
 800f79e:	61fb      	str	r3, [r7, #28]
 800f7a0:	e090      	b.n	800f8c4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	405a      	eors	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3308      	adds	r3, #8
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	4013      	ands	r3, r2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d012      	beq.n	800f7e0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f7c0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f7c4:	4293      	cmp	r3, r2
 800f7c6:	d00b      	beq.n	800f7e0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	330c      	adds	r3, #12
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d003      	beq.n	800f7da <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	330c      	adds	r3, #12
 800f7d6:	61bb      	str	r3, [r7, #24]
 800f7d8:	e002      	b.n	800f7e0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f7da:	f06f 0303 	mvn.w	r3, #3
 800f7de:	e07d      	b.n	800f8dc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f7e0:	4b46      	ldr	r3, [pc, #280]	@ (800f8fc <etharp_output+0x1fc>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	4a46      	ldr	r2, [pc, #280]	@ (800f900 <etharp_output+0x200>)
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	440b      	add	r3, r1
 800f7ee:	00db      	lsls	r3, r3, #3
 800f7f0:	4413      	add	r3, r2
 800f7f2:	3314      	adds	r3, #20
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	2b01      	cmp	r3, #1
 800f7f8:	d925      	bls.n	800f846 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f7fa:	4b40      	ldr	r3, [pc, #256]	@ (800f8fc <etharp_output+0x1fc>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	4619      	mov	r1, r3
 800f800:	4a3f      	ldr	r2, [pc, #252]	@ (800f900 <etharp_output+0x200>)
 800f802:	460b      	mov	r3, r1
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	440b      	add	r3, r1
 800f808:	00db      	lsls	r3, r3, #3
 800f80a:	4413      	add	r3, r2
 800f80c:	3308      	adds	r3, #8
 800f80e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f810:	68fa      	ldr	r2, [r7, #12]
 800f812:	429a      	cmp	r2, r3
 800f814:	d117      	bne.n	800f846 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	681a      	ldr	r2, [r3, #0]
 800f81a:	4b38      	ldr	r3, [pc, #224]	@ (800f8fc <etharp_output+0x1fc>)
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	4618      	mov	r0, r3
 800f820:	4937      	ldr	r1, [pc, #220]	@ (800f900 <etharp_output+0x200>)
 800f822:	4603      	mov	r3, r0
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	4403      	add	r3, r0
 800f828:	00db      	lsls	r3, r3, #3
 800f82a:	440b      	add	r3, r1
 800f82c:	3304      	adds	r3, #4
 800f82e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f830:	429a      	cmp	r2, r3
 800f832:	d108      	bne.n	800f846 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f834:	4b31      	ldr	r3, [pc, #196]	@ (800f8fc <etharp_output+0x1fc>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	68b9      	ldr	r1, [r7, #8]
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7ff fec5 	bl	800f5cc <etharp_output_to_arp_index>
 800f842:	4603      	mov	r3, r0
 800f844:	e04a      	b.n	800f8dc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f846:	2300      	movs	r3, #0
 800f848:	75fb      	strb	r3, [r7, #23]
 800f84a:	e031      	b.n	800f8b0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f84c:	7dfa      	ldrb	r2, [r7, #23]
 800f84e:	492c      	ldr	r1, [pc, #176]	@ (800f900 <etharp_output+0x200>)
 800f850:	4613      	mov	r3, r2
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	4413      	add	r3, r2
 800f856:	00db      	lsls	r3, r3, #3
 800f858:	440b      	add	r3, r1
 800f85a:	3314      	adds	r3, #20
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d923      	bls.n	800f8aa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f862:	7dfa      	ldrb	r2, [r7, #23]
 800f864:	4926      	ldr	r1, [pc, #152]	@ (800f900 <etharp_output+0x200>)
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	00db      	lsls	r3, r3, #3
 800f86e:	440b      	add	r3, r1
 800f870:	3308      	adds	r3, #8
 800f872:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	429a      	cmp	r2, r3
 800f878:	d117      	bne.n	800f8aa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	6819      	ldr	r1, [r3, #0]
 800f87e:	7dfa      	ldrb	r2, [r7, #23]
 800f880:	481f      	ldr	r0, [pc, #124]	@ (800f900 <etharp_output+0x200>)
 800f882:	4613      	mov	r3, r2
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	4413      	add	r3, r2
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	4403      	add	r3, r0
 800f88c:	3304      	adds	r3, #4
 800f88e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f890:	4299      	cmp	r1, r3
 800f892:	d10a      	bne.n	800f8aa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f894:	4a19      	ldr	r2, [pc, #100]	@ (800f8fc <etharp_output+0x1fc>)
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	461a      	mov	r2, r3
 800f89e:	68b9      	ldr	r1, [r7, #8]
 800f8a0:	68f8      	ldr	r0, [r7, #12]
 800f8a2:	f7ff fe93 	bl	800f5cc <etharp_output_to_arp_index>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	e018      	b.n	800f8dc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	75fb      	strb	r3, [r7, #23]
 800f8b0:	7dfb      	ldrb	r3, [r7, #23]
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d9ca      	bls.n	800f84c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	69b9      	ldr	r1, [r7, #24]
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f000 f822 	bl	800f904 <etharp_query>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	e00b      	b.n	800f8dc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800f8ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f8ce:	9300      	str	r3, [sp, #0]
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	68b9      	ldr	r1, [r7, #8]
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f001 fdf3 	bl	80114c0 <ethernet_output>
 800f8da:	4603      	mov	r3, r0
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3720      	adds	r7, #32
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	08014fb0 	.word	0x08014fb0
 800f8e8:	08015100 	.word	0x08015100
 800f8ec:	08015028 	.word	0x08015028
 800f8f0:	08015150 	.word	0x08015150
 800f8f4:	080150f0 	.word	0x080150f0
 800f8f8:	0801657c 	.word	0x0801657c
 800f8fc:	200081cc 	.word	0x200081cc
 800f900:	200080dc 	.word	0x200080dc

0800f904 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b08c      	sub	sp, #48	@ 0x30
 800f908:	af02      	add	r7, sp, #8
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	332a      	adds	r3, #42	@ 0x2a
 800f914:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f916:	23ff      	movs	r3, #255	@ 0xff
 800f918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f91c:	2300      	movs	r3, #0
 800f91e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	68f9      	ldr	r1, [r7, #12]
 800f926:	4618      	mov	r0, r3
 800f928:	f000 fe2c 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10c      	bne.n	800f94c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f93a:	2be0      	cmp	r3, #224	@ 0xe0
 800f93c:	d006      	beq.n	800f94c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d003      	beq.n	800f94c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d102      	bne.n	800f952 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f94c:	f06f 030f 	mvn.w	r3, #15
 800f950:	e101      	b.n	800fb56 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	2101      	movs	r1, #1
 800f956:	68b8      	ldr	r0, [r7, #8]
 800f958:	f7ff fb5c 	bl	800f014 <etharp_find_entry>
 800f95c:	4603      	mov	r3, r0
 800f95e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f964:	2b00      	cmp	r3, #0
 800f966:	da02      	bge.n	800f96e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f968:	8a7b      	ldrh	r3, [r7, #18]
 800f96a:	b25b      	sxtb	r3, r3
 800f96c:	e0f3      	b.n	800fb56 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f96e:	8a7b      	ldrh	r3, [r7, #18]
 800f970:	2b7e      	cmp	r3, #126	@ 0x7e
 800f972:	d906      	bls.n	800f982 <etharp_query+0x7e>
 800f974:	4b7a      	ldr	r3, [pc, #488]	@ (800fb60 <etharp_query+0x25c>)
 800f976:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f97a:	497a      	ldr	r1, [pc, #488]	@ (800fb64 <etharp_query+0x260>)
 800f97c:	487a      	ldr	r0, [pc, #488]	@ (800fb68 <etharp_query+0x264>)
 800f97e:	f001 fee7 	bl	8011750 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f982:	8a7b      	ldrh	r3, [r7, #18]
 800f984:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f986:	7c7a      	ldrb	r2, [r7, #17]
 800f988:	4978      	ldr	r1, [pc, #480]	@ (800fb6c <etharp_query+0x268>)
 800f98a:	4613      	mov	r3, r2
 800f98c:	005b      	lsls	r3, r3, #1
 800f98e:	4413      	add	r3, r2
 800f990:	00db      	lsls	r3, r3, #3
 800f992:	440b      	add	r3, r1
 800f994:	3314      	adds	r3, #20
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d115      	bne.n	800f9c8 <etharp_query+0xc4>
    is_new_entry = 1;
 800f99c:	2301      	movs	r3, #1
 800f99e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f9a0:	7c7a      	ldrb	r2, [r7, #17]
 800f9a2:	4972      	ldr	r1, [pc, #456]	@ (800fb6c <etharp_query+0x268>)
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	005b      	lsls	r3, r3, #1
 800f9a8:	4413      	add	r3, r2
 800f9aa:	00db      	lsls	r3, r3, #3
 800f9ac:	440b      	add	r3, r1
 800f9ae:	3314      	adds	r3, #20
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f9b4:	7c7a      	ldrb	r2, [r7, #17]
 800f9b6:	496d      	ldr	r1, [pc, #436]	@ (800fb6c <etharp_query+0x268>)
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	005b      	lsls	r3, r3, #1
 800f9bc:	4413      	add	r3, r2
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	440b      	add	r3, r1
 800f9c2:	3308      	adds	r3, #8
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f9c8:	7c7a      	ldrb	r2, [r7, #17]
 800f9ca:	4968      	ldr	r1, [pc, #416]	@ (800fb6c <etharp_query+0x268>)
 800f9cc:	4613      	mov	r3, r2
 800f9ce:	005b      	lsls	r3, r3, #1
 800f9d0:	4413      	add	r3, r2
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	440b      	add	r3, r1
 800f9d6:	3314      	adds	r3, #20
 800f9d8:	781b      	ldrb	r3, [r3, #0]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d011      	beq.n	800fa02 <etharp_query+0xfe>
 800f9de:	7c7a      	ldrb	r2, [r7, #17]
 800f9e0:	4962      	ldr	r1, [pc, #392]	@ (800fb6c <etharp_query+0x268>)
 800f9e2:	4613      	mov	r3, r2
 800f9e4:	005b      	lsls	r3, r3, #1
 800f9e6:	4413      	add	r3, r2
 800f9e8:	00db      	lsls	r3, r3, #3
 800f9ea:	440b      	add	r3, r1
 800f9ec:	3314      	adds	r3, #20
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d806      	bhi.n	800fa02 <etharp_query+0xfe>
 800f9f4:	4b5a      	ldr	r3, [pc, #360]	@ (800fb60 <etharp_query+0x25c>)
 800f9f6:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f9fa:	495d      	ldr	r1, [pc, #372]	@ (800fb70 <etharp_query+0x26c>)
 800f9fc:	485a      	ldr	r0, [pc, #360]	@ (800fb68 <etharp_query+0x264>)
 800f9fe:	f001 fea7 	bl	8011750 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fa02:	6a3b      	ldr	r3, [r7, #32]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d102      	bne.n	800fa0e <etharp_query+0x10a>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d10c      	bne.n	800fa28 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fa0e:	68b9      	ldr	r1, [r7, #8]
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f000 f963 	bl	800fcdc <etharp_request>
 800fa16:	4603      	mov	r3, r0
 800fa18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d102      	bne.n	800fa28 <etharp_query+0x124>
      return result;
 800fa22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fa26:	e096      	b.n	800fb56 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <etharp_query+0x138>
 800fa2e:	4b4c      	ldr	r3, [pc, #304]	@ (800fb60 <etharp_query+0x25c>)
 800fa30:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800fa34:	494f      	ldr	r1, [pc, #316]	@ (800fb74 <etharp_query+0x270>)
 800fa36:	484c      	ldr	r0, [pc, #304]	@ (800fb68 <etharp_query+0x264>)
 800fa38:	f001 fe8a 	bl	8011750 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fa3c:	7c7a      	ldrb	r2, [r7, #17]
 800fa3e:	494b      	ldr	r1, [pc, #300]	@ (800fb6c <etharp_query+0x268>)
 800fa40:	4613      	mov	r3, r2
 800fa42:	005b      	lsls	r3, r3, #1
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	440b      	add	r3, r1
 800fa4a:	3314      	adds	r3, #20
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d917      	bls.n	800fa82 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fa52:	4a49      	ldr	r2, [pc, #292]	@ (800fb78 <etharp_query+0x274>)
 800fa54:	7c7b      	ldrb	r3, [r7, #17]
 800fa56:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fa58:	7c7a      	ldrb	r2, [r7, #17]
 800fa5a:	4613      	mov	r3, r2
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	4413      	add	r3, r2
 800fa60:	00db      	lsls	r3, r3, #3
 800fa62:	3308      	adds	r3, #8
 800fa64:	4a41      	ldr	r2, [pc, #260]	@ (800fb6c <etharp_query+0x268>)
 800fa66:	4413      	add	r3, r2
 800fa68:	3304      	adds	r3, #4
 800fa6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fa6e:	9200      	str	r2, [sp, #0]
 800fa70:	697a      	ldr	r2, [r7, #20]
 800fa72:	6879      	ldr	r1, [r7, #4]
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f001 fd23 	bl	80114c0 <ethernet_output>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa80:	e067      	b.n	800fb52 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fa82:	7c7a      	ldrb	r2, [r7, #17]
 800fa84:	4939      	ldr	r1, [pc, #228]	@ (800fb6c <etharp_query+0x268>)
 800fa86:	4613      	mov	r3, r2
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	4413      	add	r3, r2
 800fa8c:	00db      	lsls	r3, r3, #3
 800fa8e:	440b      	add	r3, r1
 800fa90:	3314      	adds	r3, #20
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	d15c      	bne.n	800fb52 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800faa0:	e01c      	b.n	800fadc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	895a      	ldrh	r2, [r3, #10]
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	891b      	ldrh	r3, [r3, #8]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d10a      	bne.n	800fac4 <etharp_query+0x1c0>
 800faae:	69fb      	ldr	r3, [r7, #28]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d006      	beq.n	800fac4 <etharp_query+0x1c0>
 800fab6:	4b2a      	ldr	r3, [pc, #168]	@ (800fb60 <etharp_query+0x25c>)
 800fab8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800fabc:	492f      	ldr	r1, [pc, #188]	@ (800fb7c <etharp_query+0x278>)
 800fabe:	482a      	ldr	r0, [pc, #168]	@ (800fb68 <etharp_query+0x264>)
 800fac0:	f001 fe46 	bl	8011750 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	7b1b      	ldrb	r3, [r3, #12]
 800fac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <etharp_query+0x1d2>
        copy_needed = 1;
 800fad0:	2301      	movs	r3, #1
 800fad2:	61bb      	str	r3, [r7, #24]
        break;
 800fad4:	e005      	b.n	800fae2 <etharp_query+0x1de>
      }
      p = p->next;
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d1df      	bne.n	800faa2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d007      	beq.n	800faf8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800faee:	200e      	movs	r0, #14
 800faf0:	f7f6 fc9a 	bl	8006428 <pbuf_clone>
 800faf4:	61f8      	str	r0, [r7, #28]
 800faf6:	e004      	b.n	800fb02 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fafc:	69f8      	ldr	r0, [r7, #28]
 800fafe:	f7f6 fac7 	bl	8006090 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fb02:	69fb      	ldr	r3, [r7, #28]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d021      	beq.n	800fb4c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fb08:	7c7a      	ldrb	r2, [r7, #17]
 800fb0a:	4918      	ldr	r1, [pc, #96]	@ (800fb6c <etharp_query+0x268>)
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	005b      	lsls	r3, r3, #1
 800fb10:	4413      	add	r3, r2
 800fb12:	00db      	lsls	r3, r3, #3
 800fb14:	440b      	add	r3, r1
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00a      	beq.n	800fb32 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fb1c:	7c7a      	ldrb	r2, [r7, #17]
 800fb1e:	4913      	ldr	r1, [pc, #76]	@ (800fb6c <etharp_query+0x268>)
 800fb20:	4613      	mov	r3, r2
 800fb22:	005b      	lsls	r3, r3, #1
 800fb24:	4413      	add	r3, r2
 800fb26:	00db      	lsls	r3, r3, #3
 800fb28:	440b      	add	r3, r1
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7f6 fa0f 	bl	8005f50 <pbuf_free>
      }
      arp_table[i].q = p;
 800fb32:	7c7a      	ldrb	r2, [r7, #17]
 800fb34:	490d      	ldr	r1, [pc, #52]	@ (800fb6c <etharp_query+0x268>)
 800fb36:	4613      	mov	r3, r2
 800fb38:	005b      	lsls	r3, r3, #1
 800fb3a:	4413      	add	r3, r2
 800fb3c:	00db      	lsls	r3, r3, #3
 800fb3e:	440b      	add	r3, r1
 800fb40:	69fa      	ldr	r2, [r7, #28]
 800fb42:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fb4a:	e002      	b.n	800fb52 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fb4c:	23ff      	movs	r3, #255	@ 0xff
 800fb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800fb52:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3728      	adds	r7, #40	@ 0x28
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	08014fb0 	.word	0x08014fb0
 800fb64:	0801515c 	.word	0x0801515c
 800fb68:	08015028 	.word	0x08015028
 800fb6c:	200080dc 	.word	0x200080dc
 800fb70:	0801516c 	.word	0x0801516c
 800fb74:	08015150 	.word	0x08015150
 800fb78:	200081cc 	.word	0x200081cc
 800fb7c:	08015194 	.word	0x08015194

0800fb80 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08a      	sub	sp, #40	@ 0x28
 800fb84:	af02      	add	r7, sp, #8
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d106      	bne.n	800fba6 <etharp_raw+0x26>
 800fb98:	4b3a      	ldr	r3, [pc, #232]	@ (800fc84 <etharp_raw+0x104>)
 800fb9a:	f240 4257 	movw	r2, #1111	@ 0x457
 800fb9e:	493a      	ldr	r1, [pc, #232]	@ (800fc88 <etharp_raw+0x108>)
 800fba0:	483a      	ldr	r0, [pc, #232]	@ (800fc8c <etharp_raw+0x10c>)
 800fba2:	f001 fdd5 	bl	8011750 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fba6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fbaa:	211c      	movs	r1, #28
 800fbac:	200e      	movs	r0, #14
 800fbae:	f7f5 feeb 	bl	8005988 <pbuf_alloc>
 800fbb2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fbb4:	69bb      	ldr	r3, [r7, #24]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d102      	bne.n	800fbc0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fbba:	f04f 33ff 	mov.w	r3, #4294967295
 800fbbe:	e05d      	b.n	800fc7c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	895b      	ldrh	r3, [r3, #10]
 800fbc4:	2b1b      	cmp	r3, #27
 800fbc6:	d806      	bhi.n	800fbd6 <etharp_raw+0x56>
 800fbc8:	4b2e      	ldr	r3, [pc, #184]	@ (800fc84 <etharp_raw+0x104>)
 800fbca:	f240 4262 	movw	r2, #1122	@ 0x462
 800fbce:	4930      	ldr	r1, [pc, #192]	@ (800fc90 <etharp_raw+0x110>)
 800fbd0:	482e      	ldr	r0, [pc, #184]	@ (800fc8c <etharp_raw+0x10c>)
 800fbd2:	f001 fdbd 	bl	8011750 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fbdc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7f4 fe1a 	bl	8004818 <lwip_htons>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbf2:	2b06      	cmp	r3, #6
 800fbf4:	d006      	beq.n	800fc04 <etharp_raw+0x84>
 800fbf6:	4b23      	ldr	r3, [pc, #140]	@ (800fc84 <etharp_raw+0x104>)
 800fbf8:	f240 4269 	movw	r2, #1129	@ 0x469
 800fbfc:	4925      	ldr	r1, [pc, #148]	@ (800fc94 <etharp_raw+0x114>)
 800fbfe:	4823      	ldr	r0, [pc, #140]	@ (800fc8c <etharp_raw+0x10c>)
 800fc00:	f001 fda6 	bl	8011750 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	3308      	adds	r3, #8
 800fc08:	2206      	movs	r2, #6
 800fc0a:	6839      	ldr	r1, [r7, #0]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f001 ff8c 	bl	8011b2a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	3312      	adds	r3, #18
 800fc16:	2206      	movs	r2, #6
 800fc18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f001 ff85 	bl	8011b2a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	330e      	adds	r3, #14
 800fc24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc26:	6812      	ldr	r2, [r2, #0]
 800fc28:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	3318      	adds	r3, #24
 800fc2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc30:	6812      	ldr	r2, [r2, #0]
 800fc32:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2200      	movs	r2, #0
 800fc38:	701a      	strb	r2, [r3, #0]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f042 0201 	orr.w	r2, r2, #1
 800fc40:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f042 0208 	orr.w	r2, r2, #8
 800fc4a:	709a      	strb	r2, [r3, #2]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2206      	movs	r2, #6
 800fc54:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	2204      	movs	r2, #4
 800fc5a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fc5c:	f640 0306 	movw	r3, #2054	@ 0x806
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	69b9      	ldr	r1, [r7, #24]
 800fc68:	68f8      	ldr	r0, [r7, #12]
 800fc6a:	f001 fc29 	bl	80114c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fc6e:	69b8      	ldr	r0, [r7, #24]
 800fc70:	f7f6 f96e 	bl	8005f50 <pbuf_free>
  p = NULL;
 800fc74:	2300      	movs	r3, #0
 800fc76:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fc78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3720      	adds	r7, #32
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	08014fb0 	.word	0x08014fb0
 800fc88:	08015100 	.word	0x08015100
 800fc8c:	08015028 	.word	0x08015028
 800fc90:	080151b0 	.word	0x080151b0
 800fc94:	080151e4 	.word	0x080151e4

0800fc98 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b088      	sub	sp, #32
 800fc9c:	af04      	add	r7, sp, #16
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	9203      	str	r2, [sp, #12]
 800fcb8:	68ba      	ldr	r2, [r7, #8]
 800fcba:	9202      	str	r2, [sp, #8]
 800fcbc:	4a06      	ldr	r2, [pc, #24]	@ (800fcd8 <etharp_request_dst+0x40>)
 800fcbe:	9201      	str	r2, [sp, #4]
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f7ff ff5a 	bl	800fb80 <etharp_raw>
 800fccc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	08016584 	.word	0x08016584

0800fcdc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b082      	sub	sp, #8
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fce6:	4a05      	ldr	r2, [pc, #20]	@ (800fcfc <etharp_request+0x20>)
 800fce8:	6839      	ldr	r1, [r7, #0]
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f7ff ffd4 	bl	800fc98 <etharp_request_dst>
 800fcf0:	4603      	mov	r3, r0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	0801657c 	.word	0x0801657c

0800fd00 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08e      	sub	sp, #56	@ 0x38
 800fd04:	af04      	add	r7, sp, #16
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fd0a:	4b79      	ldr	r3, [pc, #484]	@ (800fef0 <icmp_input+0x1f0>)
 800fd0c:	689b      	ldr	r3, [r3, #8]
 800fd0e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	f003 030f 	and.w	r3, r3, #15
 800fd18:	b2db      	uxtb	r3, r3
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800fd20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd22:	2b13      	cmp	r3, #19
 800fd24:	f240 80cd 	bls.w	800fec2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	895b      	ldrh	r3, [r3, #10]
 800fd2c:	2b03      	cmp	r3, #3
 800fd2e:	f240 80ca 	bls.w	800fec6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fd3c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 80b7 	beq.w	800feb4 <icmp_input+0x1b4>
 800fd46:	2b08      	cmp	r3, #8
 800fd48:	f040 80b7 	bne.w	800feba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fd4c:	4b69      	ldr	r3, [pc, #420]	@ (800fef4 <icmp_input+0x1f4>)
 800fd4e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fd50:	4b67      	ldr	r3, [pc, #412]	@ (800fef0 <icmp_input+0x1f0>)
 800fd52:	695b      	ldr	r3, [r3, #20]
 800fd54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fd58:	2be0      	cmp	r3, #224	@ 0xe0
 800fd5a:	f000 80bb 	beq.w	800fed4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fd5e:	4b64      	ldr	r3, [pc, #400]	@ (800fef0 <icmp_input+0x1f0>)
 800fd60:	695b      	ldr	r3, [r3, #20]
 800fd62:	4a63      	ldr	r2, [pc, #396]	@ (800fef0 <icmp_input+0x1f0>)
 800fd64:	6812      	ldr	r2, [r2, #0]
 800fd66:	4611      	mov	r1, r2
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f000 fc0b 	bl	8010584 <ip4_addr_isbroadcast_u32>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f040 80b1 	bne.w	800fed8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	891b      	ldrh	r3, [r3, #8]
 800fd7a:	2b07      	cmp	r3, #7
 800fd7c:	f240 80a5 	bls.w	800feca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fd80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd82:	330e      	adds	r3, #14
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7f6 f84c 	bl	8005e24 <pbuf_add_header>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d04b      	beq.n	800fe2a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	891a      	ldrh	r2, [r3, #8]
 800fd96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fd98:	4413      	add	r3, r2
 800fd9a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	891b      	ldrh	r3, [r3, #8]
 800fda0:	8b7a      	ldrh	r2, [r7, #26]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	f0c0 809a 	bcc.w	800fedc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fda8:	8b7b      	ldrh	r3, [r7, #26]
 800fdaa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fdae:	4619      	mov	r1, r3
 800fdb0:	200e      	movs	r0, #14
 800fdb2:	f7f5 fde9 	bl	8005988 <pbuf_alloc>
 800fdb6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	f000 8090 	beq.w	800fee0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	895b      	ldrh	r3, [r3, #10]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fdc8:	3308      	adds	r3, #8
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d203      	bcs.n	800fdd6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fdce:	6978      	ldr	r0, [r7, #20]
 800fdd0:	f7f6 f8be 	bl	8005f50 <pbuf_free>
          goto icmperr;
 800fdd4:	e085      	b.n	800fee2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fddc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fdde:	4618      	mov	r0, r3
 800fde0:	f001 fea3 	bl	8011b2a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fde4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fde6:	4619      	mov	r1, r3
 800fde8:	6978      	ldr	r0, [r7, #20]
 800fdea:	f7f6 f82b 	bl	8005e44 <pbuf_remove_header>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d009      	beq.n	800fe08 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fdf4:	4b40      	ldr	r3, [pc, #256]	@ (800fef8 <icmp_input+0x1f8>)
 800fdf6:	22b6      	movs	r2, #182	@ 0xb6
 800fdf8:	4940      	ldr	r1, [pc, #256]	@ (800fefc <icmp_input+0x1fc>)
 800fdfa:	4841      	ldr	r0, [pc, #260]	@ (800ff00 <icmp_input+0x200>)
 800fdfc:	f001 fca8 	bl	8011750 <iprintf>
          pbuf_free(r);
 800fe00:	6978      	ldr	r0, [r7, #20]
 800fe02:	f7f6 f8a5 	bl	8005f50 <pbuf_free>
          goto icmperr;
 800fe06:	e06c      	b.n	800fee2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fe08:	6879      	ldr	r1, [r7, #4]
 800fe0a:	6978      	ldr	r0, [r7, #20]
 800fe0c:	f7f6 f9c8 	bl	80061a0 <pbuf_copy>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fe16:	6978      	ldr	r0, [r7, #20]
 800fe18:	f7f6 f89a 	bl	8005f50 <pbuf_free>
          goto icmperr;
 800fe1c:	e061      	b.n	800fee2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7f6 f896 	bl	8005f50 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	607b      	str	r3, [r7, #4]
 800fe28:	e00f      	b.n	800fe4a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fe2a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe2c:	330e      	adds	r3, #14
 800fe2e:	4619      	mov	r1, r3
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f7f6 f807 	bl	8005e44 <pbuf_remove_header>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d006      	beq.n	800fe4a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fe3c:	4b2e      	ldr	r3, [pc, #184]	@ (800fef8 <icmp_input+0x1f8>)
 800fe3e:	22c7      	movs	r2, #199	@ 0xc7
 800fe40:	4930      	ldr	r1, [pc, #192]	@ (800ff04 <icmp_input+0x204>)
 800fe42:	482f      	ldr	r0, [pc, #188]	@ (800ff00 <icmp_input+0x200>)
 800fe44:	f001 fc84 	bl	8011750 <iprintf>
          goto icmperr;
 800fe48:	e04b      	b.n	800fee2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fe50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7f5 ffe5 	bl	8005e24 <pbuf_add_header>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d12b      	bne.n	800feb8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fe66:	69fb      	ldr	r3, [r7, #28]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fe6e:	4b20      	ldr	r3, [pc, #128]	@ (800fef0 <icmp_input+0x1f0>)
 800fe70:	691a      	ldr	r2, [r3, #16]
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	709a      	strb	r2, [r3, #2]
 800fe82:	2200      	movs	r2, #0
 800fe84:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	22ff      	movs	r2, #255	@ 0xff
 800fe8a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	729a      	strb	r2, [r3, #10]
 800fe92:	2200      	movs	r2, #0
 800fe94:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	9302      	str	r3, [sp, #8]
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	23ff      	movs	r3, #255	@ 0xff
 800fea4:	2200      	movs	r2, #0
 800fea6:	69f9      	ldr	r1, [r7, #28]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f000 fa93 	bl	80103d4 <ip4_output_if>
 800feae:	4603      	mov	r3, r0
 800feb0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800feb2:	e001      	b.n	800feb8 <icmp_input+0x1b8>
      break;
 800feb4:	bf00      	nop
 800feb6:	e000      	b.n	800feba <icmp_input+0x1ba>
      break;
 800feb8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f7f6 f848 	bl	8005f50 <pbuf_free>
  return;
 800fec0:	e013      	b.n	800feea <icmp_input+0x1ea>
    goto lenerr;
 800fec2:	bf00      	nop
 800fec4:	e002      	b.n	800fecc <icmp_input+0x1cc>
    goto lenerr;
 800fec6:	bf00      	nop
 800fec8:	e000      	b.n	800fecc <icmp_input+0x1cc>
        goto lenerr;
 800feca:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f7f6 f83f 	bl	8005f50 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fed2:	e00a      	b.n	800feea <icmp_input+0x1ea>
        goto icmperr;
 800fed4:	bf00      	nop
 800fed6:	e004      	b.n	800fee2 <icmp_input+0x1e2>
        goto icmperr;
 800fed8:	bf00      	nop
 800feda:	e002      	b.n	800fee2 <icmp_input+0x1e2>
          goto icmperr;
 800fedc:	bf00      	nop
 800fede:	e000      	b.n	800fee2 <icmp_input+0x1e2>
          goto icmperr;
 800fee0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7f6 f834 	bl	8005f50 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fee8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800feea:	3728      	adds	r7, #40	@ 0x28
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	2000510c 	.word	0x2000510c
 800fef4:	20005120 	.word	0x20005120
 800fef8:	08015228 	.word	0x08015228
 800fefc:	08015260 	.word	0x08015260
 800ff00:	08015298 	.word	0x08015298
 800ff04:	080152c0 	.word	0x080152c0

0800ff08 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ff14:	78fb      	ldrb	r3, [r7, #3]
 800ff16:	461a      	mov	r2, r3
 800ff18:	2103      	movs	r1, #3
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f000 f814 	bl	800ff48 <icmp_send_response>
}
 800ff20:	bf00      	nop
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
 800ff30:	460b      	mov	r3, r1
 800ff32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ff34:	78fb      	ldrb	r3, [r7, #3]
 800ff36:	461a      	mov	r2, r3
 800ff38:	210b      	movs	r1, #11
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 f804 	bl	800ff48 <icmp_send_response>
}
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b08c      	sub	sp, #48	@ 0x30
 800ff4c:	af04      	add	r7, sp, #16
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	460b      	mov	r3, r1
 800ff52:	70fb      	strb	r3, [r7, #3]
 800ff54:	4613      	mov	r3, r2
 800ff56:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ff58:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ff5c:	2124      	movs	r1, #36	@ 0x24
 800ff5e:	2022      	movs	r0, #34	@ 0x22
 800ff60:	f7f5 fd12 	bl	8005988 <pbuf_alloc>
 800ff64:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d04c      	beq.n	8010006 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	895b      	ldrh	r3, [r3, #10]
 800ff70:	2b23      	cmp	r3, #35	@ 0x23
 800ff72:	d806      	bhi.n	800ff82 <icmp_send_response+0x3a>
 800ff74:	4b26      	ldr	r3, [pc, #152]	@ (8010010 <icmp_send_response+0xc8>)
 800ff76:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ff7a:	4926      	ldr	r1, [pc, #152]	@ (8010014 <icmp_send_response+0xcc>)
 800ff7c:	4826      	ldr	r0, [pc, #152]	@ (8010018 <icmp_send_response+0xd0>)
 800ff7e:	f001 fbe7 	bl	8011750 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	78fa      	ldrb	r2, [r7, #3]
 800ff92:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	78ba      	ldrb	r2, [r7, #2]
 800ff98:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	711a      	strb	r2, [r3, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	719a      	strb	r2, [r3, #6]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	f103 0008 	add.w	r0, r3, #8
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	221c      	movs	r2, #28
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	f001 fdb4 	bl	8011b2a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ffc8:	f107 030c 	add.w	r3, r7, #12
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f000 f825 	bl	801001c <ip4_route>
 800ffd2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d011      	beq.n	800fffe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800ffda:	697b      	ldr	r3, [r7, #20]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	709a      	strb	r2, [r3, #2]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ffe4:	f107 020c 	add.w	r2, r7, #12
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	9302      	str	r3, [sp, #8]
 800ffec:	2301      	movs	r3, #1
 800ffee:	9301      	str	r3, [sp, #4]
 800fff0:	2300      	movs	r3, #0
 800fff2:	9300      	str	r3, [sp, #0]
 800fff4:	23ff      	movs	r3, #255	@ 0xff
 800fff6:	2100      	movs	r1, #0
 800fff8:	69f8      	ldr	r0, [r7, #28]
 800fffa:	f000 f9eb 	bl	80103d4 <ip4_output_if>
  }
  pbuf_free(q);
 800fffe:	69f8      	ldr	r0, [r7, #28]
 8010000:	f7f5 ffa6 	bl	8005f50 <pbuf_free>
 8010004:	e000      	b.n	8010008 <icmp_send_response+0xc0>
    return;
 8010006:	bf00      	nop
}
 8010008:	3720      	adds	r7, #32
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
 801000e:	bf00      	nop
 8010010:	08015228 	.word	0x08015228
 8010014:	080152f4 	.word	0x080152f4
 8010018:	08015298 	.word	0x08015298

0801001c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801001c:	b480      	push	{r7}
 801001e:	b085      	sub	sp, #20
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010024:	4b33      	ldr	r3, [pc, #204]	@ (80100f4 <ip4_route+0xd8>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60fb      	str	r3, [r7, #12]
 801002a:	e036      	b.n	801009a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010032:	f003 0301 	and.w	r3, r3, #1
 8010036:	b2db      	uxtb	r3, r3
 8010038:	2b00      	cmp	r3, #0
 801003a:	d02b      	beq.n	8010094 <ip4_route+0x78>
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010042:	089b      	lsrs	r3, r3, #2
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	b2db      	uxtb	r3, r3
 801004a:	2b00      	cmp	r3, #0
 801004c:	d022      	beq.n	8010094 <ip4_route+0x78>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	3304      	adds	r3, #4
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d01d      	beq.n	8010094 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3304      	adds	r3, #4
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	405a      	eors	r2, r3
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	3308      	adds	r3, #8
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4013      	ands	r3, r2
 801006c:	2b00      	cmp	r3, #0
 801006e:	d101      	bne.n	8010074 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	e038      	b.n	80100e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801007a:	f003 0302 	and.w	r3, r3, #2
 801007e:	2b00      	cmp	r3, #0
 8010080:	d108      	bne.n	8010094 <ip4_route+0x78>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681a      	ldr	r2, [r3, #0]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	330c      	adds	r3, #12
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	429a      	cmp	r2, r3
 801008e:	d101      	bne.n	8010094 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	e028      	b.n	80100e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	60fb      	str	r3, [r7, #12]
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d1c5      	bne.n	801002c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80100a0:	4b15      	ldr	r3, [pc, #84]	@ (80100f8 <ip4_route+0xdc>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d01a      	beq.n	80100de <ip4_route+0xc2>
 80100a8:	4b13      	ldr	r3, [pc, #76]	@ (80100f8 <ip4_route+0xdc>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d012      	beq.n	80100de <ip4_route+0xc2>
 80100b8:	4b0f      	ldr	r3, [pc, #60]	@ (80100f8 <ip4_route+0xdc>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80100c0:	f003 0304 	and.w	r3, r3, #4
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d00a      	beq.n	80100de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80100c8:	4b0b      	ldr	r3, [pc, #44]	@ (80100f8 <ip4_route+0xdc>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	3304      	adds	r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d004      	beq.n	80100de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	2b7f      	cmp	r3, #127	@ 0x7f
 80100dc:	d101      	bne.n	80100e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80100de:	2300      	movs	r3, #0
 80100e0:	e001      	b.n	80100e6 <ip4_route+0xca>
  }

  return netif_default;
 80100e2:	4b05      	ldr	r3, [pc, #20]	@ (80100f8 <ip4_route+0xdc>)
 80100e4:	681b      	ldr	r3, [r3, #0]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3714      	adds	r7, #20
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	2000803c 	.word	0x2000803c
 80100f8:	20008040 	.word	0x20008040

080100fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	b2db      	uxtb	r3, r3
 8010110:	2b00      	cmp	r3, #0
 8010112:	d016      	beq.n	8010142 <ip4_input_accept+0x46>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	3304      	adds	r3, #4
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d011      	beq.n	8010142 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801011e:	4b0b      	ldr	r3, [pc, #44]	@ (801014c <ip4_input_accept+0x50>)
 8010120:	695a      	ldr	r2, [r3, #20]
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	3304      	adds	r3, #4
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	429a      	cmp	r2, r3
 801012a:	d008      	beq.n	801013e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801012c:	4b07      	ldr	r3, [pc, #28]	@ (801014c <ip4_input_accept+0x50>)
 801012e:	695b      	ldr	r3, [r3, #20]
 8010130:	6879      	ldr	r1, [r7, #4]
 8010132:	4618      	mov	r0, r3
 8010134:	f000 fa26 	bl	8010584 <ip4_addr_isbroadcast_u32>
 8010138:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801013a:	2b00      	cmp	r3, #0
 801013c:	d001      	beq.n	8010142 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801013e:	2301      	movs	r3, #1
 8010140:	e000      	b.n	8010144 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	2000510c 	.word	0x2000510c

08010150 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b088      	sub	sp, #32
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801015a:	2301      	movs	r3, #1
 801015c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	091b      	lsrs	r3, r3, #4
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b04      	cmp	r3, #4
 801016e:	d004      	beq.n	801017a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7f5 feed 	bl	8005f50 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	e123      	b.n	80103c2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	f003 030f 	and.w	r3, r3, #15
 8010182:	b2db      	uxtb	r3, r3
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	b2db      	uxtb	r3, r3
 8010188:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	885b      	ldrh	r3, [r3, #2]
 801018e:	b29b      	uxth	r3, r3
 8010190:	4618      	mov	r0, r3
 8010192:	f7f4 fb41 	bl	8004818 <lwip_htons>
 8010196:	4603      	mov	r3, r0
 8010198:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	891b      	ldrh	r3, [r3, #8]
 801019e:	8a3a      	ldrh	r2, [r7, #16]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d204      	bcs.n	80101ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80101a4:	8a3b      	ldrh	r3, [r7, #16]
 80101a6:	4619      	mov	r1, r3
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7f5 fd4b 	bl	8005c44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	895b      	ldrh	r3, [r3, #10]
 80101b2:	8a7a      	ldrh	r2, [r7, #18]
 80101b4:	429a      	cmp	r2, r3
 80101b6:	d807      	bhi.n	80101c8 <ip4_input+0x78>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	891b      	ldrh	r3, [r3, #8]
 80101bc:	8a3a      	ldrh	r2, [r7, #16]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d802      	bhi.n	80101c8 <ip4_input+0x78>
 80101c2:	8a7b      	ldrh	r3, [r7, #18]
 80101c4:	2b13      	cmp	r3, #19
 80101c6:	d804      	bhi.n	80101d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f7f5 fec1 	bl	8005f50 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80101ce:	2300      	movs	r3, #0
 80101d0:	e0f7      	b.n	80103c2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	4a7d      	ldr	r2, [pc, #500]	@ (80103cc <ip4_input+0x27c>)
 80101d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80101da:	69fb      	ldr	r3, [r7, #28]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	4a7b      	ldr	r2, [pc, #492]	@ (80103cc <ip4_input+0x27c>)
 80101e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80101e2:	4b7a      	ldr	r3, [pc, #488]	@ (80103cc <ip4_input+0x27c>)
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80101ea:	2be0      	cmp	r3, #224	@ 0xe0
 80101ec:	d112      	bne.n	8010214 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80101f4:	f003 0301 	and.w	r3, r3, #1
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d007      	beq.n	801020e <ip4_input+0xbe>
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	3304      	adds	r3, #4
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d002      	beq.n	801020e <ip4_input+0xbe>
      netif = inp;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	61bb      	str	r3, [r7, #24]
 801020c:	e02a      	b.n	8010264 <ip4_input+0x114>
    } else {
      netif = NULL;
 801020e:	2300      	movs	r3, #0
 8010210:	61bb      	str	r3, [r7, #24]
 8010212:	e027      	b.n	8010264 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010214:	6838      	ldr	r0, [r7, #0]
 8010216:	f7ff ff71 	bl	80100fc <ip4_input_accept>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d002      	beq.n	8010226 <ip4_input+0xd6>
      netif = inp;
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	61bb      	str	r3, [r7, #24]
 8010224:	e01e      	b.n	8010264 <ip4_input+0x114>
    } else {
      netif = NULL;
 8010226:	2300      	movs	r3, #0
 8010228:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801022a:	4b68      	ldr	r3, [pc, #416]	@ (80103cc <ip4_input+0x27c>)
 801022c:	695b      	ldr	r3, [r3, #20]
 801022e:	b2db      	uxtb	r3, r3
 8010230:	2b7f      	cmp	r3, #127	@ 0x7f
 8010232:	d017      	beq.n	8010264 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010234:	4b66      	ldr	r3, [pc, #408]	@ (80103d0 <ip4_input+0x280>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	61bb      	str	r3, [r7, #24]
 801023a:	e00e      	b.n	801025a <ip4_input+0x10a>
          if (netif == inp) {
 801023c:	69ba      	ldr	r2, [r7, #24]
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	429a      	cmp	r2, r3
 8010242:	d006      	beq.n	8010252 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010244:	69b8      	ldr	r0, [r7, #24]
 8010246:	f7ff ff59 	bl	80100fc <ip4_input_accept>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d108      	bne.n	8010262 <ip4_input+0x112>
 8010250:	e000      	b.n	8010254 <ip4_input+0x104>
            continue;
 8010252:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	61bb      	str	r3, [r7, #24]
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1ed      	bne.n	801023c <ip4_input+0xec>
 8010260:	e000      	b.n	8010264 <ip4_input+0x114>
            break;
 8010262:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d111      	bne.n	801028e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	7a5b      	ldrb	r3, [r3, #9]
 801026e:	2b11      	cmp	r3, #17
 8010270:	d10d      	bne.n	801028e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8010272:	8a7b      	ldrh	r3, [r7, #18]
 8010274:	69fa      	ldr	r2, [r7, #28]
 8010276:	4413      	add	r3, r2
 8010278:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	885b      	ldrh	r3, [r3, #2]
 801027e:	b29b      	uxth	r3, r3
 8010280:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8010284:	d103      	bne.n	801028e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d017      	beq.n	80102c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010294:	4b4d      	ldr	r3, [pc, #308]	@ (80103cc <ip4_input+0x27c>)
 8010296:	691b      	ldr	r3, [r3, #16]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d013      	beq.n	80102c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801029c:	4b4b      	ldr	r3, [pc, #300]	@ (80103cc <ip4_input+0x27c>)
 801029e:	691b      	ldr	r3, [r3, #16]
 80102a0:	6839      	ldr	r1, [r7, #0]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f000 f96e 	bl	8010584 <ip4_addr_isbroadcast_u32>
 80102a8:	4603      	mov	r3, r0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d105      	bne.n	80102ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80102ae:	4b47      	ldr	r3, [pc, #284]	@ (80103cc <ip4_input+0x27c>)
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80102b6:	2be0      	cmp	r3, #224	@ 0xe0
 80102b8:	d104      	bne.n	80102c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80102ba:	6878      	ldr	r0, [r7, #4]
 80102bc:	f7f5 fe48 	bl	8005f50 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80102c0:	2300      	movs	r3, #0
 80102c2:	e07e      	b.n	80103c2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d104      	bne.n	80102d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f7f5 fe40 	bl	8005f50 <pbuf_free>
    return ERR_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	e076      	b.n	80103c2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	88db      	ldrh	r3, [r3, #6]
 80102d8:	b29b      	uxth	r3, r3
 80102da:	461a      	mov	r2, r3
 80102dc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80102e0:	4013      	ands	r3, r2
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00b      	beq.n	80102fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f000 fd22 	bl	8010d30 <ip4_reass>
 80102ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d101      	bne.n	80102f8 <ip4_input+0x1a8>
      return ERR_OK;
 80102f4:	2300      	movs	r3, #0
 80102f6:	e064      	b.n	80103c2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80102fe:	4a33      	ldr	r2, [pc, #204]	@ (80103cc <ip4_input+0x27c>)
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010304:	4a31      	ldr	r2, [pc, #196]	@ (80103cc <ip4_input+0x27c>)
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801030a:	4a30      	ldr	r2, [pc, #192]	@ (80103cc <ip4_input+0x27c>)
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	f003 030f 	and.w	r3, r3, #15
 8010318:	b2db      	uxtb	r3, r3
 801031a:	009b      	lsls	r3, r3, #2
 801031c:	b2db      	uxtb	r3, r3
 801031e:	461a      	mov	r2, r3
 8010320:	4b2a      	ldr	r3, [pc, #168]	@ (80103cc <ip4_input+0x27c>)
 8010322:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010324:	8a7b      	ldrh	r3, [r7, #18]
 8010326:	4619      	mov	r1, r3
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7f5 fd8b 	bl	8005e44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	7a5b      	ldrb	r3, [r3, #9]
 8010332:	2b11      	cmp	r3, #17
 8010334:	d006      	beq.n	8010344 <ip4_input+0x1f4>
 8010336:	2b11      	cmp	r3, #17
 8010338:	dc13      	bgt.n	8010362 <ip4_input+0x212>
 801033a:	2b01      	cmp	r3, #1
 801033c:	d00c      	beq.n	8010358 <ip4_input+0x208>
 801033e:	2b06      	cmp	r3, #6
 8010340:	d005      	beq.n	801034e <ip4_input+0x1fe>
 8010342:	e00e      	b.n	8010362 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010344:	6839      	ldr	r1, [r7, #0]
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f7fc faee 	bl	800c928 <udp_input>
        break;
 801034c:	e026      	b.n	801039c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f7f7 fedd 	bl	8008110 <tcp_input>
        break;
 8010356:	e021      	b.n	801039c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010358:	6839      	ldr	r1, [r7, #0]
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff fcd0 	bl	800fd00 <icmp_input>
        break;
 8010360:	e01c      	b.n	801039c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010362:	4b1a      	ldr	r3, [pc, #104]	@ (80103cc <ip4_input+0x27c>)
 8010364:	695b      	ldr	r3, [r3, #20]
 8010366:	69b9      	ldr	r1, [r7, #24]
 8010368:	4618      	mov	r0, r3
 801036a:	f000 f90b 	bl	8010584 <ip4_addr_isbroadcast_u32>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d10f      	bne.n	8010394 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010374:	4b15      	ldr	r3, [pc, #84]	@ (80103cc <ip4_input+0x27c>)
 8010376:	695b      	ldr	r3, [r3, #20]
 8010378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801037c:	2be0      	cmp	r3, #224	@ 0xe0
 801037e:	d009      	beq.n	8010394 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010384:	4619      	mov	r1, r3
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7f5 fdcf 	bl	8005f2a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801038c:	2102      	movs	r1, #2
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff fdba 	bl	800ff08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7f5 fddb 	bl	8005f50 <pbuf_free>
        break;
 801039a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801039c:	4b0b      	ldr	r3, [pc, #44]	@ (80103cc <ip4_input+0x27c>)
 801039e:	2200      	movs	r2, #0
 80103a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80103a2:	4b0a      	ldr	r3, [pc, #40]	@ (80103cc <ip4_input+0x27c>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80103a8:	4b08      	ldr	r3, [pc, #32]	@ (80103cc <ip4_input+0x27c>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80103ae:	4b07      	ldr	r3, [pc, #28]	@ (80103cc <ip4_input+0x27c>)
 80103b0:	2200      	movs	r2, #0
 80103b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80103b4:	4b05      	ldr	r3, [pc, #20]	@ (80103cc <ip4_input+0x27c>)
 80103b6:	2200      	movs	r2, #0
 80103b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80103ba:	4b04      	ldr	r3, [pc, #16]	@ (80103cc <ip4_input+0x27c>)
 80103bc:	2200      	movs	r2, #0
 80103be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80103c0:	2300      	movs	r3, #0
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3720      	adds	r7, #32
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd80      	pop	{r7, pc}
 80103ca:	bf00      	nop
 80103cc:	2000510c 	.word	0x2000510c
 80103d0:	2000803c 	.word	0x2000803c

080103d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b08a      	sub	sp, #40	@ 0x28
 80103d8:	af04      	add	r7, sp, #16
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
 80103e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d009      	beq.n	8010400 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <ip4_output_if+0x26>
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d102      	bne.n	8010400 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80103fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103fc:	3304      	adds	r3, #4
 80103fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010400:	78fa      	ldrb	r2, [r7, #3]
 8010402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010404:	9302      	str	r3, [sp, #8]
 8010406:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801040a:	9301      	str	r3, [sp, #4]
 801040c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4613      	mov	r3, r2
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	6979      	ldr	r1, [r7, #20]
 8010418:	68f8      	ldr	r0, [r7, #12]
 801041a:	f000 f805 	bl	8010428 <ip4_output_if_src>
 801041e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010420:	4618      	mov	r0, r3
 8010422:	3718      	adds	r7, #24
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b088      	sub	sp, #32
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
 8010434:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	7b9b      	ldrb	r3, [r3, #14]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d006      	beq.n	801044c <ip4_output_if_src+0x24>
 801043e:	4b4b      	ldr	r3, [pc, #300]	@ (801056c <ip4_output_if_src+0x144>)
 8010440:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010444:	494a      	ldr	r1, [pc, #296]	@ (8010570 <ip4_output_if_src+0x148>)
 8010446:	484b      	ldr	r0, [pc, #300]	@ (8010574 <ip4_output_if_src+0x14c>)
 8010448:	f001 f982 	bl	8011750 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d060      	beq.n	8010514 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010452:	2314      	movs	r3, #20
 8010454:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010456:	2114      	movs	r1, #20
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f7f5 fce3 	bl	8005e24 <pbuf_add_header>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010464:	f06f 0301 	mvn.w	r3, #1
 8010468:	e07c      	b.n	8010564 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	895b      	ldrh	r3, [r3, #10]
 8010474:	2b13      	cmp	r3, #19
 8010476:	d806      	bhi.n	8010486 <ip4_output_if_src+0x5e>
 8010478:	4b3c      	ldr	r3, [pc, #240]	@ (801056c <ip4_output_if_src+0x144>)
 801047a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801047e:	493e      	ldr	r1, [pc, #248]	@ (8010578 <ip4_output_if_src+0x150>)
 8010480:	483c      	ldr	r0, [pc, #240]	@ (8010574 <ip4_output_if_src+0x14c>)
 8010482:	f001 f965 	bl	8011750 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	78fa      	ldrb	r2, [r7, #3]
 801048a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801048c:	69fb      	ldr	r3, [r7, #28]
 801048e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010492:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681a      	ldr	r2, [r3, #0]
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801049c:	8b7b      	ldrh	r3, [r7, #26]
 801049e:	089b      	lsrs	r3, r3, #2
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80104b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	891b      	ldrh	r3, [r3, #8]
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7f4 f9ac 	bl	8004818 <lwip_htons>
 80104c0:	4603      	mov	r3, r0
 80104c2:	461a      	mov	r2, r3
 80104c4:	69fb      	ldr	r3, [r7, #28]
 80104c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	2200      	movs	r2, #0
 80104cc:	719a      	strb	r2, [r3, #6]
 80104ce:	2200      	movs	r2, #0
 80104d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80104d2:	4b2a      	ldr	r3, [pc, #168]	@ (801057c <ip4_output_if_src+0x154>)
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7f4 f99e 	bl	8004818 <lwip_htons>
 80104dc:	4603      	mov	r3, r0
 80104de:	461a      	mov	r2, r3
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80104e4:	4b25      	ldr	r3, [pc, #148]	@ (801057c <ip4_output_if_src+0x154>)
 80104e6:	881b      	ldrh	r3, [r3, #0]
 80104e8:	3301      	adds	r3, #1
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	4b23      	ldr	r3, [pc, #140]	@ (801057c <ip4_output_if_src+0x154>)
 80104ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d104      	bne.n	8010500 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80104f6:	4b22      	ldr	r3, [pc, #136]	@ (8010580 <ip4_output_if_src+0x158>)
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	e003      	b.n	8010508 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	2200      	movs	r2, #0
 801050c:	729a      	strb	r2, [r3, #10]
 801050e:	2200      	movs	r2, #0
 8010510:	72da      	strb	r2, [r3, #11]
 8010512:	e00f      	b.n	8010534 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	895b      	ldrh	r3, [r3, #10]
 8010518:	2b13      	cmp	r3, #19
 801051a:	d802      	bhi.n	8010522 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801051c:	f06f 0301 	mvn.w	r3, #1
 8010520:	e020      	b.n	8010564 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010528:	69fb      	ldr	r3, [r7, #28]
 801052a:	691b      	ldr	r3, [r3, #16]
 801052c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801052e:	f107 0314 	add.w	r3, r7, #20
 8010532:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8010534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00c      	beq.n	8010556 <ip4_output_if_src+0x12e>
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	891a      	ldrh	r2, [r3, #8]
 8010540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010544:	429a      	cmp	r2, r3
 8010546:	d906      	bls.n	8010556 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801054c:	68f8      	ldr	r0, [r7, #12]
 801054e:	f000 fde3 	bl	8011118 <ip4_frag>
 8010552:	4603      	mov	r3, r0
 8010554:	e006      	b.n	8010564 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	68f9      	ldr	r1, [r7, #12]
 801055e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010560:	4798      	blx	r3
 8010562:	4603      	mov	r3, r0
}
 8010564:	4618      	mov	r0, r3
 8010566:	3720      	adds	r7, #32
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	08015320 	.word	0x08015320
 8010570:	08015354 	.word	0x08015354
 8010574:	08015360 	.word	0x08015360
 8010578:	08015388 	.word	0x08015388
 801057c:	200081ce 	.word	0x200081ce
 8010580:	08016574 	.word	0x08016574

08010584 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010598:	d002      	beq.n	80105a0 <ip4_addr_isbroadcast_u32+0x1c>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80105a0:	2301      	movs	r3, #1
 80105a2:	e02a      	b.n	80105fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80105aa:	f003 0302 	and.w	r3, r3, #2
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	e021      	b.n	80105fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	3304      	adds	r3, #4
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d101      	bne.n	80105c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	e019      	b.n	80105fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80105c6:	68fa      	ldr	r2, [r7, #12]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	3304      	adds	r3, #4
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	405a      	eors	r2, r3
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	3308      	adds	r3, #8
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4013      	ands	r3, r2
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d10d      	bne.n	80105f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	3308      	adds	r3, #8
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	43da      	mvns	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	3308      	adds	r3, #8
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d101      	bne.n	80105f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80105f4:	2301      	movs	r3, #1
 80105f6:	e000      	b.n	80105fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80105f8:	2300      	movs	r3, #0
  }
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3714      	adds	r7, #20
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
	...

08010608 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8010610:	2210      	movs	r2, #16
 8010612:	4904      	ldr	r1, [pc, #16]	@ (8010624 <ip4addr_ntoa+0x1c>)
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 f807 	bl	8010628 <ip4addr_ntoa_r>
 801061a:	4603      	mov	r3, r0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3708      	adds	r7, #8
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	200081d0 	.word	0x200081d0

08010628 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8010628:	b480      	push	{r7}
 801062a:	b08d      	sub	sp, #52	@ 0x34
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8010634:	2300      	movs	r3, #0
 8010636:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 8010642:	f107 0318 	add.w	r3, r7, #24
 8010646:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8010648:	2300      	movs	r3, #0
 801064a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801064e:	e058      	b.n	8010702 <ip4addr_ntoa_r+0xda>
    i = 0;
 8010650:	2300      	movs	r3, #0
 8010652:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 8010656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010658:	781a      	ldrb	r2, [r3, #0]
 801065a:	4b32      	ldr	r3, [pc, #200]	@ (8010724 <ip4addr_ntoa_r+0xfc>)
 801065c:	fba3 1302 	umull	r1, r3, r3, r2
 8010660:	08d9      	lsrs	r1, r3, #3
 8010662:	460b      	mov	r3, r1
 8010664:	009b      	lsls	r3, r3, #2
 8010666:	440b      	add	r3, r1
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801066e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	4a2c      	ldr	r2, [pc, #176]	@ (8010724 <ip4addr_ntoa_r+0xfc>)
 8010674:	fba2 2303 	umull	r2, r3, r2, r3
 8010678:	08db      	lsrs	r3, r3, #3
 801067a:	b2da      	uxtb	r2, r3
 801067c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801067e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8010680:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801068a:	4619      	mov	r1, r3
 801068c:	7ffb      	ldrb	r3, [r7, #31]
 801068e:	3330      	adds	r3, #48	@ 0x30
 8010690:	b2da      	uxtb	r2, r3
 8010692:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8010696:	443b      	add	r3, r7
 8010698:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801069c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1d8      	bne.n	8010656 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80106a4:	e011      	b.n	80106ca <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	1c5a      	adds	r2, r3, #1
 80106aa:	623a      	str	r2, [r7, #32]
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	dc01      	bgt.n	80106b6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80106b2:	2300      	movs	r3, #0
 80106b4:	e030      	b.n	8010718 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80106b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80106ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106bc:	1c59      	adds	r1, r3, #1
 80106be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80106c0:	3230      	adds	r2, #48	@ 0x30
 80106c2:	443a      	add	r2, r7
 80106c4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80106c8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80106ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106ce:	1e5a      	subs	r2, r3, #1
 80106d0:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d1e6      	bne.n	80106a6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	1c5a      	adds	r2, r3, #1
 80106dc:	623a      	str	r2, [r7, #32]
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	429a      	cmp	r2, r3
 80106e2:	dc01      	bgt.n	80106e8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	e017      	b.n	8010718 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80106e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ea:	1c5a      	adds	r2, r3, #1
 80106ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106ee:	222e      	movs	r2, #46	@ 0x2e
 80106f0:	701a      	strb	r2, [r3, #0]
    ap++;
 80106f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106f4:	3301      	adds	r3, #1
 80106f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80106f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106fc:	3301      	adds	r3, #1
 80106fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010702:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010706:	2b03      	cmp	r3, #3
 8010708:	d9a2      	bls.n	8010650 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801070a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801070c:	3b01      	subs	r3, #1
 801070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010712:	2200      	movs	r2, #0
 8010714:	701a      	strb	r2, [r3, #0]
  return buf;
 8010716:	68bb      	ldr	r3, [r7, #8]
}
 8010718:	4618      	mov	r0, r3
 801071a:	3734      	adds	r7, #52	@ 0x34
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	cccccccd 	.word	0xcccccccd

08010728 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801072e:	2300      	movs	r3, #0
 8010730:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010732:	4b12      	ldr	r3, [pc, #72]	@ (801077c <ip_reass_tmr+0x54>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010738:	e018      	b.n	801076c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	7fdb      	ldrb	r3, [r3, #31]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00b      	beq.n	801075a <ip_reass_tmr+0x32>
      r->timer--;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	7fdb      	ldrb	r3, [r3, #31]
 8010746:	3b01      	subs	r3, #1
 8010748:	b2da      	uxtb	r2, r3
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	60fb      	str	r3, [r7, #12]
 8010758:	e008      	b.n	801076c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010764:	68b9      	ldr	r1, [r7, #8]
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f000 f80a 	bl	8010780 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d1e3      	bne.n	801073a <ip_reass_tmr+0x12>
    }
  }
}
 8010772:	bf00      	nop
 8010774:	bf00      	nop
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	200081e0 	.word	0x200081e0

08010780 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b088      	sub	sp, #32
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801078a:	2300      	movs	r3, #0
 801078c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	429a      	cmp	r2, r3
 8010794:	d105      	bne.n	80107a2 <ip_reass_free_complete_datagram+0x22>
 8010796:	4b45      	ldr	r3, [pc, #276]	@ (80108ac <ip_reass_free_complete_datagram+0x12c>)
 8010798:	22ab      	movs	r2, #171	@ 0xab
 801079a:	4945      	ldr	r1, [pc, #276]	@ (80108b0 <ip_reass_free_complete_datagram+0x130>)
 801079c:	4845      	ldr	r0, [pc, #276]	@ (80108b4 <ip_reass_free_complete_datagram+0x134>)
 801079e:	f000 ffd7 	bl	8011750 <iprintf>
  if (prev != NULL) {
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00a      	beq.n	80107be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	687a      	ldr	r2, [r7, #4]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d005      	beq.n	80107be <ip_reass_free_complete_datagram+0x3e>
 80107b2:	4b3e      	ldr	r3, [pc, #248]	@ (80108ac <ip_reass_free_complete_datagram+0x12c>)
 80107b4:	22ad      	movs	r2, #173	@ 0xad
 80107b6:	4940      	ldr	r1, [pc, #256]	@ (80108b8 <ip_reass_free_complete_datagram+0x138>)
 80107b8:	483e      	ldr	r0, [pc, #248]	@ (80108b4 <ip_reass_free_complete_datagram+0x134>)
 80107ba:	f000 ffc9 	bl	8011750 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	889b      	ldrh	r3, [r3, #4]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d12a      	bne.n	8010826 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	6858      	ldr	r0, [r3, #4]
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	3308      	adds	r3, #8
 80107e6:	2214      	movs	r2, #20
 80107e8:	4619      	mov	r1, r3
 80107ea:	f001 f99e 	bl	8011b2a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80107ee:	2101      	movs	r1, #1
 80107f0:	69b8      	ldr	r0, [r7, #24]
 80107f2:	f7ff fb99 	bl	800ff28 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80107f6:	69b8      	ldr	r0, [r7, #24]
 80107f8:	f7f5 fc32 	bl	8006060 <pbuf_clen>
 80107fc:	4603      	mov	r3, r0
 80107fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010800:	8bfa      	ldrh	r2, [r7, #30]
 8010802:	8a7b      	ldrh	r3, [r7, #18]
 8010804:	4413      	add	r3, r2
 8010806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801080a:	db05      	blt.n	8010818 <ip_reass_free_complete_datagram+0x98>
 801080c:	4b27      	ldr	r3, [pc, #156]	@ (80108ac <ip_reass_free_complete_datagram+0x12c>)
 801080e:	22bc      	movs	r2, #188	@ 0xbc
 8010810:	492a      	ldr	r1, [pc, #168]	@ (80108bc <ip_reass_free_complete_datagram+0x13c>)
 8010812:	4828      	ldr	r0, [pc, #160]	@ (80108b4 <ip_reass_free_complete_datagram+0x134>)
 8010814:	f000 ff9c 	bl	8011750 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010818:	8bfa      	ldrh	r2, [r7, #30]
 801081a:	8a7b      	ldrh	r3, [r7, #18]
 801081c:	4413      	add	r3, r2
 801081e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010820:	69b8      	ldr	r0, [r7, #24]
 8010822:	f7f5 fb95 	bl	8005f50 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801082c:	e01f      	b.n	801086e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801083e:	68f8      	ldr	r0, [r7, #12]
 8010840:	f7f5 fc0e 	bl	8006060 <pbuf_clen>
 8010844:	4603      	mov	r3, r0
 8010846:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010848:	8bfa      	ldrh	r2, [r7, #30]
 801084a:	8a7b      	ldrh	r3, [r7, #18]
 801084c:	4413      	add	r3, r2
 801084e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010852:	db05      	blt.n	8010860 <ip_reass_free_complete_datagram+0xe0>
 8010854:	4b15      	ldr	r3, [pc, #84]	@ (80108ac <ip_reass_free_complete_datagram+0x12c>)
 8010856:	22cc      	movs	r2, #204	@ 0xcc
 8010858:	4918      	ldr	r1, [pc, #96]	@ (80108bc <ip_reass_free_complete_datagram+0x13c>)
 801085a:	4816      	ldr	r0, [pc, #88]	@ (80108b4 <ip_reass_free_complete_datagram+0x134>)
 801085c:	f000 ff78 	bl	8011750 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010860:	8bfa      	ldrh	r2, [r7, #30]
 8010862:	8a7b      	ldrh	r3, [r7, #18]
 8010864:	4413      	add	r3, r2
 8010866:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7f5 fb71 	bl	8005f50 <pbuf_free>
  while (p != NULL) {
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1dc      	bne.n	801082e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010874:	6839      	ldr	r1, [r7, #0]
 8010876:	6878      	ldr	r0, [r7, #4]
 8010878:	f000 f8c2 	bl	8010a00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801087c:	4b10      	ldr	r3, [pc, #64]	@ (80108c0 <ip_reass_free_complete_datagram+0x140>)
 801087e:	881b      	ldrh	r3, [r3, #0]
 8010880:	8bfa      	ldrh	r2, [r7, #30]
 8010882:	429a      	cmp	r2, r3
 8010884:	d905      	bls.n	8010892 <ip_reass_free_complete_datagram+0x112>
 8010886:	4b09      	ldr	r3, [pc, #36]	@ (80108ac <ip_reass_free_complete_datagram+0x12c>)
 8010888:	22d2      	movs	r2, #210	@ 0xd2
 801088a:	490e      	ldr	r1, [pc, #56]	@ (80108c4 <ip_reass_free_complete_datagram+0x144>)
 801088c:	4809      	ldr	r0, [pc, #36]	@ (80108b4 <ip_reass_free_complete_datagram+0x134>)
 801088e:	f000 ff5f 	bl	8011750 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010892:	4b0b      	ldr	r3, [pc, #44]	@ (80108c0 <ip_reass_free_complete_datagram+0x140>)
 8010894:	881a      	ldrh	r2, [r3, #0]
 8010896:	8bfb      	ldrh	r3, [r7, #30]
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	b29a      	uxth	r2, r3
 801089c:	4b08      	ldr	r3, [pc, #32]	@ (80108c0 <ip_reass_free_complete_datagram+0x140>)
 801089e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80108a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3720      	adds	r7, #32
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	080153b8 	.word	0x080153b8
 80108b0:	080153f4 	.word	0x080153f4
 80108b4:	08015400 	.word	0x08015400
 80108b8:	08015428 	.word	0x08015428
 80108bc:	0801543c 	.word	0x0801543c
 80108c0:	200081e4 	.word	0x200081e4
 80108c4:	0801545c 	.word	0x0801545c

080108c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b08a      	sub	sp, #40	@ 0x28
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80108d2:	2300      	movs	r3, #0
 80108d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80108d6:	2300      	movs	r3, #0
 80108d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80108da:	2300      	movs	r3, #0
 80108dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80108de:	2300      	movs	r3, #0
 80108e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80108e6:	4b28      	ldr	r3, [pc, #160]	@ (8010988 <ip_reass_remove_oldest_datagram+0xc0>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80108ec:	e030      	b.n	8010950 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80108ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f0:	695a      	ldr	r2, [r3, #20]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	68db      	ldr	r3, [r3, #12]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d10c      	bne.n	8010914 <ip_reass_remove_oldest_datagram+0x4c>
 80108fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	691b      	ldr	r3, [r3, #16]
 8010902:	429a      	cmp	r2, r3
 8010904:	d106      	bne.n	8010914 <ip_reass_remove_oldest_datagram+0x4c>
 8010906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010908:	899a      	ldrh	r2, [r3, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	889b      	ldrh	r3, [r3, #4]
 801090e:	b29b      	uxth	r3, r3
 8010910:	429a      	cmp	r2, r3
 8010912:	d014      	beq.n	801093e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	3301      	adds	r3, #1
 8010918:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801091a:	6a3b      	ldr	r3, [r7, #32]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d104      	bne.n	801092a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010922:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	61bb      	str	r3, [r7, #24]
 8010928:	e009      	b.n	801093e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092c:	7fda      	ldrb	r2, [r3, #31]
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	7fdb      	ldrb	r3, [r3, #31]
 8010932:	429a      	cmp	r2, r3
 8010934:	d803      	bhi.n	801093e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010938:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801093a:	69fb      	ldr	r3, [r7, #28]
 801093c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d001      	beq.n	801094a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010948:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8010950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010952:	2b00      	cmp	r3, #0
 8010954:	d1cb      	bne.n	80108ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010956:	6a3b      	ldr	r3, [r7, #32]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d008      	beq.n	801096e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801095c:	69b9      	ldr	r1, [r7, #24]
 801095e:	6a38      	ldr	r0, [r7, #32]
 8010960:	f7ff ff0e 	bl	8010780 <ip_reass_free_complete_datagram>
 8010964:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	4413      	add	r3, r2
 801096c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	429a      	cmp	r2, r3
 8010974:	da02      	bge.n	801097c <ip_reass_remove_oldest_datagram+0xb4>
 8010976:	693b      	ldr	r3, [r7, #16]
 8010978:	2b01      	cmp	r3, #1
 801097a:	dcac      	bgt.n	80108d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801097c:	697b      	ldr	r3, [r7, #20]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3728      	adds	r7, #40	@ 0x28
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
 8010986:	bf00      	nop
 8010988:	200081e0 	.word	0x200081e0

0801098c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b084      	sub	sp, #16
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010996:	2004      	movs	r0, #4
 8010998:	f7f4 fbe8 	bl	800516c <memp_malloc>
 801099c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d110      	bne.n	80109c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80109a4:	6839      	ldr	r1, [r7, #0]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ff ff8e 	bl	80108c8 <ip_reass_remove_oldest_datagram>
 80109ac:	4602      	mov	r2, r0
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	4293      	cmp	r3, r2
 80109b2:	dc03      	bgt.n	80109bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80109b4:	2004      	movs	r0, #4
 80109b6:	f7f4 fbd9 	bl	800516c <memp_malloc>
 80109ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d101      	bne.n	80109c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	e016      	b.n	80109f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80109c6:	2220      	movs	r2, #32
 80109c8:	2100      	movs	r1, #0
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f001 f818 	bl	8011a00 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	220f      	movs	r2, #15
 80109d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80109d6:	4b09      	ldr	r3, [pc, #36]	@ (80109fc <ip_reass_enqueue_new_datagram+0x70>)
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80109de:	4a07      	ldr	r2, [pc, #28]	@ (80109fc <ip_reass_enqueue_new_datagram+0x70>)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	3308      	adds	r3, #8
 80109e8:	2214      	movs	r2, #20
 80109ea:	6879      	ldr	r1, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	f001 f89c 	bl	8011b2a <memcpy>
  return ipr;
 80109f2:	68fb      	ldr	r3, [r7, #12]
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	200081e0 	.word	0x200081e0

08010a00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010a0a:	4b10      	ldr	r3, [pc, #64]	@ (8010a4c <ip_reass_dequeue_datagram+0x4c>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d104      	bne.n	8010a1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a0c      	ldr	r2, [pc, #48]	@ (8010a4c <ip_reass_dequeue_datagram+0x4c>)
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	e00d      	b.n	8010a3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d106      	bne.n	8010a32 <ip_reass_dequeue_datagram+0x32>
 8010a24:	4b0a      	ldr	r3, [pc, #40]	@ (8010a50 <ip_reass_dequeue_datagram+0x50>)
 8010a26:	f240 1245 	movw	r2, #325	@ 0x145
 8010a2a:	490a      	ldr	r1, [pc, #40]	@ (8010a54 <ip_reass_dequeue_datagram+0x54>)
 8010a2c:	480a      	ldr	r0, [pc, #40]	@ (8010a58 <ip_reass_dequeue_datagram+0x58>)
 8010a2e:	f000 fe8f 	bl	8011750 <iprintf>
    prev->next = ipr->next;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010a3a:	6879      	ldr	r1, [r7, #4]
 8010a3c:	2004      	movs	r0, #4
 8010a3e:	f7f4 fc05 	bl	800524c <memp_free>
}
 8010a42:	bf00      	nop
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	200081e0 	.word	0x200081e0
 8010a50:	080153b8 	.word	0x080153b8
 8010a54:	08015480 	.word	0x08015480
 8010a58:	08015400 	.word	0x08015400

08010a5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b08c      	sub	sp, #48	@ 0x30
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	60b9      	str	r1, [r7, #8]
 8010a66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a76:	69fb      	ldr	r3, [r7, #28]
 8010a78:	885b      	ldrh	r3, [r3, #2]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7f3 fecb 	bl	8004818 <lwip_htons>
 8010a82:	4603      	mov	r3, r0
 8010a84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	f003 030f 	and.w	r3, r3, #15
 8010a8e:	b2db      	uxtb	r3, r3
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010a94:	7e7b      	ldrb	r3, [r7, #25]
 8010a96:	b29b      	uxth	r3, r3
 8010a98:	8b7a      	ldrh	r2, [r7, #26]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d202      	bcs.n	8010aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa2:	e135      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010aa4:	7e7b      	ldrb	r3, [r7, #25]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	8b7a      	ldrh	r2, [r7, #26]
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	88db      	ldrh	r3, [r3, #6]
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7f3 feaf 	bl	8004818 <lwip_htons>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ac0:	b29b      	uxth	r3, r3
 8010ac2:	00db      	lsls	r3, r3, #3
 8010ac4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8010acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ace:	2200      	movs	r2, #0
 8010ad0:	701a      	strb	r2, [r3, #0]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	705a      	strb	r2, [r3, #1]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	709a      	strb	r2, [r3, #2]
 8010ada:	2200      	movs	r2, #0
 8010adc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae0:	8afa      	ldrh	r2, [r7, #22]
 8010ae2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010ae4:	8afa      	ldrh	r2, [r7, #22]
 8010ae6:	8b7b      	ldrh	r3, [r7, #26]
 8010ae8:	4413      	add	r3, r2
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af2:	88db      	ldrh	r3, [r3, #6]
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	8afa      	ldrh	r2, [r7, #22]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d902      	bls.n	8010b02 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010afc:	f04f 33ff 	mov.w	r3, #4294967295
 8010b00:	e106      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b08:	e068      	b.n	8010bdc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b12:	889b      	ldrh	r3, [r3, #4]
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	889b      	ldrh	r3, [r3, #4]
 8010b1a:	b29b      	uxth	r3, r3
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	d235      	bcs.n	8010b8c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b24:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d020      	beq.n	8010b6e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2e:	889b      	ldrh	r3, [r3, #4]
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b34:	88db      	ldrh	r3, [r3, #6]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d307      	bcc.n	8010b4c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3e:	88db      	ldrh	r3, [r3, #6]
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	889b      	ldrh	r3, [r3, #4]
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d902      	bls.n	8010b52 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b50:	e0de      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b54:	68ba      	ldr	r2, [r7, #8]
 8010b56:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b5a:	88db      	ldrh	r3, [r3, #6]
 8010b5c:	b29a      	uxth	r2, r3
 8010b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b60:	889b      	ldrh	r3, [r3, #4]
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d03d      	beq.n	8010be4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010b6c:	e03a      	b.n	8010be4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b70:	88db      	ldrh	r3, [r3, #6]
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	889b      	ldrh	r3, [r3, #4]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d902      	bls.n	8010b84 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b82:	e0c5      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	68ba      	ldr	r2, [r7, #8]
 8010b88:	605a      	str	r2, [r3, #4]
      break;
 8010b8a:	e02b      	b.n	8010be4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8e:	889b      	ldrh	r3, [r3, #4]
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	889b      	ldrh	r3, [r3, #4]
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d102      	bne.n	8010ba2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba0:	e0b6      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	889b      	ldrh	r3, [r3, #4]
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	88db      	ldrh	r3, [r3, #6]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d202      	bcs.n	8010bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb6:	e0ab      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d009      	beq.n	8010bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bc0:	88db      	ldrh	r3, [r3, #6]
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	889b      	ldrh	r3, [r3, #4]
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d001      	beq.n	8010bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d193      	bne.n	8010b0a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010be2:	e000      	b.n	8010be6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010be4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d12d      	bne.n	8010c48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d01c      	beq.n	8010c2c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf4:	88db      	ldrh	r3, [r3, #6]
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bfa:	889b      	ldrh	r3, [r3, #4]
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d906      	bls.n	8010c10 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010c02:	4b45      	ldr	r3, [pc, #276]	@ (8010d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c04:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8010c08:	4944      	ldr	r1, [pc, #272]	@ (8010d1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010c0a:	4845      	ldr	r0, [pc, #276]	@ (8010d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c0c:	f000 fda0 	bl	8011750 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c18:	88db      	ldrh	r3, [r3, #6]
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1e:	889b      	ldrh	r3, [r3, #4]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d010      	beq.n	8010c48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	623b      	str	r3, [r7, #32]
 8010c2a:	e00d      	b.n	8010c48 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d006      	beq.n	8010c42 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010c34:	4b38      	ldr	r3, [pc, #224]	@ (8010d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010c36:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8010c3a:	493a      	ldr	r1, [pc, #232]	@ (8010d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010c3c:	4838      	ldr	r0, [pc, #224]	@ (8010d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010c3e:	f000 fd87 	bl	8011750 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	7f9b      	ldrb	r3, [r3, #30]
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d059      	beq.n	8010d0e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010c5a:	6a3b      	ldr	r3, [r7, #32]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d04f      	beq.n	8010d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d006      	beq.n	8010c76 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	685b      	ldr	r3, [r3, #4]
 8010c6e:	889b      	ldrh	r3, [r3, #4]
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d002      	beq.n	8010c7c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	623b      	str	r3, [r7, #32]
 8010c7a:	e041      	b.n	8010d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010c86:	e012      	b.n	8010cae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8010c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c90:	88db      	ldrh	r3, [r3, #6]
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c96:	889b      	ldrh	r3, [r3, #4]
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d002      	beq.n	8010ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	623b      	str	r3, [r7, #32]
            break;
 8010ca2:	e007      	b.n	8010cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d1e9      	bne.n	8010c88 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010cb4:	6a3b      	ldr	r3, [r7, #32]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d022      	beq.n	8010d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d106      	bne.n	8010cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010cc2:	4b15      	ldr	r3, [pc, #84]	@ (8010d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cc4:	f240 12df 	movw	r2, #479	@ 0x1df
 8010cc8:	4917      	ldr	r1, [pc, #92]	@ (8010d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010cca:	4815      	ldr	r0, [pc, #84]	@ (8010d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ccc:	f000 fd40 	bl	8011750 <iprintf>
          LWIP_ASSERT("sanity check",
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d106      	bne.n	8010cea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8010d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cde:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010ce2:	4911      	ldr	r1, [pc, #68]	@ (8010d28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010ce4:	480e      	ldr	r0, [pc, #56]	@ (8010d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010ce6:	f000 fd33 	bl	8011750 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d006      	beq.n	8010d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010cf2:	4b09      	ldr	r3, [pc, #36]	@ (8010d18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010cf4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010cf8:	490c      	ldr	r1, [pc, #48]	@ (8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010cfa:	4809      	ldr	r0, [pc, #36]	@ (8010d20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010cfc:	f000 fd28 	bl	8011750 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010d00:	6a3b      	ldr	r3, [r7, #32]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	bf14      	ite	ne
 8010d06:	2301      	movne	r3, #1
 8010d08:	2300      	moveq	r3, #0
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	e000      	b.n	8010d10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010d0e:	2300      	movs	r3, #0
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3730      	adds	r7, #48	@ 0x30
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}
 8010d18:	080153b8 	.word	0x080153b8
 8010d1c:	0801549c 	.word	0x0801549c
 8010d20:	08015400 	.word	0x08015400
 8010d24:	080154bc 	.word	0x080154bc
 8010d28:	080154f4 	.word	0x080154f4
 8010d2c:	08015504 	.word	0x08015504

08010d30 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b08e      	sub	sp, #56	@ 0x38
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	685b      	ldr	r3, [r3, #4]
 8010d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	f003 030f 	and.w	r3, r3, #15
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b14      	cmp	r3, #20
 8010d4e:	f040 8171 	bne.w	8011034 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d54:	88db      	ldrh	r3, [r3, #6]
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7f3 fd5d 	bl	8004818 <lwip_htons>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	00db      	lsls	r3, r3, #3
 8010d68:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d6c:	885b      	ldrh	r3, [r3, #2]
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7f3 fd51 	bl	8004818 <lwip_htons>
 8010d76:	4603      	mov	r3, r0
 8010d78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	f003 030f 	and.w	r3, r3, #15
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010d92:	429a      	cmp	r2, r3
 8010d94:	f0c0 8150 	bcc.w	8011038 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010d98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7f5 f95b 	bl	8006060 <pbuf_clen>
 8010daa:	4603      	mov	r3, r0
 8010dac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010dae:	4b8c      	ldr	r3, [pc, #560]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010db0:	881b      	ldrh	r3, [r3, #0]
 8010db2:	461a      	mov	r2, r3
 8010db4:	8c3b      	ldrh	r3, [r7, #32]
 8010db6:	4413      	add	r3, r2
 8010db8:	2b0a      	cmp	r3, #10
 8010dba:	dd10      	ble.n	8010dde <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010dbc:	8c3b      	ldrh	r3, [r7, #32]
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010dc2:	f7ff fd81 	bl	80108c8 <ip_reass_remove_oldest_datagram>
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	f000 8137 	beq.w	801103c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010dce:	4b84      	ldr	r3, [pc, #528]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010dd0:	881b      	ldrh	r3, [r3, #0]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	8c3b      	ldrh	r3, [r7, #32]
 8010dd6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010dd8:	2b0a      	cmp	r3, #10
 8010dda:	f300 812f 	bgt.w	801103c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010dde:	4b81      	ldr	r3, [pc, #516]	@ (8010fe4 <ip4_reass+0x2b4>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010de4:	e015      	b.n	8010e12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de8:	695a      	ldr	r2, [r3, #20]
 8010dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d10c      	bne.n	8010e0c <ip4_reass+0xdc>
 8010df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df4:	699a      	ldr	r2, [r3, #24]
 8010df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df8:	691b      	ldr	r3, [r3, #16]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d106      	bne.n	8010e0c <ip4_reass+0xdc>
 8010dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e00:	899a      	ldrh	r2, [r3, #12]
 8010e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e04:	889b      	ldrh	r3, [r3, #4]
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d006      	beq.n	8010e1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d1e6      	bne.n	8010de6 <ip4_reass+0xb6>
 8010e18:	e000      	b.n	8010e1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010e1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d109      	bne.n	8010e36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010e22:	8c3b      	ldrh	r3, [r7, #32]
 8010e24:	4619      	mov	r1, r3
 8010e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e28:	f7ff fdb0 	bl	801098c <ip_reass_enqueue_new_datagram>
 8010e2c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d11c      	bne.n	8010e6e <ip4_reass+0x13e>
      goto nullreturn;
 8010e34:	e105      	b.n	8011042 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e38:	88db      	ldrh	r3, [r3, #6]
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7f3 fceb 	bl	8004818 <lwip_htons>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d110      	bne.n	8010e6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4e:	89db      	ldrh	r3, [r3, #14]
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7f3 fce1 	bl	8004818 <lwip_htons>
 8010e56:	4603      	mov	r3, r0
 8010e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d006      	beq.n	8010e6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e62:	3308      	adds	r3, #8
 8010e64:	2214      	movs	r2, #20
 8010e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f000 fe5e 	bl	8011b2a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e70:	88db      	ldrh	r3, [r3, #6]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	f003 0320 	and.w	r3, r3, #32
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	bf0c      	ite	eq
 8010e7c:	2301      	moveq	r3, #1
 8010e7e:	2300      	movne	r3, #0
 8010e80:	b2db      	uxtb	r3, r3
 8010e82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010e84:	69fb      	ldr	r3, [r7, #28]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00e      	beq.n	8010ea8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010e8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010e8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e8e:	4413      	add	r3, r2
 8010e90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010e92:	8b7a      	ldrh	r2, [r7, #26]
 8010e94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010e96:	429a      	cmp	r2, r3
 8010e98:	f0c0 80a0 	bcc.w	8010fdc <ip4_reass+0x2ac>
 8010e9c:	8b7b      	ldrh	r3, [r7, #26]
 8010e9e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	f200 809a 	bhi.w	8010fdc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010ea8:	69fa      	ldr	r2, [r7, #28]
 8010eaa:	6879      	ldr	r1, [r7, #4]
 8010eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010eae:	f7ff fdd5 	bl	8010a5c <ip_reass_chain_frag_into_datagram_and_validate>
 8010eb2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eba:	f000 809b 	beq.w	8010ff4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010ebe:	4b48      	ldr	r3, [pc, #288]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010ec0:	881a      	ldrh	r2, [r3, #0]
 8010ec2:	8c3b      	ldrh	r3, [r7, #32]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	4b45      	ldr	r3, [pc, #276]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010eca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010ecc:	69fb      	ldr	r3, [r7, #28]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d00d      	beq.n	8010eee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010ed2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010ed4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010ed6:	4413      	add	r3, r2
 8010ed8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010edc:	8a7a      	ldrh	r2, [r7, #18]
 8010ede:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ee2:	7f9b      	ldrb	r3, [r3, #30]
 8010ee4:	f043 0301 	orr.w	r3, r3, #1
 8010ee8:	b2da      	uxtb	r2, r3
 8010eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	2b01      	cmp	r3, #1
 8010ef2:	d171      	bne.n	8010fd8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef6:	8b9b      	ldrh	r3, [r3, #28]
 8010ef8:	3314      	adds	r3, #20
 8010efa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f08:	685b      	ldr	r3, [r3, #4]
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f10:	3308      	adds	r3, #8
 8010f12:	2214      	movs	r2, #20
 8010f14:	4619      	mov	r1, r3
 8010f16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f18:	f000 fe07 	bl	8011b2a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010f1c:	8a3b      	ldrh	r3, [r7, #16]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7f3 fc7a 	bl	8004818 <lwip_htons>
 8010f24:	4603      	mov	r3, r0
 8010f26:	461a      	mov	r2, r3
 8010f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f2e:	2200      	movs	r2, #0
 8010f30:	719a      	strb	r2, [r3, #6]
 8010f32:	2200      	movs	r2, #0
 8010f34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f38:	2200      	movs	r2, #0
 8010f3a:	729a      	strb	r2, [r3, #10]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010f46:	e00d      	b.n	8010f64 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010f4e:	2114      	movs	r1, #20
 8010f50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010f52:	f7f4 ff77 	bl	8005e44 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010f56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7f5 f8bb 	bl	80060d4 <pbuf_cat>
      r = iprh->next_pbuf;
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1ee      	bne.n	8010f48 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8010fe4 <ip4_reass+0x2b4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d102      	bne.n	8010f7a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010f74:	2300      	movs	r3, #0
 8010f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f78:	e010      	b.n	8010f9c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8010fe4 <ip4_reass+0x2b4>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f80:	e007      	b.n	8010f92 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d006      	beq.n	8010f9a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1f4      	bne.n	8010f82 <ip4_reass+0x252>
 8010f98:	e000      	b.n	8010f9c <ip4_reass+0x26c>
          break;
 8010f9a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010fa0:	f7ff fd2e 	bl	8010a00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010fa4:	6878      	ldr	r0, [r7, #4]
 8010fa6:	f7f5 f85b 	bl	8006060 <pbuf_clen>
 8010faa:	4603      	mov	r3, r0
 8010fac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010fae:	4b0c      	ldr	r3, [pc, #48]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	8c3a      	ldrh	r2, [r7, #32]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d906      	bls.n	8010fc6 <ip4_reass+0x296>
 8010fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8010fe8 <ip4_reass+0x2b8>)
 8010fba:	f240 229b 	movw	r2, #667	@ 0x29b
 8010fbe:	490b      	ldr	r1, [pc, #44]	@ (8010fec <ip4_reass+0x2bc>)
 8010fc0:	480b      	ldr	r0, [pc, #44]	@ (8010ff0 <ip4_reass+0x2c0>)
 8010fc2:	f000 fbc5 	bl	8011750 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010fc6:	4b06      	ldr	r3, [pc, #24]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010fc8:	881a      	ldrh	r2, [r3, #0]
 8010fca:	8c3b      	ldrh	r3, [r7, #32]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	b29a      	uxth	r2, r3
 8010fd0:	4b03      	ldr	r3, [pc, #12]	@ (8010fe0 <ip4_reass+0x2b0>)
 8010fd2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	e038      	b.n	801104a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	e036      	b.n	801104a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010fdc:	bf00      	nop
 8010fde:	e00a      	b.n	8010ff6 <ip4_reass+0x2c6>
 8010fe0:	200081e4 	.word	0x200081e4
 8010fe4:	200081e0 	.word	0x200081e0
 8010fe8:	080153b8 	.word	0x080153b8
 8010fec:	08015528 	.word	0x08015528
 8010ff0:	08015400 	.word	0x08015400
    goto nullreturn_ipr;
 8010ff4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d106      	bne.n	801100a <ip4_reass+0x2da>
 8010ffc:	4b15      	ldr	r3, [pc, #84]	@ (8011054 <ip4_reass+0x324>)
 8010ffe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8011002:	4915      	ldr	r1, [pc, #84]	@ (8011058 <ip4_reass+0x328>)
 8011004:	4815      	ldr	r0, [pc, #84]	@ (801105c <ip4_reass+0x32c>)
 8011006:	f000 fba3 	bl	8011750 <iprintf>
  if (ipr->p == NULL) {
 801100a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d116      	bne.n	8011040 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011012:	4b13      	ldr	r3, [pc, #76]	@ (8011060 <ip4_reass+0x330>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011018:	429a      	cmp	r2, r3
 801101a:	d006      	beq.n	801102a <ip4_reass+0x2fa>
 801101c:	4b0d      	ldr	r3, [pc, #52]	@ (8011054 <ip4_reass+0x324>)
 801101e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011022:	4910      	ldr	r1, [pc, #64]	@ (8011064 <ip4_reass+0x334>)
 8011024:	480d      	ldr	r0, [pc, #52]	@ (801105c <ip4_reass+0x32c>)
 8011026:	f000 fb93 	bl	8011750 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801102a:	2100      	movs	r1, #0
 801102c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801102e:	f7ff fce7 	bl	8010a00 <ip_reass_dequeue_datagram>
 8011032:	e006      	b.n	8011042 <ip4_reass+0x312>
    goto nullreturn;
 8011034:	bf00      	nop
 8011036:	e004      	b.n	8011042 <ip4_reass+0x312>
    goto nullreturn;
 8011038:	bf00      	nop
 801103a:	e002      	b.n	8011042 <ip4_reass+0x312>
      goto nullreturn;
 801103c:	bf00      	nop
 801103e:	e000      	b.n	8011042 <ip4_reass+0x312>
  }

nullreturn:
 8011040:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7f4 ff84 	bl	8005f50 <pbuf_free>
  return NULL;
 8011048:	2300      	movs	r3, #0
}
 801104a:	4618      	mov	r0, r3
 801104c:	3738      	adds	r7, #56	@ 0x38
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	080153b8 	.word	0x080153b8
 8011058:	08015544 	.word	0x08015544
 801105c:	08015400 	.word	0x08015400
 8011060:	200081e0 	.word	0x200081e0
 8011064:	08015550 	.word	0x08015550

08011068 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801106c:	2005      	movs	r0, #5
 801106e:	f7f4 f87d 	bl	800516c <memp_malloc>
 8011072:	4603      	mov	r3, r0
}
 8011074:	4618      	mov	r0, r3
 8011076:	bd80      	pop	{r7, pc}

08011078 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d106      	bne.n	8011094 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011086:	4b07      	ldr	r3, [pc, #28]	@ (80110a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011088:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801108c:	4906      	ldr	r1, [pc, #24]	@ (80110a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801108e:	4807      	ldr	r0, [pc, #28]	@ (80110ac <ip_frag_free_pbuf_custom_ref+0x34>)
 8011090:	f000 fb5e 	bl	8011750 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011094:	6879      	ldr	r1, [r7, #4]
 8011096:	2005      	movs	r0, #5
 8011098:	f7f4 f8d8 	bl	800524c <memp_free>
}
 801109c:	bf00      	nop
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	080153b8 	.word	0x080153b8
 80110a8:	08015570 	.word	0x08015570
 80110ac:	08015400 	.word	0x08015400

080110b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d106      	bne.n	80110d0 <ipfrag_free_pbuf_custom+0x20>
 80110c2:	4b11      	ldr	r3, [pc, #68]	@ (8011108 <ipfrag_free_pbuf_custom+0x58>)
 80110c4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80110c8:	4910      	ldr	r1, [pc, #64]	@ (801110c <ipfrag_free_pbuf_custom+0x5c>)
 80110ca:	4811      	ldr	r0, [pc, #68]	@ (8011110 <ipfrag_free_pbuf_custom+0x60>)
 80110cc:	f000 fb40 	bl	8011750 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d006      	beq.n	80110e6 <ipfrag_free_pbuf_custom+0x36>
 80110d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011108 <ipfrag_free_pbuf_custom+0x58>)
 80110da:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80110de:	490d      	ldr	r1, [pc, #52]	@ (8011114 <ipfrag_free_pbuf_custom+0x64>)
 80110e0:	480b      	ldr	r0, [pc, #44]	@ (8011110 <ipfrag_free_pbuf_custom+0x60>)
 80110e2:	f000 fb35 	bl	8011750 <iprintf>
  if (pcr->original != NULL) {
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	695b      	ldr	r3, [r3, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d004      	beq.n	80110f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7f4 ff2c 	bl	8005f50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f7ff ffbd 	bl	8011078 <ip_frag_free_pbuf_custom_ref>
}
 80110fe:	bf00      	nop
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	080153b8 	.word	0x080153b8
 801110c:	0801557c 	.word	0x0801557c
 8011110:	08015400 	.word	0x08015400
 8011114:	08015588 	.word	0x08015588

08011118 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b094      	sub	sp, #80	@ 0x50
 801111c:	af02      	add	r7, sp, #8
 801111e:	60f8      	str	r0, [r7, #12]
 8011120:	60b9      	str	r1, [r7, #8]
 8011122:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011124:	2300      	movs	r3, #0
 8011126:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801112e:	3b14      	subs	r3, #20
 8011130:	2b00      	cmp	r3, #0
 8011132:	da00      	bge.n	8011136 <ip4_frag+0x1e>
 8011134:	3307      	adds	r3, #7
 8011136:	10db      	asrs	r3, r3, #3
 8011138:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801113a:	2314      	movs	r3, #20
 801113c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8011144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011146:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	f003 030f 	and.w	r3, r3, #15
 8011150:	b2db      	uxtb	r3, r3
 8011152:	009b      	lsls	r3, r3, #2
 8011154:	b2db      	uxtb	r3, r3
 8011156:	2b14      	cmp	r3, #20
 8011158:	d002      	beq.n	8011160 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801115a:	f06f 0305 	mvn.w	r3, #5
 801115e:	e110      	b.n	8011382 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	895b      	ldrh	r3, [r3, #10]
 8011164:	2b13      	cmp	r3, #19
 8011166:	d809      	bhi.n	801117c <ip4_frag+0x64>
 8011168:	4b88      	ldr	r3, [pc, #544]	@ (801138c <ip4_frag+0x274>)
 801116a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801116e:	4988      	ldr	r1, [pc, #544]	@ (8011390 <ip4_frag+0x278>)
 8011170:	4888      	ldr	r0, [pc, #544]	@ (8011394 <ip4_frag+0x27c>)
 8011172:	f000 faed 	bl	8011750 <iprintf>
 8011176:	f06f 0305 	mvn.w	r3, #5
 801117a:	e102      	b.n	8011382 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801117c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801117e:	88db      	ldrh	r3, [r3, #6]
 8011180:	b29b      	uxth	r3, r3
 8011182:	4618      	mov	r0, r3
 8011184:	f7f3 fb48 	bl	8004818 <lwip_htons>
 8011188:	4603      	mov	r3, r0
 801118a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801118c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801118e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011192:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011196:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011198:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801119c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	891b      	ldrh	r3, [r3, #8]
 80111a2:	3b14      	subs	r3, #20
 80111a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80111a8:	e0e1      	b.n	801136e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80111aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111ac:	00db      	lsls	r3, r3, #3
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80111b4:	4293      	cmp	r3, r2
 80111b6:	bf28      	it	cs
 80111b8:	4613      	movcs	r3, r2
 80111ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80111bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111c0:	2114      	movs	r1, #20
 80111c2:	200e      	movs	r0, #14
 80111c4:	f7f4 fbe0 	bl	8005988 <pbuf_alloc>
 80111c8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80111ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	f000 80d5 	beq.w	801137c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80111d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	2b13      	cmp	r3, #19
 80111d8:	d806      	bhi.n	80111e8 <ip4_frag+0xd0>
 80111da:	4b6c      	ldr	r3, [pc, #432]	@ (801138c <ip4_frag+0x274>)
 80111dc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80111e0:	496d      	ldr	r1, [pc, #436]	@ (8011398 <ip4_frag+0x280>)
 80111e2:	486c      	ldr	r0, [pc, #432]	@ (8011394 <ip4_frag+0x27c>)
 80111e4:	f000 fab4 	bl	8011750 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80111e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	2214      	movs	r2, #20
 80111ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80111f0:	4618      	mov	r0, r3
 80111f2:	f000 fc9a 	bl	8011b2a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80111f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80111fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80111fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011202:	e064      	b.n	80112ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	895a      	ldrh	r2, [r3, #10]
 8011208:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801120a:	1ad3      	subs	r3, r2, r3
 801120c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	895b      	ldrh	r3, [r3, #10]
 8011212:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011214:	429a      	cmp	r2, r3
 8011216:	d906      	bls.n	8011226 <ip4_frag+0x10e>
 8011218:	4b5c      	ldr	r3, [pc, #368]	@ (801138c <ip4_frag+0x274>)
 801121a:	f240 322d 	movw	r2, #813	@ 0x32d
 801121e:	495f      	ldr	r1, [pc, #380]	@ (801139c <ip4_frag+0x284>)
 8011220:	485c      	ldr	r0, [pc, #368]	@ (8011394 <ip4_frag+0x27c>)
 8011222:	f000 fa95 	bl	8011750 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011226:	8bfa      	ldrh	r2, [r7, #30]
 8011228:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801122c:	4293      	cmp	r3, r2
 801122e:	bf28      	it	cs
 8011230:	4613      	movcs	r3, r2
 8011232:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011236:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801123a:	2b00      	cmp	r3, #0
 801123c:	d105      	bne.n	801124a <ip4_frag+0x132>
        poff = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	60fb      	str	r3, [r7, #12]
        continue;
 8011248:	e041      	b.n	80112ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801124a:	f7ff ff0d 	bl	8011068 <ip_frag_alloc_pbuf_custom_ref>
 801124e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d103      	bne.n	801125e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011258:	f7f4 fe7a 	bl	8005f50 <pbuf_free>
        goto memerr;
 801125c:	e08f      	b.n	801137e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801125e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011264:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011266:	4413      	add	r3, r2
 8011268:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801126c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011270:	9201      	str	r2, [sp, #4]
 8011272:	9300      	str	r3, [sp, #0]
 8011274:	4603      	mov	r3, r0
 8011276:	2241      	movs	r2, #65	@ 0x41
 8011278:	2000      	movs	r0, #0
 801127a:	f7f4 fcaf 	bl	8005bdc <pbuf_alloced_custom>
 801127e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011286:	69b8      	ldr	r0, [r7, #24]
 8011288:	f7ff fef6 	bl	8011078 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801128c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801128e:	f7f4 fe5f 	bl	8005f50 <pbuf_free>
        goto memerr;
 8011292:	e074      	b.n	801137e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7f4 fefb 	bl	8006090 <pbuf_ref>
      pcr->original = p;
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	68fa      	ldr	r2, [r7, #12]
 801129e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	4a3f      	ldr	r2, [pc, #252]	@ (80113a0 <ip4_frag+0x288>)
 80112a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80112a6:	6979      	ldr	r1, [r7, #20]
 80112a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80112aa:	f7f4 ff13 	bl	80060d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80112ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80112b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80112bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <ip4_frag+0x1b6>
        poff = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80112ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d196      	bne.n	8011204 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80112d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80112d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80112dc:	4413      	add	r3, r2
 80112de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80112e4:	f1a3 0213 	sub.w	r2, r3, #19
 80112e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112ec:	429a      	cmp	r2, r3
 80112ee:	bfcc      	ite	gt
 80112f0:	2301      	movgt	r3, #1
 80112f2:	2300      	movle	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80112f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80112fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011300:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8011302:	6a3b      	ldr	r3, [r7, #32]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <ip4_frag+0x1f6>
 8011308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130a:	2b00      	cmp	r3, #0
 801130c:	d003      	beq.n	8011316 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801130e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011314:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011316:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011318:	4618      	mov	r0, r3
 801131a:	f7f3 fa7d 	bl	8004818 <lwip_htons>
 801131e:	4603      	mov	r3, r0
 8011320:	461a      	mov	r2, r3
 8011322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011324:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011326:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011328:	3314      	adds	r3, #20
 801132a:	b29b      	uxth	r3, r3
 801132c:	4618      	mov	r0, r3
 801132e:	f7f3 fa73 	bl	8004818 <lwip_htons>
 8011332:	4603      	mov	r3, r0
 8011334:	461a      	mov	r2, r3
 8011336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011338:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801133a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801133c:	2200      	movs	r2, #0
 801133e:	729a      	strb	r2, [r3, #10]
 8011340:	2200      	movs	r2, #0
 8011342:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	695b      	ldr	r3, [r3, #20]
 8011348:	687a      	ldr	r2, [r7, #4]
 801134a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801134c:	68b8      	ldr	r0, [r7, #8]
 801134e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011350:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011352:	f7f4 fdfd 	bl	8005f50 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011356:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801135a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8011362:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011366:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011368:	4413      	add	r3, r2
 801136a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801136e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011372:	2b00      	cmp	r3, #0
 8011374:	f47f af19 	bne.w	80111aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	e002      	b.n	8011382 <ip4_frag+0x26a>
      goto memerr;
 801137c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011382:	4618      	mov	r0, r3
 8011384:	3748      	adds	r7, #72	@ 0x48
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	080153b8 	.word	0x080153b8
 8011390:	08015594 	.word	0x08015594
 8011394:	08015400 	.word	0x08015400
 8011398:	080155b0 	.word	0x080155b0
 801139c:	080155d0 	.word	0x080155d0
 80113a0:	080110b1 	.word	0x080110b1

080113a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80113ae:	230e      	movs	r3, #14
 80113b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	895b      	ldrh	r3, [r3, #10]
 80113b6:	2b0e      	cmp	r3, #14
 80113b8:	d96e      	bls.n	8011498 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	7bdb      	ldrb	r3, [r3, #15]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d106      	bne.n	80113d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80113c8:	3301      	adds	r3, #1
 80113ca:	b2da      	uxtb	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	7b1a      	ldrb	r2, [r3, #12]
 80113da:	7b5b      	ldrb	r3, [r3, #13]
 80113dc:	021b      	lsls	r3, r3, #8
 80113de:	4313      	orrs	r3, r2
 80113e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	f003 0301 	and.w	r3, r3, #1
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d023      	beq.n	8011436 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	781b      	ldrb	r3, [r3, #0]
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	d10f      	bne.n	8011416 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	785b      	ldrb	r3, [r3, #1]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d11b      	bne.n	8011436 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011402:	2b5e      	cmp	r3, #94	@ 0x5e
 8011404:	d117      	bne.n	8011436 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	7b5b      	ldrb	r3, [r3, #13]
 801140a:	f043 0310 	orr.w	r3, r3, #16
 801140e:	b2da      	uxtb	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	735a      	strb	r2, [r3, #13]
 8011414:	e00f      	b.n	8011436 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	2206      	movs	r2, #6
 801141a:	4928      	ldr	r1, [pc, #160]	@ (80114bc <ethernet_input+0x118>)
 801141c:	4618      	mov	r0, r3
 801141e:	f000 fadf 	bl	80119e0 <memcmp>
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d106      	bne.n	8011436 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	7b5b      	ldrb	r3, [r3, #13]
 801142c:	f043 0308 	orr.w	r3, r3, #8
 8011430:	b2da      	uxtb	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011436:	89fb      	ldrh	r3, [r7, #14]
 8011438:	2b08      	cmp	r3, #8
 801143a:	d003      	beq.n	8011444 <ethernet_input+0xa0>
 801143c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8011440:	d014      	beq.n	801146c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011442:	e032      	b.n	80114aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801144a:	f003 0308 	and.w	r3, r3, #8
 801144e:	2b00      	cmp	r3, #0
 8011450:	d024      	beq.n	801149c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011452:	8afb      	ldrh	r3, [r7, #22]
 8011454:	4619      	mov	r1, r3
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7f4 fcf4 	bl	8005e44 <pbuf_remove_header>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d11e      	bne.n	80114a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011462:	6839      	ldr	r1, [r7, #0]
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7fe fe73 	bl	8010150 <ip4_input>
      break;
 801146a:	e013      	b.n	8011494 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011472:	f003 0308 	and.w	r3, r3, #8
 8011476:	2b00      	cmp	r3, #0
 8011478:	d014      	beq.n	80114a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801147a:	8afb      	ldrh	r3, [r7, #22]
 801147c:	4619      	mov	r1, r3
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f7f4 fce0 	bl	8005e44 <pbuf_remove_header>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d10e      	bne.n	80114a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801148a:	6839      	ldr	r1, [r7, #0]
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7fe f80f 	bl	800f4b0 <etharp_input>
      break;
 8011492:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011494:	2300      	movs	r3, #0
 8011496:	e00c      	b.n	80114b2 <ethernet_input+0x10e>
    goto free_and_return;
 8011498:	bf00      	nop
 801149a:	e006      	b.n	80114aa <ethernet_input+0x106>
        goto free_and_return;
 801149c:	bf00      	nop
 801149e:	e004      	b.n	80114aa <ethernet_input+0x106>
        goto free_and_return;
 80114a0:	bf00      	nop
 80114a2:	e002      	b.n	80114aa <ethernet_input+0x106>
        goto free_and_return;
 80114a4:	bf00      	nop
 80114a6:	e000      	b.n	80114aa <ethernet_input+0x106>
        goto free_and_return;
 80114a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7f4 fd50 	bl	8005f50 <pbuf_free>
  return ERR_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3718      	adds	r7, #24
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	0801657c 	.word	0x0801657c

080114c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
 80114cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80114ce:	8c3b      	ldrh	r3, [r7, #32]
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f3 f9a1 	bl	8004818 <lwip_htons>
 80114d6:	4603      	mov	r3, r0
 80114d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80114da:	210e      	movs	r1, #14
 80114dc:	68b8      	ldr	r0, [r7, #8]
 80114de:	f7f4 fca1 	bl	8005e24 <pbuf_add_header>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d125      	bne.n	8011534 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	8afa      	ldrh	r2, [r7, #22]
 80114f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	2206      	movs	r2, #6
 80114f8:	6839      	ldr	r1, [r7, #0]
 80114fa:	4618      	mov	r0, r3
 80114fc:	f000 fb15 	bl	8011b2a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	3306      	adds	r3, #6
 8011504:	2206      	movs	r2, #6
 8011506:	6879      	ldr	r1, [r7, #4]
 8011508:	4618      	mov	r0, r3
 801150a:	f000 fb0e 	bl	8011b2a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011514:	2b06      	cmp	r3, #6
 8011516:	d006      	beq.n	8011526 <ethernet_output+0x66>
 8011518:	4b0a      	ldr	r3, [pc, #40]	@ (8011544 <ethernet_output+0x84>)
 801151a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801151e:	490a      	ldr	r1, [pc, #40]	@ (8011548 <ethernet_output+0x88>)
 8011520:	480a      	ldr	r0, [pc, #40]	@ (801154c <ethernet_output+0x8c>)
 8011522:	f000 f915 	bl	8011750 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	699b      	ldr	r3, [r3, #24]
 801152a:	68b9      	ldr	r1, [r7, #8]
 801152c:	68f8      	ldr	r0, [r7, #12]
 801152e:	4798      	blx	r3
 8011530:	4603      	mov	r3, r0
 8011532:	e002      	b.n	801153a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011534:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011536:	f06f 0301 	mvn.w	r3, #1
}
 801153a:	4618      	mov	r0, r3
 801153c:	3718      	adds	r7, #24
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	080155e0 	.word	0x080155e0
 8011548:	08015618 	.word	0x08015618
 801154c:	0801564c 	.word	0x0801564c

08011550 <rand>:
 8011550:	4b16      	ldr	r3, [pc, #88]	@ (80115ac <rand+0x5c>)
 8011552:	b510      	push	{r4, lr}
 8011554:	681c      	ldr	r4, [r3, #0]
 8011556:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8011558:	b9b3      	cbnz	r3, 8011588 <rand+0x38>
 801155a:	2018      	movs	r0, #24
 801155c:	f000 fb5c 	bl	8011c18 <malloc>
 8011560:	4602      	mov	r2, r0
 8011562:	6320      	str	r0, [r4, #48]	@ 0x30
 8011564:	b920      	cbnz	r0, 8011570 <rand+0x20>
 8011566:	4b12      	ldr	r3, [pc, #72]	@ (80115b0 <rand+0x60>)
 8011568:	4812      	ldr	r0, [pc, #72]	@ (80115b4 <rand+0x64>)
 801156a:	2152      	movs	r1, #82	@ 0x52
 801156c:	f000 faec 	bl	8011b48 <__assert_func>
 8011570:	4911      	ldr	r1, [pc, #68]	@ (80115b8 <rand+0x68>)
 8011572:	4b12      	ldr	r3, [pc, #72]	@ (80115bc <rand+0x6c>)
 8011574:	e9c0 1300 	strd	r1, r3, [r0]
 8011578:	4b11      	ldr	r3, [pc, #68]	@ (80115c0 <rand+0x70>)
 801157a:	6083      	str	r3, [r0, #8]
 801157c:	230b      	movs	r3, #11
 801157e:	8183      	strh	r3, [r0, #12]
 8011580:	2100      	movs	r1, #0
 8011582:	2001      	movs	r0, #1
 8011584:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011588:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801158a:	480e      	ldr	r0, [pc, #56]	@ (80115c4 <rand+0x74>)
 801158c:	690b      	ldr	r3, [r1, #16]
 801158e:	694c      	ldr	r4, [r1, #20]
 8011590:	4a0d      	ldr	r2, [pc, #52]	@ (80115c8 <rand+0x78>)
 8011592:	4358      	muls	r0, r3
 8011594:	fb02 0004 	mla	r0, r2, r4, r0
 8011598:	fba3 3202 	umull	r3, r2, r3, r2
 801159c:	3301      	adds	r3, #1
 801159e:	eb40 0002 	adc.w	r0, r0, r2
 80115a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80115a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80115aa:	bd10      	pop	{r4, pc}
 80115ac:	2000003c 	.word	0x2000003c
 80115b0:	0801658a 	.word	0x0801658a
 80115b4:	080165a1 	.word	0x080165a1
 80115b8:	abcd330e 	.word	0xabcd330e
 80115bc:	e66d1234 	.word	0xe66d1234
 80115c0:	0005deec 	.word	0x0005deec
 80115c4:	5851f42d 	.word	0x5851f42d
 80115c8:	4c957f2d 	.word	0x4c957f2d

080115cc <std>:
 80115cc:	2300      	movs	r3, #0
 80115ce:	b510      	push	{r4, lr}
 80115d0:	4604      	mov	r4, r0
 80115d2:	e9c0 3300 	strd	r3, r3, [r0]
 80115d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80115da:	6083      	str	r3, [r0, #8]
 80115dc:	8181      	strh	r1, [r0, #12]
 80115de:	6643      	str	r3, [r0, #100]	@ 0x64
 80115e0:	81c2      	strh	r2, [r0, #14]
 80115e2:	6183      	str	r3, [r0, #24]
 80115e4:	4619      	mov	r1, r3
 80115e6:	2208      	movs	r2, #8
 80115e8:	305c      	adds	r0, #92	@ 0x5c
 80115ea:	f000 fa09 	bl	8011a00 <memset>
 80115ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011624 <std+0x58>)
 80115f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80115f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011628 <std+0x5c>)
 80115f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80115f6:	4b0d      	ldr	r3, [pc, #52]	@ (801162c <std+0x60>)
 80115f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80115fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011630 <std+0x64>)
 80115fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80115fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011634 <std+0x68>)
 8011600:	6224      	str	r4, [r4, #32]
 8011602:	429c      	cmp	r4, r3
 8011604:	d006      	beq.n	8011614 <std+0x48>
 8011606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801160a:	4294      	cmp	r4, r2
 801160c:	d002      	beq.n	8011614 <std+0x48>
 801160e:	33d0      	adds	r3, #208	@ 0xd0
 8011610:	429c      	cmp	r4, r3
 8011612:	d105      	bne.n	8011620 <std+0x54>
 8011614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801161c:	f000 ba82 	b.w	8011b24 <__retarget_lock_init_recursive>
 8011620:	bd10      	pop	{r4, pc}
 8011622:	bf00      	nop
 8011624:	08011831 	.word	0x08011831
 8011628:	08011853 	.word	0x08011853
 801162c:	0801188b 	.word	0x0801188b
 8011630:	080118af 	.word	0x080118af
 8011634:	200081e8 	.word	0x200081e8

08011638 <stdio_exit_handler>:
 8011638:	4a02      	ldr	r2, [pc, #8]	@ (8011644 <stdio_exit_handler+0xc>)
 801163a:	4903      	ldr	r1, [pc, #12]	@ (8011648 <stdio_exit_handler+0x10>)
 801163c:	4803      	ldr	r0, [pc, #12]	@ (801164c <stdio_exit_handler+0x14>)
 801163e:	f000 b869 	b.w	8011714 <_fwalk_sglue>
 8011642:	bf00      	nop
 8011644:	20000030 	.word	0x20000030
 8011648:	0801242d 	.word	0x0801242d
 801164c:	20000040 	.word	0x20000040

08011650 <cleanup_stdio>:
 8011650:	6841      	ldr	r1, [r0, #4]
 8011652:	4b0c      	ldr	r3, [pc, #48]	@ (8011684 <cleanup_stdio+0x34>)
 8011654:	4299      	cmp	r1, r3
 8011656:	b510      	push	{r4, lr}
 8011658:	4604      	mov	r4, r0
 801165a:	d001      	beq.n	8011660 <cleanup_stdio+0x10>
 801165c:	f000 fee6 	bl	801242c <_fflush_r>
 8011660:	68a1      	ldr	r1, [r4, #8]
 8011662:	4b09      	ldr	r3, [pc, #36]	@ (8011688 <cleanup_stdio+0x38>)
 8011664:	4299      	cmp	r1, r3
 8011666:	d002      	beq.n	801166e <cleanup_stdio+0x1e>
 8011668:	4620      	mov	r0, r4
 801166a:	f000 fedf 	bl	801242c <_fflush_r>
 801166e:	68e1      	ldr	r1, [r4, #12]
 8011670:	4b06      	ldr	r3, [pc, #24]	@ (801168c <cleanup_stdio+0x3c>)
 8011672:	4299      	cmp	r1, r3
 8011674:	d004      	beq.n	8011680 <cleanup_stdio+0x30>
 8011676:	4620      	mov	r0, r4
 8011678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801167c:	f000 bed6 	b.w	801242c <_fflush_r>
 8011680:	bd10      	pop	{r4, pc}
 8011682:	bf00      	nop
 8011684:	200081e8 	.word	0x200081e8
 8011688:	20008250 	.word	0x20008250
 801168c:	200082b8 	.word	0x200082b8

08011690 <global_stdio_init.part.0>:
 8011690:	b510      	push	{r4, lr}
 8011692:	4b0b      	ldr	r3, [pc, #44]	@ (80116c0 <global_stdio_init.part.0+0x30>)
 8011694:	4c0b      	ldr	r4, [pc, #44]	@ (80116c4 <global_stdio_init.part.0+0x34>)
 8011696:	4a0c      	ldr	r2, [pc, #48]	@ (80116c8 <global_stdio_init.part.0+0x38>)
 8011698:	601a      	str	r2, [r3, #0]
 801169a:	4620      	mov	r0, r4
 801169c:	2200      	movs	r2, #0
 801169e:	2104      	movs	r1, #4
 80116a0:	f7ff ff94 	bl	80115cc <std>
 80116a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80116a8:	2201      	movs	r2, #1
 80116aa:	2109      	movs	r1, #9
 80116ac:	f7ff ff8e 	bl	80115cc <std>
 80116b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80116b4:	2202      	movs	r2, #2
 80116b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116ba:	2112      	movs	r1, #18
 80116bc:	f7ff bf86 	b.w	80115cc <std>
 80116c0:	20008320 	.word	0x20008320
 80116c4:	200081e8 	.word	0x200081e8
 80116c8:	08011639 	.word	0x08011639

080116cc <__sfp_lock_acquire>:
 80116cc:	4801      	ldr	r0, [pc, #4]	@ (80116d4 <__sfp_lock_acquire+0x8>)
 80116ce:	f000 ba2a 	b.w	8011b26 <__retarget_lock_acquire_recursive>
 80116d2:	bf00      	nop
 80116d4:	20008329 	.word	0x20008329

080116d8 <__sfp_lock_release>:
 80116d8:	4801      	ldr	r0, [pc, #4]	@ (80116e0 <__sfp_lock_release+0x8>)
 80116da:	f000 ba25 	b.w	8011b28 <__retarget_lock_release_recursive>
 80116de:	bf00      	nop
 80116e0:	20008329 	.word	0x20008329

080116e4 <__sinit>:
 80116e4:	b510      	push	{r4, lr}
 80116e6:	4604      	mov	r4, r0
 80116e8:	f7ff fff0 	bl	80116cc <__sfp_lock_acquire>
 80116ec:	6a23      	ldr	r3, [r4, #32]
 80116ee:	b11b      	cbz	r3, 80116f8 <__sinit+0x14>
 80116f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116f4:	f7ff bff0 	b.w	80116d8 <__sfp_lock_release>
 80116f8:	4b04      	ldr	r3, [pc, #16]	@ (801170c <__sinit+0x28>)
 80116fa:	6223      	str	r3, [r4, #32]
 80116fc:	4b04      	ldr	r3, [pc, #16]	@ (8011710 <__sinit+0x2c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d1f5      	bne.n	80116f0 <__sinit+0xc>
 8011704:	f7ff ffc4 	bl	8011690 <global_stdio_init.part.0>
 8011708:	e7f2      	b.n	80116f0 <__sinit+0xc>
 801170a:	bf00      	nop
 801170c:	08011651 	.word	0x08011651
 8011710:	20008320 	.word	0x20008320

08011714 <_fwalk_sglue>:
 8011714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011718:	4607      	mov	r7, r0
 801171a:	4688      	mov	r8, r1
 801171c:	4614      	mov	r4, r2
 801171e:	2600      	movs	r6, #0
 8011720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011724:	f1b9 0901 	subs.w	r9, r9, #1
 8011728:	d505      	bpl.n	8011736 <_fwalk_sglue+0x22>
 801172a:	6824      	ldr	r4, [r4, #0]
 801172c:	2c00      	cmp	r4, #0
 801172e:	d1f7      	bne.n	8011720 <_fwalk_sglue+0xc>
 8011730:	4630      	mov	r0, r6
 8011732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011736:	89ab      	ldrh	r3, [r5, #12]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d907      	bls.n	801174c <_fwalk_sglue+0x38>
 801173c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011740:	3301      	adds	r3, #1
 8011742:	d003      	beq.n	801174c <_fwalk_sglue+0x38>
 8011744:	4629      	mov	r1, r5
 8011746:	4638      	mov	r0, r7
 8011748:	47c0      	blx	r8
 801174a:	4306      	orrs	r6, r0
 801174c:	3568      	adds	r5, #104	@ 0x68
 801174e:	e7e9      	b.n	8011724 <_fwalk_sglue+0x10>

08011750 <iprintf>:
 8011750:	b40f      	push	{r0, r1, r2, r3}
 8011752:	b507      	push	{r0, r1, r2, lr}
 8011754:	4906      	ldr	r1, [pc, #24]	@ (8011770 <iprintf+0x20>)
 8011756:	ab04      	add	r3, sp, #16
 8011758:	6808      	ldr	r0, [r1, #0]
 801175a:	f853 2b04 	ldr.w	r2, [r3], #4
 801175e:	6881      	ldr	r1, [r0, #8]
 8011760:	9301      	str	r3, [sp, #4]
 8011762:	f000 fb39 	bl	8011dd8 <_vfiprintf_r>
 8011766:	b003      	add	sp, #12
 8011768:	f85d eb04 	ldr.w	lr, [sp], #4
 801176c:	b004      	add	sp, #16
 801176e:	4770      	bx	lr
 8011770:	2000003c 	.word	0x2000003c

08011774 <_puts_r>:
 8011774:	6a03      	ldr	r3, [r0, #32]
 8011776:	b570      	push	{r4, r5, r6, lr}
 8011778:	6884      	ldr	r4, [r0, #8]
 801177a:	4605      	mov	r5, r0
 801177c:	460e      	mov	r6, r1
 801177e:	b90b      	cbnz	r3, 8011784 <_puts_r+0x10>
 8011780:	f7ff ffb0 	bl	80116e4 <__sinit>
 8011784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011786:	07db      	lsls	r3, r3, #31
 8011788:	d405      	bmi.n	8011796 <_puts_r+0x22>
 801178a:	89a3      	ldrh	r3, [r4, #12]
 801178c:	0598      	lsls	r0, r3, #22
 801178e:	d402      	bmi.n	8011796 <_puts_r+0x22>
 8011790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011792:	f000 f9c8 	bl	8011b26 <__retarget_lock_acquire_recursive>
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	0719      	lsls	r1, r3, #28
 801179a:	d502      	bpl.n	80117a2 <_puts_r+0x2e>
 801179c:	6923      	ldr	r3, [r4, #16]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d135      	bne.n	801180e <_puts_r+0x9a>
 80117a2:	4621      	mov	r1, r4
 80117a4:	4628      	mov	r0, r5
 80117a6:	f000 f8c5 	bl	8011934 <__swsetup_r>
 80117aa:	b380      	cbz	r0, 801180e <_puts_r+0x9a>
 80117ac:	f04f 35ff 	mov.w	r5, #4294967295
 80117b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80117b2:	07da      	lsls	r2, r3, #31
 80117b4:	d405      	bmi.n	80117c2 <_puts_r+0x4e>
 80117b6:	89a3      	ldrh	r3, [r4, #12]
 80117b8:	059b      	lsls	r3, r3, #22
 80117ba:	d402      	bmi.n	80117c2 <_puts_r+0x4e>
 80117bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80117be:	f000 f9b3 	bl	8011b28 <__retarget_lock_release_recursive>
 80117c2:	4628      	mov	r0, r5
 80117c4:	bd70      	pop	{r4, r5, r6, pc}
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	da04      	bge.n	80117d4 <_puts_r+0x60>
 80117ca:	69a2      	ldr	r2, [r4, #24]
 80117cc:	429a      	cmp	r2, r3
 80117ce:	dc17      	bgt.n	8011800 <_puts_r+0x8c>
 80117d0:	290a      	cmp	r1, #10
 80117d2:	d015      	beq.n	8011800 <_puts_r+0x8c>
 80117d4:	6823      	ldr	r3, [r4, #0]
 80117d6:	1c5a      	adds	r2, r3, #1
 80117d8:	6022      	str	r2, [r4, #0]
 80117da:	7019      	strb	r1, [r3, #0]
 80117dc:	68a3      	ldr	r3, [r4, #8]
 80117de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80117e2:	3b01      	subs	r3, #1
 80117e4:	60a3      	str	r3, [r4, #8]
 80117e6:	2900      	cmp	r1, #0
 80117e8:	d1ed      	bne.n	80117c6 <_puts_r+0x52>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	da11      	bge.n	8011812 <_puts_r+0x9e>
 80117ee:	4622      	mov	r2, r4
 80117f0:	210a      	movs	r1, #10
 80117f2:	4628      	mov	r0, r5
 80117f4:	f000 f85f 	bl	80118b6 <__swbuf_r>
 80117f8:	3001      	adds	r0, #1
 80117fa:	d0d7      	beq.n	80117ac <_puts_r+0x38>
 80117fc:	250a      	movs	r5, #10
 80117fe:	e7d7      	b.n	80117b0 <_puts_r+0x3c>
 8011800:	4622      	mov	r2, r4
 8011802:	4628      	mov	r0, r5
 8011804:	f000 f857 	bl	80118b6 <__swbuf_r>
 8011808:	3001      	adds	r0, #1
 801180a:	d1e7      	bne.n	80117dc <_puts_r+0x68>
 801180c:	e7ce      	b.n	80117ac <_puts_r+0x38>
 801180e:	3e01      	subs	r6, #1
 8011810:	e7e4      	b.n	80117dc <_puts_r+0x68>
 8011812:	6823      	ldr	r3, [r4, #0]
 8011814:	1c5a      	adds	r2, r3, #1
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	220a      	movs	r2, #10
 801181a:	701a      	strb	r2, [r3, #0]
 801181c:	e7ee      	b.n	80117fc <_puts_r+0x88>
	...

08011820 <puts>:
 8011820:	4b02      	ldr	r3, [pc, #8]	@ (801182c <puts+0xc>)
 8011822:	4601      	mov	r1, r0
 8011824:	6818      	ldr	r0, [r3, #0]
 8011826:	f7ff bfa5 	b.w	8011774 <_puts_r>
 801182a:	bf00      	nop
 801182c:	2000003c 	.word	0x2000003c

08011830 <__sread>:
 8011830:	b510      	push	{r4, lr}
 8011832:	460c      	mov	r4, r1
 8011834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011838:	f000 f92c 	bl	8011a94 <_read_r>
 801183c:	2800      	cmp	r0, #0
 801183e:	bfab      	itete	ge
 8011840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011842:	89a3      	ldrhlt	r3, [r4, #12]
 8011844:	181b      	addge	r3, r3, r0
 8011846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801184a:	bfac      	ite	ge
 801184c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801184e:	81a3      	strhlt	r3, [r4, #12]
 8011850:	bd10      	pop	{r4, pc}

08011852 <__swrite>:
 8011852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011856:	461f      	mov	r7, r3
 8011858:	898b      	ldrh	r3, [r1, #12]
 801185a:	05db      	lsls	r3, r3, #23
 801185c:	4605      	mov	r5, r0
 801185e:	460c      	mov	r4, r1
 8011860:	4616      	mov	r6, r2
 8011862:	d505      	bpl.n	8011870 <__swrite+0x1e>
 8011864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011868:	2302      	movs	r3, #2
 801186a:	2200      	movs	r2, #0
 801186c:	f000 f900 	bl	8011a70 <_lseek_r>
 8011870:	89a3      	ldrh	r3, [r4, #12]
 8011872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801187a:	81a3      	strh	r3, [r4, #12]
 801187c:	4632      	mov	r2, r6
 801187e:	463b      	mov	r3, r7
 8011880:	4628      	mov	r0, r5
 8011882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011886:	f000 b917 	b.w	8011ab8 <_write_r>

0801188a <__sseek>:
 801188a:	b510      	push	{r4, lr}
 801188c:	460c      	mov	r4, r1
 801188e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011892:	f000 f8ed 	bl	8011a70 <_lseek_r>
 8011896:	1c43      	adds	r3, r0, #1
 8011898:	89a3      	ldrh	r3, [r4, #12]
 801189a:	bf15      	itete	ne
 801189c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801189e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80118a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80118a6:	81a3      	strheq	r3, [r4, #12]
 80118a8:	bf18      	it	ne
 80118aa:	81a3      	strhne	r3, [r4, #12]
 80118ac:	bd10      	pop	{r4, pc}

080118ae <__sclose>:
 80118ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118b2:	f000 b8cd 	b.w	8011a50 <_close_r>

080118b6 <__swbuf_r>:
 80118b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b8:	460e      	mov	r6, r1
 80118ba:	4614      	mov	r4, r2
 80118bc:	4605      	mov	r5, r0
 80118be:	b118      	cbz	r0, 80118c8 <__swbuf_r+0x12>
 80118c0:	6a03      	ldr	r3, [r0, #32]
 80118c2:	b90b      	cbnz	r3, 80118c8 <__swbuf_r+0x12>
 80118c4:	f7ff ff0e 	bl	80116e4 <__sinit>
 80118c8:	69a3      	ldr	r3, [r4, #24]
 80118ca:	60a3      	str	r3, [r4, #8]
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	071a      	lsls	r2, r3, #28
 80118d0:	d501      	bpl.n	80118d6 <__swbuf_r+0x20>
 80118d2:	6923      	ldr	r3, [r4, #16]
 80118d4:	b943      	cbnz	r3, 80118e8 <__swbuf_r+0x32>
 80118d6:	4621      	mov	r1, r4
 80118d8:	4628      	mov	r0, r5
 80118da:	f000 f82b 	bl	8011934 <__swsetup_r>
 80118de:	b118      	cbz	r0, 80118e8 <__swbuf_r+0x32>
 80118e0:	f04f 37ff 	mov.w	r7, #4294967295
 80118e4:	4638      	mov	r0, r7
 80118e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e8:	6823      	ldr	r3, [r4, #0]
 80118ea:	6922      	ldr	r2, [r4, #16]
 80118ec:	1a98      	subs	r0, r3, r2
 80118ee:	6963      	ldr	r3, [r4, #20]
 80118f0:	b2f6      	uxtb	r6, r6
 80118f2:	4283      	cmp	r3, r0
 80118f4:	4637      	mov	r7, r6
 80118f6:	dc05      	bgt.n	8011904 <__swbuf_r+0x4e>
 80118f8:	4621      	mov	r1, r4
 80118fa:	4628      	mov	r0, r5
 80118fc:	f000 fd96 	bl	801242c <_fflush_r>
 8011900:	2800      	cmp	r0, #0
 8011902:	d1ed      	bne.n	80118e0 <__swbuf_r+0x2a>
 8011904:	68a3      	ldr	r3, [r4, #8]
 8011906:	3b01      	subs	r3, #1
 8011908:	60a3      	str	r3, [r4, #8]
 801190a:	6823      	ldr	r3, [r4, #0]
 801190c:	1c5a      	adds	r2, r3, #1
 801190e:	6022      	str	r2, [r4, #0]
 8011910:	701e      	strb	r6, [r3, #0]
 8011912:	6962      	ldr	r2, [r4, #20]
 8011914:	1c43      	adds	r3, r0, #1
 8011916:	429a      	cmp	r2, r3
 8011918:	d004      	beq.n	8011924 <__swbuf_r+0x6e>
 801191a:	89a3      	ldrh	r3, [r4, #12]
 801191c:	07db      	lsls	r3, r3, #31
 801191e:	d5e1      	bpl.n	80118e4 <__swbuf_r+0x2e>
 8011920:	2e0a      	cmp	r6, #10
 8011922:	d1df      	bne.n	80118e4 <__swbuf_r+0x2e>
 8011924:	4621      	mov	r1, r4
 8011926:	4628      	mov	r0, r5
 8011928:	f000 fd80 	bl	801242c <_fflush_r>
 801192c:	2800      	cmp	r0, #0
 801192e:	d0d9      	beq.n	80118e4 <__swbuf_r+0x2e>
 8011930:	e7d6      	b.n	80118e0 <__swbuf_r+0x2a>
	...

08011934 <__swsetup_r>:
 8011934:	b538      	push	{r3, r4, r5, lr}
 8011936:	4b29      	ldr	r3, [pc, #164]	@ (80119dc <__swsetup_r+0xa8>)
 8011938:	4605      	mov	r5, r0
 801193a:	6818      	ldr	r0, [r3, #0]
 801193c:	460c      	mov	r4, r1
 801193e:	b118      	cbz	r0, 8011948 <__swsetup_r+0x14>
 8011940:	6a03      	ldr	r3, [r0, #32]
 8011942:	b90b      	cbnz	r3, 8011948 <__swsetup_r+0x14>
 8011944:	f7ff fece 	bl	80116e4 <__sinit>
 8011948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194c:	0719      	lsls	r1, r3, #28
 801194e:	d422      	bmi.n	8011996 <__swsetup_r+0x62>
 8011950:	06da      	lsls	r2, r3, #27
 8011952:	d407      	bmi.n	8011964 <__swsetup_r+0x30>
 8011954:	2209      	movs	r2, #9
 8011956:	602a      	str	r2, [r5, #0]
 8011958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801195c:	81a3      	strh	r3, [r4, #12]
 801195e:	f04f 30ff 	mov.w	r0, #4294967295
 8011962:	e033      	b.n	80119cc <__swsetup_r+0x98>
 8011964:	0758      	lsls	r0, r3, #29
 8011966:	d512      	bpl.n	801198e <__swsetup_r+0x5a>
 8011968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801196a:	b141      	cbz	r1, 801197e <__swsetup_r+0x4a>
 801196c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011970:	4299      	cmp	r1, r3
 8011972:	d002      	beq.n	801197a <__swsetup_r+0x46>
 8011974:	4628      	mov	r0, r5
 8011976:	f000 f905 	bl	8011b84 <_free_r>
 801197a:	2300      	movs	r3, #0
 801197c:	6363      	str	r3, [r4, #52]	@ 0x34
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	2300      	movs	r3, #0
 8011988:	6063      	str	r3, [r4, #4]
 801198a:	6923      	ldr	r3, [r4, #16]
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	89a3      	ldrh	r3, [r4, #12]
 8011990:	f043 0308 	orr.w	r3, r3, #8
 8011994:	81a3      	strh	r3, [r4, #12]
 8011996:	6923      	ldr	r3, [r4, #16]
 8011998:	b94b      	cbnz	r3, 80119ae <__swsetup_r+0x7a>
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80119a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119a4:	d003      	beq.n	80119ae <__swsetup_r+0x7a>
 80119a6:	4621      	mov	r1, r4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f000 fd9f 	bl	80124ec <__smakebuf_r>
 80119ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b2:	f013 0201 	ands.w	r2, r3, #1
 80119b6:	d00a      	beq.n	80119ce <__swsetup_r+0x9a>
 80119b8:	2200      	movs	r2, #0
 80119ba:	60a2      	str	r2, [r4, #8]
 80119bc:	6962      	ldr	r2, [r4, #20]
 80119be:	4252      	negs	r2, r2
 80119c0:	61a2      	str	r2, [r4, #24]
 80119c2:	6922      	ldr	r2, [r4, #16]
 80119c4:	b942      	cbnz	r2, 80119d8 <__swsetup_r+0xa4>
 80119c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80119ca:	d1c5      	bne.n	8011958 <__swsetup_r+0x24>
 80119cc:	bd38      	pop	{r3, r4, r5, pc}
 80119ce:	0799      	lsls	r1, r3, #30
 80119d0:	bf58      	it	pl
 80119d2:	6962      	ldrpl	r2, [r4, #20]
 80119d4:	60a2      	str	r2, [r4, #8]
 80119d6:	e7f4      	b.n	80119c2 <__swsetup_r+0x8e>
 80119d8:	2000      	movs	r0, #0
 80119da:	e7f7      	b.n	80119cc <__swsetup_r+0x98>
 80119dc:	2000003c 	.word	0x2000003c

080119e0 <memcmp>:
 80119e0:	b510      	push	{r4, lr}
 80119e2:	3901      	subs	r1, #1
 80119e4:	4402      	add	r2, r0
 80119e6:	4290      	cmp	r0, r2
 80119e8:	d101      	bne.n	80119ee <memcmp+0xe>
 80119ea:	2000      	movs	r0, #0
 80119ec:	e005      	b.n	80119fa <memcmp+0x1a>
 80119ee:	7803      	ldrb	r3, [r0, #0]
 80119f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80119f4:	42a3      	cmp	r3, r4
 80119f6:	d001      	beq.n	80119fc <memcmp+0x1c>
 80119f8:	1b18      	subs	r0, r3, r4
 80119fa:	bd10      	pop	{r4, pc}
 80119fc:	3001      	adds	r0, #1
 80119fe:	e7f2      	b.n	80119e6 <memcmp+0x6>

08011a00 <memset>:
 8011a00:	4402      	add	r2, r0
 8011a02:	4603      	mov	r3, r0
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d100      	bne.n	8011a0a <memset+0xa>
 8011a08:	4770      	bx	lr
 8011a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8011a0e:	e7f9      	b.n	8011a04 <memset+0x4>

08011a10 <strchr>:
 8011a10:	b2c9      	uxtb	r1, r1
 8011a12:	4603      	mov	r3, r0
 8011a14:	4618      	mov	r0, r3
 8011a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a1a:	b112      	cbz	r2, 8011a22 <strchr+0x12>
 8011a1c:	428a      	cmp	r2, r1
 8011a1e:	d1f9      	bne.n	8011a14 <strchr+0x4>
 8011a20:	4770      	bx	lr
 8011a22:	2900      	cmp	r1, #0
 8011a24:	bf18      	it	ne
 8011a26:	2000      	movne	r0, #0
 8011a28:	4770      	bx	lr

08011a2a <strncmp>:
 8011a2a:	b510      	push	{r4, lr}
 8011a2c:	b16a      	cbz	r2, 8011a4a <strncmp+0x20>
 8011a2e:	3901      	subs	r1, #1
 8011a30:	1884      	adds	r4, r0, r2
 8011a32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d103      	bne.n	8011a46 <strncmp+0x1c>
 8011a3e:	42a0      	cmp	r0, r4
 8011a40:	d001      	beq.n	8011a46 <strncmp+0x1c>
 8011a42:	2a00      	cmp	r2, #0
 8011a44:	d1f5      	bne.n	8011a32 <strncmp+0x8>
 8011a46:	1ad0      	subs	r0, r2, r3
 8011a48:	bd10      	pop	{r4, pc}
 8011a4a:	4610      	mov	r0, r2
 8011a4c:	e7fc      	b.n	8011a48 <strncmp+0x1e>
	...

08011a50 <_close_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d06      	ldr	r5, [pc, #24]	@ (8011a6c <_close_r+0x1c>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	f7ef f826 	bl	8000aac <_close>
 8011a60:	1c43      	adds	r3, r0, #1
 8011a62:	d102      	bne.n	8011a6a <_close_r+0x1a>
 8011a64:	682b      	ldr	r3, [r5, #0]
 8011a66:	b103      	cbz	r3, 8011a6a <_close_r+0x1a>
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	bd38      	pop	{r3, r4, r5, pc}
 8011a6c:	20008324 	.word	0x20008324

08011a70 <_lseek_r>:
 8011a70:	b538      	push	{r3, r4, r5, lr}
 8011a72:	4d07      	ldr	r5, [pc, #28]	@ (8011a90 <_lseek_r+0x20>)
 8011a74:	4604      	mov	r4, r0
 8011a76:	4608      	mov	r0, r1
 8011a78:	4611      	mov	r1, r2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	602a      	str	r2, [r5, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	f7ef f83b 	bl	8000afa <_lseek>
 8011a84:	1c43      	adds	r3, r0, #1
 8011a86:	d102      	bne.n	8011a8e <_lseek_r+0x1e>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	b103      	cbz	r3, 8011a8e <_lseek_r+0x1e>
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	bd38      	pop	{r3, r4, r5, pc}
 8011a90:	20008324 	.word	0x20008324

08011a94 <_read_r>:
 8011a94:	b538      	push	{r3, r4, r5, lr}
 8011a96:	4d07      	ldr	r5, [pc, #28]	@ (8011ab4 <_read_r+0x20>)
 8011a98:	4604      	mov	r4, r0
 8011a9a:	4608      	mov	r0, r1
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	602a      	str	r2, [r5, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	f7ee ffc9 	bl	8000a3a <_read>
 8011aa8:	1c43      	adds	r3, r0, #1
 8011aaa:	d102      	bne.n	8011ab2 <_read_r+0x1e>
 8011aac:	682b      	ldr	r3, [r5, #0]
 8011aae:	b103      	cbz	r3, 8011ab2 <_read_r+0x1e>
 8011ab0:	6023      	str	r3, [r4, #0]
 8011ab2:	bd38      	pop	{r3, r4, r5, pc}
 8011ab4:	20008324 	.word	0x20008324

08011ab8 <_write_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4d07      	ldr	r5, [pc, #28]	@ (8011ad8 <_write_r+0x20>)
 8011abc:	4604      	mov	r4, r0
 8011abe:	4608      	mov	r0, r1
 8011ac0:	4611      	mov	r1, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	602a      	str	r2, [r5, #0]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f7ee ffd4 	bl	8000a74 <_write>
 8011acc:	1c43      	adds	r3, r0, #1
 8011ace:	d102      	bne.n	8011ad6 <_write_r+0x1e>
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	b103      	cbz	r3, 8011ad6 <_write_r+0x1e>
 8011ad4:	6023      	str	r3, [r4, #0]
 8011ad6:	bd38      	pop	{r3, r4, r5, pc}
 8011ad8:	20008324 	.word	0x20008324

08011adc <__libc_init_array>:
 8011adc:	b570      	push	{r4, r5, r6, lr}
 8011ade:	4d0d      	ldr	r5, [pc, #52]	@ (8011b14 <__libc_init_array+0x38>)
 8011ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8011b18 <__libc_init_array+0x3c>)
 8011ae2:	1b64      	subs	r4, r4, r5
 8011ae4:	10a4      	asrs	r4, r4, #2
 8011ae6:	2600      	movs	r6, #0
 8011ae8:	42a6      	cmp	r6, r4
 8011aea:	d109      	bne.n	8011b00 <__libc_init_array+0x24>
 8011aec:	4d0b      	ldr	r5, [pc, #44]	@ (8011b1c <__libc_init_array+0x40>)
 8011aee:	4c0c      	ldr	r4, [pc, #48]	@ (8011b20 <__libc_init_array+0x44>)
 8011af0:	f000 fdb6 	bl	8012660 <_init>
 8011af4:	1b64      	subs	r4, r4, r5
 8011af6:	10a4      	asrs	r4, r4, #2
 8011af8:	2600      	movs	r6, #0
 8011afa:	42a6      	cmp	r6, r4
 8011afc:	d105      	bne.n	8011b0a <__libc_init_array+0x2e>
 8011afe:	bd70      	pop	{r4, r5, r6, pc}
 8011b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b04:	4798      	blx	r3
 8011b06:	3601      	adds	r6, #1
 8011b08:	e7ee      	b.n	8011ae8 <__libc_init_array+0xc>
 8011b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b0e:	4798      	blx	r3
 8011b10:	3601      	adds	r6, #1
 8011b12:	e7f2      	b.n	8011afa <__libc_init_array+0x1e>
 8011b14:	08016670 	.word	0x08016670
 8011b18:	08016670 	.word	0x08016670
 8011b1c:	08016670 	.word	0x08016670
 8011b20:	08016674 	.word	0x08016674

08011b24 <__retarget_lock_init_recursive>:
 8011b24:	4770      	bx	lr

08011b26 <__retarget_lock_acquire_recursive>:
 8011b26:	4770      	bx	lr

08011b28 <__retarget_lock_release_recursive>:
 8011b28:	4770      	bx	lr

08011b2a <memcpy>:
 8011b2a:	440a      	add	r2, r1
 8011b2c:	4291      	cmp	r1, r2
 8011b2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b32:	d100      	bne.n	8011b36 <memcpy+0xc>
 8011b34:	4770      	bx	lr
 8011b36:	b510      	push	{r4, lr}
 8011b38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b40:	4291      	cmp	r1, r2
 8011b42:	d1f9      	bne.n	8011b38 <memcpy+0xe>
 8011b44:	bd10      	pop	{r4, pc}
	...

08011b48 <__assert_func>:
 8011b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b4a:	4614      	mov	r4, r2
 8011b4c:	461a      	mov	r2, r3
 8011b4e:	4b09      	ldr	r3, [pc, #36]	@ (8011b74 <__assert_func+0x2c>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4605      	mov	r5, r0
 8011b54:	68d8      	ldr	r0, [r3, #12]
 8011b56:	b954      	cbnz	r4, 8011b6e <__assert_func+0x26>
 8011b58:	4b07      	ldr	r3, [pc, #28]	@ (8011b78 <__assert_func+0x30>)
 8011b5a:	461c      	mov	r4, r3
 8011b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b60:	9100      	str	r1, [sp, #0]
 8011b62:	462b      	mov	r3, r5
 8011b64:	4905      	ldr	r1, [pc, #20]	@ (8011b7c <__assert_func+0x34>)
 8011b66:	f000 fc89 	bl	801247c <fiprintf>
 8011b6a:	f000 fd2d 	bl	80125c8 <abort>
 8011b6e:	4b04      	ldr	r3, [pc, #16]	@ (8011b80 <__assert_func+0x38>)
 8011b70:	e7f4      	b.n	8011b5c <__assert_func+0x14>
 8011b72:	bf00      	nop
 8011b74:	2000003c 	.word	0x2000003c
 8011b78:	08016634 	.word	0x08016634
 8011b7c:	08016606 	.word	0x08016606
 8011b80:	080165f9 	.word	0x080165f9

08011b84 <_free_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4605      	mov	r5, r0
 8011b88:	2900      	cmp	r1, #0
 8011b8a:	d041      	beq.n	8011c10 <_free_r+0x8c>
 8011b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b90:	1f0c      	subs	r4, r1, #4
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	bfb8      	it	lt
 8011b96:	18e4      	addlt	r4, r4, r3
 8011b98:	f000 f8e8 	bl	8011d6c <__malloc_lock>
 8011b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8011c14 <_free_r+0x90>)
 8011b9e:	6813      	ldr	r3, [r2, #0]
 8011ba0:	b933      	cbnz	r3, 8011bb0 <_free_r+0x2c>
 8011ba2:	6063      	str	r3, [r4, #4]
 8011ba4:	6014      	str	r4, [r2, #0]
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bac:	f000 b8e4 	b.w	8011d78 <__malloc_unlock>
 8011bb0:	42a3      	cmp	r3, r4
 8011bb2:	d908      	bls.n	8011bc6 <_free_r+0x42>
 8011bb4:	6820      	ldr	r0, [r4, #0]
 8011bb6:	1821      	adds	r1, r4, r0
 8011bb8:	428b      	cmp	r3, r1
 8011bba:	bf01      	itttt	eq
 8011bbc:	6819      	ldreq	r1, [r3, #0]
 8011bbe:	685b      	ldreq	r3, [r3, #4]
 8011bc0:	1809      	addeq	r1, r1, r0
 8011bc2:	6021      	streq	r1, [r4, #0]
 8011bc4:	e7ed      	b.n	8011ba2 <_free_r+0x1e>
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	b10b      	cbz	r3, 8011bd0 <_free_r+0x4c>
 8011bcc:	42a3      	cmp	r3, r4
 8011bce:	d9fa      	bls.n	8011bc6 <_free_r+0x42>
 8011bd0:	6811      	ldr	r1, [r2, #0]
 8011bd2:	1850      	adds	r0, r2, r1
 8011bd4:	42a0      	cmp	r0, r4
 8011bd6:	d10b      	bne.n	8011bf0 <_free_r+0x6c>
 8011bd8:	6820      	ldr	r0, [r4, #0]
 8011bda:	4401      	add	r1, r0
 8011bdc:	1850      	adds	r0, r2, r1
 8011bde:	4283      	cmp	r3, r0
 8011be0:	6011      	str	r1, [r2, #0]
 8011be2:	d1e0      	bne.n	8011ba6 <_free_r+0x22>
 8011be4:	6818      	ldr	r0, [r3, #0]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	6053      	str	r3, [r2, #4]
 8011bea:	4408      	add	r0, r1
 8011bec:	6010      	str	r0, [r2, #0]
 8011bee:	e7da      	b.n	8011ba6 <_free_r+0x22>
 8011bf0:	d902      	bls.n	8011bf8 <_free_r+0x74>
 8011bf2:	230c      	movs	r3, #12
 8011bf4:	602b      	str	r3, [r5, #0]
 8011bf6:	e7d6      	b.n	8011ba6 <_free_r+0x22>
 8011bf8:	6820      	ldr	r0, [r4, #0]
 8011bfa:	1821      	adds	r1, r4, r0
 8011bfc:	428b      	cmp	r3, r1
 8011bfe:	bf04      	itt	eq
 8011c00:	6819      	ldreq	r1, [r3, #0]
 8011c02:	685b      	ldreq	r3, [r3, #4]
 8011c04:	6063      	str	r3, [r4, #4]
 8011c06:	bf04      	itt	eq
 8011c08:	1809      	addeq	r1, r1, r0
 8011c0a:	6021      	streq	r1, [r4, #0]
 8011c0c:	6054      	str	r4, [r2, #4]
 8011c0e:	e7ca      	b.n	8011ba6 <_free_r+0x22>
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	bf00      	nop
 8011c14:	20008330 	.word	0x20008330

08011c18 <malloc>:
 8011c18:	4b02      	ldr	r3, [pc, #8]	@ (8011c24 <malloc+0xc>)
 8011c1a:	4601      	mov	r1, r0
 8011c1c:	6818      	ldr	r0, [r3, #0]
 8011c1e:	f000 b825 	b.w	8011c6c <_malloc_r>
 8011c22:	bf00      	nop
 8011c24:	2000003c 	.word	0x2000003c

08011c28 <sbrk_aligned>:
 8011c28:	b570      	push	{r4, r5, r6, lr}
 8011c2a:	4e0f      	ldr	r6, [pc, #60]	@ (8011c68 <sbrk_aligned+0x40>)
 8011c2c:	460c      	mov	r4, r1
 8011c2e:	6831      	ldr	r1, [r6, #0]
 8011c30:	4605      	mov	r5, r0
 8011c32:	b911      	cbnz	r1, 8011c3a <sbrk_aligned+0x12>
 8011c34:	f000 fcb8 	bl	80125a8 <_sbrk_r>
 8011c38:	6030      	str	r0, [r6, #0]
 8011c3a:	4621      	mov	r1, r4
 8011c3c:	4628      	mov	r0, r5
 8011c3e:	f000 fcb3 	bl	80125a8 <_sbrk_r>
 8011c42:	1c43      	adds	r3, r0, #1
 8011c44:	d103      	bne.n	8011c4e <sbrk_aligned+0x26>
 8011c46:	f04f 34ff 	mov.w	r4, #4294967295
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	bd70      	pop	{r4, r5, r6, pc}
 8011c4e:	1cc4      	adds	r4, r0, #3
 8011c50:	f024 0403 	bic.w	r4, r4, #3
 8011c54:	42a0      	cmp	r0, r4
 8011c56:	d0f8      	beq.n	8011c4a <sbrk_aligned+0x22>
 8011c58:	1a21      	subs	r1, r4, r0
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	f000 fca4 	bl	80125a8 <_sbrk_r>
 8011c60:	3001      	adds	r0, #1
 8011c62:	d1f2      	bne.n	8011c4a <sbrk_aligned+0x22>
 8011c64:	e7ef      	b.n	8011c46 <sbrk_aligned+0x1e>
 8011c66:	bf00      	nop
 8011c68:	2000832c 	.word	0x2000832c

08011c6c <_malloc_r>:
 8011c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c70:	1ccd      	adds	r5, r1, #3
 8011c72:	f025 0503 	bic.w	r5, r5, #3
 8011c76:	3508      	adds	r5, #8
 8011c78:	2d0c      	cmp	r5, #12
 8011c7a:	bf38      	it	cc
 8011c7c:	250c      	movcc	r5, #12
 8011c7e:	2d00      	cmp	r5, #0
 8011c80:	4606      	mov	r6, r0
 8011c82:	db01      	blt.n	8011c88 <_malloc_r+0x1c>
 8011c84:	42a9      	cmp	r1, r5
 8011c86:	d904      	bls.n	8011c92 <_malloc_r+0x26>
 8011c88:	230c      	movs	r3, #12
 8011c8a:	6033      	str	r3, [r6, #0]
 8011c8c:	2000      	movs	r0, #0
 8011c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011d68 <_malloc_r+0xfc>
 8011c96:	f000 f869 	bl	8011d6c <__malloc_lock>
 8011c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8011c9e:	461c      	mov	r4, r3
 8011ca0:	bb44      	cbnz	r4, 8011cf4 <_malloc_r+0x88>
 8011ca2:	4629      	mov	r1, r5
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	f7ff ffbf 	bl	8011c28 <sbrk_aligned>
 8011caa:	1c43      	adds	r3, r0, #1
 8011cac:	4604      	mov	r4, r0
 8011cae:	d158      	bne.n	8011d62 <_malloc_r+0xf6>
 8011cb0:	f8d8 4000 	ldr.w	r4, [r8]
 8011cb4:	4627      	mov	r7, r4
 8011cb6:	2f00      	cmp	r7, #0
 8011cb8:	d143      	bne.n	8011d42 <_malloc_r+0xd6>
 8011cba:	2c00      	cmp	r4, #0
 8011cbc:	d04b      	beq.n	8011d56 <_malloc_r+0xea>
 8011cbe:	6823      	ldr	r3, [r4, #0]
 8011cc0:	4639      	mov	r1, r7
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	eb04 0903 	add.w	r9, r4, r3
 8011cc8:	f000 fc6e 	bl	80125a8 <_sbrk_r>
 8011ccc:	4581      	cmp	r9, r0
 8011cce:	d142      	bne.n	8011d56 <_malloc_r+0xea>
 8011cd0:	6821      	ldr	r1, [r4, #0]
 8011cd2:	1a6d      	subs	r5, r5, r1
 8011cd4:	4629      	mov	r1, r5
 8011cd6:	4630      	mov	r0, r6
 8011cd8:	f7ff ffa6 	bl	8011c28 <sbrk_aligned>
 8011cdc:	3001      	adds	r0, #1
 8011cde:	d03a      	beq.n	8011d56 <_malloc_r+0xea>
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	442b      	add	r3, r5
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8011cea:	685a      	ldr	r2, [r3, #4]
 8011cec:	bb62      	cbnz	r2, 8011d48 <_malloc_r+0xdc>
 8011cee:	f8c8 7000 	str.w	r7, [r8]
 8011cf2:	e00f      	b.n	8011d14 <_malloc_r+0xa8>
 8011cf4:	6822      	ldr	r2, [r4, #0]
 8011cf6:	1b52      	subs	r2, r2, r5
 8011cf8:	d420      	bmi.n	8011d3c <_malloc_r+0xd0>
 8011cfa:	2a0b      	cmp	r2, #11
 8011cfc:	d917      	bls.n	8011d2e <_malloc_r+0xc2>
 8011cfe:	1961      	adds	r1, r4, r5
 8011d00:	42a3      	cmp	r3, r4
 8011d02:	6025      	str	r5, [r4, #0]
 8011d04:	bf18      	it	ne
 8011d06:	6059      	strne	r1, [r3, #4]
 8011d08:	6863      	ldr	r3, [r4, #4]
 8011d0a:	bf08      	it	eq
 8011d0c:	f8c8 1000 	streq.w	r1, [r8]
 8011d10:	5162      	str	r2, [r4, r5]
 8011d12:	604b      	str	r3, [r1, #4]
 8011d14:	4630      	mov	r0, r6
 8011d16:	f000 f82f 	bl	8011d78 <__malloc_unlock>
 8011d1a:	f104 000b 	add.w	r0, r4, #11
 8011d1e:	1d23      	adds	r3, r4, #4
 8011d20:	f020 0007 	bic.w	r0, r0, #7
 8011d24:	1ac2      	subs	r2, r0, r3
 8011d26:	bf1c      	itt	ne
 8011d28:	1a1b      	subne	r3, r3, r0
 8011d2a:	50a3      	strne	r3, [r4, r2]
 8011d2c:	e7af      	b.n	8011c8e <_malloc_r+0x22>
 8011d2e:	6862      	ldr	r2, [r4, #4]
 8011d30:	42a3      	cmp	r3, r4
 8011d32:	bf0c      	ite	eq
 8011d34:	f8c8 2000 	streq.w	r2, [r8]
 8011d38:	605a      	strne	r2, [r3, #4]
 8011d3a:	e7eb      	b.n	8011d14 <_malloc_r+0xa8>
 8011d3c:	4623      	mov	r3, r4
 8011d3e:	6864      	ldr	r4, [r4, #4]
 8011d40:	e7ae      	b.n	8011ca0 <_malloc_r+0x34>
 8011d42:	463c      	mov	r4, r7
 8011d44:	687f      	ldr	r7, [r7, #4]
 8011d46:	e7b6      	b.n	8011cb6 <_malloc_r+0x4a>
 8011d48:	461a      	mov	r2, r3
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	42a3      	cmp	r3, r4
 8011d4e:	d1fb      	bne.n	8011d48 <_malloc_r+0xdc>
 8011d50:	2300      	movs	r3, #0
 8011d52:	6053      	str	r3, [r2, #4]
 8011d54:	e7de      	b.n	8011d14 <_malloc_r+0xa8>
 8011d56:	230c      	movs	r3, #12
 8011d58:	6033      	str	r3, [r6, #0]
 8011d5a:	4630      	mov	r0, r6
 8011d5c:	f000 f80c 	bl	8011d78 <__malloc_unlock>
 8011d60:	e794      	b.n	8011c8c <_malloc_r+0x20>
 8011d62:	6005      	str	r5, [r0, #0]
 8011d64:	e7d6      	b.n	8011d14 <_malloc_r+0xa8>
 8011d66:	bf00      	nop
 8011d68:	20008330 	.word	0x20008330

08011d6c <__malloc_lock>:
 8011d6c:	4801      	ldr	r0, [pc, #4]	@ (8011d74 <__malloc_lock+0x8>)
 8011d6e:	f7ff beda 	b.w	8011b26 <__retarget_lock_acquire_recursive>
 8011d72:	bf00      	nop
 8011d74:	20008328 	.word	0x20008328

08011d78 <__malloc_unlock>:
 8011d78:	4801      	ldr	r0, [pc, #4]	@ (8011d80 <__malloc_unlock+0x8>)
 8011d7a:	f7ff bed5 	b.w	8011b28 <__retarget_lock_release_recursive>
 8011d7e:	bf00      	nop
 8011d80:	20008328 	.word	0x20008328

08011d84 <__sfputc_r>:
 8011d84:	6893      	ldr	r3, [r2, #8]
 8011d86:	3b01      	subs	r3, #1
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	b410      	push	{r4}
 8011d8c:	6093      	str	r3, [r2, #8]
 8011d8e:	da08      	bge.n	8011da2 <__sfputc_r+0x1e>
 8011d90:	6994      	ldr	r4, [r2, #24]
 8011d92:	42a3      	cmp	r3, r4
 8011d94:	db01      	blt.n	8011d9a <__sfputc_r+0x16>
 8011d96:	290a      	cmp	r1, #10
 8011d98:	d103      	bne.n	8011da2 <__sfputc_r+0x1e>
 8011d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011d9e:	f7ff bd8a 	b.w	80118b6 <__swbuf_r>
 8011da2:	6813      	ldr	r3, [r2, #0]
 8011da4:	1c58      	adds	r0, r3, #1
 8011da6:	6010      	str	r0, [r2, #0]
 8011da8:	7019      	strb	r1, [r3, #0]
 8011daa:	4608      	mov	r0, r1
 8011dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011db0:	4770      	bx	lr

08011db2 <__sfputs_r>:
 8011db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011db4:	4606      	mov	r6, r0
 8011db6:	460f      	mov	r7, r1
 8011db8:	4614      	mov	r4, r2
 8011dba:	18d5      	adds	r5, r2, r3
 8011dbc:	42ac      	cmp	r4, r5
 8011dbe:	d101      	bne.n	8011dc4 <__sfputs_r+0x12>
 8011dc0:	2000      	movs	r0, #0
 8011dc2:	e007      	b.n	8011dd4 <__sfputs_r+0x22>
 8011dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc8:	463a      	mov	r2, r7
 8011dca:	4630      	mov	r0, r6
 8011dcc:	f7ff ffda 	bl	8011d84 <__sfputc_r>
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d1f3      	bne.n	8011dbc <__sfputs_r+0xa>
 8011dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011dd8 <_vfiprintf_r>:
 8011dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ddc:	460d      	mov	r5, r1
 8011dde:	b09d      	sub	sp, #116	@ 0x74
 8011de0:	4614      	mov	r4, r2
 8011de2:	4698      	mov	r8, r3
 8011de4:	4606      	mov	r6, r0
 8011de6:	b118      	cbz	r0, 8011df0 <_vfiprintf_r+0x18>
 8011de8:	6a03      	ldr	r3, [r0, #32]
 8011dea:	b90b      	cbnz	r3, 8011df0 <_vfiprintf_r+0x18>
 8011dec:	f7ff fc7a 	bl	80116e4 <__sinit>
 8011df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011df2:	07d9      	lsls	r1, r3, #31
 8011df4:	d405      	bmi.n	8011e02 <_vfiprintf_r+0x2a>
 8011df6:	89ab      	ldrh	r3, [r5, #12]
 8011df8:	059a      	lsls	r2, r3, #22
 8011dfa:	d402      	bmi.n	8011e02 <_vfiprintf_r+0x2a>
 8011dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011dfe:	f7ff fe92 	bl	8011b26 <__retarget_lock_acquire_recursive>
 8011e02:	89ab      	ldrh	r3, [r5, #12]
 8011e04:	071b      	lsls	r3, r3, #28
 8011e06:	d501      	bpl.n	8011e0c <_vfiprintf_r+0x34>
 8011e08:	692b      	ldr	r3, [r5, #16]
 8011e0a:	b99b      	cbnz	r3, 8011e34 <_vfiprintf_r+0x5c>
 8011e0c:	4629      	mov	r1, r5
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f7ff fd90 	bl	8011934 <__swsetup_r>
 8011e14:	b170      	cbz	r0, 8011e34 <_vfiprintf_r+0x5c>
 8011e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e18:	07dc      	lsls	r4, r3, #31
 8011e1a:	d504      	bpl.n	8011e26 <_vfiprintf_r+0x4e>
 8011e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e20:	b01d      	add	sp, #116	@ 0x74
 8011e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e26:	89ab      	ldrh	r3, [r5, #12]
 8011e28:	0598      	lsls	r0, r3, #22
 8011e2a:	d4f7      	bmi.n	8011e1c <_vfiprintf_r+0x44>
 8011e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e2e:	f7ff fe7b 	bl	8011b28 <__retarget_lock_release_recursive>
 8011e32:	e7f3      	b.n	8011e1c <_vfiprintf_r+0x44>
 8011e34:	2300      	movs	r3, #0
 8011e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e38:	2320      	movs	r3, #32
 8011e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e42:	2330      	movs	r3, #48	@ 0x30
 8011e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ff4 <_vfiprintf_r+0x21c>
 8011e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e4c:	f04f 0901 	mov.w	r9, #1
 8011e50:	4623      	mov	r3, r4
 8011e52:	469a      	mov	sl, r3
 8011e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e58:	b10a      	cbz	r2, 8011e5e <_vfiprintf_r+0x86>
 8011e5a:	2a25      	cmp	r2, #37	@ 0x25
 8011e5c:	d1f9      	bne.n	8011e52 <_vfiprintf_r+0x7a>
 8011e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8011e62:	d00b      	beq.n	8011e7c <_vfiprintf_r+0xa4>
 8011e64:	465b      	mov	r3, fp
 8011e66:	4622      	mov	r2, r4
 8011e68:	4629      	mov	r1, r5
 8011e6a:	4630      	mov	r0, r6
 8011e6c:	f7ff ffa1 	bl	8011db2 <__sfputs_r>
 8011e70:	3001      	adds	r0, #1
 8011e72:	f000 80a7 	beq.w	8011fc4 <_vfiprintf_r+0x1ec>
 8011e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e78:	445a      	add	r2, fp
 8011e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f000 809f 	beq.w	8011fc4 <_vfiprintf_r+0x1ec>
 8011e86:	2300      	movs	r3, #0
 8011e88:	f04f 32ff 	mov.w	r2, #4294967295
 8011e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e90:	f10a 0a01 	add.w	sl, sl, #1
 8011e94:	9304      	str	r3, [sp, #16]
 8011e96:	9307      	str	r3, [sp, #28]
 8011e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e9e:	4654      	mov	r4, sl
 8011ea0:	2205      	movs	r2, #5
 8011ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ea6:	4853      	ldr	r0, [pc, #332]	@ (8011ff4 <_vfiprintf_r+0x21c>)
 8011ea8:	f7ee f9e2 	bl	8000270 <memchr>
 8011eac:	9a04      	ldr	r2, [sp, #16]
 8011eae:	b9d8      	cbnz	r0, 8011ee8 <_vfiprintf_r+0x110>
 8011eb0:	06d1      	lsls	r1, r2, #27
 8011eb2:	bf44      	itt	mi
 8011eb4:	2320      	movmi	r3, #32
 8011eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011eba:	0713      	lsls	r3, r2, #28
 8011ebc:	bf44      	itt	mi
 8011ebe:	232b      	movmi	r3, #43	@ 0x2b
 8011ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011eca:	d015      	beq.n	8011ef8 <_vfiprintf_r+0x120>
 8011ecc:	9a07      	ldr	r2, [sp, #28]
 8011ece:	4654      	mov	r4, sl
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	f04f 0c0a 	mov.w	ip, #10
 8011ed6:	4621      	mov	r1, r4
 8011ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011edc:	3b30      	subs	r3, #48	@ 0x30
 8011ede:	2b09      	cmp	r3, #9
 8011ee0:	d94b      	bls.n	8011f7a <_vfiprintf_r+0x1a2>
 8011ee2:	b1b0      	cbz	r0, 8011f12 <_vfiprintf_r+0x13a>
 8011ee4:	9207      	str	r2, [sp, #28]
 8011ee6:	e014      	b.n	8011f12 <_vfiprintf_r+0x13a>
 8011ee8:	eba0 0308 	sub.w	r3, r0, r8
 8011eec:	fa09 f303 	lsl.w	r3, r9, r3
 8011ef0:	4313      	orrs	r3, r2
 8011ef2:	9304      	str	r3, [sp, #16]
 8011ef4:	46a2      	mov	sl, r4
 8011ef6:	e7d2      	b.n	8011e9e <_vfiprintf_r+0xc6>
 8011ef8:	9b03      	ldr	r3, [sp, #12]
 8011efa:	1d19      	adds	r1, r3, #4
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	9103      	str	r1, [sp, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	bfbb      	ittet	lt
 8011f04:	425b      	neglt	r3, r3
 8011f06:	f042 0202 	orrlt.w	r2, r2, #2
 8011f0a:	9307      	strge	r3, [sp, #28]
 8011f0c:	9307      	strlt	r3, [sp, #28]
 8011f0e:	bfb8      	it	lt
 8011f10:	9204      	strlt	r2, [sp, #16]
 8011f12:	7823      	ldrb	r3, [r4, #0]
 8011f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f16:	d10a      	bne.n	8011f2e <_vfiprintf_r+0x156>
 8011f18:	7863      	ldrb	r3, [r4, #1]
 8011f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f1c:	d132      	bne.n	8011f84 <_vfiprintf_r+0x1ac>
 8011f1e:	9b03      	ldr	r3, [sp, #12]
 8011f20:	1d1a      	adds	r2, r3, #4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	9203      	str	r2, [sp, #12]
 8011f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011f2a:	3402      	adds	r4, #2
 8011f2c:	9305      	str	r3, [sp, #20]
 8011f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012004 <_vfiprintf_r+0x22c>
 8011f32:	7821      	ldrb	r1, [r4, #0]
 8011f34:	2203      	movs	r2, #3
 8011f36:	4650      	mov	r0, sl
 8011f38:	f7ee f99a 	bl	8000270 <memchr>
 8011f3c:	b138      	cbz	r0, 8011f4e <_vfiprintf_r+0x176>
 8011f3e:	9b04      	ldr	r3, [sp, #16]
 8011f40:	eba0 000a 	sub.w	r0, r0, sl
 8011f44:	2240      	movs	r2, #64	@ 0x40
 8011f46:	4082      	lsls	r2, r0
 8011f48:	4313      	orrs	r3, r2
 8011f4a:	3401      	adds	r4, #1
 8011f4c:	9304      	str	r3, [sp, #16]
 8011f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f52:	4829      	ldr	r0, [pc, #164]	@ (8011ff8 <_vfiprintf_r+0x220>)
 8011f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f58:	2206      	movs	r2, #6
 8011f5a:	f7ee f989 	bl	8000270 <memchr>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	d03f      	beq.n	8011fe2 <_vfiprintf_r+0x20a>
 8011f62:	4b26      	ldr	r3, [pc, #152]	@ (8011ffc <_vfiprintf_r+0x224>)
 8011f64:	bb1b      	cbnz	r3, 8011fae <_vfiprintf_r+0x1d6>
 8011f66:	9b03      	ldr	r3, [sp, #12]
 8011f68:	3307      	adds	r3, #7
 8011f6a:	f023 0307 	bic.w	r3, r3, #7
 8011f6e:	3308      	adds	r3, #8
 8011f70:	9303      	str	r3, [sp, #12]
 8011f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f74:	443b      	add	r3, r7
 8011f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f78:	e76a      	b.n	8011e50 <_vfiprintf_r+0x78>
 8011f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f7e:	460c      	mov	r4, r1
 8011f80:	2001      	movs	r0, #1
 8011f82:	e7a8      	b.n	8011ed6 <_vfiprintf_r+0xfe>
 8011f84:	2300      	movs	r3, #0
 8011f86:	3401      	adds	r4, #1
 8011f88:	9305      	str	r3, [sp, #20]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	f04f 0c0a 	mov.w	ip, #10
 8011f90:	4620      	mov	r0, r4
 8011f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f96:	3a30      	subs	r2, #48	@ 0x30
 8011f98:	2a09      	cmp	r2, #9
 8011f9a:	d903      	bls.n	8011fa4 <_vfiprintf_r+0x1cc>
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d0c6      	beq.n	8011f2e <_vfiprintf_r+0x156>
 8011fa0:	9105      	str	r1, [sp, #20]
 8011fa2:	e7c4      	b.n	8011f2e <_vfiprintf_r+0x156>
 8011fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fa8:	4604      	mov	r4, r0
 8011faa:	2301      	movs	r3, #1
 8011fac:	e7f0      	b.n	8011f90 <_vfiprintf_r+0x1b8>
 8011fae:	ab03      	add	r3, sp, #12
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	462a      	mov	r2, r5
 8011fb4:	4b12      	ldr	r3, [pc, #72]	@ (8012000 <_vfiprintf_r+0x228>)
 8011fb6:	a904      	add	r1, sp, #16
 8011fb8:	4630      	mov	r0, r6
 8011fba:	f3af 8000 	nop.w
 8011fbe:	4607      	mov	r7, r0
 8011fc0:	1c78      	adds	r0, r7, #1
 8011fc2:	d1d6      	bne.n	8011f72 <_vfiprintf_r+0x19a>
 8011fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011fc6:	07d9      	lsls	r1, r3, #31
 8011fc8:	d405      	bmi.n	8011fd6 <_vfiprintf_r+0x1fe>
 8011fca:	89ab      	ldrh	r3, [r5, #12]
 8011fcc:	059a      	lsls	r2, r3, #22
 8011fce:	d402      	bmi.n	8011fd6 <_vfiprintf_r+0x1fe>
 8011fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011fd2:	f7ff fda9 	bl	8011b28 <__retarget_lock_release_recursive>
 8011fd6:	89ab      	ldrh	r3, [r5, #12]
 8011fd8:	065b      	lsls	r3, r3, #25
 8011fda:	f53f af1f 	bmi.w	8011e1c <_vfiprintf_r+0x44>
 8011fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011fe0:	e71e      	b.n	8011e20 <_vfiprintf_r+0x48>
 8011fe2:	ab03      	add	r3, sp, #12
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	462a      	mov	r2, r5
 8011fe8:	4b05      	ldr	r3, [pc, #20]	@ (8012000 <_vfiprintf_r+0x228>)
 8011fea:	a904      	add	r1, sp, #16
 8011fec:	4630      	mov	r0, r6
 8011fee:	f000 f879 	bl	80120e4 <_printf_i>
 8011ff2:	e7e4      	b.n	8011fbe <_vfiprintf_r+0x1e6>
 8011ff4:	08016635 	.word	0x08016635
 8011ff8:	0801663f 	.word	0x0801663f
 8011ffc:	00000000 	.word	0x00000000
 8012000:	08011db3 	.word	0x08011db3
 8012004:	0801663b 	.word	0x0801663b

08012008 <_printf_common>:
 8012008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801200c:	4616      	mov	r6, r2
 801200e:	4698      	mov	r8, r3
 8012010:	688a      	ldr	r2, [r1, #8]
 8012012:	690b      	ldr	r3, [r1, #16]
 8012014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012018:	4293      	cmp	r3, r2
 801201a:	bfb8      	it	lt
 801201c:	4613      	movlt	r3, r2
 801201e:	6033      	str	r3, [r6, #0]
 8012020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012024:	4607      	mov	r7, r0
 8012026:	460c      	mov	r4, r1
 8012028:	b10a      	cbz	r2, 801202e <_printf_common+0x26>
 801202a:	3301      	adds	r3, #1
 801202c:	6033      	str	r3, [r6, #0]
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	0699      	lsls	r1, r3, #26
 8012032:	bf42      	ittt	mi
 8012034:	6833      	ldrmi	r3, [r6, #0]
 8012036:	3302      	addmi	r3, #2
 8012038:	6033      	strmi	r3, [r6, #0]
 801203a:	6825      	ldr	r5, [r4, #0]
 801203c:	f015 0506 	ands.w	r5, r5, #6
 8012040:	d106      	bne.n	8012050 <_printf_common+0x48>
 8012042:	f104 0a19 	add.w	sl, r4, #25
 8012046:	68e3      	ldr	r3, [r4, #12]
 8012048:	6832      	ldr	r2, [r6, #0]
 801204a:	1a9b      	subs	r3, r3, r2
 801204c:	42ab      	cmp	r3, r5
 801204e:	dc26      	bgt.n	801209e <_printf_common+0x96>
 8012050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012054:	6822      	ldr	r2, [r4, #0]
 8012056:	3b00      	subs	r3, #0
 8012058:	bf18      	it	ne
 801205a:	2301      	movne	r3, #1
 801205c:	0692      	lsls	r2, r2, #26
 801205e:	d42b      	bmi.n	80120b8 <_printf_common+0xb0>
 8012060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012064:	4641      	mov	r1, r8
 8012066:	4638      	mov	r0, r7
 8012068:	47c8      	blx	r9
 801206a:	3001      	adds	r0, #1
 801206c:	d01e      	beq.n	80120ac <_printf_common+0xa4>
 801206e:	6823      	ldr	r3, [r4, #0]
 8012070:	6922      	ldr	r2, [r4, #16]
 8012072:	f003 0306 	and.w	r3, r3, #6
 8012076:	2b04      	cmp	r3, #4
 8012078:	bf02      	ittt	eq
 801207a:	68e5      	ldreq	r5, [r4, #12]
 801207c:	6833      	ldreq	r3, [r6, #0]
 801207e:	1aed      	subeq	r5, r5, r3
 8012080:	68a3      	ldr	r3, [r4, #8]
 8012082:	bf0c      	ite	eq
 8012084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012088:	2500      	movne	r5, #0
 801208a:	4293      	cmp	r3, r2
 801208c:	bfc4      	itt	gt
 801208e:	1a9b      	subgt	r3, r3, r2
 8012090:	18ed      	addgt	r5, r5, r3
 8012092:	2600      	movs	r6, #0
 8012094:	341a      	adds	r4, #26
 8012096:	42b5      	cmp	r5, r6
 8012098:	d11a      	bne.n	80120d0 <_printf_common+0xc8>
 801209a:	2000      	movs	r0, #0
 801209c:	e008      	b.n	80120b0 <_printf_common+0xa8>
 801209e:	2301      	movs	r3, #1
 80120a0:	4652      	mov	r2, sl
 80120a2:	4641      	mov	r1, r8
 80120a4:	4638      	mov	r0, r7
 80120a6:	47c8      	blx	r9
 80120a8:	3001      	adds	r0, #1
 80120aa:	d103      	bne.n	80120b4 <_printf_common+0xac>
 80120ac:	f04f 30ff 	mov.w	r0, #4294967295
 80120b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120b4:	3501      	adds	r5, #1
 80120b6:	e7c6      	b.n	8012046 <_printf_common+0x3e>
 80120b8:	18e1      	adds	r1, r4, r3
 80120ba:	1c5a      	adds	r2, r3, #1
 80120bc:	2030      	movs	r0, #48	@ 0x30
 80120be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80120c2:	4422      	add	r2, r4
 80120c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80120c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80120cc:	3302      	adds	r3, #2
 80120ce:	e7c7      	b.n	8012060 <_printf_common+0x58>
 80120d0:	2301      	movs	r3, #1
 80120d2:	4622      	mov	r2, r4
 80120d4:	4641      	mov	r1, r8
 80120d6:	4638      	mov	r0, r7
 80120d8:	47c8      	blx	r9
 80120da:	3001      	adds	r0, #1
 80120dc:	d0e6      	beq.n	80120ac <_printf_common+0xa4>
 80120de:	3601      	adds	r6, #1
 80120e0:	e7d9      	b.n	8012096 <_printf_common+0x8e>
	...

080120e4 <_printf_i>:
 80120e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120e8:	7e0f      	ldrb	r7, [r1, #24]
 80120ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80120ec:	2f78      	cmp	r7, #120	@ 0x78
 80120ee:	4691      	mov	r9, r2
 80120f0:	4680      	mov	r8, r0
 80120f2:	460c      	mov	r4, r1
 80120f4:	469a      	mov	sl, r3
 80120f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80120fa:	d807      	bhi.n	801210c <_printf_i+0x28>
 80120fc:	2f62      	cmp	r7, #98	@ 0x62
 80120fe:	d80a      	bhi.n	8012116 <_printf_i+0x32>
 8012100:	2f00      	cmp	r7, #0
 8012102:	f000 80d2 	beq.w	80122aa <_printf_i+0x1c6>
 8012106:	2f58      	cmp	r7, #88	@ 0x58
 8012108:	f000 80b9 	beq.w	801227e <_printf_i+0x19a>
 801210c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012114:	e03a      	b.n	801218c <_printf_i+0xa8>
 8012116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801211a:	2b15      	cmp	r3, #21
 801211c:	d8f6      	bhi.n	801210c <_printf_i+0x28>
 801211e:	a101      	add	r1, pc, #4	@ (adr r1, 8012124 <_printf_i+0x40>)
 8012120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012124:	0801217d 	.word	0x0801217d
 8012128:	08012191 	.word	0x08012191
 801212c:	0801210d 	.word	0x0801210d
 8012130:	0801210d 	.word	0x0801210d
 8012134:	0801210d 	.word	0x0801210d
 8012138:	0801210d 	.word	0x0801210d
 801213c:	08012191 	.word	0x08012191
 8012140:	0801210d 	.word	0x0801210d
 8012144:	0801210d 	.word	0x0801210d
 8012148:	0801210d 	.word	0x0801210d
 801214c:	0801210d 	.word	0x0801210d
 8012150:	08012291 	.word	0x08012291
 8012154:	080121bb 	.word	0x080121bb
 8012158:	0801224b 	.word	0x0801224b
 801215c:	0801210d 	.word	0x0801210d
 8012160:	0801210d 	.word	0x0801210d
 8012164:	080122b3 	.word	0x080122b3
 8012168:	0801210d 	.word	0x0801210d
 801216c:	080121bb 	.word	0x080121bb
 8012170:	0801210d 	.word	0x0801210d
 8012174:	0801210d 	.word	0x0801210d
 8012178:	08012253 	.word	0x08012253
 801217c:	6833      	ldr	r3, [r6, #0]
 801217e:	1d1a      	adds	r2, r3, #4
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	6032      	str	r2, [r6, #0]
 8012184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801218c:	2301      	movs	r3, #1
 801218e:	e09d      	b.n	80122cc <_printf_i+0x1e8>
 8012190:	6833      	ldr	r3, [r6, #0]
 8012192:	6820      	ldr	r0, [r4, #0]
 8012194:	1d19      	adds	r1, r3, #4
 8012196:	6031      	str	r1, [r6, #0]
 8012198:	0606      	lsls	r6, r0, #24
 801219a:	d501      	bpl.n	80121a0 <_printf_i+0xbc>
 801219c:	681d      	ldr	r5, [r3, #0]
 801219e:	e003      	b.n	80121a8 <_printf_i+0xc4>
 80121a0:	0645      	lsls	r5, r0, #25
 80121a2:	d5fb      	bpl.n	801219c <_printf_i+0xb8>
 80121a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80121a8:	2d00      	cmp	r5, #0
 80121aa:	da03      	bge.n	80121b4 <_printf_i+0xd0>
 80121ac:	232d      	movs	r3, #45	@ 0x2d
 80121ae:	426d      	negs	r5, r5
 80121b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80121b4:	4859      	ldr	r0, [pc, #356]	@ (801231c <_printf_i+0x238>)
 80121b6:	230a      	movs	r3, #10
 80121b8:	e011      	b.n	80121de <_printf_i+0xfa>
 80121ba:	6821      	ldr	r1, [r4, #0]
 80121bc:	6833      	ldr	r3, [r6, #0]
 80121be:	0608      	lsls	r0, r1, #24
 80121c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80121c4:	d402      	bmi.n	80121cc <_printf_i+0xe8>
 80121c6:	0649      	lsls	r1, r1, #25
 80121c8:	bf48      	it	mi
 80121ca:	b2ad      	uxthmi	r5, r5
 80121cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80121ce:	4853      	ldr	r0, [pc, #332]	@ (801231c <_printf_i+0x238>)
 80121d0:	6033      	str	r3, [r6, #0]
 80121d2:	bf14      	ite	ne
 80121d4:	230a      	movne	r3, #10
 80121d6:	2308      	moveq	r3, #8
 80121d8:	2100      	movs	r1, #0
 80121da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80121de:	6866      	ldr	r6, [r4, #4]
 80121e0:	60a6      	str	r6, [r4, #8]
 80121e2:	2e00      	cmp	r6, #0
 80121e4:	bfa2      	ittt	ge
 80121e6:	6821      	ldrge	r1, [r4, #0]
 80121e8:	f021 0104 	bicge.w	r1, r1, #4
 80121ec:	6021      	strge	r1, [r4, #0]
 80121ee:	b90d      	cbnz	r5, 80121f4 <_printf_i+0x110>
 80121f0:	2e00      	cmp	r6, #0
 80121f2:	d04b      	beq.n	801228c <_printf_i+0x1a8>
 80121f4:	4616      	mov	r6, r2
 80121f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80121fa:	fb03 5711 	mls	r7, r3, r1, r5
 80121fe:	5dc7      	ldrb	r7, [r0, r7]
 8012200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012204:	462f      	mov	r7, r5
 8012206:	42bb      	cmp	r3, r7
 8012208:	460d      	mov	r5, r1
 801220a:	d9f4      	bls.n	80121f6 <_printf_i+0x112>
 801220c:	2b08      	cmp	r3, #8
 801220e:	d10b      	bne.n	8012228 <_printf_i+0x144>
 8012210:	6823      	ldr	r3, [r4, #0]
 8012212:	07df      	lsls	r7, r3, #31
 8012214:	d508      	bpl.n	8012228 <_printf_i+0x144>
 8012216:	6923      	ldr	r3, [r4, #16]
 8012218:	6861      	ldr	r1, [r4, #4]
 801221a:	4299      	cmp	r1, r3
 801221c:	bfde      	ittt	le
 801221e:	2330      	movle	r3, #48	@ 0x30
 8012220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012228:	1b92      	subs	r2, r2, r6
 801222a:	6122      	str	r2, [r4, #16]
 801222c:	f8cd a000 	str.w	sl, [sp]
 8012230:	464b      	mov	r3, r9
 8012232:	aa03      	add	r2, sp, #12
 8012234:	4621      	mov	r1, r4
 8012236:	4640      	mov	r0, r8
 8012238:	f7ff fee6 	bl	8012008 <_printf_common>
 801223c:	3001      	adds	r0, #1
 801223e:	d14a      	bne.n	80122d6 <_printf_i+0x1f2>
 8012240:	f04f 30ff 	mov.w	r0, #4294967295
 8012244:	b004      	add	sp, #16
 8012246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801224a:	6823      	ldr	r3, [r4, #0]
 801224c:	f043 0320 	orr.w	r3, r3, #32
 8012250:	6023      	str	r3, [r4, #0]
 8012252:	4833      	ldr	r0, [pc, #204]	@ (8012320 <_printf_i+0x23c>)
 8012254:	2778      	movs	r7, #120	@ 0x78
 8012256:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801225a:	6823      	ldr	r3, [r4, #0]
 801225c:	6831      	ldr	r1, [r6, #0]
 801225e:	061f      	lsls	r7, r3, #24
 8012260:	f851 5b04 	ldr.w	r5, [r1], #4
 8012264:	d402      	bmi.n	801226c <_printf_i+0x188>
 8012266:	065f      	lsls	r7, r3, #25
 8012268:	bf48      	it	mi
 801226a:	b2ad      	uxthmi	r5, r5
 801226c:	6031      	str	r1, [r6, #0]
 801226e:	07d9      	lsls	r1, r3, #31
 8012270:	bf44      	itt	mi
 8012272:	f043 0320 	orrmi.w	r3, r3, #32
 8012276:	6023      	strmi	r3, [r4, #0]
 8012278:	b11d      	cbz	r5, 8012282 <_printf_i+0x19e>
 801227a:	2310      	movs	r3, #16
 801227c:	e7ac      	b.n	80121d8 <_printf_i+0xf4>
 801227e:	4827      	ldr	r0, [pc, #156]	@ (801231c <_printf_i+0x238>)
 8012280:	e7e9      	b.n	8012256 <_printf_i+0x172>
 8012282:	6823      	ldr	r3, [r4, #0]
 8012284:	f023 0320 	bic.w	r3, r3, #32
 8012288:	6023      	str	r3, [r4, #0]
 801228a:	e7f6      	b.n	801227a <_printf_i+0x196>
 801228c:	4616      	mov	r6, r2
 801228e:	e7bd      	b.n	801220c <_printf_i+0x128>
 8012290:	6833      	ldr	r3, [r6, #0]
 8012292:	6825      	ldr	r5, [r4, #0]
 8012294:	6961      	ldr	r1, [r4, #20]
 8012296:	1d18      	adds	r0, r3, #4
 8012298:	6030      	str	r0, [r6, #0]
 801229a:	062e      	lsls	r6, r5, #24
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	d501      	bpl.n	80122a4 <_printf_i+0x1c0>
 80122a0:	6019      	str	r1, [r3, #0]
 80122a2:	e002      	b.n	80122aa <_printf_i+0x1c6>
 80122a4:	0668      	lsls	r0, r5, #25
 80122a6:	d5fb      	bpl.n	80122a0 <_printf_i+0x1bc>
 80122a8:	8019      	strh	r1, [r3, #0]
 80122aa:	2300      	movs	r3, #0
 80122ac:	6123      	str	r3, [r4, #16]
 80122ae:	4616      	mov	r6, r2
 80122b0:	e7bc      	b.n	801222c <_printf_i+0x148>
 80122b2:	6833      	ldr	r3, [r6, #0]
 80122b4:	1d1a      	adds	r2, r3, #4
 80122b6:	6032      	str	r2, [r6, #0]
 80122b8:	681e      	ldr	r6, [r3, #0]
 80122ba:	6862      	ldr	r2, [r4, #4]
 80122bc:	2100      	movs	r1, #0
 80122be:	4630      	mov	r0, r6
 80122c0:	f7ed ffd6 	bl	8000270 <memchr>
 80122c4:	b108      	cbz	r0, 80122ca <_printf_i+0x1e6>
 80122c6:	1b80      	subs	r0, r0, r6
 80122c8:	6060      	str	r0, [r4, #4]
 80122ca:	6863      	ldr	r3, [r4, #4]
 80122cc:	6123      	str	r3, [r4, #16]
 80122ce:	2300      	movs	r3, #0
 80122d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80122d4:	e7aa      	b.n	801222c <_printf_i+0x148>
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	4632      	mov	r2, r6
 80122da:	4649      	mov	r1, r9
 80122dc:	4640      	mov	r0, r8
 80122de:	47d0      	blx	sl
 80122e0:	3001      	adds	r0, #1
 80122e2:	d0ad      	beq.n	8012240 <_printf_i+0x15c>
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	079b      	lsls	r3, r3, #30
 80122e8:	d413      	bmi.n	8012312 <_printf_i+0x22e>
 80122ea:	68e0      	ldr	r0, [r4, #12]
 80122ec:	9b03      	ldr	r3, [sp, #12]
 80122ee:	4298      	cmp	r0, r3
 80122f0:	bfb8      	it	lt
 80122f2:	4618      	movlt	r0, r3
 80122f4:	e7a6      	b.n	8012244 <_printf_i+0x160>
 80122f6:	2301      	movs	r3, #1
 80122f8:	4632      	mov	r2, r6
 80122fa:	4649      	mov	r1, r9
 80122fc:	4640      	mov	r0, r8
 80122fe:	47d0      	blx	sl
 8012300:	3001      	adds	r0, #1
 8012302:	d09d      	beq.n	8012240 <_printf_i+0x15c>
 8012304:	3501      	adds	r5, #1
 8012306:	68e3      	ldr	r3, [r4, #12]
 8012308:	9903      	ldr	r1, [sp, #12]
 801230a:	1a5b      	subs	r3, r3, r1
 801230c:	42ab      	cmp	r3, r5
 801230e:	dcf2      	bgt.n	80122f6 <_printf_i+0x212>
 8012310:	e7eb      	b.n	80122ea <_printf_i+0x206>
 8012312:	2500      	movs	r5, #0
 8012314:	f104 0619 	add.w	r6, r4, #25
 8012318:	e7f5      	b.n	8012306 <_printf_i+0x222>
 801231a:	bf00      	nop
 801231c:	08016646 	.word	0x08016646
 8012320:	08016657 	.word	0x08016657

08012324 <__sflush_r>:
 8012324:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801232c:	0716      	lsls	r6, r2, #28
 801232e:	4605      	mov	r5, r0
 8012330:	460c      	mov	r4, r1
 8012332:	d454      	bmi.n	80123de <__sflush_r+0xba>
 8012334:	684b      	ldr	r3, [r1, #4]
 8012336:	2b00      	cmp	r3, #0
 8012338:	dc02      	bgt.n	8012340 <__sflush_r+0x1c>
 801233a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801233c:	2b00      	cmp	r3, #0
 801233e:	dd48      	ble.n	80123d2 <__sflush_r+0xae>
 8012340:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012342:	2e00      	cmp	r6, #0
 8012344:	d045      	beq.n	80123d2 <__sflush_r+0xae>
 8012346:	2300      	movs	r3, #0
 8012348:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801234c:	682f      	ldr	r7, [r5, #0]
 801234e:	6a21      	ldr	r1, [r4, #32]
 8012350:	602b      	str	r3, [r5, #0]
 8012352:	d030      	beq.n	80123b6 <__sflush_r+0x92>
 8012354:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012356:	89a3      	ldrh	r3, [r4, #12]
 8012358:	0759      	lsls	r1, r3, #29
 801235a:	d505      	bpl.n	8012368 <__sflush_r+0x44>
 801235c:	6863      	ldr	r3, [r4, #4]
 801235e:	1ad2      	subs	r2, r2, r3
 8012360:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012362:	b10b      	cbz	r3, 8012368 <__sflush_r+0x44>
 8012364:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012366:	1ad2      	subs	r2, r2, r3
 8012368:	2300      	movs	r3, #0
 801236a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801236c:	6a21      	ldr	r1, [r4, #32]
 801236e:	4628      	mov	r0, r5
 8012370:	47b0      	blx	r6
 8012372:	1c43      	adds	r3, r0, #1
 8012374:	89a3      	ldrh	r3, [r4, #12]
 8012376:	d106      	bne.n	8012386 <__sflush_r+0x62>
 8012378:	6829      	ldr	r1, [r5, #0]
 801237a:	291d      	cmp	r1, #29
 801237c:	d82b      	bhi.n	80123d6 <__sflush_r+0xb2>
 801237e:	4a2a      	ldr	r2, [pc, #168]	@ (8012428 <__sflush_r+0x104>)
 8012380:	410a      	asrs	r2, r1
 8012382:	07d6      	lsls	r6, r2, #31
 8012384:	d427      	bmi.n	80123d6 <__sflush_r+0xb2>
 8012386:	2200      	movs	r2, #0
 8012388:	6062      	str	r2, [r4, #4]
 801238a:	04d9      	lsls	r1, r3, #19
 801238c:	6922      	ldr	r2, [r4, #16]
 801238e:	6022      	str	r2, [r4, #0]
 8012390:	d504      	bpl.n	801239c <__sflush_r+0x78>
 8012392:	1c42      	adds	r2, r0, #1
 8012394:	d101      	bne.n	801239a <__sflush_r+0x76>
 8012396:	682b      	ldr	r3, [r5, #0]
 8012398:	b903      	cbnz	r3, 801239c <__sflush_r+0x78>
 801239a:	6560      	str	r0, [r4, #84]	@ 0x54
 801239c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801239e:	602f      	str	r7, [r5, #0]
 80123a0:	b1b9      	cbz	r1, 80123d2 <__sflush_r+0xae>
 80123a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80123a6:	4299      	cmp	r1, r3
 80123a8:	d002      	beq.n	80123b0 <__sflush_r+0x8c>
 80123aa:	4628      	mov	r0, r5
 80123ac:	f7ff fbea 	bl	8011b84 <_free_r>
 80123b0:	2300      	movs	r3, #0
 80123b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80123b4:	e00d      	b.n	80123d2 <__sflush_r+0xae>
 80123b6:	2301      	movs	r3, #1
 80123b8:	4628      	mov	r0, r5
 80123ba:	47b0      	blx	r6
 80123bc:	4602      	mov	r2, r0
 80123be:	1c50      	adds	r0, r2, #1
 80123c0:	d1c9      	bne.n	8012356 <__sflush_r+0x32>
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d0c6      	beq.n	8012356 <__sflush_r+0x32>
 80123c8:	2b1d      	cmp	r3, #29
 80123ca:	d001      	beq.n	80123d0 <__sflush_r+0xac>
 80123cc:	2b16      	cmp	r3, #22
 80123ce:	d11e      	bne.n	801240e <__sflush_r+0xea>
 80123d0:	602f      	str	r7, [r5, #0]
 80123d2:	2000      	movs	r0, #0
 80123d4:	e022      	b.n	801241c <__sflush_r+0xf8>
 80123d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123da:	b21b      	sxth	r3, r3
 80123dc:	e01b      	b.n	8012416 <__sflush_r+0xf2>
 80123de:	690f      	ldr	r7, [r1, #16]
 80123e0:	2f00      	cmp	r7, #0
 80123e2:	d0f6      	beq.n	80123d2 <__sflush_r+0xae>
 80123e4:	0793      	lsls	r3, r2, #30
 80123e6:	680e      	ldr	r6, [r1, #0]
 80123e8:	bf08      	it	eq
 80123ea:	694b      	ldreq	r3, [r1, #20]
 80123ec:	600f      	str	r7, [r1, #0]
 80123ee:	bf18      	it	ne
 80123f0:	2300      	movne	r3, #0
 80123f2:	eba6 0807 	sub.w	r8, r6, r7
 80123f6:	608b      	str	r3, [r1, #8]
 80123f8:	f1b8 0f00 	cmp.w	r8, #0
 80123fc:	dde9      	ble.n	80123d2 <__sflush_r+0xae>
 80123fe:	6a21      	ldr	r1, [r4, #32]
 8012400:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012402:	4643      	mov	r3, r8
 8012404:	463a      	mov	r2, r7
 8012406:	4628      	mov	r0, r5
 8012408:	47b0      	blx	r6
 801240a:	2800      	cmp	r0, #0
 801240c:	dc08      	bgt.n	8012420 <__sflush_r+0xfc>
 801240e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012416:	81a3      	strh	r3, [r4, #12]
 8012418:	f04f 30ff 	mov.w	r0, #4294967295
 801241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012420:	4407      	add	r7, r0
 8012422:	eba8 0800 	sub.w	r8, r8, r0
 8012426:	e7e7      	b.n	80123f8 <__sflush_r+0xd4>
 8012428:	dfbffffe 	.word	0xdfbffffe

0801242c <_fflush_r>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	690b      	ldr	r3, [r1, #16]
 8012430:	4605      	mov	r5, r0
 8012432:	460c      	mov	r4, r1
 8012434:	b913      	cbnz	r3, 801243c <_fflush_r+0x10>
 8012436:	2500      	movs	r5, #0
 8012438:	4628      	mov	r0, r5
 801243a:	bd38      	pop	{r3, r4, r5, pc}
 801243c:	b118      	cbz	r0, 8012446 <_fflush_r+0x1a>
 801243e:	6a03      	ldr	r3, [r0, #32]
 8012440:	b90b      	cbnz	r3, 8012446 <_fflush_r+0x1a>
 8012442:	f7ff f94f 	bl	80116e4 <__sinit>
 8012446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d0f3      	beq.n	8012436 <_fflush_r+0xa>
 801244e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012450:	07d0      	lsls	r0, r2, #31
 8012452:	d404      	bmi.n	801245e <_fflush_r+0x32>
 8012454:	0599      	lsls	r1, r3, #22
 8012456:	d402      	bmi.n	801245e <_fflush_r+0x32>
 8012458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801245a:	f7ff fb64 	bl	8011b26 <__retarget_lock_acquire_recursive>
 801245e:	4628      	mov	r0, r5
 8012460:	4621      	mov	r1, r4
 8012462:	f7ff ff5f 	bl	8012324 <__sflush_r>
 8012466:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012468:	07da      	lsls	r2, r3, #31
 801246a:	4605      	mov	r5, r0
 801246c:	d4e4      	bmi.n	8012438 <_fflush_r+0xc>
 801246e:	89a3      	ldrh	r3, [r4, #12]
 8012470:	059b      	lsls	r3, r3, #22
 8012472:	d4e1      	bmi.n	8012438 <_fflush_r+0xc>
 8012474:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012476:	f7ff fb57 	bl	8011b28 <__retarget_lock_release_recursive>
 801247a:	e7dd      	b.n	8012438 <_fflush_r+0xc>

0801247c <fiprintf>:
 801247c:	b40e      	push	{r1, r2, r3}
 801247e:	b503      	push	{r0, r1, lr}
 8012480:	4601      	mov	r1, r0
 8012482:	ab03      	add	r3, sp, #12
 8012484:	4805      	ldr	r0, [pc, #20]	@ (801249c <fiprintf+0x20>)
 8012486:	f853 2b04 	ldr.w	r2, [r3], #4
 801248a:	6800      	ldr	r0, [r0, #0]
 801248c:	9301      	str	r3, [sp, #4]
 801248e:	f7ff fca3 	bl	8011dd8 <_vfiprintf_r>
 8012492:	b002      	add	sp, #8
 8012494:	f85d eb04 	ldr.w	lr, [sp], #4
 8012498:	b003      	add	sp, #12
 801249a:	4770      	bx	lr
 801249c:	2000003c 	.word	0x2000003c

080124a0 <__swhatbuf_r>:
 80124a0:	b570      	push	{r4, r5, r6, lr}
 80124a2:	460c      	mov	r4, r1
 80124a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a8:	2900      	cmp	r1, #0
 80124aa:	b096      	sub	sp, #88	@ 0x58
 80124ac:	4615      	mov	r5, r2
 80124ae:	461e      	mov	r6, r3
 80124b0:	da0d      	bge.n	80124ce <__swhatbuf_r+0x2e>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80124b8:	f04f 0100 	mov.w	r1, #0
 80124bc:	bf14      	ite	ne
 80124be:	2340      	movne	r3, #64	@ 0x40
 80124c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124c4:	2000      	movs	r0, #0
 80124c6:	6031      	str	r1, [r6, #0]
 80124c8:	602b      	str	r3, [r5, #0]
 80124ca:	b016      	add	sp, #88	@ 0x58
 80124cc:	bd70      	pop	{r4, r5, r6, pc}
 80124ce:	466a      	mov	r2, sp
 80124d0:	f000 f848 	bl	8012564 <_fstat_r>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	dbec      	blt.n	80124b2 <__swhatbuf_r+0x12>
 80124d8:	9901      	ldr	r1, [sp, #4]
 80124da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124e2:	4259      	negs	r1, r3
 80124e4:	4159      	adcs	r1, r3
 80124e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124ea:	e7eb      	b.n	80124c4 <__swhatbuf_r+0x24>

080124ec <__smakebuf_r>:
 80124ec:	898b      	ldrh	r3, [r1, #12]
 80124ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124f0:	079d      	lsls	r5, r3, #30
 80124f2:	4606      	mov	r6, r0
 80124f4:	460c      	mov	r4, r1
 80124f6:	d507      	bpl.n	8012508 <__smakebuf_r+0x1c>
 80124f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	6123      	str	r3, [r4, #16]
 8012500:	2301      	movs	r3, #1
 8012502:	6163      	str	r3, [r4, #20]
 8012504:	b003      	add	sp, #12
 8012506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012508:	ab01      	add	r3, sp, #4
 801250a:	466a      	mov	r2, sp
 801250c:	f7ff ffc8 	bl	80124a0 <__swhatbuf_r>
 8012510:	9f00      	ldr	r7, [sp, #0]
 8012512:	4605      	mov	r5, r0
 8012514:	4639      	mov	r1, r7
 8012516:	4630      	mov	r0, r6
 8012518:	f7ff fba8 	bl	8011c6c <_malloc_r>
 801251c:	b948      	cbnz	r0, 8012532 <__smakebuf_r+0x46>
 801251e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012522:	059a      	lsls	r2, r3, #22
 8012524:	d4ee      	bmi.n	8012504 <__smakebuf_r+0x18>
 8012526:	f023 0303 	bic.w	r3, r3, #3
 801252a:	f043 0302 	orr.w	r3, r3, #2
 801252e:	81a3      	strh	r3, [r4, #12]
 8012530:	e7e2      	b.n	80124f8 <__smakebuf_r+0xc>
 8012532:	89a3      	ldrh	r3, [r4, #12]
 8012534:	6020      	str	r0, [r4, #0]
 8012536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801253a:	81a3      	strh	r3, [r4, #12]
 801253c:	9b01      	ldr	r3, [sp, #4]
 801253e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012542:	b15b      	cbz	r3, 801255c <__smakebuf_r+0x70>
 8012544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012548:	4630      	mov	r0, r6
 801254a:	f000 f81d 	bl	8012588 <_isatty_r>
 801254e:	b128      	cbz	r0, 801255c <__smakebuf_r+0x70>
 8012550:	89a3      	ldrh	r3, [r4, #12]
 8012552:	f023 0303 	bic.w	r3, r3, #3
 8012556:	f043 0301 	orr.w	r3, r3, #1
 801255a:	81a3      	strh	r3, [r4, #12]
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	431d      	orrs	r5, r3
 8012560:	81a5      	strh	r5, [r4, #12]
 8012562:	e7cf      	b.n	8012504 <__smakebuf_r+0x18>

08012564 <_fstat_r>:
 8012564:	b538      	push	{r3, r4, r5, lr}
 8012566:	4d07      	ldr	r5, [pc, #28]	@ (8012584 <_fstat_r+0x20>)
 8012568:	2300      	movs	r3, #0
 801256a:	4604      	mov	r4, r0
 801256c:	4608      	mov	r0, r1
 801256e:	4611      	mov	r1, r2
 8012570:	602b      	str	r3, [r5, #0]
 8012572:	f7ee faa7 	bl	8000ac4 <_fstat>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	d102      	bne.n	8012580 <_fstat_r+0x1c>
 801257a:	682b      	ldr	r3, [r5, #0]
 801257c:	b103      	cbz	r3, 8012580 <_fstat_r+0x1c>
 801257e:	6023      	str	r3, [r4, #0]
 8012580:	bd38      	pop	{r3, r4, r5, pc}
 8012582:	bf00      	nop
 8012584:	20008324 	.word	0x20008324

08012588 <_isatty_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4d06      	ldr	r5, [pc, #24]	@ (80125a4 <_isatty_r+0x1c>)
 801258c:	2300      	movs	r3, #0
 801258e:	4604      	mov	r4, r0
 8012590:	4608      	mov	r0, r1
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	f7ee faa6 	bl	8000ae4 <_isatty>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d102      	bne.n	80125a2 <_isatty_r+0x1a>
 801259c:	682b      	ldr	r3, [r5, #0]
 801259e:	b103      	cbz	r3, 80125a2 <_isatty_r+0x1a>
 80125a0:	6023      	str	r3, [r4, #0]
 80125a2:	bd38      	pop	{r3, r4, r5, pc}
 80125a4:	20008324 	.word	0x20008324

080125a8 <_sbrk_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d06      	ldr	r5, [pc, #24]	@ (80125c4 <_sbrk_r+0x1c>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4604      	mov	r4, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	602b      	str	r3, [r5, #0]
 80125b4:	f7ee faae 	bl	8000b14 <_sbrk>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_sbrk_r+0x1a>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_sbrk_r+0x1a>
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	20008324 	.word	0x20008324

080125c8 <abort>:
 80125c8:	b508      	push	{r3, lr}
 80125ca:	2006      	movs	r0, #6
 80125cc:	f000 f82c 	bl	8012628 <raise>
 80125d0:	2001      	movs	r0, #1
 80125d2:	f7ee fa27 	bl	8000a24 <_exit>

080125d6 <_raise_r>:
 80125d6:	291f      	cmp	r1, #31
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4605      	mov	r5, r0
 80125dc:	460c      	mov	r4, r1
 80125de:	d904      	bls.n	80125ea <_raise_r+0x14>
 80125e0:	2316      	movs	r3, #22
 80125e2:	6003      	str	r3, [r0, #0]
 80125e4:	f04f 30ff 	mov.w	r0, #4294967295
 80125e8:	bd38      	pop	{r3, r4, r5, pc}
 80125ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80125ec:	b112      	cbz	r2, 80125f4 <_raise_r+0x1e>
 80125ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125f2:	b94b      	cbnz	r3, 8012608 <_raise_r+0x32>
 80125f4:	4628      	mov	r0, r5
 80125f6:	f000 f831 	bl	801265c <_getpid_r>
 80125fa:	4622      	mov	r2, r4
 80125fc:	4601      	mov	r1, r0
 80125fe:	4628      	mov	r0, r5
 8012600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012604:	f000 b818 	b.w	8012638 <_kill_r>
 8012608:	2b01      	cmp	r3, #1
 801260a:	d00a      	beq.n	8012622 <_raise_r+0x4c>
 801260c:	1c59      	adds	r1, r3, #1
 801260e:	d103      	bne.n	8012618 <_raise_r+0x42>
 8012610:	2316      	movs	r3, #22
 8012612:	6003      	str	r3, [r0, #0]
 8012614:	2001      	movs	r0, #1
 8012616:	e7e7      	b.n	80125e8 <_raise_r+0x12>
 8012618:	2100      	movs	r1, #0
 801261a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801261e:	4620      	mov	r0, r4
 8012620:	4798      	blx	r3
 8012622:	2000      	movs	r0, #0
 8012624:	e7e0      	b.n	80125e8 <_raise_r+0x12>
	...

08012628 <raise>:
 8012628:	4b02      	ldr	r3, [pc, #8]	@ (8012634 <raise+0xc>)
 801262a:	4601      	mov	r1, r0
 801262c:	6818      	ldr	r0, [r3, #0]
 801262e:	f7ff bfd2 	b.w	80125d6 <_raise_r>
 8012632:	bf00      	nop
 8012634:	2000003c 	.word	0x2000003c

08012638 <_kill_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4d07      	ldr	r5, [pc, #28]	@ (8012658 <_kill_r+0x20>)
 801263c:	2300      	movs	r3, #0
 801263e:	4604      	mov	r4, r0
 8012640:	4608      	mov	r0, r1
 8012642:	4611      	mov	r1, r2
 8012644:	602b      	str	r3, [r5, #0]
 8012646:	f7ee f9db 	bl	8000a00 <_kill>
 801264a:	1c43      	adds	r3, r0, #1
 801264c:	d102      	bne.n	8012654 <_kill_r+0x1c>
 801264e:	682b      	ldr	r3, [r5, #0]
 8012650:	b103      	cbz	r3, 8012654 <_kill_r+0x1c>
 8012652:	6023      	str	r3, [r4, #0]
 8012654:	bd38      	pop	{r3, r4, r5, pc}
 8012656:	bf00      	nop
 8012658:	20008324 	.word	0x20008324

0801265c <_getpid_r>:
 801265c:	f7ee b9c8 	b.w	80009f0 <_getpid>

08012660 <_init>:
 8012660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012662:	bf00      	nop
 8012664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012666:	bc08      	pop	{r3}
 8012668:	469e      	mov	lr, r3
 801266a:	4770      	bx	lr

0801266c <_fini>:
 801266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801266e:	bf00      	nop
 8012670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012672:	bc08      	pop	{r3}
 8012674:	469e      	mov	lr, r3
 8012676:	4770      	bx	lr
